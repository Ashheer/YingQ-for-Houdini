// http://www.cr31.co.uk/stagecast/wang/blob.html
int gridX = 20;
int gridZ = 20;

int eastnum = (@ptnum % gridX == gridX-1) ? -1 : @ptnum+1;
int westnum = (@ptnum % gridX == 0) ? -1 : @ptnum-1;
int northnum =  (@ptnum < gridX) ? -1 : @ptnum-gridX;
int southnum = (@ptnum > (gridX*gridZ) - gridX-1) ? -1 : @ptnum+gridX;
int northeastnum = (((@ptnum + 1)-gridX) <= 0 || @ptnum % gridX == gridX-1) ? -1 : ((@ptnum + 1)-gridX);
int northwestnum = (((@ptnum - 1)-gridX) <= 0 || @ptnum % gridX == 0) ? -1 : ((@ptnum - 1)-gridX);
int southeastnum = (@ptnum > (gridX*gridZ) - gridX-1 || @ptnum % gridX == gridX-1) ? -1 : ((@ptnum + 1)+gridX);
int southwestnum = (@ptnum > (gridX*gridZ) - gridX-1 || @ptnum % gridX == 0) ? -1 : ((@ptnum - 1)+gridX);

// Get axis aligned neighbor values
int east = (eastnum == -1) ? 0 : 1-int(rint(point(0,'Cd',eastnum)));
int west = (westnum == -1) ? 0 : 1-int(rint(point(0,'Cd',westnum)));
int south = (southnum == -1) ? 0 : 1-int(rint(point(0,'Cd',southnum)));
int north = (northnum == -1) ? 0 : 1-int(rint(point(0,'Cd',northnum)));

// Get diagonal neighbors
int north_east = (northeastnum == -1) ? 0 : 1-int(rint(point(0,'Cd',northeastnum)));
int north_west = (northwestnum == -1) ? 0 : 1-int(rint(point(0,'Cd',northwestnum)));
int south_east = (southeastnum == -1) ? 0 : 1-int(rint(point(0,'Cd',southeastnum)));
int south_west = (southwestnum == -1) ? 0 : 1-int(rint(point(0,'Cd',southwestnum)));

// Flood fill diagonal neighbors if direct neighbors are not 1
if (north == 0) {
    north_east = 0;
    north_west = 0;    
}

if (east == 0) {
    north_east = 0;
    south_east = 0;    
}

if (west == 0)
{
    north_west = 0;
    south_west = 0;    
}
if (south == 0)
{
    south_east = 0;
    south_west = 0;    
}

// Get index
int index = (north) * 1 + (north_east) * 2 + (east) * 4 + (south_east) * 8 + (south) * 16 + (south_west) * 32 + (west) * 64 + (north_west) * 128; 

if (rint(v@Cd.x) == 1)
    index =0;

// Convert to name attribute for copytopoints sop
s@name = itoa(index);
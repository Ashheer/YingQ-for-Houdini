vector smoothfilter ( int input; int pts [ ]; float dist [ ]; string attrib )
{
    float sum = 0, w, d;
    vector value, result = 0;
    float maxd = dist [ -1 ];
    int count = len ( pts );
    for ( int i = 0; i < count; ++i )
    {
        value = point ( input, attrib, pts [ i ] );
        w = 1 - smooth ( 0, 1.1 * maxd, dist [ i ] );
        sum += w;
        result += w * value;
    }
    result /= sum;
    return result;
}

int input = chi("ninput");
int maxpts = chi("../maxpts");

int @nearpt = -1;
float @neardist = -1;

if ( input == 0 && chi("../self") == 0 )
    ++maxpts;
    
float dists [ ] = { };
int pts [ ] = pcfind_radius ( input, "P", chs("radius"), ch("../rscale"), @P, ch("../r"), maxpts, dists );
if ( input == 0 && chi("../self") == 0 )
    removevalue ( pts, @ptnum );

int count = len ( pts );
if ( chi("../nearpt") && count != 0 )
    i@nearpt = pts [ 0 ];
    
if ( chi("../farpt") && count != 0 )
    i@farpt = pts [ -1 ];
    
if ( chi("../nearpts") )
    i[]@nearpts = pts;
    
if ( chi("../nearptcount") )
    i@nearptcount = count;

if ( chi("../creategroup") )
{
    if ( input == 0 )
        foreach ( int pt; pts )
            setpointgroup ( geoself ( ), chs("../name"), pt, 1 );
    else if ( count > 0 )
        setpointgroup ( geoself ( ), chs("../name"), @ptnum, 1 );
}

float density = ( float ) len ( pts ) / chi("../maxpts");
if ( chi("../density") )
    @density = density;

if ( chi("../neardist") && count != 0 )
{
    vector p = point ( input, "P", pts [ 0 ] );
    @neardist = distance ( @P, p );
}

if ( chi("../fardist") && count != 0 )
{
    vector p = point ( input, "P", pts [ -1 ] );
    @fardist = distance ( @P, p );
}

if ( chi("../neardists") )
{
    f[]@neardists = dists;
}

if ( chi("../computeweights") )
{
    float weights [ ] = { };
    
    float sumweight = 0;
    float maxdist = dists [ -1 ];
    
    int count = len ( pts );
    for ( int i = 0; i < count; ++i )
    {
        float w = 1 - smooth ( 0, 1.1 * maxdist, dists [ i ] );
        append ( weights, w );
        sumweight += w;
    }
    
    float s = 1.0 / sumweight;
    for ( int i = 0; i < count; ++i )
        weights [ i ] *= s;
    
    f[]@weights = weights;
}

int vistype = chi("../vistype");
if ( vistype != 4 )
{
    vector colors [ ];
    if ( vistype == 0 )
        colors = { { 0, 0, 1 }, { 0, 1, 1 }, { 0, 1, 0 }, { 1, 1, 0 }, { 1, 0, 0 } };
    else if ( vistype == 1 )
        colors = { { 0, 0, 0 }, { 1, 0, 0 }, { 1, 1, 0 }, { 1, 1, 1 } };
    else if ( vistype == 2 )
        colors = { { 0, 0, 0 }, { 0, 0, 1 }, { 0, 0.5, 1 }, { 1, 1, 1 } };
    else
        colors = { { 0, 0, 0 }, { 1, 1, 1 } };
    
    @Cd = spline ( "linear", density, colors );
}
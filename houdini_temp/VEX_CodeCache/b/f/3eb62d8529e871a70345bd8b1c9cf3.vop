;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [16 x i8] c"movement_factor\00"
@1 = private constant [14 x i8] c"removing_rate\00"
@2 = private constant [17 x i8] c"avoid_new_points\00"
@3 = private constant [12 x i8] c"global_seed\00"
@4 = private constant [10 x i8] c"iteration\00"
@5 = private constant [20 x i8] c"quantization_amount\00"
@6 = private constant [2 x i8] c"*\00"
@7 = private constant [11 x i8] c"@rmflag==0\00"
@8 = private constant [2 x i8] c"P\00"
@9 = private constant [14 x i8] c"_outer_radius\00"
@footprint = external global double
@P = external global <3 x double>
@ptnum = external global i64
@10 = private constant [10 x i8] c"footprint\00"
@11 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FVI"(double* %_bound_footprint, <3 x double>* %_bound_P, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %c_pos = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca double
  %10 = alloca double
  %11 = alloca double
  %12 = alloca double
  %13 = alloca i64
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i64 0, i64 0))
  %return1 = call double @"ch@FS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @2, i64 0, i64 0))
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i64 0, i64 0))
  %return4 = call i64 @"neg@II"(i64 1)
  %return5 = call i64 @"detail@IISI"(i64 %return4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @4, i64 0, i64 0), i64 0)
  %return6 = call double @"ch@FS"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @5, i64 0, i64 0))
  %_bound_footprint7 = load double, double* %_bound_footprint
  %_bound_P8 = load <3 x double>, <3 x double>* %_bound_P
  store <3 x double> %_bound_P8, <3 x double>* %c_pos
  %14 = icmp ne i64 %return2, 0
  br i1 %14, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store i64 0, i64* %0
  %_bound_ptnum10 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum10, i64* %1
  store double %_bound_footprint7, double* %2
  store double %return, double* %3
  store double %return1, double* %4
  store double %return6, double* %5
  %output = add i64 %return3, %return5
  store i64 %output, i64* %6
  %relax_point = call <3 x double> @"relax_point@VVIIFFFFI"(<3 x double>* %c_pos, i64* %0, i64* %1, double* %2, double* %3, double* %4, double* %5, i64* %6)
  store <3 x double> %relax_point, <3 x double>* %c_pos
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %return17 = call i64 @"npoints@II"(i64 1)
  %return18 = call i64 @"gt@III"(i64 %return17, i64 0)
  %15 = icmp ne i64 %return18, 0
  br i1 %15, label %true19, label %end20

true19:                                           ; preds = %end
  store i64 1, i64* %7
  %_bound_ptnum21 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum21, i64* %8
  store double %_bound_footprint7, double* %9
  store double %return, double* %10
  store double %return1, double* %11
  store double %return6, double* %12
  %output28 = add i64 %return3, %return5
  store i64 %output28, i64* %13
  %relax_point29 = call <3 x double> @"relax_point@VVIIFFFFI"(<3 x double>* %c_pos, i64* %7, i64* %8, double* %9, double* %10, double* %11, double* %12, i64* %13)
  store <3 x double> %relax_point29, <3 x double>* %c_pos
  br label %end20

end20:                                            ; preds = %true19, %end
  %c_pos30 = load <3 x double>, <3 x double>* %c_pos
  store <3 x double> %c_pos30, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind
declare i64 @"detail@IISI"(i64, i8*, i64) #2

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"quantize_pos@VVF"(<3 x double>* %pos, double* %quantization_amount) #0 {
__llvm_entry:
  %quantization_amount1 = load double, double* %quantization_amount
  %return = fcmp one double %quantization_amount1, 0.000000e+00
  %pos3 = load <3 x double>, <3 x double>* %pos
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %cast = call <3 x double> @"set@VF"(double %quantization_amount1)
  %output = call <3 x double> @"div@VV"(<3 x double> %pos3, <3 x double> %cast)
  %return5 = call <3 x double> @"floor@VV"(<3 x double> %output)
  %output8 = call <3 x double> @"mul@VV"(<3 x double> %return5, <3 x double> %cast)
  br label %UnifiedReturnBlock

false:                                            ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %false, %true
  %UnifiedRetVal = phi <3 x double> [ %output8, %true ], [ %pos3, %false ]
  ret <3 x double> %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"floor@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"relax_point@VVIIFFFFI"(<3 x double>* %c_pos, i64* %geometry, i64* %c_ptnum, double* %c_scaled_outerradius, double* %movement_factor, double* %removing_rate, double* %quantization_amount, i64* %seed) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca double
  %geometry1 = load i64, i64* %geometry
  %2 = icmp ne i64 %geometry1, 0
  %. = select i1 %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @7, i64 0, i64 0)
  %c_pos4 = load <3 x double>, <3 x double>* %c_pos
  %c_scaled_outerradius5 = load double, double* %c_scaled_outerradius
  %return = call i64* @"pcfind_radius@[IISSSFVFI"(i64 %geometry1, i8* %., i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @9, i64 0, i64 0), double 1.000000e+00, <3 x double> %c_pos4, double %c_scaled_outerradius5, i64 1000)
  %return7 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %__impl_foreach_index_f3.0 = phi i64 [ 0, %__llvm_entry ], [ %output78, %iter ]
  %return10 = call i64 @"lt@III"(i64 %__impl_foreach_index_f3.0, i64 %return7)
  %3 = icmp ne i64 %return10, 0
  br i1 %3, label %body, label %end11

body:                                             ; preds = %cond
  %return14 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_f3.0)
  %geometry15 = load i64, i64* %geometry
  %return16 = call i64 @"not@II"(i64 %geometry15)
  %c_ptnum18 = load i64, i64* %c_ptnum
  %return19 = call i64 @"eq@III"(i64 %return14, i64 %c_ptnum18)
  %return20 = call i64 @"and@III"(i64 %return16, i64 %return19)
  %4 = icmp ne i64 %return20, 0
  br i1 %4, label %iter, label %end22

end11:                                            ; preds = %false53, %end22, %cond
  %c_pos79 = load <3 x double>, <3 x double>* %c_pos
  ret <3 x double> %c_pos79

iter:                                             ; preds = %end36, %body, %end63
  %output78 = add i64 %__impl_foreach_index_f3.0, 1
  br label %cond

end22:                                            ; preds = %body
  %return25 = call { <3 x double>, i64 } @"pointattrib@VISII"(i64 %geometry15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i64 %return14)
  %return26 = extractvalue { <3 x double>, i64 } %return25, 0
  %c_pos27 = load <3 x double>, <3 x double>* %c_pos
  %output29 = call <3 x double> @"sub@VV"(<3 x double> %c_pos27, <3 x double> %return26)
  %return31 = call double @"length@FV"(<3 x double> %output29)
  %return33 = fcmp olt double %return31, 1.000000e-03
  br i1 %return33, label %end11, label %end36

end36:                                            ; preds = %end22
  %c_scaled_outerradius37 = load double, double* %c_scaled_outerradius
  %geometry38 = load i64, i64* %geometry
  %return40 = call { double, i64 } @"pointattrib@FISII"(i64 %geometry38, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @9, i64 0, i64 0), i64 %return14)
  %return41 = extractvalue { double, i64 } %return40, 0
  %output43 = fadd double %c_scaled_outerradius37, %return41
  %c_pos44 = load <3 x double>, <3 x double>* %c_pos
  %output46 = call <3 x double> @"add@VV"(<3 x double> %c_pos44, <3 x double> %return26)
  store <3 x double> %output46, <3 x double>* %0
  %quantization_amount47 = load double, double* %quantization_amount
  store double %quantization_amount47, double* %1
  %quantize_pos = call <3 x double> @"quantize_pos@VVF"(<3 x double>* %0, double* %1)
  %return50 = fcmp oge double %return31, %output43
  br i1 %return50, label %iter, label %false53

false53:                                          ; preds = %end36
  %seed56 = load i64, i64* %seed
  %cast = call <3 x double> @"set@VI"(i64 %seed56)
  %output57 = call <3 x double> @"add@VV"(<3 x double> %quantize_pos, <3 x double> %cast)
  %return58 = call double @"rand@FV"(<3 x double> %output57)
  %removing_rate59 = load double, double* %removing_rate
  %return60 = fcmp olt double %return58, %removing_rate59
  br i1 %return60, label %end11, label %end63

end63:                                            ; preds = %false53
  %c_pos64 = load <3 x double>, <3 x double>* %c_pos
  %movement_factor65 = load double, double* %movement_factor
  %output68 = fsub double %output43, %return31
  %output69 = fmul double %movement_factor65, %output68
  %cast72 = call <3 x double> @"set@VF"(double %return31)
  %output73 = call <3 x double> @"div@VV"(<3 x double> %output29, <3 x double> %cast72)
  %cast74 = call <3 x double> @"set@VF"(double %output69)
  %output75 = call <3 x double> @"mul@VV"(<3 x double> %cast74, <3 x double> %output73)
  %output76 = call <3 x double> @"add@VV"(<3 x double> %c_pos64, <3 x double> %output75)
  store <3 x double> %output76, <3 x double>* %c_pos
  br label %iter
}

; Function Attrs: nounwind
declare i64* @"pcfind_radius@[IISSSFVFI"(i64, i8*, i8*, i8*, double, <3 x double>, double, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind
declare { <3 x double>, i64 } @"pointattrib@VISII"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind
declare { double, i64 } @"pointattrib@FISII"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind
declare double @"rand@FV"(<3 x double>) #2

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %footprint, <3 x double> %P, i64 %ptnum) #2 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca double
  %1 = alloca i64
  store <3 x double> %P, <3 x double>* %"<P>"
  store double %footprint, double* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@FVI"(double* %0, <3 x double>* %"<P>", i64* %1)
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @10, i64 0, i64 0), double %footprint) #3
  %evalue3 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), <3 x double> %evalue3) #3
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @11, i64 0, i64 0), i64 %ptnum) #3
  store double %gvalue, double* @footprint
  store <3 x double> %gvalue4, <3 x double>* @P
  store i64 %gvalue6, i64* @ptnum
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, <3 x double> zeroinitializer, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

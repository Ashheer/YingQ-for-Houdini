;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [0 x i64] zeroinitializer
@2 = private constant [0 x double] zeroinitializer
@nebs = external global i64*
@ptnum = external global i64
@dist = external global double*
@P = external global <3 x double>
@nearptidx = external global i64
@edgelength = external global double
@diff = external global double
@3 = private constant [5 x i8] c"nebs\00"
@4 = private constant [6 x i8] c"ptnum\00"
@5 = private constant [5 x i8] c"dist\00"
@6 = private constant [10 x i8] c"nearptidx\00"
@7 = private constant [11 x i8] c"edgelength\00"
@8 = private constant [5 x i8] c"diff\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[II[FVIFF"(i64** %_bound_nebs, i64* %_bound_ptnum, double** %_bound_dist, <3 x double>* %_bound_P, i64* %_bound_nearptidx, double* %_bound_edgelength, double* %_bound_diff) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64* @"neighbours@[III"(i64 0, i64 %_bound_ptnum1)
  store i64* %return, i64** %_bound_nebs
  %return3 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %__impl_foreach_index_a.0 = phi i64 [ 0, %__llvm_entry ], [ %output16, %body ]
  %return6 = call i64 @"lt@III"(i64 %__impl_foreach_index_a.0, i64 %return3)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %_bound_nebs7 = load i64*, i64** %_bound_nebs
  %return9 = call i64 @"getcomp@I[II"(i64* %_bound_nebs7, i64 %__impl_foreach_index_a.0)
  %_bound_dist10 = load double*, double** %_bound_dist
  %_bound_P11 = load <3 x double>, <3 x double>* %_bound_P
  %return13 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return9)
  %return14 = call double @"distance@FVV"(<3 x double> %_bound_P11, <3 x double> %return13)
  %output = call double* @"push@[FF"(double* %_bound_dist10, double %return14)
  store double* %output, double** %_bound_dist
  %output16 = add i64 %__impl_foreach_index_a.0, 1
  br label %cond

end:                                              ; preds = %cond
  %_bound_dist17 = load double*, double** %_bound_dist
  %return18 = call i64* @"argsort@[I[F"(double* %_bound_dist17)
  %_bound_nebs19 = load i64*, i64** %_bound_nebs
  %return21 = call i64* @"reorder@[I[I[I"(i64* %_bound_nebs19, i64* %return18)
  store i64* %return21, i64** %_bound_nebs
  %_bound_dist22 = load double*, double** %_bound_dist
  %return24 = call double* @"reorder@[F[F[I"(double* %_bound_dist22, i64* %return18)
  store double* %return24, double** %_bound_dist
  store i64 0, i64* %_bound_nearptidx
  %_bound_dist25 = load double*, double** %_bound_dist
  %return26 = call double @"getcomp@F[FI"(double* %_bound_dist25, i64 0)
  %output27 = call double @"div@FF"(double %return26, double 2.000000e+00)
  store double %output27, double* %_bound_edgelength
  store double 0x47EFFFFFEFFFFFFF, double* %_bound_diff
  ret void
}

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double* @"push@[FF"(double*, double) #2

; Function Attrs: nounwind readnone
declare i64* @"argsort@[I[F"(double*) #2

; Function Attrs: nounwind
declare i64* @"reorder@[I[I[I"(i64*, i64*) #1

; Function Attrs: nounwind
declare double* @"reorder@[F[F[I"(double*, i64*) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64* %nebs, i64 %ptnum, double* %dist, <3 x double> %P, i64 %nearptidx, double %edgelength, double %diff) #1 {
__llvm_entry:
  %"<dist>" = alloca double*
  %"<nearptidx>" = alloca i64
  %"<edgelength>" = alloca double
  %"<diff>" = alloca double
  %0 = alloca i64
  %1 = alloca <3 x double>
  %"<nebs>" = alloca i64*
  store i64* %nebs, i64** %"<nebs>"
  store double* %dist, double** %"<dist>"
  store i64 %nearptidx, i64* %"<nearptidx>"
  store double %edgelength, double* %"<edgelength>"
  store double %diff, double* %"<diff>"
  store i64 %ptnum, i64* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@[II[FVIFF"(i64** %"<nebs>", i64* %0, double** %"<dist>", <3 x double>* %1, i64* %"<nearptidx>", double* %"<edgelength>", double* %"<diff>")
  %evalue = load i64*, i64** %"<nebs>"
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), i64* %evalue) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #3
  %evalue5 = load double*, double** %"<dist>"
  %gvalue6 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i64 0, i64 0), double* %evalue5) #3
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %P) #3
  %evalue9 = load i64, i64* %"<nearptidx>"
  %gvalue10 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @6, i64 0, i64 0), i64 %evalue9) #3
  %evalue11 = load double, double* %"<edgelength>"
  %gvalue12 = call double @"_export@FSF"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @7, i64 0, i64 0), double %evalue11) #3
  %evalue13 = load double, double* %"<diff>"
  %gvalue14 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0), double %evalue13) #3
  store i64* %gvalue, i64** @nebs
  store i64 %gvalue4, i64* @ptnum
  store double* %gvalue6, double** @dist
  store <3 x double> %gvalue8, <3 x double>* @P
  store i64 %gvalue10, i64* @nearptidx
  store double %gvalue12, double* @edgelength
  store double %gvalue14, double* @diff
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

declare i64 @"_export@ISI"(i8*, i64)

declare double* @"_export@[FS[F"(i8*, double*)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), i64 0, double* getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0), <3 x double> zeroinitializer, i64 0, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@dir = external global <3 x double>
@ext3dx = external global double
@ext3dy = external global double
@ext3dz = external global double
@dir2 = external global <3 x double>
@ext3dx2 = external global double
@ext3dy2 = external global double
@ext3dz2 = external global double
@0 = private constant [4 x i8] c"dir\00"
@1 = private constant [7 x i8] c"ext3dx\00"
@2 = private constant [7 x i8] c"ext3dy\00"
@3 = private constant [7 x i8] c"ext3dz\00"
@4 = private constant [5 x i8] c"dir2\00"
@5 = private constant [8 x i8] c"ext3dx2\00"
@6 = private constant [8 x i8] c"ext3dy2\00"
@7 = private constant [8 x i8] c"ext3dz2\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VFFFVFFF"(<3 x double>* %_bound_dir, double* %_bound_ext3dx, double* %_bound_ext3dy, double* %_bound_ext3dz, <3 x double>* %_bound_dir2, double* %_bound_ext3dx2, double* %_bound_ext3dy2, double* %_bound_ext3dz2) #0 {
__llvm_entry:
  %_bound_ext3dx1 = load double, double* %_bound_ext3dx
  %_bound_ext3dy3 = load double, double* %_bound_ext3dy
  %_bound_ext3dz4 = load double, double* %_bound_ext3dz
  %return = call <3 x double> @"set@VFFF"(double %_bound_ext3dx1, double %_bound_ext3dy3, double %_bound_ext3dz4)
  store <3 x double> %return, <3 x double>* %_bound_dir
  %_bound_ext3dx25 = load double, double* %_bound_ext3dx2
  %_bound_ext3dy26 = load double, double* %_bound_ext3dy2
  %_bound_ext3dz27 = load double, double* %_bound_ext3dz2
  %return8 = call <3 x double> @"set@VFFF"(double %_bound_ext3dx25, double %_bound_ext3dy26, double %_bound_ext3dz27)
  store <3 x double> %return8, <3 x double>* %_bound_dir2
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %dir, double %ext3dx, double %ext3dy, double %ext3dz, <3 x double> %dir2, double %ext3dx2, double %ext3dy2, double %ext3dz2) #2 {
__llvm_entry:
  %"<dir2>" = alloca <3 x double>
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  %"<dir>" = alloca <3 x double>
  store <3 x double> %dir, <3 x double>* %"<dir>"
  store <3 x double> %dir2, <3 x double>* %"<dir2>"
  store double %ext3dx, double* %0
  store double %ext3dy, double* %1
  store double %ext3dz, double* %2
  store double %ext3dx2, double* %3
  store double %ext3dy2, double* %4
  store double %ext3dz2, double* %5
  call void @"__vex_snippet_snippet@VFFFVFFF"(<3 x double>* %"<dir>", double* %0, double* %1, double* %2, <3 x double>* %"<dir2>", double* %3, double* %4, double* %5)
  %evalue = load <3 x double>, <3 x double>* %"<dir>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue9 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), double %ext3dx) #3
  %gvalue11 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), double %ext3dy) #3
  %gvalue13 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), double %ext3dz) #3
  %evalue14 = load <3 x double>, <3 x double>* %"<dir2>"
  %gvalue15 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0), <3 x double> %evalue14) #3
  %gvalue17 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @5, i64 0, i64 0), double %ext3dx2) #3
  %gvalue19 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @6, i64 0, i64 0), double %ext3dy2) #3
  %gvalue21 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @7, i64 0, i64 0), double %ext3dz2) #3
  store <3 x double> %gvalue, <3 x double>* @dir
  store double %gvalue9, double* @ext3dx
  store double %gvalue11, double* @ext3dy
  store double %gvalue13, double* @ext3dz
  store <3 x double> %gvalue15, <3 x double>* @dir2
  store double %gvalue17, double* @ext3dx2
  store double %gvalue19, double* @ext3dy2
  store double %gvalue21, double* @ext3dz2
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, <3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [12 x i8] c"../caltangt\00"
@2 = private constant [10 x i8] c"tangtname\00"
@3 = private constant [15 x i8] c"../tangentname\00"
@4 = private constant [12 x i8] c"../startpts\00"
@5 = private constant [14 x i8] c"../pointgroup\00"
@6 = private constant [2 x i8] c"P\00"
@7 = private constant [12 x i8] c"../distance\00"
@8 = private constant [9 x i8] c"enumname\00"
@9 = private constant [19 x i8] c"vex_selectiongroup\00"
@10 = private constant [10 x i8] c"../endpts\00"
@11 = private constant [0 x i64] zeroinitializer
@primnum = external global i64
@prim_hasAddPts = external global i64*
@12 = private constant [8 x i8] c"primnum\00"
@13 = private constant [15 x i8] c"prim_hasAddPts\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I[I"(i64* %_bound_primnum, i64** %_bound_prim_hasAddPts) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i64 0, i64 0))
  %return1 = call i8* @"chs@SS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0))
  %return2 = call i8* @"chs@SS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @3, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  %return3 = select i1 %0, i8* %return1, i8* %return2
  %_bound_primnum4 = load i64, i64* %_bound_primnum
  %return5 = call i64 @"primvertexcount@III"(i64 0, i64 %_bound_primnum4)
  %return6 = call i64* @"array@[I:II"(i64 0, i64 0)
  store i64* %return6, i64** %_bound_prim_hasAddPts
  %_bound_primnum7 = load i64, i64* %_bound_primnum
  %return8 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum7, i64 0)
  %return9 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i64 0, i64 0))
  %return10 = call i8* @"chs@SS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @5, i64 0, i64 0))
  %return11 = call i64 @"eq@ISS"(i8* %return10, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0))
  %return14 = call i64 @"inpointgroup@IISI"(i64 0, i8* %return10, i64 %return8)
  %return15 = call i64 @"or@III"(i64 %return11, i64 %return14)
  %return16 = call i64 @"and@III"(i64 %return9, i64 %return15)
  %1 = icmp ne i64 %return16, 0
  br i1 %1, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return19 = call <3 x double> @"point@VISI"(i64 0, i8* %return3, i64 %return8)
  %return21 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i64 0, i64 0), i64 %return8)
  %return24 = call double @"chf@FS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i64 0, i64 0))
  %cast = call <3 x double> @"set@VF"(double %return24)
  %output = call <3 x double> @"mul@VV"(<3 x double> %return19, <3 x double> %cast)
  %output25 = call <3 x double> @"sub@VV"(<3 x double> %return21, <3 x double> %output)
  %return26 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %output25)
  %return27 = call i8* @"chs@SS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @8, i64 0, i64 0))
  %return30 = call i64 @"setpointattrib@IISII"(i64 0, i8* %return27, i64 %return26, i64 %return8)
  %_bound_primnum31 = load i64, i64* %_bound_primnum
  %return33 = call i64 @"addvertex@IIII"(i64 0, i64 %_bound_primnum31, i64 %return26)
  %tmp = load i64*, i64** %_bound_prim_hasAddPts
  %return34 = call { i64, i64* } @"setcomp@I[III"(i64* %tmp, i64 1, i64 0)
  %output36 = extractvalue { i64, i64* } %return34, 1
  store i64* %output36, i64** %_bound_prim_hasAddPts
  br label %end

false:                                            ; preds = %__llvm_entry
  %return37 = call i64 @"addpoint@III"(i64 0, i64 0)
  %return38 = call i8* @"chs@SS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @9, i64 0, i64 0))
  %return40 = call i64 @"setpointgroup@IISII"(i64 0, i8* %return38, i64 %return37, i64 1)
  br label %end

end:                                              ; preds = %false, %true
  %_bound_primnum41 = load i64, i64* %_bound_primnum
  %output43 = sub i64 %return5, 1
  %return44 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum41, i64 %output43)
  %return45 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @10, i64 0, i64 0))
  %return50 = call i64 @"inpointgroup@IISI"(i64 0, i8* %return10, i64 %return44)
  %return51 = call i64 @"or@III"(i64 %return11, i64 %return50)
  %return52 = call i64 @"and@III"(i64 %return45, i64 %return51)
  %2 = icmp ne i64 %return52, 0
  br i1 %2, label %true53, label %false54

true53:                                           ; preds = %end
  %return58 = call <3 x double> @"point@VISI"(i64 0, i8* %return3, i64 %return44)
  %return60 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i64 0, i64 0), i64 %return44)
  %return63 = call double @"chf@FS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i64 0, i64 0))
  %cast64 = call <3 x double> @"set@VF"(double %return63)
  %output65 = call <3 x double> @"mul@VV"(<3 x double> %return58, <3 x double> %cast64)
  %output66 = call <3 x double> @"add@VV"(<3 x double> %return60, <3 x double> %output65)
  %return67 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %output66)
  %return68 = call i8* @"chs@SS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @8, i64 0, i64 0))
  %return71 = call i64 @"setpointattrib@IISII"(i64 0, i8* %return68, i64 %return67, i64 %return44)
  %_bound_primnum72 = load i64, i64* %_bound_primnum
  %return74 = call i64 @"addvertex@IIII"(i64 0, i64 %_bound_primnum72, i64 %return67)
  %tmp75 = load i64*, i64** %_bound_prim_hasAddPts
  %return76 = call { i64, i64* } @"setcomp@I[III"(i64* %tmp75, i64 1, i64 1)
  %output78 = extractvalue { i64, i64* } %return76, 1
  store i64* %output78, i64** %_bound_prim_hasAddPts
  br label %end55

false54:                                          ; preds = %end
  %return79 = call i64 @"addpoint@III"(i64 0, i64 0)
  %return80 = call i8* @"chs@SS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @9, i64 0, i64 0))
  %return82 = call i64 @"setpointgroup@IISII"(i64 0, i8* %return80, i64 %return79, i64 1)
  br label %end55

end55:                                            ; preds = %false54, %true53
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"primvertexcount@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64* @"array@[I:II"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"primpoint@IIII"(i64, i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i64 @"inpointgroup@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISII"(i64, i8*, i64, i64) #2

; Function Attrs: nounwind
declare i64 @"addvertex@IIII"(i64, i64, i64) #2

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"addpoint@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"setpointgroup@IISII"(i64, i8*, i64, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, i64* %prim_hasAddPts) #2 {
__llvm_entry:
  %"<prim_hasAddPts>" = alloca i64*
  %0 = alloca i64
  store i64* %prim_hasAddPts, i64** %"<prim_hasAddPts>"
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@I[I"(i64* %0, i64** %"<prim_hasAddPts>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @12, i64 0, i64 0), i64 %primnum) #3
  %evalue2 = load i64*, i64** %"<prim_hasAddPts>"
  %gvalue3 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @13, i64 0, i64 0), i64* %evalue2) #3
  store i64 %gvalue, i64* @primnum
  store i64* %gvalue3, i64** @prim_hasAddPts
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @11, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

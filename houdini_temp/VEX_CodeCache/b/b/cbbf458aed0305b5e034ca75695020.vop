;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [5 x i8] c"text\00"
@2 = private constant [3 x i8] c"('\00"
@3 = private constant [3 x i8] c"')\00"
@4 = private constant [5 x i8] c"', '\00"
@5 = private constant [0 x i8*] zeroinitializer
@texts = external global i8**
@text = external global i8*
@6 = private constant [6 x i8] c"texts\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[SS"(i8*** %_bound_texts, i8** %_bound_text) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0))
  %return1 = call i8* @"lstrip@SSS"(i8* %return, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0))
  %return3 = call i8* @"rstrip@SSS"(i8* %return1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0))
  %return7 = call i8** @"re_split@[SSSI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0), i8* %return3, i64 0)
  store i8** %return7, i8*** %_bound_texts
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"lstrip@SSS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"rstrip@SSS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i8** @"split@[SSS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i8** @"re_split@[SSSI"(i8*, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8** %texts, i8* %text) #2 {
__llvm_entry:
  %0 = alloca i8*
  %"<texts>" = alloca i8**
  store i8** %texts, i8*** %"<texts>"
  store i8* %text, i8** %0
  call void @"__vex_snippet_snippet@[SS"(i8*** %"<texts>", i8** %0)
  %evalue = load i8**, i8*** %"<texts>"
  %gvalue = call i8** @"_export@[SS[S"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i64 0, i64 0), i8** %evalue) #3
  %gvalue3 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* %text) #3
  store i8** %gvalue, i8*** @texts
  store i8* %gvalue3, i8** @text
  ret void
}

declare i8** @"_export@[SS[S"(i8*, i8**)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @5, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

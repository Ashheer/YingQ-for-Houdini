;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [5 x i8] c"name\00"
@2 = private constant [6 x i8] c"piece\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound_ptnum, i64* %_bound_primnum) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i8* @"point@SISI"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %_bound_ptnum1)
  %return2 = call i64 @"hasprimattrib@IIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0))
  %return4 = call i64 @"eq@ISS"(i8* %return, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0))
  %return5 = call i64 @"and@III"(i64 %return2, i64 %return4)
  %0 = icmp ne i64 %return5, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_primnum6 = load i64, i64* %_bound_primnum
  %return7 = call i8* @"prim@SISI"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %_bound_primnum6)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %name.0 = phi i8* [ %return7, %true ], [ %return, %__llvm_entry ]
  %return9 = call i64 @"eq@ISS"(i8* %name.0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0))
  %1 = icmp ne i64 %return9, 0
  br i1 %1, label %true10, label %end11

true10:                                           ; preds = %end
  %_bound_ptnum12 = load i64, i64* %_bound_ptnum
  %return13 = call i8* @"itoa@SI"(i64 %_bound_ptnum12)
  %output = call i8* @"add@SS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i8* %return13)
  br label %end11

end11:                                            ; preds = %true10, %end
  %name.1 = phi i8* [ %output, %true10 ], [ %name.0, %end ]
  %return14 = call i64 @"hasprimattrib@IIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0))
  %return15 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0))
  %return16 = call i64 @"not@II"(i64 %return15)
  %return17 = call i64 @"or@III"(i64 %return14, i64 %return16)
  %2 = icmp ne i64 %return17, 0
  br i1 %2, label %true18, label %false

true18:                                           ; preds = %end11
  %_bound_primnum20 = load i64, i64* %_bound_primnum
  %return22 = call i64 @"setprimattrib@IISIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %_bound_primnum20, i8* %name.1)
  br label %end19

false:                                            ; preds = %end11
  %_bound_ptnum23 = load i64, i64* %_bound_ptnum
  %return25 = call i64 @"setpointattrib@IISIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %_bound_ptnum23, i8* %name.1)
  br label %end19

end19:                                            ; preds = %false, %true18
  ret void
}

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"hasprimattrib@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind
declare i8* @"prim@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #2

; Function Attrs: nounwind readnone
declare i8* @"add@SS"(i8*, i8*) #2

; Function Attrs: nounwind
declare i64 @"haspointattrib@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"setprimattrib@IISIS"(i64, i8*, i64, i8*) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIS"(i64, i8*, i64, i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64 %primnum) #1 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  store i64 %ptnum, i64* %0
  store i64 %primnum, i64* %1
  call void @"__vex_snippet_snippet@II"(i64* %0, i64* %1)
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

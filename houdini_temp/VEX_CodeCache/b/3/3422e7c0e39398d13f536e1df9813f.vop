;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"max_width\00"
@1 = private constant [6 x i8] c"numpt\00"
@2 = private constant [12 x i8] c"frame_count\00"
@ptnum = external global i64
@uv2 = external global <3 x double>
@3 = private constant [6 x i8] c"ptnum\00"
@4 = private constant [4 x i8] c"uv2\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IV"(i64* %_bound_ptnum, <3 x double>* %_bound_uv2) #0 {
__llvm_entry:
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0))
  %return1 = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0))
  %return2 = call double @"chf@FS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i64 0, i64 0))
  %return5 = call double @"min@FFF"(double %return, double %return1)
  %output = call double @"div@FF"(double %return1, double %return)
  %return8 = call double @"ceil@FF"(double %output)
  %output10 = call double @"div@FF"(double 1.000000e+00, double %return5)
  %output12 = call double @"div@FF"(double 1.000000e+00, double %return8)
  %output14 = call double @"div@FF"(double %output12, double %return2)
  %_bound_ptnum15 = load i64, i64* %_bound_ptnum
  %cast = sitofp i64 %_bound_ptnum15 to double
  %output17 = fadd double 5.000000e-01, %cast
  %output20 = call double @"div@FF"(double %cast, double %return5)
  %return21 = call double @"floor@FF"(double %output20)
  %output23 = fmul double %return21, %return5
  %output24 = fsub double %output17, %output23
  %output26 = fmul double %output24, %output10
  %tmp = load <3 x double>, <3 x double>* %_bound_uv2
  %return27 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output26, i64 0)
  %output29 = extractvalue { double, <3 x double> } %return27, 1
  store <3 x double> %output29, <3 x double>* %_bound_uv2
  %output35 = fmul double %return21, %output14
  %output36 = fsub double 1.000000e+00, %output35
  %output38 = fmul double 5.000000e-01, %output14
  %output39 = fsub double %output36, %output38
  %return41 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output29, double %output39, i64 1)
  %output43 = extractvalue { double, <3 x double> } %return41, 1
  store <3 x double> %output43, <3 x double>* %_bound_uv2
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"min@FFF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"ceil@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %uv2) #3 {
__llvm_entry:
  %"<uv2>" = alloca <3 x double>
  %0 = alloca i64
  store <3 x double> %uv2, <3 x double>* %"<uv2>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@IV"(i64* %0, <3 x double>* %"<uv2>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #4
  %evalue2 = load <3 x double>, <3 x double>* %"<uv2>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0), <3 x double> %evalue2) #4
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue3, <3 x double>* @uv2
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	/obj/geo1/solver1/d/s/check_if_fitter/attribvop1
; ModuleID = 'obj_geo1_solver1_d_s_check_if_fitter_attribvop1'

@0 = private constant [0 x <3 x double>] zeroinitializer
@1 = private constant [0 x double] zeroinitializer
@2 = private constant [0 x <4 x double>] zeroinitializer
@fitness = external global double
@oldfit = external global double
@ctr = external global <3 x double>*
@octr = external global <3 x double>*
@rad = external global double*
@orad = external global double*
@rgba = external global <4 x double>*
@orgba = external global <4 x double>*
@3 = private constant [8 x i8] c"fitness\00"
@4 = private constant [7 x i8] c"oldfit\00"
@5 = private constant [4 x i8] c"ctr\00"
@6 = private constant [5 x i8] c"octr\00"
@7 = private constant [4 x i8] c"rad\00"
@8 = private constant [5 x i8] c"orad\00"
@9 = private constant [5 x i8] c"rgba\00"
@10 = private constant [6 x i8] c"orgba\00"

define private void @"_obj_geo1_solver1_d_s_check_if_fitter_attribvop1_snippet1@FF[V[V[F[F[P[P"(double* %_bound_fitness, double* %_bound_oldfit, <3 x double>** %_bound_ctr, <3 x double>** %_bound_octr, double** %_bound_rad, double** %_bound_orad, <4 x double>** %_bound_rgba, <4 x double>** %_bound_orgba) nounwind alwaysinline {
__llvm_entry:
  %_bound_fitness1 = load double* %_bound_fitness
  %_bound_oldfit2 = load double* %_bound_oldfit
  %return = fcmp olt double %_bound_fitness1, %_bound_oldfit2
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_bound_octr4 = load <3 x double>** %_bound_octr
  store <3 x double>* %_bound_octr4, <3 x double>** %_bound_ctr
  %_bound_orad5 = load double** %_bound_orad
  store double* %_bound_orad5, double** %_bound_rad
  %_bound_orgba6 = load <4 x double>** %_bound_orgba
  store <4 x double>* %_bound_orgba6, <4 x double>** %_bound_rgba
  br label %end

false:                                            ; preds = %__llvm_entry
  store double %_bound_fitness1, double* %_bound_oldfit
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

define void @obj_geo1_solver1_d_s_check_if_fitter_attribvop1(double %fitness, double %oldfit, <3 x double>* %ctr, <3 x double>* %octr, double* %rad, double* %orad, <4 x double>* %rgba, <4 x double>* %orgba) nounwind {
__llvm_entry:
  %"<oldfit>" = alloca double
  %"<ctr>" = alloca <3 x double>*
  %"<rad>" = alloca double*
  %"<rgba>" = alloca <4 x double>*
  %0 = alloca double
  %1 = alloca <3 x double>*
  %2 = alloca double*
  %3 = alloca <4 x double>*
  store double %oldfit, double* %"<oldfit>"
  store <3 x double>* %ctr, <3 x double>** %"<ctr>"
  store double* %rad, double** %"<rad>"
  store <4 x double>* %rgba, <4 x double>** %"<rgba>"
  store double %fitness, double* %0
  store <3 x double>* %octr, <3 x double>** %1
  store double* %orad, double** %2
  store <4 x double>* %orgba, <4 x double>** %3
  call void @"_obj_geo1_solver1_d_s_check_if_fitter_attribvop1_snippet1@FF[V[V[F[F[P[P"(double* %0, double* %"<oldfit>", <3 x double>** %"<ctr>", <3 x double>** %1, double** %"<rad>", double** %2, <4 x double>** %"<rgba>", <4 x double>** %3)
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8]* @3, i64 0, i64 0), double %fitness) nounwind readonly
  %evalue5 = load double* %"<oldfit>"
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8]* @4, i64 0, i64 0), double %evalue5) nounwind readonly
  %evalue7 = load <3 x double>** %"<ctr>"
  %gvalue8 = call <3 x double>* @"_export@[VS[V"(i8* getelementptr inbounds ([4 x i8]* @5, i64 0, i64 0), <3 x double>* %evalue7) nounwind readonly
  %gvalue10 = call <3 x double>* @"_export@[VS[V"(i8* getelementptr inbounds ([5 x i8]* @6, i64 0, i64 0), <3 x double>* %octr) nounwind readonly
  %evalue11 = load double** %"<rad>"
  %gvalue12 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8]* @7, i64 0, i64 0), double* %evalue11) nounwind readonly
  %gvalue14 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([5 x i8]* @8, i64 0, i64 0), double* %orad) nounwind readonly
  %evalue15 = load <4 x double>** %"<rgba>"
  %gvalue16 = call <4 x double>* @"_export@[PS[P"(i8* getelementptr inbounds ([5 x i8]* @9, i64 0, i64 0), <4 x double>* %evalue15) nounwind readonly
  %gvalue18 = call <4 x double>* @"_export@[PS[P"(i8* getelementptr inbounds ([6 x i8]* @10, i64 0, i64 0), <4 x double>* %orgba) nounwind readonly
  store double %gvalue, double* @fitness
  store double %gvalue6, double* @oldfit
  store <3 x double>* %gvalue8, <3 x double>** @ctr
  store <3 x double>* %gvalue10, <3 x double>** @octr
  store double* %gvalue12, double** @rad
  store double* %gvalue14, double** @orad
  store <4 x double>* %gvalue16, <4 x double>** @rgba
  store <4 x double>* %gvalue18, <4 x double>** @orgba
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double>* @"_export@[VS[V"(i8*, <3 x double>*)

declare double* @"_export@[FS[F"(i8*, double*)

declare <4 x double>* @"_export@[PS[P"(i8*, <4 x double>*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_geo1_solver1_d_s_check_if_fitter_attribvop1(double 0.000000e+00, double 0.000000e+00, <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @0, i64 0, i64 0), <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @0, i64 0, i64 0), double* getelementptr inbounds ([0 x double]* @1, i64 0, i64 0), double* getelementptr inbounds ([0 x double]* @1, i64 0, i64 0), <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @2, i64 0, i64 0), <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @2, i64 0, i64 0))
  ret void
}

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"18.5.633"}
!2 = metadata !{metadata !"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [15 x i8] c"profile_height\00"
@scale = external global <3 x double>
@SIDESLOP_WIDTH = external global double
@1 = private constant [6 x i8] c"scale\00"
@2 = private constant [15 x i8] c"SIDESLOP_WIDTH\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VF"(<3 x double>* %_bound_scale, double* %_bound_SIDESLOP_WIDTH) #0 {
__llvm_entry:
  %return = call double @"prim@FISI"(i64 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i64 0, i64 0), i64 0)
  %_bound_SIDESLOP_WIDTH1 = load double, double* %_bound_SIDESLOP_WIDTH
  %return2 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double %return, double %_bound_SIDESLOP_WIDTH1)
  store <3 x double> %return2, <3 x double>* %_bound_scale
  ret void
}

; Function Attrs: nounwind
declare double @"prim@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %scale, double %SIDESLOP_WIDTH) #1 {
__llvm_entry:
  %0 = alloca double
  %"<scale>" = alloca <3 x double>
  store <3 x double> %scale, <3 x double>* %"<scale>"
  store double %SIDESLOP_WIDTH, double* %0
  call void @"__vex_snippet_snippet@VF"(<3 x double>* %"<scale>", double* %0)
  %evalue = load <3 x double>, <3 x double>* %"<scale>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i64 0, i64 0), double %SIDESLOP_WIDTH) #3
  store <3 x double> %gvalue, <3 x double>* @scale
  store double %gvalue3, double* @SIDESLOP_WIDTH
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

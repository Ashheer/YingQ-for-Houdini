;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [7 x i8] c"height\00"
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [10 x i8] c"transform\00"
@P = external global <3 x double>
@N = external global <3 x double>
@uv = external global <3 x double>
@3 = private constant [2 x i8] c"N\00"
@4 = private constant [3 x i8] c"uv\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVV"(<3 x double>* %_bound_P, <3 x double>* %_bound_N, <3 x double>* %_bound_uv) #0 {
__llvm_entry:
  %return = call <3 x double> @"volumeindextopos@VISV"(i64 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0), <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  %return1 = call <3 x double> @"volumeindextopos@VISV"(i64 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0), <3 x double> zeroinitializer)
  %output = call <3 x double> @"sub@VV"(<3 x double> %return, <3 x double> %return1)
  %return2 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %_bound_P3 = load <3 x double>, <3 x double>* %_bound_P
  %return7 = call double @"dot@FVV"(<3 x double> %_bound_P3, <3 x double> %return2)
  %cast = call <3 x double> @"set@VF"(double %return7)
  %output8 = call <3 x double> @"mul@VV"(<3 x double> %return2, <3 x double> %cast)
  %output9 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P3, <3 x double> %output8)
  store <3 x double> %output9, <3 x double>* %_bound_P
  %return10 = call i64 @"nametoprim@IIS"(i64 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0))
  %return12 = call i64 @"primpoint@IIII"(i64 1, i64 %return10, i64 0)
  %return13 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return12)
  %_bound_P14 = load <3 x double>, <3 x double>* %_bound_P
  %return18 = call double @"dot@FVV"(<3 x double> %return13, <3 x double> %return2)
  %cast19 = call <3 x double> @"set@VF"(double %return18)
  %output20 = call <3 x double> @"mul@VV"(<3 x double> %return2, <3 x double> %cast19)
  %output21 = call <3 x double> @"add@VV"(<3 x double> %_bound_P14, <3 x double> %output20)
  store <3 x double> %output21, <3 x double>* %_bound_P
  %return25 = call double @"volumesample@FISV"(i64 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0), <3 x double> %output21)
  %cast26 = call <3 x double> @"set@VF"(double %return25)
  %output27 = call <3 x double> @"mul@VV"(<3 x double> %return2, <3 x double> %cast26)
  %output28 = call <3 x double> @"add@VV"(<3 x double> %output21, <3 x double> %output27)
  store <3 x double> %output28, <3 x double>* %_bound_P
  %return30 = call <9 x double> @"primintrinsic@3ISI"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0), i64 %return10)
  %return32 = call <9 x double> @"invert@33"(<9 x double> %return30)
  %_bound_P34 = load <3 x double>, <3 x double>* %_bound_P
  %output36 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P34, <3 x double> %return13)
  %output37 = call <3 x double> @"mul@V3"(<3 x double> %output36, <9 x double> %return32)
  %cast39 = call <3 x double> @"set@VI"(i64 1)
  %output40 = call <3 x double> @"add@VV"(<3 x double> %output37, <3 x double> %cast39)
  %cast42 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output43 = call <3 x double> @"mul@VV"(<3 x double> %output40, <3 x double> %cast42)
  %return46 = call <3 x double> @"prim_normal@VIIV"(i64 1, i64 %return10, <3 x double> %output43)
  %return47 = call <3 x double> @"neg@VV"(<3 x double> %return46)
  store <3 x double> %return47, <3 x double>* %_bound_N
  %_bound_P48 = load <3 x double>, <3 x double>* %_bound_P
  %return49 = call <3 x double> @"relbbox@VIV"(i64 1, <3 x double> %_bound_P48)
  store <3 x double> %return49, <3 x double>* %_bound_uv
  %return51 = call <3 x double> @"swizzle@VVIII"(<3 x double> %return49, i64 2, i64 0, i64 1)
  store <3 x double> %return51, <3 x double>* %_bound_uv
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"volumeindextopos@VISV"(i64, i8*, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"nametoprim@IIS"(i64, i8*) #1

; Function Attrs: nounwind
declare i64 @"primpoint@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"volumesample@FISV"(i64, i8*, <3 x double>) #1

; Function Attrs: nounwind
declare <9 x double> @"primintrinsic@3ISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <9 x double> @"invert@33"(<9 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"mul@V3"(<3 x double>, <9 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #2

; Function Attrs: nounwind
declare <3 x double> @"prim_normal@VIIV"(i64, i64, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"relbbox@VIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"swizzle@VVIII"(<3 x double>, i64, i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, <3 x double> %N, <3 x double> %uv) #1 {
__llvm_entry:
  %"<N>" = alloca <3 x double>
  %"<uv>" = alloca <3 x double>
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %N, <3 x double>* %"<N>"
  store <3 x double> %uv, <3 x double>* %"<uv>"
  call void @"__vex_snippet_snippet@VVV"(<3 x double>* %"<P>", <3 x double>* %"<N>", <3 x double>* %"<uv>")
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #3
  %evalue1 = load <3 x double>, <3 x double>* %"<N>"
  %gvalue2 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %evalue1) #3
  %evalue3 = load <3 x double>, <3 x double>* %"<uv>"
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), <3 x double> %evalue3) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store <3 x double> %gvalue2, <3 x double>* @N
  store <3 x double> %gvalue4, <3 x double>* @uv
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

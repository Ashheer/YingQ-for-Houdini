;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [13 x i8] c"../eavewidth\00"
@1 = private constant [19 x i8] c"../flyrafter_ratio\00"
@2 = private constant [17 x i8] c"../feiyan_length\00"
@3 = private constant [13 x i8] c"../eaveangle\00"
@P = external global <3 x double>
@N = external global <3 x double>
@dir = external global <3 x double>
@opinput1_N = external global <3 x double>
@opinput1_P = external global <3 x double>
@4 = private constant [2 x i8] c"P\00"
@5 = private constant [2 x i8] c"N\00"
@6 = private constant [4 x i8] c"dir\00"
@7 = private constant [11 x i8] c"opinput1_N\00"
@8 = private constant [11 x i8] c"opinput1_P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVVVV"(<3 x double>* %_bound_P, <3 x double>* %_bound_N, <3 x double>* %_bound_dir, <3 x double>* %_bound_opinput1_N, <3 x double>* %_bound_opinput1_P) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0))
  %return2 = call double @"chf@FS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1, i64 0, i64 0))
  %output = fsub double 1.000000e+00, %return2
  %output3 = fmul double %return, %output
  %return4 = call double @"chf@FS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @2, i64 0, i64 0))
  %output5 = fadd double %output3, %return4
  %return6 = call double @"chf@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @3, i64 0, i64 0))
  %return7 = call double @"radians@FF"(double %return6)
  %return8 = call double @"cos@FF"(double %return7)
  %output9 = call double @"div@FF"(double %output5, double %return8)
  %_bound_N10 = load <3 x double>, <3 x double>* %_bound_N
  %cast = call <3 x double> @"set@VF"(double %output9)
  %output11 = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %_bound_N10)
  %output12 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P1, <3 x double> %output11)
  store <3 x double> %output12, <3 x double>* %_bound_P
  %_bound_opinput1_N13 = load <3 x double>, <3 x double>* %_bound_opinput1_N
  %return14 = call <3 x double> @"normalize@VV"(<3 x double> %_bound_opinput1_N13)
  store <3 x double> %return14, <3 x double>* %_bound_dir
  %_bound_opinput1_P15 = load <3 x double>, <3 x double>* %_bound_opinput1_P
  %_bound_P16 = load <3 x double>, <3 x double>* %_bound_P
  %output17 = call <3 x double> @"sub@VV"(<3 x double> %_bound_opinput1_P15, <3 x double> %_bound_P16)
  store <3 x double> %output17, <3 x double>* %_bound_N
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"radians@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, <3 x double> %N, <3 x double> %dir, <3 x double> %opinput1_N, <3 x double> %opinput1_P) #2 {
__llvm_entry:
  %"<N>" = alloca <3 x double>
  %"<dir>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %N, <3 x double>* %"<N>"
  store <3 x double> %dir, <3 x double>* %"<dir>"
  store <3 x double> %opinput1_N, <3 x double>* %0
  store <3 x double> %opinput1_P, <3 x double>* %1
  call void @"__vex_snippet_snippet@VVVVV"(<3 x double>* %"<P>", <3 x double>* %"<N>", <3 x double>* %"<dir>", <3 x double>* %0, <3 x double>* %1)
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), <3 x double> %evalue) #3
  %evalue3 = load <3 x double>, <3 x double>* %"<N>"
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), <3 x double> %evalue3) #3
  %evalue5 = load <3 x double>, <3 x double>* %"<dir>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @6, i64 0, i64 0), <3 x double> %evalue5) #3
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @7, i64 0, i64 0), <3 x double> %opinput1_N) #3
  %gvalue10 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @8, i64 0, i64 0), <3 x double> %opinput1_P) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store <3 x double> %gvalue4, <3 x double>* @N
  store <3 x double> %gvalue6, <3 x double>* @dir
  store <3 x double> %gvalue8, <3 x double>* @opinput1_N
  store <3 x double> %gvalue10, <3 x double>* @opinput1_P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

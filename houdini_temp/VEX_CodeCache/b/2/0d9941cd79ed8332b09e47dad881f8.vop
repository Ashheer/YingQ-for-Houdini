;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"pointvels\00"
@1 = private constant [2 x i8] c"w\00"
@2 = private constant [13 x i8] c"__worldpivot\00"
@3 = private constant [2 x i8] c"v\00"
@4 = private constant [18 x i8] c"integrateovertime\00"
@v = external global <3 x double>

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVV"(i64* %_bound___templateptnum, <3 x double>* %_bound_v, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound___templateptnum1 = load i64, i64* %_bound___templateptnum
  %return = call i64 @"lt@III"(i64 %_bound___templateptnum1, i64 0)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %false, %true21, %true11, %__llvm_entry
  ret void

end:                                              ; preds = %__llvm_entry
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0))
  %return4 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %_bound___templateptnum1)
  %_bound___templateptnum5 = load i64, i64* %_bound___templateptnum
  %return6 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0), i64 %_bound___templateptnum5)
  %_bound___templateptnum7 = load i64, i64* %_bound___templateptnum
  %return8 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), i64 %_bound___templateptnum7)
  %return10 = call i64 @"eq@III"(i64 %return2, i64 1)
  %1 = icmp ne i64 %return10, 0
  br i1 %1, label %true11, label %false

true11:                                           ; preds = %end
  %_bound_P14 = load <3 x double>, <3 x double>* %_bound_P
  %output = call <3 x double> @"sub@VV"(<3 x double> %_bound_P14, <3 x double> %return6)
  %return16 = call <3 x double> @"cross@VVV"(<3 x double> %return4, <3 x double> %output)
  %output18 = call <3 x double> @"add@VV"(<3 x double> %return16, <3 x double> %return8)
  store <3 x double> %output18, <3 x double>* %_bound_v
  br label %true

false:                                            ; preds = %end
  %return20 = call i64 @"eq@III"(i64 %return2, i64 2)
  %2 = icmp ne i64 %return20, 0
  br i1 %2, label %true21, label %true

true21:                                           ; preds = %false
  %return23 = call double @"chf@FS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @4, i64 0, i64 0))
  %cast = call <3 x double> @"set@VF"(double %return23)
  %output26 = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %return4)
  %return28 = call double @"length@FV"(<3 x double> %output26)
  %cast31 = call <3 x double> @"set@VF"(double %return28)
  %output32 = call <3 x double> @"div@VV"(<3 x double> %output26, <3 x double> %cast31)
  %output36 = call <9 x double> @"rotate@3FV"(<9 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>, double %return28, <3 x double> %output32)
  %_bound_P37 = load <3 x double>, <3 x double>* %_bound_P
  %output39 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P37, <3 x double> %return6)
  %output41 = call double @"div@FF"(double 1.000000e+00, double %return23)
  %output44 = call <3 x double> @"mul@V3"(<3 x double> %output39, <9 x double> %output36)
  %output46 = call <3 x double> @"sub@VV"(<3 x double> %output44, <3 x double> %output39)
  %cast47 = call <3 x double> @"set@VF"(double %output41)
  %output48 = call <3 x double> @"mul@VV"(<3 x double> %cast47, <3 x double> %output46)
  %output50 = call <3 x double> @"add@VV"(<3 x double> %output48, <3 x double> %return8)
  store <3 x double> %output50, <3 x double>* %_bound_v
  br label %true
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <9 x double> @"rotate@3FV"(<9 x double>, double, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
declare <3 x double> @"mul@V3"(<3 x double>, <9 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %__templateptnum, <3 x double> %v, <3 x double> %P) #2 {
__llvm_entry:
  %"<v>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca <3 x double>
  store <3 x double> %v, <3 x double>* %"<v>"
  store i64 %__templateptnum, i64* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@IVV"(i64* %0, <3 x double>* %"<v>", <3 x double>* %1)
  %evalue = load <3 x double>, <3 x double>* %"<v>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %evalue) #3
  store <3 x double> %gvalue, <3 x double>* @v
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@ext3d = external global <3 x double>
@ext3dx = external global double
@ext3dy = external global double
@ext3dz = external global double
@uv = external global <3 x double>
@logmapu = external global double
@logmapv = external global double
@0 = private constant [6 x i8] c"ext3d\00"
@1 = private constant [7 x i8] c"ext3dx\00"
@2 = private constant [7 x i8] c"ext3dy\00"
@3 = private constant [7 x i8] c"ext3dz\00"
@4 = private constant [3 x i8] c"uv\00"
@5 = private constant [8 x i8] c"logmapu\00"
@6 = private constant [8 x i8] c"logmapv\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VFFFVFF"(<3 x double>* %_bound_ext3d, double* %_bound_ext3dx, double* %_bound_ext3dy, double* %_bound_ext3dz, <3 x double>* %_bound_uv, double* %_bound_logmapu, double* %_bound_logmapv) #0 {
__llvm_entry:
  %_bound_ext3dx1 = load double, double* %_bound_ext3dx
  %_bound_ext3dy2 = load double, double* %_bound_ext3dy
  %_bound_ext3dz3 = load double, double* %_bound_ext3dz
  %return = call <3 x double> @"set@VFFF"(double %_bound_ext3dx1, double %_bound_ext3dy2, double %_bound_ext3dz3)
  store <3 x double> %return, <3 x double>* %_bound_ext3d
  %_bound_logmapu4 = load double, double* %_bound_logmapu
  %_bound_logmapv5 = load double, double* %_bound_logmapv
  %return6 = call <2 x double> @"set@UFF"(double %_bound_logmapu4, double %_bound_logmapv5)
  %cast = call <3 x double> @"set@VU"(<2 x double> %return6)
  store <3 x double> %cast, <3 x double>* %_bound_uv
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VU"(<2 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %ext3d, double %ext3dx, double %ext3dy, double %ext3dz, <3 x double> %uv, double %logmapu, double %logmapv) #2 {
__llvm_entry:
  %"<uv>" = alloca <3 x double>
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %"<ext3d>" = alloca <3 x double>
  store <3 x double> %ext3d, <3 x double>* %"<ext3d>"
  store <3 x double> %uv, <3 x double>* %"<uv>"
  store double %ext3dx, double* %0
  store double %ext3dy, double* %1
  store double %ext3dz, double* %2
  store double %logmapu, double* %3
  store double %logmapv, double* %4
  call void @"__vex_snippet_snippet@VFFFVFF"(<3 x double>* %"<ext3d>", double* %0, double* %1, double* %2, <3 x double>* %"<uv>", double* %3, double* %4)
  %evalue = load <3 x double>, <3 x double>* %"<ext3d>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), double %ext3dx) #3
  %gvalue9 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), double %ext3dy) #3
  %gvalue11 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), double %ext3dz) #3
  %evalue12 = load <3 x double>, <3 x double>* %"<uv>"
  %gvalue13 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), <3 x double> %evalue12) #3
  %gvalue15 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @5, i64 0, i64 0), double %logmapu) #3
  %gvalue17 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @6, i64 0, i64 0), double %logmapv) #3
  store <3 x double> %gvalue, <3 x double>* @ext3d
  store double %gvalue7, double* @ext3dx
  store double %gvalue9, double* @ext3dy
  store double %gvalue11, double* @ext3dz
  store <3 x double> %gvalue13, <3 x double>* @uv
  store double %gvalue15, double* @logmapu
  store double %gvalue17, double* @logmapv
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, <3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

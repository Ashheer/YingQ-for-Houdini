;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@__accum_numpt = external global i64
@__accum_numpt_by_frame = external global i64*
@1 = private constant [14 x i8] c"__accum_numpt\00"
@2 = private constant [23 x i8] c"__accum_numpt_by_frame\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I[I"(i64* %_bound___accum_numpt, i64** %_bound___accum_numpt_by_frame) #0 {
__llvm_entry:
  store i64 0, i64* %_bound___accum_numpt
  store i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), i64** %_bound___accum_numpt_by_frame
  ret void
}

; Function Attrs: nounwind
define void @__vex_snippet(i64 %__accum_numpt, i64* %__accum_numpt_by_frame) #1 {
__llvm_entry:
  %"<__accum_numpt_by_frame>" = alloca i64*
  %"<__accum_numpt>" = alloca i64
  store i64 %__accum_numpt, i64* %"<__accum_numpt>"
  store i64* %__accum_numpt_by_frame, i64** %"<__accum_numpt_by_frame>"
  call void @"__vex_snippet_snippet@I[I"(i64* %"<__accum_numpt>", i64** %"<__accum_numpt_by_frame>")
  %evalue = load i64, i64* %"<__accum_numpt>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1, i64 0, i64 0), i64 %evalue) #2
  %evalue1 = load i64*, i64** %"<__accum_numpt_by_frame>"
  %gvalue2 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @2, i64 0, i64 0), i64* %evalue1) #2
  store i64 %gvalue, i64* @__accum_numpt
  store i64* %gvalue2, i64** @__accum_numpt_by_frame
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

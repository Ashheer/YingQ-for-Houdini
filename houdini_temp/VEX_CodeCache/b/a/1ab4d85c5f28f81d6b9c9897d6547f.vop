;_name	/obj/geo1/volumewrangle1/volumevop1
; ModuleID = 'obj_geo1_volumewrangle1_volumevop1'

@suface = external global double
@P = external global <3 x double>
@0 = private constant [7 x i8] c"suface\00"
@1 = private constant [2 x i8] c"P\00"

define private void @"_obj_geo1_volumewrangle1_volumevop1_snippet1@FV"(double* %_bound_suface, <3 x double>* %_bound_P) nounwind alwaysinline {
__llvm_entry:
  %_bound_P2 = load <3 x double>* %_bound_P
  %return = call i64 @"addpoint@IIV"(i64 0, <3 x double> %_bound_P2)
  ret void
}

declare i64 @"addpoint@IIV"(i64, <3 x double>) nounwind

define void @obj_geo1_volumewrangle1_volumevop1(double %suface, <3 x double> %P) nounwind {
__llvm_entry:
  %0 = alloca double
  %1 = alloca <3 x double>
  store double %suface, double* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"_obj_geo1_volumewrangle1_volumevop1_snippet1@FV"(double* %0, <3 x double>* %1)
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8]* @0, i64 0, i64 0), double %suface) nounwind readonly
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8]* @1, i64 0, i64 0), <3 x double> %P) nounwind readonly
  store double %gvalue, double* @suface
  store <3 x double> %gvalue4, <3 x double>* @P
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_geo1_volumewrangle1_volumevop1(double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"18.5.633"}
!2 = metadata !{metadata !"64"}

;_code_end

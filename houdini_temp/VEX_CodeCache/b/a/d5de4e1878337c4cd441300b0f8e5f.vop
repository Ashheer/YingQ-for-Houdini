;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@curvature = external global double
@area = external global double
@group_concave = external global i64
@dis = external global double
@pt = external global i64
@0 = private constant [10 x i8] c"curvature\00"
@1 = private constant [5 x i8] c"area\00"
@2 = private constant [14 x i8] c"group_concave\00"
@3 = private constant [4 x i8] c"dis\00"
@4 = private constant [3 x i8] c"pt\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FFIFI"(double* %_bound_curvature, double* %_bound_area, i64* %_bound_group_concave, double* %_bound_dis, i64* %_bound_pt) #0 {
__llvm_entry:
  %_bound_curvature1 = load double, double* %_bound_curvature
  %return = call i64 @"neg@II"(i64 1)
  %cast = sitofp i64 %return to double
  %return2 = fcmp olt double %_bound_curvature1, %cast
  %return3 = zext i1 %return2 to i64
  %_bound_area4 = load double, double* %_bound_area
  %return5 = fcmp ogt double %_bound_area4, 1.000000e+00
  %return6 = zext i1 %return5 to i64
  %return7 = call i64 @"and@III"(i64 %return3, i64 %return6)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store i64 1, i64* %_bound_group_concave
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  store double 0x4202A05F1FF80000, double* %_bound_dis
  store i64 %return, i64* %_bound_pt
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %curvature, double %area, i64 %group_concave, double %dis, i64 %pt) #2 {
__llvm_entry:
  %"<group_concave>" = alloca i64
  %"<dis>" = alloca double
  %"<pt>" = alloca i64
  %0 = alloca double
  %1 = alloca double
  store i64 %group_concave, i64* %"<group_concave>"
  store double %dis, double* %"<dis>"
  store i64 %pt, i64* %"<pt>"
  store double %curvature, double* %0
  store double %area, double* %1
  call void @"__vex_snippet_snippet@FFIFI"(double* %0, double* %1, i64* %"<group_concave>", double* %"<dis>", i64* %"<pt>")
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), double %curvature) #3
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), double %area) #3
  %evalue5 = load i64, i64* %"<group_concave>"
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @2, i64 0, i64 0), i64 %evalue5) #3
  %evalue7 = load double, double* %"<dis>"
  %gvalue8 = call double @"_export@FSF"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i64 0, i64 0), double %evalue7) #3
  %evalue9 = load i64, i64* %"<pt>"
  %gvalue10 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), i64 %evalue9) #3
  store double %gvalue, double* @curvature
  store double %gvalue4, double* @area
  store i64 %gvalue6, i64* @group_concave
  store double %gvalue8, double* @dis
  store i64 %gvalue10, i64* @pt
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00, i64 0, double 0.000000e+00, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

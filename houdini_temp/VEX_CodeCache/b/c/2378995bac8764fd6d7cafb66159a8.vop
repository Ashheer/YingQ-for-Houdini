;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [11 x i8] c"activeprim\00"
@1 = private constant [9 x i8] c"polyline\00"

; Function Attrs: alwaysinline nounwind
define private void @__vex_snippet_snippet() #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i64 0, i64 0))
  %return2 = call i64 @"lt@III"(i64 %return, i64 0)
  %0 = icmp ne i64 %return2, 0
  %.return = select i1 %0, i64 0, i64 %return
  %output = add i64 %.return, 1
  %return4 = call i64 @"nprimitives@II"(i64 0)
  %output5 = sub i64 %output, %return4
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nadd.0 = phi i64 [ %output5, %__llvm_entry ], [ %output11, %body ]
  %return7 = call i64 @"gt@III"(i64 %nadd.0, i64 0)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %body, label %end8

body:                                             ; preds = %cond
  %return9 = call i64 @"addprim@IIS"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0))
  %output11 = sub i64 %nadd.0, 1
  br label %cond

end8:                                             ; preds = %cond
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"nprimitives@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"addprim@IIS"(i64, i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet() #2 {
__llvm_entry:
  call void @__vex_snippet_snippet()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

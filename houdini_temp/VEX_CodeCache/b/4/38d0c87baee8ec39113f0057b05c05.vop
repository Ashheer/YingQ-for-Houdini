;_name	/obj/geo1/solver1/d/s/pointvop1
; ModuleID = 'obj_geo1_solver1_d_s_pointvop1'
source_filename = "obj_geo1_solver1_d_s_pointvop1"

@0 = private constant [13 x i8] c"exact_pnoise\00"
@1 = private constant [13 x i8] c"exact_xnoise\00"
@2 = private constant [7 x i8] c"onoise\00"
@3 = private constant [7 x i8] c"snoise\00"
@4 = private constant [7 x i8] c"anoise\00"
@5 = private constant [7 x i8] c"xnoise\00"
@6 = private constant [1 x i8] zeroinitializer
@P = external global <3 x double>
@7 = private constant [7 x i8] c"pnoise\00"
@8 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"vop_perlinNoiseVV@VVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  %cast = call <3 x double> @"set@VI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %output13, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output22, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output16, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output19, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return8 = call <3 x double> @"noise@VV"(<3 x double> %pp.0)
  %output10 = call <3 x double> @"add@VV"(<3 x double> %return8, <3 x double> %cast)
  %cast11 = call <3 x double> @"set@VF"(double %scale.0)
  %output12 = call <3 x double> @"mul@VV"(<3 x double> %cast11, <3 x double> %output10)
  %output13 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output12)
  %output16 = add i64 %i.0, 1
  %cast18 = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output19 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast18)
  %rough21 = load double, double* %rough
  %output22 = fmul double %scale.0, %rough21
  br label %cond

end:                                              ; preds = %cond
  %atten24 = load double, double* %atten
  %return25 = call <3 x double> @"pow@VVF"(<3 x double> %nval.0, double %atten24)
  ret <3 x double> %return25
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"noise@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"pow@VVF"(<3 x double>, double) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"vop_simplexNoiseVV@VVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  %cast = call <3 x double> @"set@VI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %output14, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output23, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output17, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output20, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %output = fmul double 5.000000e-01, %scale.0
  %return8 = call <3 x double> @"xnoise@VV"(<3 x double> %pp.0)
  %return9 = call double @"neg@FF"(double 5.000000e-01)
  %cast10 = call <3 x double> @"set@VF"(double %return9)
  %output11 = call <3 x double> @"add@VV"(<3 x double> %return8, <3 x double> %cast10)
  %cast12 = call <3 x double> @"set@VF"(double %output)
  %output13 = call <3 x double> @"mul@VV"(<3 x double> %cast12, <3 x double> %output11)
  %output14 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output13)
  %output17 = add i64 %i.0, 1
  %cast19 = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output20 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast19)
  %rough22 = load double, double* %rough
  %output23 = fmul double %scale.0, %rough22
  br label %cond

end:                                              ; preds = %cond
  %atten25 = load double, double* %atten
  %return26 = call <3 x double> @"pow@VVF"(<3 x double> %nval.0, double %atten25)
  ret <3 x double> %return26
}

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"vop_simplexCurlNoiseVV@VVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  %cast = call <3 x double> @"set@VI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %output13, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output22, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output16, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output19, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return8 = call <3 x double> @"curlxnoise@VV"(<3 x double> %pp.0)
  %output10 = call <3 x double> @"add@VV"(<3 x double> %return8, <3 x double> %cast)
  %cast11 = call <3 x double> @"set@VF"(double %scale.0)
  %output12 = call <3 x double> @"mul@VV"(<3 x double> %cast11, <3 x double> %output10)
  %output13 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output12)
  %output16 = add i64 %i.0, 1
  %cast18 = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output19 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast18)
  %rough21 = load double, double* %rough
  %output22 = fmul double %scale.0, %rough21
  br label %cond

end:                                              ; preds = %cond
  %atten24 = load double, double* %atten
  %return25 = call <3 x double> @"pow@VVF"(<3 x double> %nval.0, double %atten24)
  ret <3 x double> %return25
}

; Function Attrs: nounwind readnone
declare <3 x double> @"curlxnoise@VV"(<3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"vop_perlinCurlNoiseVV@VVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  %cast = call <3 x double> @"set@VI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %output13, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output22, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output16, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output19, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return8 = call <3 x double> @"curlnoise@VV"(<3 x double> %pp.0)
  %output10 = call <3 x double> @"add@VV"(<3 x double> %return8, <3 x double> %cast)
  %cast11 = call <3 x double> @"set@VF"(double %scale.0)
  %output12 = call <3 x double> @"mul@VV"(<3 x double> %cast11, <3 x double> %output10)
  %output13 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output12)
  %output16 = add i64 %i.0, 1
  %cast18 = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output19 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast18)
  %rough21 = load double, double* %rough
  %output22 = fmul double %scale.0, %rough21
  br label %cond

end:                                              ; preds = %cond
  %atten24 = load double, double* %atten
  %return25 = call <3 x double> @"pow@VVF"(<3 x double> %nval.0, double %atten24)
  ret <3 x double> %return25
}

; Function Attrs: nounwind readnone
declare <3 x double> @"curlnoise@VV"(<3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"vop_curlNoiseVV@VVVVVSSIIFFFFFF"(<3 x double>* %pos, <3 x double>* %freq, <3 x double>* %offset, <3 x double>* %nml, i8** %type, i8** %geo, i64* %turb, i64* %bounce, double* %amp, double* %rough, double* %atten, double* %distance, double* %radius, double* %h) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca i64
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca <3 x double>
  %6 = alloca i64
  %7 = alloca double
  %8 = alloca double
  %9 = alloca double
  %10 = alloca <3 x double>
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca double
  %15 = alloca <3 x double>
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca <3 x double>
  %21 = alloca i64
  %22 = alloca double
  %23 = alloca double
  %24 = alloca double
  %25 = alloca <3 x double>
  %26 = alloca i64
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <3 x double>
  %31 = alloca i64
  %32 = alloca double
  %33 = alloca double
  %34 = alloca double
  %35 = alloca <3 x double>
  %36 = alloca i64
  %37 = alloca double
  %38 = alloca double
  %39 = alloca double
  %40 = alloca <3 x double>
  %41 = alloca i64
  %42 = alloca double
  %43 = alloca double
  %44 = alloca double
  %type1 = load i8*, i8** %type
  %return = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0))
  %45 = icmp ne i64 %return, 0
  br i1 %45, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %pos2 = load <3 x double>, <3 x double>* %pos
  %freq3 = load <3 x double>, <3 x double>* %freq
  %output = call <3 x double> @"mul@VV"(<3 x double> %pos2, <3 x double> %freq3)
  %offset4 = load <3 x double>, <3 x double>* %offset
  %output5 = call <3 x double> @"sub@VV"(<3 x double> %output, <3 x double> %offset4)
  store <3 x double> %output5, <3 x double>* %0
  %turb6 = load i64, i64* %turb
  store i64 %turb6, i64* %1
  %amp7 = load double, double* %amp
  store double %amp7, double* %2
  %rough8 = load double, double* %rough
  %output9 = fmul double %rough8, 2.000000e+00
  store double %output9, double* %3
  %atten10 = load double, double* %atten
  store double %atten10, double* %4
  %vop_perlinCurlNoiseVV = call <3 x double> @"vop_perlinCurlNoiseVV@VVIFFF"(<3 x double>* %0, i64* %1, double* %2, double* %3, double* %4)
  br label %UnifiedReturnBlock

false:                                            ; preds = %__llvm_entry
  %return12 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0))
  %46 = icmp ne i64 %return12, 0
  br i1 %46, label %true13, label %end14

true13:                                           ; preds = %false
  %pos15 = load <3 x double>, <3 x double>* %pos
  %freq16 = load <3 x double>, <3 x double>* %freq
  %output17 = call <3 x double> @"mul@VV"(<3 x double> %pos15, <3 x double> %freq16)
  %offset18 = load <3 x double>, <3 x double>* %offset
  %output19 = call <3 x double> @"sub@VV"(<3 x double> %output17, <3 x double> %offset18)
  store <3 x double> %output19, <3 x double>* %5
  %turb20 = load i64, i64* %turb
  store i64 %turb20, i64* %6
  %amp21 = load double, double* %amp
  store double %amp21, double* %7
  %rough22 = load double, double* %rough
  %output23 = fmul double %rough22, 2.000000e+00
  store double %output23, double* %8
  %atten24 = load double, double* %atten
  store double %atten24, double* %9
  %vop_simplexCurlNoiseVV = call <3 x double> @"vop_simplexCurlNoiseVV@VVIFFF"(<3 x double>* %5, i64* %6, double* %7, double* %8, double* %9)
  br label %UnifiedReturnBlock

end14:                                            ; preds = %false
  %pos25 = load <3 x double>, <3 x double>* %pos
  store <3 x double> %pos25, <3 x double>* %5
  %return27 = call double @"getcomp@FVI"(<3 x double> %pos25, i64 0)
  %h28 = load double, double* %h
  %output29 = fadd double %return27, %h28
  %return30 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %pos25, double %output29, i64 0)
  %output32 = extractvalue { double, <3 x double> } %return30, 1
  store <3 x double> %output32, <3 x double>* %5
  %pos33 = load <3 x double>, <3 x double>* %pos
  %return35 = call double @"getcomp@FVI"(<3 x double> %pos33, i64 1)
  %h36 = load double, double* %h
  %output37 = fadd double %return35, %h36
  %return39 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %pos33, double %output37, i64 1)
  %output41 = extractvalue { double, <3 x double> } %return39, 1
  %pos42 = load <3 x double>, <3 x double>* %pos
  %return44 = call double @"getcomp@FVI"(<3 x double> %pos42, i64 2)
  %h45 = load double, double* %h
  %output46 = fadd double %return44, %h45
  %return48 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %pos42, double %output46, i64 2)
  %output50 = extractvalue { double, <3 x double> } %return48, 1
  %type51 = load i8*, i8** %type
  %return52 = call i64 @"eq@ISS"(i8* %type51, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0))
  %47 = icmp ne i64 %return52, 0
  br i1 %47, label %true53, label %false54

true53:                                           ; preds = %end14
  %pos56 = load <3 x double>, <3 x double>* %pos
  %freq57 = load <3 x double>, <3 x double>* %freq
  %output58 = call <3 x double> @"mul@VV"(<3 x double> %pos56, <3 x double> %freq57)
  %offset59 = load <3 x double>, <3 x double>* %offset
  %output60 = call <3 x double> @"sub@VV"(<3 x double> %output58, <3 x double> %offset59)
  %turb61 = load i64, i64* %turb
  %rough62 = load double, double* %rough
  %atten63 = load double, double* %atten
  %return64 = call double @"onoise@FVIFF"(<3 x double> %output60, i64 %turb61, double %rough62, double %atten63)
  %amp65 = load double, double* %amp
  %output66 = fmul double %return64, %amp65
  %cast = call <3 x double> @"set@VF"(double %output66)
  %xDiff67 = load <3 x double>, <3 x double>* %5
  %output69 = call <3 x double> @"mul@VV"(<3 x double> %xDiff67, <3 x double> %freq57)
  %output71 = call <3 x double> @"sub@VV"(<3 x double> %output69, <3 x double> %offset59)
  %return75 = call double @"onoise@FVIFF"(<3 x double> %output71, i64 %turb61, double %rough62, double %atten63)
  %output77 = fmul double %return75, %amp65
  %cast78 = call <3 x double> @"set@VF"(double %output77)
  %output81 = call <3 x double> @"mul@VV"(<3 x double> %output41, <3 x double> %freq57)
  %output83 = call <3 x double> @"sub@VV"(<3 x double> %output81, <3 x double> %offset59)
  %return87 = call double @"onoise@FVIFF"(<3 x double> %output83, i64 %turb61, double %rough62, double %atten63)
  %output89 = fmul double %return87, %amp65
  %cast90 = call <3 x double> @"set@VF"(double %output89)
  %output93 = call <3 x double> @"mul@VV"(<3 x double> %output50, <3 x double> %freq57)
  %output95 = call <3 x double> @"sub@VV"(<3 x double> %output93, <3 x double> %offset59)
  %return99 = call double @"onoise@FVIFF"(<3 x double> %output95, i64 %turb61, double %rough62, double %atten63)
  %output101 = fmul double %return99, %amp65
  %cast102 = call <3 x double> @"set@VF"(double %output101)
  br label %end55

false54:                                          ; preds = %end14
  %return104 = call i64 @"eq@ISS"(i8* %type51, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0))
  %48 = icmp ne i64 %return104, 0
  br i1 %48, label %true105, label %false106

end55:                                            ; preds = %true211, %false212, %true158, %true105, %true53
  %zDiffNoise.0 = phi <3 x double> [ %cast102, %true53 ], [ %cast155, %true105 ], [ %cast208, %true158 ], [ %vop_simplexNoiseVV252, %true211 ], [ %vop_perlinNoiseVV291, %false212 ]
  %yDiffNoise.0 = phi <3 x double> [ %cast90, %true53 ], [ %cast143, %true105 ], [ %cast196, %true158 ], [ %vop_simplexNoiseVV242, %true211 ], [ %vop_perlinNoiseVV281, %false212 ]
  %xDiffNoise.0 = phi <3 x double> [ %cast78, %true53 ], [ %cast131, %true105 ], [ %cast184, %true158 ], [ %vop_simplexNoiseVV232, %true211 ], [ %vop_perlinNoiseVV271, %false212 ]
  %noisevec.0 = phi <3 x double> [ %cast, %true53 ], [ %cast119, %true105 ], [ %cast172, %true158 ], [ %vop_simplexNoiseVV, %true211 ], [ %vop_perlinNoiseVV, %false212 ]
  %nml292 = load <3 x double>, <3 x double>* %nml
  %return293 = call <3 x double> @"normalize@VV"(<3 x double> %nml292)
  %geo294 = load i8*, i8** %geo
  %return295 = call i64 @"ne@ISS"(i8* %geo294, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0))
  %49 = icmp ne i64 %return295, 0
  br i1 %49, label %true296, label %false297

true105:                                          ; preds = %false54
  %pos108 = load <3 x double>, <3 x double>* %pos
  %freq109 = load <3 x double>, <3 x double>* %freq
  %output110 = call <3 x double> @"mul@VV"(<3 x double> %pos108, <3 x double> %freq109)
  %offset111 = load <3 x double>, <3 x double>* %offset
  %output112 = call <3 x double> @"sub@VV"(<3 x double> %output110, <3 x double> %offset111)
  %turb113 = load i64, i64* %turb
  %rough114 = load double, double* %rough
  %atten115 = load double, double* %atten
  %return116 = call double @"snoise@FVIFF"(<3 x double> %output112, i64 %turb113, double %rough114, double %atten115)
  %amp117 = load double, double* %amp
  %output118 = fmul double %return116, %amp117
  %cast119 = call <3 x double> @"set@VF"(double %output118)
  %xDiff120 = load <3 x double>, <3 x double>* %5
  %output122 = call <3 x double> @"mul@VV"(<3 x double> %xDiff120, <3 x double> %freq109)
  %output124 = call <3 x double> @"sub@VV"(<3 x double> %output122, <3 x double> %offset111)
  %return128 = call double @"snoise@FVIFF"(<3 x double> %output124, i64 %turb113, double %rough114, double %atten115)
  %output130 = fmul double %return128, %amp117
  %cast131 = call <3 x double> @"set@VF"(double %output130)
  %output134 = call <3 x double> @"mul@VV"(<3 x double> %output41, <3 x double> %freq109)
  %output136 = call <3 x double> @"sub@VV"(<3 x double> %output134, <3 x double> %offset111)
  %return140 = call double @"snoise@FVIFF"(<3 x double> %output136, i64 %turb113, double %rough114, double %atten115)
  %output142 = fmul double %return140, %amp117
  %cast143 = call <3 x double> @"set@VF"(double %output142)
  %output146 = call <3 x double> @"mul@VV"(<3 x double> %output50, <3 x double> %freq109)
  %output148 = call <3 x double> @"sub@VV"(<3 x double> %output146, <3 x double> %offset111)
  %return152 = call double @"snoise@FVIFF"(<3 x double> %output148, i64 %turb113, double %rough114, double %atten115)
  %output154 = fmul double %return152, %amp117
  %cast155 = call <3 x double> @"set@VF"(double %output154)
  br label %end55

false106:                                         ; preds = %false54
  %return157 = call i64 @"eq@ISS"(i8* %type51, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0))
  %50 = icmp ne i64 %return157, 0
  br i1 %50, label %true158, label %false159

true158:                                          ; preds = %false106
  %pos161 = load <3 x double>, <3 x double>* %pos
  %freq162 = load <3 x double>, <3 x double>* %freq
  %output163 = call <3 x double> @"mul@VV"(<3 x double> %pos161, <3 x double> %freq162)
  %offset164 = load <3 x double>, <3 x double>* %offset
  %output165 = call <3 x double> @"sub@VV"(<3 x double> %output163, <3 x double> %offset164)
  %turb166 = load i64, i64* %turb
  %rough167 = load double, double* %rough
  %atten168 = load double, double* %atten
  %return169 = call double @"anoise@FVIFF"(<3 x double> %output165, i64 %turb166, double %rough167, double %atten168)
  %amp170 = load double, double* %amp
  %output171 = fmul double %return169, %amp170
  %cast172 = call <3 x double> @"set@VF"(double %output171)
  %xDiff173 = load <3 x double>, <3 x double>* %5
  %output175 = call <3 x double> @"mul@VV"(<3 x double> %xDiff173, <3 x double> %freq162)
  %output177 = call <3 x double> @"sub@VV"(<3 x double> %output175, <3 x double> %offset164)
  %return181 = call double @"anoise@FVIFF"(<3 x double> %output177, i64 %turb166, double %rough167, double %atten168)
  %output183 = fmul double %return181, %amp170
  %cast184 = call <3 x double> @"set@VF"(double %output183)
  %output187 = call <3 x double> @"mul@VV"(<3 x double> %output41, <3 x double> %freq162)
  %output189 = call <3 x double> @"sub@VV"(<3 x double> %output187, <3 x double> %offset164)
  %return193 = call double @"anoise@FVIFF"(<3 x double> %output189, i64 %turb166, double %rough167, double %atten168)
  %output195 = fmul double %return193, %amp170
  %cast196 = call <3 x double> @"set@VF"(double %output195)
  %output199 = call <3 x double> @"mul@VV"(<3 x double> %output50, <3 x double> %freq162)
  %output201 = call <3 x double> @"sub@VV"(<3 x double> %output199, <3 x double> %offset164)
  %return205 = call double @"anoise@FVIFF"(<3 x double> %output201, i64 %turb166, double %rough167, double %atten168)
  %output207 = fmul double %return205, %amp170
  %cast208 = call <3 x double> @"set@VF"(double %output207)
  br label %end55

false159:                                         ; preds = %false106
  %return210 = call i64 @"eq@ISS"(i8* %type51, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0))
  %51 = icmp ne i64 %return210, 0
  %pos214 = load <3 x double>, <3 x double>* %pos
  %freq215 = load <3 x double>, <3 x double>* %freq
  %output216 = call <3 x double> @"mul@VV"(<3 x double> %pos214, <3 x double> %freq215)
  %offset217 = load <3 x double>, <3 x double>* %offset
  %output218 = call <3 x double> @"sub@VV"(<3 x double> %output216, <3 x double> %offset217)
  store <3 x double> %output218, <3 x double>* %10
  %turb219 = load i64, i64* %turb
  store i64 %turb219, i64* %11
  %amp220 = load double, double* %amp
  store double %amp220, double* %12
  %rough221 = load double, double* %rough
  store double %rough221, double* %13
  %atten222 = load double, double* %atten
  store double %atten222, double* %14
  br i1 %51, label %true211, label %false212

true211:                                          ; preds = %false159
  %vop_simplexNoiseVV = call <3 x double> @"vop_simplexNoiseVV@VVIFFF"(<3 x double>* %10, i64* %11, double* %12, double* %13, double* %14)
  %xDiff223 = load <3 x double>, <3 x double>* %5
  %freq224 = load <3 x double>, <3 x double>* %freq
  %output225 = call <3 x double> @"mul@VV"(<3 x double> %xDiff223, <3 x double> %freq224)
  %offset226 = load <3 x double>, <3 x double>* %offset
  %output227 = call <3 x double> @"sub@VV"(<3 x double> %output225, <3 x double> %offset226)
  store <3 x double> %output227, <3 x double>* %15
  %turb228 = load i64, i64* %turb
  store i64 %turb228, i64* %16
  %amp229 = load double, double* %amp
  store double %amp229, double* %17
  %rough230 = load double, double* %rough
  store double %rough230, double* %18
  %atten231 = load double, double* %atten
  store double %atten231, double* %19
  %vop_simplexNoiseVV232 = call <3 x double> @"vop_simplexNoiseVV@VVIFFF"(<3 x double>* %15, i64* %16, double* %17, double* %18, double* %19)
  %freq234 = load <3 x double>, <3 x double>* %freq
  %output235 = call <3 x double> @"mul@VV"(<3 x double> %output41, <3 x double> %freq234)
  %offset236 = load <3 x double>, <3 x double>* %offset
  %output237 = call <3 x double> @"sub@VV"(<3 x double> %output235, <3 x double> %offset236)
  store <3 x double> %output237, <3 x double>* %20
  %turb238 = load i64, i64* %turb
  store i64 %turb238, i64* %21
  %amp239 = load double, double* %amp
  store double %amp239, double* %22
  %rough240 = load double, double* %rough
  store double %rough240, double* %23
  %atten241 = load double, double* %atten
  store double %atten241, double* %24
  %vop_simplexNoiseVV242 = call <3 x double> @"vop_simplexNoiseVV@VVIFFF"(<3 x double>* %20, i64* %21, double* %22, double* %23, double* %24)
  %freq244 = load <3 x double>, <3 x double>* %freq
  %output245 = call <3 x double> @"mul@VV"(<3 x double> %output50, <3 x double> %freq244)
  %offset246 = load <3 x double>, <3 x double>* %offset
  %output247 = call <3 x double> @"sub@VV"(<3 x double> %output245, <3 x double> %offset246)
  store <3 x double> %output247, <3 x double>* %25
  %turb248 = load i64, i64* %turb
  store i64 %turb248, i64* %26
  %amp249 = load double, double* %amp
  store double %amp249, double* %27
  %rough250 = load double, double* %rough
  store double %rough250, double* %28
  %atten251 = load double, double* %atten
  store double %atten251, double* %29
  %vop_simplexNoiseVV252 = call <3 x double> @"vop_simplexNoiseVV@VVIFFF"(<3 x double>* %25, i64* %26, double* %27, double* %28, double* %29)
  br label %end55

false212:                                         ; preds = %false159
  %vop_perlinNoiseVV = call <3 x double> @"vop_perlinNoiseVV@VVIFFF"(<3 x double>* %10, i64* %11, double* %12, double* %13, double* %14)
  %xDiff262 = load <3 x double>, <3 x double>* %5
  %freq263 = load <3 x double>, <3 x double>* %freq
  %output264 = call <3 x double> @"mul@VV"(<3 x double> %xDiff262, <3 x double> %freq263)
  %offset265 = load <3 x double>, <3 x double>* %offset
  %output266 = call <3 x double> @"sub@VV"(<3 x double> %output264, <3 x double> %offset265)
  store <3 x double> %output266, <3 x double>* %30
  %turb267 = load i64, i64* %turb
  store i64 %turb267, i64* %31
  %amp268 = load double, double* %amp
  store double %amp268, double* %32
  %rough269 = load double, double* %rough
  store double %rough269, double* %33
  %atten270 = load double, double* %atten
  store double %atten270, double* %34
  %vop_perlinNoiseVV271 = call <3 x double> @"vop_perlinNoiseVV@VVIFFF"(<3 x double>* %30, i64* %31, double* %32, double* %33, double* %34)
  %freq273 = load <3 x double>, <3 x double>* %freq
  %output274 = call <3 x double> @"mul@VV"(<3 x double> %output41, <3 x double> %freq273)
  %offset275 = load <3 x double>, <3 x double>* %offset
  %output276 = call <3 x double> @"sub@VV"(<3 x double> %output274, <3 x double> %offset275)
  store <3 x double> %output276, <3 x double>* %35
  %turb277 = load i64, i64* %turb
  store i64 %turb277, i64* %36
  %amp278 = load double, double* %amp
  store double %amp278, double* %37
  %rough279 = load double, double* %rough
  store double %rough279, double* %38
  %atten280 = load double, double* %atten
  store double %atten280, double* %39
  %vop_perlinNoiseVV281 = call <3 x double> @"vop_perlinNoiseVV@VVIFFF"(<3 x double>* %35, i64* %36, double* %37, double* %38, double* %39)
  %freq283 = load <3 x double>, <3 x double>* %freq
  %output284 = call <3 x double> @"mul@VV"(<3 x double> %output50, <3 x double> %freq283)
  %offset285 = load <3 x double>, <3 x double>* %offset
  %output286 = call <3 x double> @"sub@VV"(<3 x double> %output284, <3 x double> %offset285)
  store <3 x double> %output286, <3 x double>* %40
  %turb287 = load i64, i64* %turb
  store i64 %turb287, i64* %41
  %amp288 = load double, double* %amp
  store double %amp288, double* %42
  %rough289 = load double, double* %rough
  store double %rough289, double* %43
  %atten290 = load double, double* %atten
  store double %atten290, double* %44
  %vop_perlinNoiseVV291 = call <3 x double> @"vop_perlinNoiseVV@VVIFFF"(<3 x double>* %40, i64* %41, double* %42, double* %43, double* %44)
  br label %end55

true296:                                          ; preds = %end55
  %pos300 = load <3 x double>, <3 x double>* %pos
  %return301 = call double @"volumesample@FSIV"(i8* %geo294, i64 0, <3 x double> %pos300)
  %radius303 = load double, double* %radius
  %output304 = call double @"div@FF"(double %return301, double %radius303)
  %return305 = call i64 @"neg@II"(i64 1)
  %cast306 = sitofp i64 %return305 to double
  %return307 = call double @"clamp@FFFF"(double %output304, double %cast306, double 1.000000e+00)
  %return308 = call double @"abs@FF"(double %return307)
  %geo309 = load i8*, i8** %geo
  %pos310 = load <3 x double>, <3 x double>* %pos
  %return311 = call <3 x double> @"volumegradient@VSIV"(i8* %geo309, i64 0, <3 x double> %pos310)
  %return312 = call <3 x double> @"normalize@VV"(<3 x double> %return311)
  %return314 = fcmp olt double %return301, 0.000000e+00
  br i1 %return314, label %true316, label %end298

false297:                                         ; preds = %end55
  %distance320 = load double, double* %distance
  %radius321 = load double, double* %radius
  %output322 = call double @"div@FF"(double %distance320, double %radius321)
  %return323 = call i64 @"neg@II"(i64 1)
  %cast324 = sitofp i64 %return323 to double
  %return325 = call double @"clamp@FFFF"(double %output322, double %cast324, double 1.000000e+00)
  %return326 = call double @"abs@FF"(double %return325)
  br label %end298

end298:                                           ; preds = %true296, %true316, %false297
  %r.0 = phi double [ %return308, %true316 ], [ %return308, %true296 ], [ %return326, %false297 ]
  %norm.0 = phi <3 x double> [ %return319, %true316 ], [ %return312, %true296 ], [ %return293, %false297 ]
  %output328 = fmul double 1.500000e+01, %r.0
  %output330 = fmul double 1.000000e+01, %r.0
  %output332 = fmul double %output330, %r.0
  %output334 = fmul double %output332, %r.0
  %output335 = fsub double %output328, %output334
  %output337 = fmul double 3.000000e+00, %r.0
  %output339 = fmul double %output337, %r.0
  %output341 = fmul double %output339, %r.0
  %output343 = fmul double %output341, %r.0
  %output345 = fmul double %output343, %r.0
  %output346 = fadd double %output335, %output345
  %output347 = call double @"div@FF"(double %output346, double 8.000000e+00)
  %cast350 = call <3 x double> @"set@VF"(double %output347)
  %output351 = call <3 x double> @"mul@VV"(<3 x double> %cast350, <3 x double> %noisevec.0)
  %output353 = fsub double 1.000000e+00, %output347
  %return356 = call double @"dot@FVV"(<3 x double> %norm.0, <3 x double> %noisevec.0)
  %output357 = fmul double %output353, %return356
  %cast359 = call <3 x double> @"set@VF"(double %output357)
  %output360 = call <3 x double> @"mul@VV"(<3 x double> %cast359, <3 x double> %norm.0)
  %output361 = call <3 x double> @"add@VV"(<3 x double> %output351, <3 x double> %output360)
  %geo362 = load i8*, i8** %geo
  %return363 = call i64 @"ne@ISS"(i8* %geo362, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0))
  %52 = icmp ne i64 %return363, 0
  br i1 %52, label %true364, label %false365

true316:                                          ; preds = %true296
  %return319 = call <3 x double> @"neg@VV"(<3 x double> %return312)
  br label %end298

true364:                                          ; preds = %end298
  %xDiff368 = load <3 x double>, <3 x double>* %5
  %return369 = call double @"volumesample@FSIV"(i8* %geo362, i64 0, <3 x double> %xDiff368)
  %radius371 = load double, double* %radius
  %output372 = call double @"div@FF"(double %return369, double %radius371)
  %return373 = call i64 @"neg@II"(i64 1)
  %cast374 = sitofp i64 %return373 to double
  %return375 = call double @"clamp@FFFF"(double %output372, double %cast374, double 1.000000e+00)
  %return376 = call double @"abs@FF"(double %return375)
  %geo377 = load i8*, i8** %geo
  %xDiff378 = load <3 x double>, <3 x double>* %5
  %return379 = call <3 x double> @"volumegradient@VSIV"(i8* %geo377, i64 0, <3 x double> %xDiff378)
  %return380 = call <3 x double> @"normalize@VV"(<3 x double> %return379)
  %return382 = fcmp olt double %return369, 0.000000e+00
  br i1 %return382, label %true384, label %end366

false365:                                         ; preds = %end298
  %distance388 = load double, double* %distance
  %radius389 = load double, double* %radius
  %output390 = call double @"div@FF"(double %distance388, double %radius389)
  %return391 = call i64 @"neg@II"(i64 1)
  %cast392 = sitofp i64 %return391 to double
  %return393 = call double @"clamp@FFFF"(double %output390, double %cast392, double 1.000000e+00)
  %return394 = call double @"abs@FF"(double %return393)
  br label %end366

end366:                                           ; preds = %true364, %true384, %false365
  %r.1 = phi double [ %return376, %true384 ], [ %return376, %true364 ], [ %return394, %false365 ]
  %norm.1 = phi <3 x double> [ %return387, %true384 ], [ %return380, %true364 ], [ %norm.0, %false365 ]
  %output396 = fmul double 1.500000e+01, %r.1
  %output398 = fmul double 1.000000e+01, %r.1
  %output400 = fmul double %output398, %r.1
  %output402 = fmul double %output400, %r.1
  %output403 = fsub double %output396, %output402
  %output405 = fmul double 3.000000e+00, %r.1
  %output407 = fmul double %output405, %r.1
  %output409 = fmul double %output407, %r.1
  %output411 = fmul double %output409, %r.1
  %output413 = fmul double %output411, %r.1
  %output414 = fadd double %output403, %output413
  %output415 = call double @"div@FF"(double %output414, double 8.000000e+00)
  %cast418 = call <3 x double> @"set@VF"(double %output415)
  %output419 = call <3 x double> @"mul@VV"(<3 x double> %cast418, <3 x double> %xDiffNoise.0)
  %output421 = fsub double 1.000000e+00, %output415
  %return424 = call double @"dot@FVV"(<3 x double> %norm.1, <3 x double> %xDiffNoise.0)
  %output425 = fmul double %output421, %return424
  %cast427 = call <3 x double> @"set@VF"(double %output425)
  %output428 = call <3 x double> @"mul@VV"(<3 x double> %cast427, <3 x double> %norm.1)
  %output429 = call <3 x double> @"add@VV"(<3 x double> %output419, <3 x double> %output428)
  %geo430 = load i8*, i8** %geo
  %return431 = call i64 @"ne@ISS"(i8* %geo430, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0))
  %53 = icmp ne i64 %return431, 0
  br i1 %53, label %true432, label %false433

true384:                                          ; preds = %true364
  %return387 = call <3 x double> @"neg@VV"(<3 x double> %return380)
  br label %end366

true432:                                          ; preds = %end366
  %return437 = call double @"volumesample@FSIV"(i8* %geo430, i64 0, <3 x double> %output41)
  %radius439 = load double, double* %radius
  %output440 = call double @"div@FF"(double %return437, double %radius439)
  %return441 = call i64 @"neg@II"(i64 1)
  %cast442 = sitofp i64 %return441 to double
  %return443 = call double @"clamp@FFFF"(double %output440, double %cast442, double 1.000000e+00)
  %return444 = call double @"abs@FF"(double %return443)
  %geo445 = load i8*, i8** %geo
  %return447 = call <3 x double> @"volumegradient@VSIV"(i8* %geo445, i64 0, <3 x double> %output41)
  %return448 = call <3 x double> @"normalize@VV"(<3 x double> %return447)
  %return450 = fcmp olt double %return437, 0.000000e+00
  br i1 %return450, label %true452, label %end434

false433:                                         ; preds = %end366
  %distance456 = load double, double* %distance
  %radius457 = load double, double* %radius
  %output458 = call double @"div@FF"(double %distance456, double %radius457)
  %return459 = call i64 @"neg@II"(i64 1)
  %cast460 = sitofp i64 %return459 to double
  %return461 = call double @"clamp@FFFF"(double %output458, double %cast460, double 1.000000e+00)
  %return462 = call double @"abs@FF"(double %return461)
  br label %end434

end434:                                           ; preds = %true432, %true452, %false433
  %r.2 = phi double [ %return444, %true452 ], [ %return444, %true432 ], [ %return462, %false433 ]
  %norm.2 = phi <3 x double> [ %return455, %true452 ], [ %return448, %true432 ], [ %norm.1, %false433 ]
  %output464 = fmul double 1.500000e+01, %r.2
  %output466 = fmul double 1.000000e+01, %r.2
  %output468 = fmul double %output466, %r.2
  %output470 = fmul double %output468, %r.2
  %output471 = fsub double %output464, %output470
  %output473 = fmul double 3.000000e+00, %r.2
  %output475 = fmul double %output473, %r.2
  %output477 = fmul double %output475, %r.2
  %output479 = fmul double %output477, %r.2
  %output481 = fmul double %output479, %r.2
  %output482 = fadd double %output471, %output481
  %output483 = call double @"div@FF"(double %output482, double 8.000000e+00)
  %cast486 = call <3 x double> @"set@VF"(double %output483)
  %output487 = call <3 x double> @"mul@VV"(<3 x double> %cast486, <3 x double> %yDiffNoise.0)
  %output489 = fsub double 1.000000e+00, %output483
  %return492 = call double @"dot@FVV"(<3 x double> %norm.2, <3 x double> %yDiffNoise.0)
  %output493 = fmul double %output489, %return492
  %cast495 = call <3 x double> @"set@VF"(double %output493)
  %output496 = call <3 x double> @"mul@VV"(<3 x double> %cast495, <3 x double> %norm.2)
  %output497 = call <3 x double> @"add@VV"(<3 x double> %output487, <3 x double> %output496)
  %geo498 = load i8*, i8** %geo
  %return499 = call i64 @"ne@ISS"(i8* %geo498, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0))
  %54 = icmp ne i64 %return499, 0
  br i1 %54, label %true500, label %false501

true452:                                          ; preds = %true432
  %return455 = call <3 x double> @"neg@VV"(<3 x double> %return448)
  br label %end434

true500:                                          ; preds = %end434
  %return505 = call double @"volumesample@FSIV"(i8* %geo498, i64 0, <3 x double> %output50)
  %radius507 = load double, double* %radius
  %output508 = call double @"div@FF"(double %return505, double %radius507)
  %return509 = call i64 @"neg@II"(i64 1)
  %cast510 = sitofp i64 %return509 to double
  %return511 = call double @"clamp@FFFF"(double %output508, double %cast510, double 1.000000e+00)
  %return512 = call double @"abs@FF"(double %return511)
  %geo513 = load i8*, i8** %geo
  %return515 = call <3 x double> @"volumegradient@VSIV"(i8* %geo513, i64 0, <3 x double> %output50)
  %return516 = call <3 x double> @"normalize@VV"(<3 x double> %return515)
  %return518 = fcmp olt double %return505, 0.000000e+00
  br i1 %return518, label %true520, label %end502

false501:                                         ; preds = %end434
  %distance524 = load double, double* %distance
  %radius525 = load double, double* %radius
  %output526 = call double @"div@FF"(double %distance524, double %radius525)
  %return527 = call i64 @"neg@II"(i64 1)
  %cast528 = sitofp i64 %return527 to double
  %return529 = call double @"clamp@FFFF"(double %output526, double %cast528, double 1.000000e+00)
  %return530 = call double @"abs@FF"(double %return529)
  br label %end502

end502:                                           ; preds = %true500, %true520, %false501
  %r.3 = phi double [ %return512, %true520 ], [ %return512, %true500 ], [ %return530, %false501 ]
  %norm.3 = phi <3 x double> [ %return523, %true520 ], [ %return516, %true500 ], [ %norm.2, %false501 ]
  %output532 = fmul double 1.500000e+01, %r.3
  %output534 = fmul double 1.000000e+01, %r.3
  %output536 = fmul double %output534, %r.3
  %output538 = fmul double %output536, %r.3
  %output539 = fsub double %output532, %output538
  %output541 = fmul double 3.000000e+00, %r.3
  %output543 = fmul double %output541, %r.3
  %output545 = fmul double %output543, %r.3
  %output547 = fmul double %output545, %r.3
  %output549 = fmul double %output547, %r.3
  %output550 = fadd double %output539, %output549
  %output551 = call double @"div@FF"(double %output550, double 8.000000e+00)
  %cast554 = call <3 x double> @"set@VF"(double %output551)
  %output555 = call <3 x double> @"mul@VV"(<3 x double> %cast554, <3 x double> %zDiffNoise.0)
  %output557 = fsub double 1.000000e+00, %output551
  %return560 = call double @"dot@FVV"(<3 x double> %norm.3, <3 x double> %zDiffNoise.0)
  %output561 = fmul double %output557, %return560
  %cast563 = call <3 x double> @"set@VF"(double %output561)
  %output564 = call <3 x double> @"mul@VV"(<3 x double> %cast563, <3 x double> %norm.3)
  %output565 = call <3 x double> @"add@VV"(<3 x double> %output555, <3 x double> %output564)
  %return567 = call double @"getcomp@FVI"(<3 x double> %output497, i64 2)
  %return569 = call double @"getcomp@FVI"(<3 x double> %output361, i64 2)
  %output570 = fsub double %return567, %return569
  %return572 = call double @"getcomp@FVI"(<3 x double> %output565, i64 1)
  %return574 = call double @"getcomp@FVI"(<3 x double> %output361, i64 1)
  %output575 = fsub double %return572, %return574
  %return577 = call double @"getcomp@FVI"(<3 x double> %output565, i64 0)
  %return579 = call double @"getcomp@FVI"(<3 x double> %output361, i64 0)
  %output580 = fsub double %return577, %return579
  %return582 = call double @"getcomp@FVI"(<3 x double> %output429, i64 2)
  %output585 = fsub double %return582, %return569
  %return587 = call double @"getcomp@FVI"(<3 x double> %output429, i64 1)
  %output590 = fsub double %return587, %return574
  %return592 = call double @"getcomp@FVI"(<3 x double> %output497, i64 0)
  %output595 = fsub double %return592, %return579
  %output598 = fsub double %output570, %output575
  %h599 = load double, double* %h
  %output600 = call double @"div@FF"(double %output598, double %h599)
  %return602 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> zeroinitializer, double %output600, i64 0)
  %output604 = extractvalue { double, <3 x double> } %return602, 1
  %output607 = fsub double %output580, %output585
  %h608 = load double, double* %h
  %output609 = call double @"div@FF"(double %output607, double %h608)
  %return611 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output604, double %output609, i64 1)
  %output613 = extractvalue { double, <3 x double> } %return611, 1
  %output616 = fsub double %output590, %output595
  %h617 = load double, double* %h
  %output618 = call double @"div@FF"(double %output616, double %h617)
  %return620 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output613, double %output618, i64 2)
  %output622 = extractvalue { double, <3 x double> } %return620, 1
  %bounce623 = load i64, i64* %bounce
  %55 = icmp ne i64 %bounce623, 0
  br i1 %55, label %true624, label %end625

true520:                                          ; preds = %true500
  %return523 = call <3 x double> @"neg@VV"(<3 x double> %return516)
  br label %end502

true624:                                          ; preds = %end502
  %geo626 = load i8*, i8** %geo
  %return627 = call i64 @"ne@ISS"(i8* %geo626, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0))
  %56 = icmp ne i64 %return627, 0
  br i1 %56, label %true628, label %false629

end625:                                           ; preds = %true663, %true671, %false629, %true637, %true649, %true628, %end502
  %val.0 = phi <3 x double> [ %output659, %true649 ], [ %output622, %true637 ], [ %output622, %true628 ], [ %output681, %true671 ], [ %output622, %true663 ], [ %output622, %false629 ], [ %output622, %end502 ]
  br label %UnifiedReturnBlock

true628:                                          ; preds = %true624
  %pos632 = load <3 x double>, <3 x double>* %pos
  %return633 = call double @"volumesample@FSIV"(i8* %geo626, i64 0, <3 x double> %pos632)
  %return635 = fcmp olt double %return633, 0.000000e+00
  br i1 %return635, label %true637, label %end625

false629:                                         ; preds = %true624
  %distance660 = load double, double* %distance
  %return661 = fcmp olt double %distance660, 0.000000e+00
  br i1 %return661, label %true663, label %end625

true637:                                          ; preds = %true628
  %return641 = call <3 x double> @"volumegradient@VSIV"(i8* %geo626, i64 0, <3 x double> %pos632)
  %return642 = call <3 x double> @"normalize@VV"(<3 x double> %return641)
  %return645 = call double @"dot@FVV"(<3 x double> %return642, <3 x double> %output622)
  %return647 = fcmp olt double %return645, 0.000000e+00
  br i1 %return647, label %true649, label %end625

true649:                                          ; preds = %true637
  %cast653 = call <3 x double> @"set@VF"(double %return645)
  %output654 = call <3 x double> @"mul@VV"(<3 x double> %cast653, <3 x double> %return642)
  %cast657 = call <3 x double> @"set@VI"(i64 2)
  %output658 = call <3 x double> @"mul@VV"(<3 x double> %cast657, <3 x double> %output654)
  %output659 = call <3 x double> @"sub@VV"(<3 x double> %output622, <3 x double> %output658)
  br label %end625

true663:                                          ; preds = %false629
  %return667 = call double @"dot@FVV"(<3 x double> %norm.3, <3 x double> %output622)
  %return669 = fcmp olt double %return667, 0.000000e+00
  br i1 %return669, label %true671, label %end625

true671:                                          ; preds = %true663
  %nml674 = load <3 x double>, <3 x double>* %nml
  %cast675 = call <3 x double> @"set@VF"(double %return667)
  %output676 = call <3 x double> @"mul@VV"(<3 x double> %cast675, <3 x double> %nml674)
  %cast679 = call <3 x double> @"set@VI"(i64 2)
  %output680 = call <3 x double> @"mul@VV"(<3 x double> %cast679, <3 x double> %output676)
  %output681 = call <3 x double> @"sub@VV"(<3 x double> %output622, <3 x double> %output680)
  br label %end625

UnifiedReturnBlock:                               ; preds = %end625, %true13, %true
  %UnifiedRetVal = phi <3 x double> [ %vop_perlinCurlNoiseVV, %true ], [ %vop_simplexCurlNoiseVV, %true13 ], [ %val.0, %end625 ]
  ret <3 x double> %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare double @"onoise@FVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind readnone
declare double @"snoise@FVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind readnone
declare double @"anoise@FVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #3

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare double @"volumesample@FSIV"(i8*, i64, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #3

; Function Attrs: nounwind
declare double @"abs@FF"(double) #3

; Function Attrs: nounwind readnone
declare <3 x double> @"volumegradient@VSIV"(i8*, i64, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #3

; Function Attrs: nounwind
define void @obj_geo1_solver1_d_s_pointvop1(i64 %ptnum, i64 %vtxnum, i64 %primnum, i64 %id, i64 %numpt, i64 %numvtx, i64 %numprim, double %Time, double %TimeInc, double %Frame, double %life, double %age, i8* %OpInput2, i8* %OpInput3, i8* %OpInput4, i8* %OpInput1, <3 x double> %uv, <3 x double> %P, <3 x double> %v, <3 x double> %force, <3 x double> %Cd, <3 x double> %N) #3 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  %3 = alloca <3 x double>
  %4 = alloca i8*
  %5 = alloca i8*
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca double
  %9 = alloca double
  %10 = alloca double
  %11 = alloca double
  %12 = alloca double
  %13 = alloca double
  store <3 x double> %P, <3 x double>* %0
  store <3 x double> <double 6.000000e-01, double 6.000000e-01, double 6.000000e-01>, <3 x double>* %1
  store <3 x double> zeroinitializer, <3 x double>* %2
  store <3 x double> zeroinitializer, <3 x double>* %3
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), i8** %4
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0), i8** %5
  store i64 3, i64* %6
  store i64 0, i64* %7
  store double 1.000000e-02, double* %8
  store double 5.000000e-01, double* %9
  store double 1.000000e+00, double* %10
  store double 1.000000e+00, double* %11
  store double 1.000000e+00, double* %12
  store double 1.000000e-04, double* %13
  %vop_curlNoiseVV = call <3 x double> @"vop_curlNoiseVV@VVVVVSSIIFFFFFF"(<3 x double>* %0, <3 x double>* %1, <3 x double>* %2, <3 x double>* %3, i8** %4, i8** %5, i64* %6, i64* %7, double* %8, double* %9, double* %10, double* %11, double* %12, double* %13)
  %output = call <3 x double> @"add@VV"(<3 x double> %vop_curlNoiseVV, <3 x double> %P)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), <3 x double> %output) #4
  store <3 x double> %gvalue, <3 x double>* @P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_geo1_solver1_d_s_pointvop1(i64 0, i64 0, i64 0, i64 -1, i64 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0), <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

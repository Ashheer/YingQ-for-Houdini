;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"seed\00"
@1 = private constant [6 x i8] c"scale\00"
@2 = private constant [5 x i8] c"move\00"
@P = external global <3 x double>
@Frame = external global double
@3 = private constant [2 x i8] c"P\00"
@4 = private constant [6 x i8] c"Frame\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VF"(<3 x double>* %_bound_P, double* %_bound_Frame) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  %cast = call <3 x double> @"set@VF"(double %return)
  %output = call <3 x double> @"add@VV"(<3 x double> %_bound_P1, <3 x double> %cast)
  %return3 = call double @"getcomp@FVI"(<3 x double> %output, i64 0)
  %return5 = call double @"getcomp@FVI"(<3 x double> %output, i64 1)
  %return7 = call double @"getcomp@FVI"(<3 x double> %output, i64 2)
  %_bound_Frame8 = load double, double* %_bound_Frame
  %return9 = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0))
  %output10 = fmul double %_bound_Frame8, %return9
  %return11 = call <4 x double> @"set@PFFFF"(double %return3, double %return5, double %return7, double %output10)
  %return13 = call <3 x double> @"curlnoise@VP"(<4 x double> %return11)
  %return14 = call <3 x double> @"normalize@VV"(<3 x double> %return13)
  %_bound_P15 = load <3 x double>, <3 x double>* %_bound_P
  %return17 = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0))
  %cast18 = call <3 x double> @"set@VF"(double %return17)
  %output19 = call <3 x double> @"mul@VV"(<3 x double> %return14, <3 x double> %cast18)
  %output20 = call <3 x double> @"add@VV"(<3 x double> %_bound_P15, <3 x double> %output19)
  store <3 x double> %output20, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PFFFF"(double, double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"curlnoise@VP"(<4 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, double %Frame) #2 {
__llvm_entry:
  %0 = alloca double
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store double %Frame, double* %0
  call void @"__vex_snippet_snippet@VF"(<3 x double>* %"<P>", double* %0)
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), double %Frame) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store double %gvalue3, double* @Frame
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

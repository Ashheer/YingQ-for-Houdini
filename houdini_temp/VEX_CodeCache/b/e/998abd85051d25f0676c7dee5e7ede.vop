;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [17 x i8] c"../interpAttribs\00"
@1 = private constant [1 x i8] zeroinitializer
@2 = private constant [71 x i8] c"One or more of the specified point attributes has an unsupported size.\00"
@3 = private constant [62 x i8] c"2 One or more of the specified point attributes do not exist.\00"
@4 = private constant [73 x i8] c"2 One or more of the specified point attributes has an unsupported type.\00"
@5 = private constant [20 x i8] c"../firstscaleattrib\00"
@6 = private constant [17 x i8] c"../domainuworld1\00"
@7 = private constant [21 x i8] c"../secondscaleattrib\00"
@8 = private constant [17 x i8] c"../domainuworld2\00"
@9 = private constant [16 x i8] c"../firstptgroup\00"
@10 = private constant [33 x i8] c"../curveuv_uvtexture_fee1/uvname\00"
@11 = private constant [2 x i8] c"P\00"
@12 = private constant [26 x i8] c"../outBreakPtsGrp_inside1\00"
@13 = private constant [26 x i8] c"../outBreakPtsGrp_inside2\00"
@14 = private constant [23 x i8] c"../breakPtsGrp_inside1\00"
@15 = private constant [23 x i8] c"../breakPtsGrp_inside2\00"
@16 = private constant [23 x i8] c"../outSourcePt_inside1\00"
@17 = private constant [23 x i8] c"../outSourcePt_inside2\00"
@18 = private constant [20 x i8] c"../sourcePt_inside1\00"
@19 = private constant [20 x i8] c"../sourcePt_inside2\00"
@20 = private constant [12 x i8] c"../splitpts\00"
@21 = private constant [25 x i8] c"../enumerate3/attribname\00"
@22 = private constant [17 x i8] c"../secondptgroup\00"
@23 = private constant [20 x i8] c"../absdomainuworld2\00"
@24 = private constant [18 x i8] c"measuredperimeter\00"
@ptnum = external global i64
@uv = external global double
@outgrp = external global i64
@P = external global <3 x double>
@breakpt2 = external global i64
@breakpt1 = external global i64
@sourcept2 = external global i64
@sourcept1 = external global i64
@25 = private constant [6 x i8] c"ptnum\00"
@26 = private constant [3 x i8] c"uv\00"
@27 = private constant [7 x i8] c"outgrp\00"
@28 = private constant [9 x i8] c"breakpt2\00"
@29 = private constant [9 x i8] c"breakpt1\00"
@30 = private constant [10 x i8] c"sourcept2\00"
@31 = private constant [10 x i8] c"sourcept1\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IFIVIIII"(i64* %_bound_ptnum, double* %_bound_uv, i64* %_bound_outgrp, <3 x double>* %_bound_P, i64* %_bound_breakpt2, i64* %_bound_breakpt1, i64* %_bound_sourcept2, i64* %_bound_sourcept1) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca double
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca double
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64 @"pointvertex@III"(i64 0, i64 %_bound_ptnum1)
  %return3 = call i64 @"vertexprim@III"(i64 0, i64 %return)
  %return5 = call i64 @"primvertexcount@III"(i64 0, i64 %return3)
  %return7 = call i64 @"primpoint@IIII"(i64 0, i64 %return3, i64 0)
  %output = sub i64 %return5, 1
  %return10 = call i64 @"primpoint@IIII"(i64 0, i64 %return3, i64 %output)
  %return12 = call i64 @"vertexprimindex@III"(i64 0, i64 %return)
  %output15 = sub i64 %return12, 1
  %return16 = call i64 @"primpoint@IIII"(i64 0, i64 %return3, i64 %output15)
  %output19 = add i64 %return12, 1
  %return20 = call i64 @"primpoint@IIII"(i64 0, i64 %return3, i64 %output19)
  %return21 = call i8* @"chs@SS"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @5, i64 0, i64 0))
  %return22 = call i64 @"haspointattrib@IIS"(i64 0, i8* %return21)
  %12 = icmp ne i64 %return22, 0
  br i1 %12, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return25 = call double @"point@FISI"(i64 0, i8* %return21, i64 %return7)
  br label %end

false:                                            ; preds = %__llvm_entry
  %return27 = call i64 @"hasprimattrib@IIS"(i64 0, i8* %return21)
  %13 = icmp ne i64 %return27, 0
  br i1 %13, label %true28, label %false29

end:                                              ; preds = %true28, %false29, %true
  %fstcarvedist.0 = phi double [ %return25, %true ], [ %return33, %true28 ], [ %return34, %false29 ]
  %return35 = call i8* @"chs@SS"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @7, i64 0, i64 0))
  %return36 = call i64 @"haspointattrib@IIS"(i64 0, i8* %return35)
  %14 = icmp ne i64 %return36, 0
  br i1 %14, label %true37, label %false38

true28:                                           ; preds = %false
  %return33 = call double @"prim@FISI"(i64 0, i8* %return21, i64 %return3)
  br label %end

false29:                                          ; preds = %false
  %return34 = call double @"chf@FS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @6, i64 0, i64 0))
  br label %end

true37:                                           ; preds = %end
  %return42 = call double @"point@FISI"(i64 0, i8* %return35, i64 %return10)
  br label %end39

false38:                                          ; preds = %end
  %return44 = call i64 @"hasprimattrib@IIS"(i64 0, i8* %return35)
  %15 = icmp ne i64 %return44, 0
  br i1 %15, label %true45, label %false46

end39:                                            ; preds = %true45, %false46, %true37
  %seccarvedist.0 = phi double [ %return42, %true37 ], [ %return50, %true45 ], [ %return51, %false46 ]
  %return52 = call i8* @"chs@SS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @9, i64 0, i64 0))
  %return54 = call i64 @"inpointgroup@IISI"(i64 0, i8* %return52, i64 %return7)
  %_bound_uv55 = load double, double* %_bound_uv
  %return57 = fcmp olt double %_bound_uv55, %fstcarvedist.0
  %return58 = zext i1 %return57 to i64
  %return59 = call i64 @"and@III"(i64 %return54, i64 %return58)
  %16 = icmp ne i64 %return59, 0
  br i1 %16, label %true60, label %false61

true45:                                           ; preds = %false38
  %return50 = call double @"prim@FISI"(i64 0, i8* %return35, i64 %return3)
  br label %end39

false46:                                          ; preds = %false38
  %return51 = call double @"chf@FS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @8, i64 0, i64 0))
  br label %end39

true60:                                           ; preds = %end39
  %return65 = call i64 @"eq@III"(i64 %return12, i64 %return5)
  %17 = icmp ne i64 %return65, 0
  br i1 %17, label %true66, label %end67

false61:                                          ; preds = %end39
  %return142 = call i8* @"chs@SS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @22, i64 0, i64 0))
  %return144 = call i64 @"inpointgroup@IISI"(i64 0, i8* %return142, i64 %return10)
  %return145 = call i64 @"not@II"(i64 %return144)
  %18 = icmp ne i64 %return145, 0
  br i1 %18, label %end62, label %end147

end62:                                            ; preds = %end285, %true287, %false247, %false150, %end210, %true212, %false172, %true149, %true127, %false128, %end110, %false77, %false61
  br label %UnifiedReturnBlock

true66:                                           ; preds = %true60
  store i64 1, i64* %_bound_outgrp
  br label %UnifiedReturnBlock

end67:                                            ; preds = %true60
  %return68 = call i8* @"chs@SS"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @10, i64 0, i64 0))
  %return70 = call <3 x double> @"point@VISI"(i64 0, i8* %return68, i64 %return20)
  %return72 = call double @"getcomp@FVI"(<3 x double> %return70, i64 0)
  %return74 = fcmp ogt double %return72, %fstcarvedist.0
  br i1 %return74, label %true76, label %false77

true76:                                           ; preds = %end67
  %return80 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i64 0, i64 0), i64 %return20)
  %_bound_uv82 = load double, double* %_bound_uv
  %output83 = fsub double %fstcarvedist.0, %_bound_uv82
  %_bound_P85 = load <3 x double>, <3 x double>* %_bound_P
  %output86 = call <3 x double> @"sub@VV"(<3 x double> %return80, <3 x double> %_bound_P85)
  %return88 = call double @"length@FV"(<3 x double> %output86)
  %cast = call <3 x double> @"set@VF"(double %return88)
  %output91 = call <3 x double> @"div@VV"(<3 x double> %output86, <3 x double> %cast)
  %_bound_P92 = load <3 x double>, <3 x double>* %_bound_P
  %cast95 = call <3 x double> @"set@VF"(double %output83)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %cast95, <3 x double> %output91)
  %output97 = call <3 x double> @"add@VV"(<3 x double> %_bound_P92, <3 x double> %output96)
  store <3 x double> %output97, <3 x double>* %_bound_P
  %return98 = call i8* @"chs@SS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @0, i64 0, i64 0))
  %return99 = call i64 @"ne@ISS"(i8* %return98, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0))
  %19 = icmp ne i64 %return99, 0
  br i1 %19, label %true100, label %end101

false77:                                          ; preds = %end67
  store i64 1, i64* %_bound_outgrp
  br label %end62

true100:                                          ; preds = %true76
  %output104 = call double @"div@FF"(double %output83, double %return88)
  store i64 0, i64* %0
  %_bound_ptnum105 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum105, i64* %1
  store i64 %return20, i64* %2
  store double %output104, double* %3
  call void @"interpAttribs@IIIF"(i64* %0, i64* %1, i64* %2, double* %3)
  br label %end101

end101:                                           ; preds = %true100, %true76
  %return108 = call i64 @"chi@IS"(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @12, i64 0, i64 0))
  %20 = icmp ne i64 %return108, 0
  br i1 %20, label %true109, label %end110

true109:                                          ; preds = %end101
  %return111 = call i64 @"chi@IS"(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @13, i64 0, i64 0))
  %return112 = call i8* @"chs@SS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @14, i64 0, i64 0))
  %return113 = call i8* @"chs@SS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @15, i64 0, i64 0))
  %return114 = call i64 @"eq@ISS"(i8* %return112, i8* %return113)
  %return115 = call i64 @"and@III"(i64 %return111, i64 %return114)
  %21 = icmp ne i64 %return115, 0
  br i1 %21, label %true116, label %false117

end110:                                           ; preds = %true116, %false117, %end101
  %return119 = call i64 @"chi@IS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @16, i64 0, i64 0))
  %22 = icmp ne i64 %return119, 0
  br i1 %22, label %true120, label %end62

true116:                                          ; preds = %true109
  store i64 1, i64* %_bound_breakpt2
  br label %end110

false117:                                         ; preds = %true109
  store i64 1, i64* %_bound_breakpt1
  br label %end110

true120:                                          ; preds = %end110
  %return122 = call i64 @"chi@IS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @17, i64 0, i64 0))
  %return123 = call i8* @"chs@SS"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @18, i64 0, i64 0))
  %return124 = call i8* @"chs@SS"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @19, i64 0, i64 0))
  %return125 = call i64 @"eq@ISS"(i8* %return123, i8* %return124)
  %return126 = call i64 @"and@III"(i64 %return122, i64 %return125)
  %23 = icmp ne i64 %return126, 0
  %return130 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @20, i64 0, i64 0))
  %return131 = call i8* @"chs@SS"(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @21, i64 0, i64 0))
  %return133 = call i64 @"point@IISI"(i64 0, i8* %return131, i64 %return7)
  %24 = icmp ne i64 %return130, 0
  %return135 = select i1 %24, i64 %return133, i64 %return7
  br i1 %23, label %true127, label %false128

true127:                                          ; preds = %true120
  store i64 %return135, i64* %_bound_sourcept2
  br label %end62

false128:                                         ; preds = %true120
  store i64 %return135, i64* %_bound_sourcept1
  br label %end62

end147:                                           ; preds = %false61
  %return148 = call i64 @"chi@IS"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @23, i64 0, i64 0))
  %25 = icmp ne i64 %return148, 0
  br i1 %25, label %true149, label %false150

true149:                                          ; preds = %end147
  %_bound_uv152 = load double, double* %_bound_uv
  %return154 = fcmp ogt double %_bound_uv152, %seccarvedist.0
  br i1 %return154, label %true156, label %end62

false150:                                         ; preds = %end147
  %return221 = call double @"primintrinsic@FISI"(i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @24, i64 0, i64 0), i64 %return3)
  %_bound_uv223 = load double, double* %_bound_uv
  %output224 = fsub double %return221, %_bound_uv223
  %return227 = fcmp olt double %output224, %seccarvedist.0
  br i1 %return227, label %true229, label %end62

true156:                                          ; preds = %true149
  %return159 = call i64 @"eq@III"(i64 %return12, i64 0)
  %26 = icmp ne i64 %return159, 0
  br i1 %26, label %true160, label %end161

true160:                                          ; preds = %true156
  store i64 1, i64* %_bound_outgrp
  br label %UnifiedReturnBlock

end161:                                           ; preds = %true156
  %return163 = call i8* @"chs@SS"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @10, i64 0, i64 0))
  %return165 = call <3 x double> @"point@VISI"(i64 0, i8* %return163, i64 %return16)
  %return167 = call double @"getcomp@FVI"(<3 x double> %return165, i64 0)
  %return169 = fcmp olt double %return167, %seccarvedist.0
  br i1 %return169, label %true171, label %false172

true171:                                          ; preds = %end161
  %return176 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i64 0, i64 0), i64 %return16)
  %_bound_uv178 = load double, double* %_bound_uv
  %output180 = fsub double %_bound_uv178, %seccarvedist.0
  %_bound_P183 = load <3 x double>, <3 x double>* %_bound_P
  %output184 = call <3 x double> @"sub@VV"(<3 x double> %return176, <3 x double> %_bound_P183)
  %return187 = call double @"length@FV"(<3 x double> %output184)
  %cast190 = call <3 x double> @"set@VF"(double %return187)
  %output191 = call <3 x double> @"div@VV"(<3 x double> %output184, <3 x double> %cast190)
  %_bound_P192 = load <3 x double>, <3 x double>* %_bound_P
  %cast195 = call <3 x double> @"set@VF"(double %output180)
  %output196 = call <3 x double> @"mul@VV"(<3 x double> %cast195, <3 x double> %output191)
  %output197 = call <3 x double> @"add@VV"(<3 x double> %_bound_P192, <3 x double> %output196)
  store <3 x double> %output197, <3 x double>* %_bound_P
  %return198 = call i8* @"chs@SS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @0, i64 0, i64 0))
  %return199 = call i64 @"ne@ISS"(i8* %return198, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0))
  %27 = icmp ne i64 %return199, 0
  br i1 %27, label %true200, label %end201

false172:                                         ; preds = %end161
  store i64 1, i64* %_bound_outgrp
  br label %end62

true200:                                          ; preds = %true171
  %output204 = call double @"div@FF"(double %output180, double %return187)
  store i64 0, i64* %4
  %_bound_ptnum205 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum205, i64* %5
  store i64 %return16, i64* %6
  store double %output204, double* %7
  call void @"interpAttribs@IIIF"(i64* %4, i64* %5, i64* %6, double* %7)
  br label %end201

end201:                                           ; preds = %true200, %true171
  %return208 = call i64 @"chi@IS"(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @13, i64 0, i64 0))
  %28 = icmp ne i64 %return208, 0
  br i1 %28, label %true209, label %end210

true209:                                          ; preds = %end201
  store i64 1, i64* %_bound_breakpt2
  br label %end210

end210:                                           ; preds = %true209, %end201
  %return211 = call i64 @"chi@IS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @17, i64 0, i64 0))
  %29 = icmp ne i64 %return211, 0
  br i1 %29, label %true212, label %end62

true212:                                          ; preds = %end210
  %return214 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @20, i64 0, i64 0))
  %return215 = call i8* @"chs@SS"(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @21, i64 0, i64 0))
  %return217 = call i64 @"point@IISI"(i64 0, i8* %return215, i64 %return10)
  %30 = icmp ne i64 %return214, 0
  %return219 = select i1 %30, i64 %return217, i64 %return10
  store i64 %return219, i64* %_bound_sourcept2
  br label %end62

true229:                                          ; preds = %false150
  %return232 = call i64 @"eq@III"(i64 %return12, i64 0)
  %31 = icmp ne i64 %return232, 0
  br i1 %31, label %true233, label %end234

true233:                                          ; preds = %true229
  store i64 1, i64* %_bound_outgrp
  br label %UnifiedReturnBlock

end234:                                           ; preds = %true229
  %return236 = call i8* @"chs@SS"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @10, i64 0, i64 0))
  %return238 = call <3 x double> @"point@VISI"(i64 0, i8* %return236, i64 %return16)
  %return241 = call double @"getcomp@FVI"(<3 x double> %return238, i64 0)
  %output242 = fsub double %return221, %return241
  %return244 = fcmp ogt double %output242, %seccarvedist.0
  br i1 %return244, label %true246, label %false247

true246:                                          ; preds = %end234
  %return251 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i64 0, i64 0), i64 %return16)
  %output255 = fsub double %seccarvedist.0, %output224
  %_bound_P258 = load <3 x double>, <3 x double>* %_bound_P
  %output259 = call <3 x double> @"sub@VV"(<3 x double> %return251, <3 x double> %_bound_P258)
  %return262 = call double @"length@FV"(<3 x double> %output259)
  %cast265 = call <3 x double> @"set@VF"(double %return262)
  %output266 = call <3 x double> @"div@VV"(<3 x double> %output259, <3 x double> %cast265)
  %_bound_P267 = load <3 x double>, <3 x double>* %_bound_P
  %cast270 = call <3 x double> @"set@VF"(double %output255)
  %output271 = call <3 x double> @"mul@VV"(<3 x double> %cast270, <3 x double> %output266)
  %output272 = call <3 x double> @"add@VV"(<3 x double> %_bound_P267, <3 x double> %output271)
  store <3 x double> %output272, <3 x double>* %_bound_P
  %return273 = call i8* @"chs@SS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @0, i64 0, i64 0))
  %return274 = call i64 @"ne@ISS"(i8* %return273, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0))
  %32 = icmp ne i64 %return274, 0
  br i1 %32, label %true275, label %end276

false247:                                         ; preds = %end234
  store i64 1, i64* %_bound_outgrp
  br label %end62

true275:                                          ; preds = %true246
  %output279 = call double @"div@FF"(double %output255, double %return262)
  store i64 0, i64* %8
  %_bound_ptnum280 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum280, i64* %9
  store i64 %return16, i64* %10
  store double %output279, double* %11
  call void @"interpAttribs@IIIF"(i64* %8, i64* %9, i64* %10, double* %11)
  br label %end276

end276:                                           ; preds = %true275, %true246
  %return283 = call i64 @"chi@IS"(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @13, i64 0, i64 0))
  %33 = icmp ne i64 %return283, 0
  br i1 %33, label %true284, label %end285

true284:                                          ; preds = %end276
  store i64 1, i64* %_bound_breakpt2
  br label %end285

end285:                                           ; preds = %true284, %end276
  %return286 = call i64 @"chi@IS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @17, i64 0, i64 0))
  %34 = icmp ne i64 %return286, 0
  br i1 %34, label %true287, label %end62

true287:                                          ; preds = %end285
  %return289 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @20, i64 0, i64 0))
  %return290 = call i8* @"chs@SS"(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @21, i64 0, i64 0))
  %return292 = call i64 @"point@IISI"(i64 0, i8* %return290, i64 %return10)
  %35 = icmp ne i64 %return289, 0
  %return294 = select i1 %35, i64 %return292, i64 %return10
  store i64 %return294, i64* %_bound_sourcept2
  br label %end62

UnifiedReturnBlock:                               ; preds = %true233, %true160, %true66, %end62
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"interpAttribs@IIIF"(i64* %geo, i64* %ptnum0, i64* %ptnum1, double* %ratio) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @0, i64 0, i64 0))
  %return1 = call i8** @"split@[SS"(i8* %return)
  %return3 = call i64 @"len@I[S"(i8** %return1)
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %__impl_foreach_index_6.0 = phi i64 [ 0, %__llvm_entry ], [ %output164, %iter ]
  %return6 = call i64 @"lt@III"(i64 %__impl_foreach_index_6.0, i64 %return3)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return9 = call i8* @"getcomp@S[SI"(i8** %return1, i64 %__impl_foreach_index_6.0)
  %geo10 = load i64, i64* %geo
  %return12 = call i64 @"pointattribtype@IIS"(i64 %geo10, i8* %return9)
  %return14 = call i64 @"eq@III"(i64 %return12, i64 0)
  %1 = icmp ne i64 %return14, 0
  br i1 %1, label %true, label %false

end:                                              ; preds = %cond
  ret void

iter:                                             ; preds = %true160, %false161, %true93, %true135, %true69, %true45, %true, %false136
  %output164 = add i64 %__impl_foreach_index_6.0, 1
  br label %cond

true:                                             ; preds = %body
  %geo16 = load i64, i64* %geo
  %ptnum018 = load i64, i64* %ptnum0
  %return19 = call i64 @"point@IISI"(i64 %geo16, i8* %return9, i64 %ptnum018)
  %geo20 = load i64, i64* %geo
  %ptnum122 = load i64, i64* %ptnum1
  %return23 = call i64 @"point@IISI"(i64 %geo20, i8* %return9, i64 %ptnum122)
  %cast = sitofp i64 %return19 to double
  %cast26 = sitofp i64 %return23 to double
  %ratio27 = load double, double* %ratio
  %return28 = call double @"lerp@FFFF"(double %cast, double %cast26, double %ratio27)
  %cast29 = fptosi double %return28 to i64
  %geo30 = load i64, i64* %geo
  %ptnum032 = load i64, i64* %ptnum0
  %return34 = call i64 @"setpointattrib@IISII"(i64 %geo30, i8* %return9, i64 %ptnum032, i64 %cast29)
  br label %iter

false:                                            ; preds = %body
  %return36 = call i64 @"eq@III"(i64 %return12, i64 1)
  %2 = icmp ne i64 %return36, 0
  br i1 %2, label %true37, label %false38

true37:                                           ; preds = %false
  %geo40 = load i64, i64* %geo
  %return42 = call i64 @"pointattribsize@IIS"(i64 %geo40, i8* %return9)
  %return44 = call i64 @"eq@III"(i64 %return42, i64 1)
  %3 = icmp ne i64 %return44, 0
  br i1 %3, label %true45, label %false46

false38:                                          ; preds = %false
  %return158 = call i64 @"neg@II"(i64 1)
  %return159 = call i64 @"eq@III"(i64 %return12, i64 %return158)
  %4 = icmp ne i64 %return159, 0
  br i1 %4, label %true160, label %false161

true45:                                           ; preds = %true37
  %geo49 = load i64, i64* %geo
  %ptnum051 = load i64, i64* %ptnum0
  %return52 = call double @"point@FISI"(i64 %geo49, i8* %return9, i64 %ptnum051)
  %geo54 = load i64, i64* %geo
  %ptnum156 = load i64, i64* %ptnum1
  %return57 = call double @"point@FISI"(i64 %geo54, i8* %return9, i64 %ptnum156)
  %ratio60 = load double, double* %ratio
  %return61 = call double @"lerp@FFFF"(double %return52, double %return57, double %ratio60)
  %geo62 = load i64, i64* %geo
  %ptnum064 = load i64, i64* %ptnum0
  %return66 = call i64 @"setpointattrib@IISIF"(i64 %geo62, i8* %return9, i64 %ptnum064, double %return61)
  br label %iter

false46:                                          ; preds = %true37
  %return68 = call i64 @"eq@III"(i64 %return42, i64 2)
  %5 = icmp ne i64 %return68, 0
  br i1 %5, label %true69, label %false70

true69:                                           ; preds = %false46
  %geo73 = load i64, i64* %geo
  %ptnum075 = load i64, i64* %ptnum0
  %return76 = call <2 x double> @"point@UISI"(i64 %geo73, i8* %return9, i64 %ptnum075)
  %geo78 = load i64, i64* %geo
  %ptnum180 = load i64, i64* %ptnum1
  %return81 = call <2 x double> @"point@UISI"(i64 %geo78, i8* %return9, i64 %ptnum180)
  %ratio84 = load double, double* %ratio
  %return85 = call <2 x double> @"lerp@UUUF"(<2 x double> %return76, <2 x double> %return81, double %ratio84)
  %geo86 = load i64, i64* %geo
  %ptnum088 = load i64, i64* %ptnum0
  %return90 = call i64 @"setpointattrib@IISIU"(i64 %geo86, i8* %return9, i64 %ptnum088, <2 x double> %return85)
  br label %iter

false70:                                          ; preds = %false46
  %return92 = call i64 @"eq@III"(i64 %return42, i64 3)
  %6 = icmp ne i64 %return92, 0
  br i1 %6, label %true93, label %false94

true93:                                           ; preds = %false70
  %geo97 = load i64, i64* %geo
  %ptnum099 = load i64, i64* %ptnum0
  %return100 = call <3 x double> @"point@VISI"(i64 %geo97, i8* %return9, i64 %ptnum099)
  %geo102 = load i64, i64* %geo
  %ptnum1104 = load i64, i64* %ptnum1
  %return105 = call <3 x double> @"point@VISI"(i64 %geo102, i8* %return9, i64 %ptnum1104)
  %return107 = call double @"length2@FV"(<3 x double> %return100)
  %return109 = call double @"length2@FV"(<3 x double> %return105)
  %ratio112 = load double, double* %ratio
  %return113 = call double @"lerp@FFFF"(double %return107, double %return109, double %ratio112)
  %return114 = call double @"sqrt@FF"(double %return113)
  %return117 = call <4 x double> @"dihedral@PVV"(<3 x double> %return100, <3 x double> %return105)
  %ratio119 = load double, double* %ratio
  %return120 = call <4 x double> @"slerp@PPPF"(<4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>, <4 x double> %return117, double %ratio119)
  %return123 = call <3 x double> @"qrotate@VPV"(<4 x double> %return120, <3 x double> %return100)
  %return125 = call <3 x double> @"normalize@VV"(<3 x double> %return123)
  %cast127 = call <3 x double> @"set@VF"(double %return114)
  %output = call <3 x double> @"mul@VV"(<3 x double> %return125, <3 x double> %cast127)
  %geo128 = load i64, i64* %geo
  %ptnum0130 = load i64, i64* %ptnum0
  %return132 = call i64 @"setpointattrib@IISIV"(i64 %geo128, i8* %return9, i64 %ptnum0130, <3 x double> %output)
  br label %iter

false94:                                          ; preds = %false70
  %return134 = call i64 @"eq@III"(i64 %return42, i64 4)
  %7 = icmp ne i64 %return134, 0
  br i1 %7, label %true135, label %false136

true135:                                          ; preds = %false94
  %geo139 = load i64, i64* %geo
  %ptnum0141 = load i64, i64* %ptnum0
  %return142 = call <4 x double> @"point@PISI"(i64 %geo139, i8* %return9, i64 %ptnum0141)
  %geo144 = load i64, i64* %geo
  %ptnum1146 = load i64, i64* %ptnum1
  %return147 = call <4 x double> @"point@PISI"(i64 %geo144, i8* %return9, i64 %ptnum1146)
  %ratio150 = load double, double* %ratio
  %return151 = call <4 x double> @"lerp@PPPF"(<4 x double> %return142, <4 x double> %return147, double %ratio150)
  %geo152 = load i64, i64* %geo
  %ptnum0154 = load i64, i64* %ptnum0
  %return156 = call i64 @"setpointattrib@IISIP"(i64 %geo152, i8* %return9, i64 %ptnum0154, <4 x double> %return151)
  br label %iter

false136:                                         ; preds = %false94
  call void @"warning@S"(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @2, i64 0, i64 0))
  br label %iter

true160:                                          ; preds = %false38
  call void @"warning@S"(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @3, i64 0, i64 0))
  br label %iter

false161:                                         ; preds = %false38
  call void @"warning@S"(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @4, i64 0, i64 0))
  br label %iter
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8** @"split@[SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #1

; Function Attrs: nounwind
declare i64 @"pointattribtype@IIS"(i64, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare double @"lerp@FFFF"(double, double, double) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISII"(i64, i8*, i64, i64) #2

; Function Attrs: nounwind
declare i64 @"pointattribsize@IIS"(i64, i8*) #2

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIF"(i64, i8*, i64, double) #2

; Function Attrs: nounwind
declare <2 x double> @"point@UISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare <2 x double> @"lerp@UUUF"(<2 x double>, <2 x double>, double) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIU"(i64, i8*, i64, <2 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare double @"length2@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"dihedral@PVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"slerp@PPPF"(<4 x double>, <4 x double>, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"qrotate@VPV"(<4 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIV"(i64, i8*, i64, <3 x double>) #2

; Function Attrs: nounwind
declare <4 x double> @"point@PISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare <4 x double> @"lerp@PPPF"(<4 x double>, <4 x double>, double) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIP"(i64, i8*, i64, <4 x double>) #2

; Function Attrs: nounwind
declare void @"warning@S"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind
declare i64 @"pointvertex@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"vertexprim@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"primvertexcount@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"primpoint@IIII"(i64, i64, i64) #2

; Function Attrs: nounwind
declare i64 @"vertexprimindex@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"haspointattrib@IIS"(i64, i8*) #2

; Function Attrs: nounwind
declare i64 @"hasprimattrib@IIS"(i64, i8*) #2

; Function Attrs: nounwind
declare double @"prim@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"inpointgroup@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind
declare double @"primintrinsic@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, double %uv, i64 %outgrp, <3 x double> %P, i64 %breakpt2, i64 %breakpt1, i64 %sourcept2, i64 %sourcept1) #2 {
__llvm_entry:
  %"<outgrp>" = alloca i64
  %"<P>" = alloca <3 x double>
  %"<breakpt2>" = alloca i64
  %"<breakpt1>" = alloca i64
  %"<sourcept2>" = alloca i64
  %"<sourcept1>" = alloca i64
  %0 = alloca i64
  %1 = alloca double
  store i64 %outgrp, i64* %"<outgrp>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %breakpt2, i64* %"<breakpt2>"
  store i64 %breakpt1, i64* %"<breakpt1>"
  store i64 %sourcept2, i64* %"<sourcept2>"
  store i64 %sourcept1, i64* %"<sourcept1>"
  store i64 %ptnum, i64* %0
  store double %uv, double* %1
  call void @"__vex_snippet_snippet@IFIVIIII"(i64* %0, double* %1, i64* %"<outgrp>", <3 x double>* %"<P>", i64* %"<breakpt2>", i64* %"<breakpt1>", i64* %"<sourcept2>", i64* %"<sourcept1>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @25, i64 0, i64 0), i64 %ptnum) #3
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @26, i64 0, i64 0), double %uv) #3
  %evalue5 = load i64, i64* %"<outgrp>"
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @27, i64 0, i64 0), i64 %evalue5) #3
  %evalue7 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i64 0, i64 0), <3 x double> %evalue7) #3
  %evalue9 = load i64, i64* %"<breakpt2>"
  %gvalue10 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @28, i64 0, i64 0), i64 %evalue9) #3
  %evalue11 = load i64, i64* %"<breakpt1>"
  %gvalue12 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @29, i64 0, i64 0), i64 %evalue11) #3
  %evalue13 = load i64, i64* %"<sourcept2>"
  %gvalue14 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @30, i64 0, i64 0), i64 %evalue13) #3
  %evalue15 = load i64, i64* %"<sourcept1>"
  %gvalue16 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @31, i64 0, i64 0), i64 %evalue15) #3
  store i64 %gvalue, i64* @ptnum
  store double %gvalue4, double* @uv
  store i64 %gvalue6, i64* @outgrp
  store <3 x double> %gvalue8, <3 x double>* @P
  store i64 %gvalue10, i64* @breakpt2
  store i64 %gvalue12, i64* @breakpt1
  store i64 %gvalue14, i64* @sourcept2
  store i64 %gvalue16, i64* @sourcept1
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, double 0.000000e+00, i64 0, <3 x double> zeroinitializer, i64 0, i64 0, i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [13 x i8] c"../attribute\00"
@2 = private constant [0 x i64] zeroinitializer
@3 = private constant [8 x i8] c"../name\00"
@ptnum = external global i64
@4 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_ptnum) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0))
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return2 = call i64* @"neighbours@[III"(i64 0, i64 %_bound_ptnum1)
  %return4 = call i64 @"len@I[I"(i64* %return2)
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %__impl_foreach_index_1.0 = phi i64 [ 0, %__llvm_entry ], [ %output72, %iter ]
  %return7 = call i64 @"lt@III"(i64 %__impl_foreach_index_1.0, i64 %return4)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return10 = call i64 @"getcomp@I[II"(i64* %return2, i64 %__impl_foreach_index_1.0)
  %_bound_ptnum11 = load i64, i64* %_bound_ptnum
  %return13 = call i64 @"lt@III"(i64 %_bound_ptnum11, i64 %return10)
  %1 = icmp ne i64 %return13, 0
  br i1 %1, label %iter, label %end14

end:                                              ; preds = %cond
  ret void

iter:                                             ; preds = %end24, %true65, %body
  %output72 = add i64 %__impl_foreach_index_1.0, 1
  br label %cond

end14:                                            ; preds = %body
  %return17 = call i64 @"pointhedge@IIII"(i64 0, i64 %_bound_ptnum11, i64 %return10)
  br label %body20

body20:                                           ; preds = %end52, %end14
  %prs.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @2, i64 0, i64 0), %end14 ], [ %prs.1, %end52 ]
  %hedge.0 = phi i64 [ %return17, %end14 ], [ %return62, %end52 ]
  %attribval.0 = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), %end14 ], [ %attribval.1, %end52 ]
  %return27 = call i64 @"hedge_prim@III"(i64 0, i64 %hedge.0)
  %return29 = call i64 @"neg@II"(i64 1)
  %return30 = call i64 @"ne@III"(i64 %return27, i64 %return29)
  %return33 = call i64 @"find@I[II"(i64* %prs.0, i64 %return27)
  %return34 = call i64 @"lt@III"(i64 %return33, i64 0)
  %return35 = call i64 @"and@III"(i64 %return30, i64 %return34)
  %2 = icmp ne i64 %return35, 0
  br i1 %2, label %true36, label %end37

end24:                                            ; preds = %true59, %end52
  %samevalues.0 = phi i64 [ 0, %true59 ], [ 1, %end52 ]
  %return64 = call i64 @"not@II"(i64 %samevalues.0)
  %3 = icmp ne i64 %return64, 0
  br i1 %3, label %true65, label %iter

true36:                                           ; preds = %body20
  %output = call i64* @"append@[II"(i64* %prs.0, i64 %return27)
  br label %end37

end37:                                            ; preds = %true36, %body20
  %prs.1 = phi i64* [ %output, %true36 ], [ %prs.0, %body20 ]
  %return41 = call i64 @"len@I[I"(i64* %prs.1)
  %return43 = call i64 @"eq@III"(i64 %return41, i64 1)
  %4 = icmp ne i64 %return43, 0
  br i1 %4, label %true44, label %end45

true44:                                           ; preds = %end37
  %return48 = call i8* @"prim@SISI"(i64 0, i8* %return, i64 %return27)
  br label %end45

end45:                                            ; preds = %true44, %end37
  %attribval.1 = phi i8* [ %return48, %true44 ], [ %attribval.0, %end37 ]
  %return50 = call i64 @"gt@III"(i64 %return41, i64 1)
  %5 = icmp ne i64 %return50, 0
  br i1 %5, label %true51, label %end52

true51:                                           ; preds = %end45
  %return55 = call i8* @"prim@SISI"(i64 0, i8* %return, i64 %return27)
  %return58 = call i64 @"ne@ISS"(i8* %attribval.1, i8* %return55)
  %6 = icmp ne i64 %return58, 0
  br i1 %6, label %true59, label %end52

end52:                                            ; preds = %true51, %end45
  %return62 = call i64 @"hedge_nextequiv@III"(i64 0, i64 %hedge.0)
  %return23 = call i64 @"ne@III"(i64 %return62, i64 %return17)
  %7 = icmp ne i64 %return23, 0
  br i1 %7, label %body20, label %end24

true59:                                           ; preds = %true51
  br label %end24

true65:                                           ; preds = %end24
  %return67 = call i8* @"chs@SS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0))
  %_bound_ptnum68 = load i64, i64* %_bound_ptnum
  %return70 = call i64 @"setedgegroup@IISIII"(i64 0, i8* %return67, i64 %_bound_ptnum68, i64 %return10, i64 1)
  br label %iter
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64 @"pointhedge@IIII"(i64, i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"hedge_prim@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind
declare i64 @"find@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare i8* @"prim@SISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i64 @"hedge_nextequiv@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind
declare i64 @"setedgegroup@IISIII"(i64, i8*, i64, i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum) #2 {
__llvm_entry:
  %0 = alloca i64
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #3
  store i64 %gvalue, i64* @ptnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

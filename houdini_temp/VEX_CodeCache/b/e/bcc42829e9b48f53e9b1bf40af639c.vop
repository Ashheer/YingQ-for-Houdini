;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x double] zeroinitializer
@1 = private constant [1 x i8] zeroinitializer
@2 = private constant [4 x i8] c"op:\00"
@3 = private constant [9 x i8] c"cut_area\00"
@soppath = external global i8*
@cut_areas = external global double*
@4 = private constant [8 x i8] c"soppath\00"
@5 = private constant [10 x i8] c"cut_areas\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@S[F"(i8** %_bound_soppath, double** %_bound_cut_areas) #0 {
__llvm_entry:
  %_bound_soppath1 = load i8*, i8** %_bound_soppath
  %return = call i8* @"opfullpath@SS"(i8* %_bound_soppath1)
  %return3 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i64 0, i64 0), i8* %return)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output13, %body ]
  %cut_areas.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @0, i64 0, i64 0), %__llvm_entry ], [ %output, %body ]
  %return5 = call i64 @"lt@III"(i64 %i.0, i64 6)
  %0 = icmp ne i64 %return5, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return9 = call double @"prim@FSSI"(i8* %return3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0), i64 %i.0)
  %return10 = call { double, double* } @"setcomp@F[FFI"(double* %cut_areas.0, double %return9, i64 %i.0)
  %output = extractvalue { double, double* } %return10, 1
  %output13 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  br label %cond15

cond15:                                           ; preds = %body16, %end
  %i14.0 = phi i64 [ 0, %end ], [ %output35, %body16 ]
  %cut_areas.1 = phi double* [ %cut_areas.0, %end ], [ %output33, %body16 ]
  %return19 = call i64 @"len@I[F"(double* %cut_areas.1)
  %return20 = call i64 @"lt@III"(i64 %i14.0, i64 %return19)
  %1 = icmp ne i64 %return20, 0
  br i1 %1, label %body16, label %end21

body16:                                           ; preds = %cond15
  %return26 = call double @"getcomp@F[FI"(double* %cut_areas.1, i64 %i14.0)
  %output27 = fmul double %return26, 1.000000e+04
  %return28 = call double @"rint@FF"(double %output27)
  %output29 = call double @"div@FF"(double %return28, double 1.000000e+04)
  %return31 = call { double, double* } @"setcomp@F[FFI"(double* %cut_areas.1, double %output29, i64 %i14.0)
  %output33 = extractvalue { double, double* } %return31, 1
  %output35 = add i64 %i14.0, 1
  br label %cond15

end21:                                            ; preds = %cond15
  store double* %cut_areas.1, double** %_bound_cut_areas
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"opfullpath@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"prim@FSSI"(i8*, i8*, i64) #1

; Function Attrs: nounwind readnone
declare { double, double* } @"setcomp@F[FFI"(double*, double, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[F"(double*) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #1

; Function Attrs: nounwind readnone
declare double @"rint@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %soppath, double* %cut_areas) #2 {
__llvm_entry:
  %"<cut_areas>" = alloca double*
  %0 = alloca i8*
  store double* %cut_areas, double** %"<cut_areas>"
  store i8* %soppath, i8** %0
  call void @"__vex_snippet_snippet@S[F"(i8** %0, double** %"<cut_areas>")
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), i8* %soppath) #3
  %evalue2 = load double*, double** %"<cut_areas>"
  %gvalue3 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i64 0, i64 0), double* %evalue2) #3
  store i8* %gvalue, i8** @soppath
  store double* %gvalue3, double** @cut_areas
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @0, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

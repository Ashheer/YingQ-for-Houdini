;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [5 x i8] c"poly\00"
@2 = private constant [2 x i8] c"P\00"
@3 = private constant [4 x i8] c"%d\0A\00"

; Function Attrs: alwaysinline nounwind
define private void @__vex_snippet_snippet() #0 {
__llvm_entry:
  %return = call i64 @"npoints@II"(i64 1)
  %return1 = call i64 @"addprim@IIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0))
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output14, %body ]
  %pt_array.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %__llvm_entry ], [ %output, %body ]
  %return4 = call i64 @"lt@III"(i64 %i.0, i64 %return)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return6 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), i64 %i.0)
  %return8 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return6)
  %output = call i64* @"append@[II"(i64* %pt_array.0, i64 %i.0)
  %return12 = call i64 @"addvertex@IIII"(i64 0, i64 0, i64 %i.0)
  %output14 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  call void @"printf@S:[I"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i64 0, i64 0), i64* %pt_array.0)
  ret void
}

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #1

; Function Attrs: nounwind
declare i64 @"addprim@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64 @"addvertex@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
declare void @"printf@S:[I"(i8*, i64*) #1

; Function Attrs: nounwind
define void @__vex_snippet() #1 {
__llvm_entry:
  call void @__vex_snippet_snippet()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

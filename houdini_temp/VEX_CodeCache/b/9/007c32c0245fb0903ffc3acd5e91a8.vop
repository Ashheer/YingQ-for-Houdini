;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [21 x i8] c"staircaseOffsetDepth\00"
@1 = private constant [21 x i8] c"staircaseOffsetWidth\00"
@P = external global <3 x double>
@N = external global <3 x double>
@up = external global <3 x double>
@cross = external global <3 x double>
@2 = private constant [2 x i8] c"P\00"
@3 = private constant [2 x i8] c"N\00"
@4 = private constant [3 x i8] c"up\00"
@5 = private constant [6 x i8] c"cross\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVVV"(<3 x double>* %_bound_P, <3 x double>* %_bound_N, <3 x double>* %_bound_up, <3 x double>* %_bound_cross) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %_bound_N2 = load <3 x double>, <3 x double>* %_bound_N
  %return = call <3 x double> @"normalize@VV"(<3 x double> %_bound_N2)
  %return3 = call double @"chf@FS"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @0, i64 0, i64 0))
  %cast = call <3 x double> @"set@VF"(double %return3)
  %output = call <3 x double> @"mul@VV"(<3 x double> %return, <3 x double> %cast)
  %output4 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P1, <3 x double> %output)
  store <3 x double> %output4, <3 x double>* %_bound_P
  store <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>, <3 x double>* %_bound_up
  %_bound_N5 = load <3 x double>, <3 x double>* %_bound_N
  %return6 = call <3 x double> @"normalize@VV"(<3 x double> %_bound_N5)
  %_bound_up7 = load <3 x double>, <3 x double>* %_bound_up
  %return8 = call <3 x double> @"cross@VVV"(<3 x double> %return6, <3 x double> %_bound_up7)
  store <3 x double> %return8, <3 x double>* %_bound_cross
  %_bound_P9 = load <3 x double>, <3 x double>* %_bound_P
  %return11 = call <3 x double> @"normalize@VV"(<3 x double> %return8)
  %return12 = call double @"chf@FS"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @1, i64 0, i64 0))
  %cast13 = call <3 x double> @"set@VF"(double %return12)
  %output14 = call <3 x double> @"mul@VV"(<3 x double> %return11, <3 x double> %cast13)
  %output15 = call <3 x double> @"add@VV"(<3 x double> %_bound_P9, <3 x double> %output14)
  store <3 x double> %output15, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, <3 x double> %N, <3 x double> %up, <3 x double> %cross) #1 {
__llvm_entry:
  %"<up>" = alloca <3 x double>
  %"<cross>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %up, <3 x double>* %"<up>"
  store <3 x double> %cross, <3 x double>* %"<cross>"
  store <3 x double> %N, <3 x double>* %0
  call void @"__vex_snippet_snippet@VVVV"(<3 x double>* %"<P>", <3 x double>* %0, <3 x double>* %"<up>", <3 x double>* %"<cross>")
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %N) #3
  %evalue4 = load <3 x double>, <3 x double>* %"<up>"
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), <3 x double> %evalue4) #3
  %evalue6 = load <3 x double>, <3 x double>* %"<cross>"
  %gvalue7 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i64 0, i64 0), <3 x double> %evalue6) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store <3 x double> %gvalue3, <3 x double>* @N
  store <3 x double> %gvalue5, <3 x double>* @up
  store <3 x double> %gvalue7, <3 x double>* @cross
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [13 x i8] c"../halfscale\00"
@1 = private constant [16 x i8] c"../scalebyturns\00"
@2 = private constant [9 x i8] c"../scale\00"
@3 = private constant [13 x i8] c"../normalize\00"
@N = external global <3 x double>
@4 = private constant [2 x i8] c"N\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@V"(<3 x double>* %_bound_N) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_N1 = load <3 x double>, <3 x double>* %_bound_N
  %cast = call <3 x double> @"set@VI"(i64 2)
  %output = call <3 x double> @"div@VV"(<3 x double> %_bound_N1, <3 x double> %cast)
  store <3 x double> %output, <3 x double>* %_bound_N
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1, i64 0, i64 0))
  %1 = icmp ne i64 %return2, 0
  br i1 %1, label %true3, label %false

true3:                                            ; preds = %end
  %_bound_N5 = load <3 x double>, <3 x double>* %_bound_N
  %return6 = call double @"length@FV"(<3 x double> %_bound_N5)
  %_bound_N11 = load <3 x double>, <3 x double>* %_bound_N
  %return12 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0))
  br i1 %0, label %true8, label %false9

false:                                            ; preds = %end
  %return28 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @3, i64 0, i64 0))
  %2 = icmp ne i64 %return28, 0
  br i1 %2, label %true29, label %end4

end4:                                             ; preds = %false, %true29, %true8, %false9
  ret void

true8:                                            ; preds = %true3
  %output14 = call double @"div@FF"(double %return12, double %return6)
  %output16 = call double @"div@FF"(double %output14, double %return6)
  %cast17 = call <3 x double> @"set@VF"(double %output16)
  %output18 = call <3 x double> @"mul@VV"(<3 x double> %_bound_N11, <3 x double> %cast17)
  store <3 x double> %output18, <3 x double>* %_bound_N
  br label %end4

false9:                                           ; preds = %true3
  %output21 = fmul double 4.000000e+00, %return12
  %output23 = call double @"div@FF"(double %output21, double %return6)
  %output25 = call double @"div@FF"(double %output23, double %return6)
  %cast26 = call <3 x double> @"set@VF"(double %output25)
  %output27 = call <3 x double> @"mul@VV"(<3 x double> %_bound_N11, <3 x double> %cast26)
  store <3 x double> %output27, <3 x double>* %_bound_N
  br label %end4

true29:                                           ; preds = %false
  %_bound_N31 = load <3 x double>, <3 x double>* %_bound_N
  %return32 = call <3 x double> @"normalize@VV"(<3 x double> %_bound_N31)
  %return33 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0))
  %cast34 = call <3 x double> @"set@VF"(double %return33)
  %output35 = call <3 x double> @"mul@VV"(<3 x double> %return32, <3 x double> %cast34)
  store <3 x double> %output35, <3 x double>* %_bound_N
  br label %end4
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %N) #2 {
__llvm_entry:
  %"<N>" = alloca <3 x double>
  store <3 x double> %N, <3 x double>* %"<N>"
  call void @"__vex_snippet_snippet@V"(<3 x double>* %"<N>")
  %evalue = load <3 x double>, <3 x double>* %"<N>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), <3 x double> %evalue) #3
  store <3 x double> %gvalue, <3 x double>* @N
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

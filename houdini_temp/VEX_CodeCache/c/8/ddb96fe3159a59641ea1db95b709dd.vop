;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [9 x i8] c"max_dist\00"
@2 = private constant [5 x i8] c"ramp\00"
@3 = private constant [7 x i8] c"height\00"
@4 = private constant [5 x i8] c"poly\00"
@P = external global <3 x double>
@primnum = external global i64
@5 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VI"(<3 x double>* %_bound_P, i64* %_bound_primnum) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call i64 @"nearpoint@IIV"(i64 1, <3 x double> %_bound_P1)
  %return3 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return)
  %_bound_P4 = load <3 x double>, <3 x double>* %_bound_P
  %return6 = call double @"distance@FVV"(<3 x double> %_bound_P4, <3 x double> %return3)
  %return7 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0))
  %return10 = call double @"min@FFF"(double %return6, double %return7)
  %return13 = call double @"fit@FFFFFF"(double %return10, double 0.000000e+00, double %return7, double 0.000000e+00, double 1.000000e+00)
  %return15 = call double @"chramp@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), double %return13)
  %return17 = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0))
  %output = fmul double %return15, %return17
  %return18 = call <16 x double> @"ident@4"()
  %return21 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double %output, double 0.000000e+00)
  %output22 = call <16 x double> @"translate@4V"(<16 x double> %return18, <3 x double> %return21)
  %_bound_primnum23 = load i64, i64* %_bound_primnum
  %return24 = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum23)
  %return25 = call i64* @"array@[I"()
  %return26 = call i64 @"addprim@IIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0))
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output49, %body ]
  %npts.0 = phi i64* [ %return25, %__llvm_entry ], [ %output43, %body ]
  %return29 = call i64 @"len@I[I"(i64* %return24)
  %return30 = call i64 @"lt@III"(i64 %i.0, i64 %return29)
  %0 = icmp ne i64 %return30, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return33 = call i64 @"getcomp@I[II"(i64* %return24, i64 %i.0)
  %return35 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return33)
  %output38 = call <3 x double> @"mul@V4"(<3 x double> %return35, <16 x double> %output22)
  %return40 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %output38)
  %output43 = call i64* @"push@[II"(i64* %npts.0, i64 %return40)
  %return46 = call i64 @"addvertex@IIII"(i64 0, i64 %return26, i64 %return40)
  %output49 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  br label %cond51

cond51:                                           ; preds = %body52, %end
  %pt.0 = phi i64 [ 0, %end ], [ %output64, %body52 ]
  %return55 = call i64 @"len@I[I"(i64* %npts.0)
  %return56 = call i64 @"lt@III"(i64 %pt.0, i64 %return55)
  %1 = icmp ne i64 %return56, 0
  br i1 %1, label %body52, label %end57

body52:                                           ; preds = %cond51
  %return61 = call i64 @"getcomp@I[II"(i64* %return24, i64 %pt.0)
  %output64 = add i64 %pt.0, 1
  %return67 = call i64 @"mod@III"(i64 %output64, i64 %return29)
  %return68 = call i64 @"getcomp@I[II"(i64* %return24, i64 %return67)
  %return74 = call i64 @"mod@III"(i64 %output64, i64 %return55)
  %return75 = call i64 @"getcomp@I[II"(i64* %npts.0, i64 %return74)
  %return78 = call i64 @"getcomp@I[II"(i64* %npts.0, i64 %pt.0)
  %return83 = call i64 @"addprim@IISIIII"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0), i64 %return61, i64 %return68, i64 %return75, i64 %return78)
  br label %cond51

end57:                                            ; preds = %cond51
  ret void
}

; Function Attrs: nounwind
declare i64 @"nearpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind readnone
declare double @"min@FFF"(double, double) #2

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"chramp@FSF"(i8*, double) #2

; Function Attrs: nounwind
declare <16 x double> @"ident@4"() #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"translate@4V"(<16 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64* @"array@[I"() #2

; Function Attrs: nounwind
declare i64 @"addprim@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"mul@V4"(<3 x double>, <16 x double>) #1

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64* @"push@[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"addvertex@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"addprim@IISIIII"(i64, i8*, i64, i64, i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, i64 %primnum) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca i64
  store <3 x double> %P, <3 x double>* %0
  store i64 %primnum, i64* %1
  call void @"__vex_snippet_snippet@VI"(<3 x double>* %0, i64* %1)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %P) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @5, i64 0, i64 0), i64 %primnum) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store i64 %gvalue4, i64* @primnum
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

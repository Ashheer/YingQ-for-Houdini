;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [7 x i8] c"groups\00"
@1 = private constant [2 x i8] c" \00"
@2 = private constant [4 x i8] c"set\00"
@elemnum = external global i64
@3 = private constant [8 x i8] c"elemnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_elemnum) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0))
  %return2 = call i8** @"split@[SSS"(i8* %return, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0))
  %return4 = call i64 @"len@I[S"(i8** %return2)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %__impl_foreach_index_1.0 = phi i64 [ 0, %__llvm_entry ], [ %output19, %body ]
  %return7 = call i64 @"lt@III"(i64 %__impl_foreach_index_1.0, i64 %return4)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return10 = call i8* @"getcomp@S[SI"(i8** %return2, i64 %__impl_foreach_index_1.0)
  %_bound_elemnum12 = load i64, i64* %_bound_elemnum
  %return13 = call i64 @"inpointgroup@IISI"(i64 0, i8* %return10, i64 %_bound_elemnum12)
  %_bound_elemnum15 = load i64, i64* %_bound_elemnum
  %output = sub i64 1, %return13
  %return17 = call i64 @"setpointgroup@IISIIS"(i64 0, i8* %return10, i64 %_bound_elemnum15, i64 %output, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i64 0, i64 0))
  %output19 = add i64 %__impl_foreach_index_1.0, 1
  br label %cond

end:                                              ; preds = %cond
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8** @"split@[SSS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #1

; Function Attrs: nounwind
declare i64 @"inpointgroup@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"setpointgroup@IISIIS"(i64, i8*, i64, i64, i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %elemnum) #2 {
__llvm_entry:
  %0 = alloca i64
  store i64 %elemnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i64 %elemnum) #3
  store i64 %gvalue, i64* @elemnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	/obj/grid1/pointsfromvolume1/create_jittered_points
; ModuleID = 'obj_grid1_pointsfromvolume1_create_jittered_points'
source_filename = "obj_grid1_pointsfromvolume1_create_jittered_points"

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [8 x i8] c"surface\00"
@density = external global double
@2 = private constant [8 x i8] c"density\00"

; Function Attrs: alwaysinline nounwind
define private i64 @"skipbounds@IVVVISFF"(<3 x double>* %bbmin, <3 x double>* %bbmax, <3 x double>* %jitter, i64* %vol, i8** %volname, double* %miniso, double* %maxiso) #0 {
__llvm_entry:
  %bbmax1 = load <3 x double>, <3 x double>* %bbmax
  %bbmin2 = load <3 x double>, <3 x double>* %bbmin
  %output = call <3 x double> @"sub@VV"(<3 x double> %bbmax1, <3 x double> %bbmin2)
  %cast = call <3 x double> @"set@VI"(i64 2)
  %output5 = call <3 x double> @"div@VV"(<3 x double> %output, <3 x double> %cast)
  %output6 = call <3 x double> @"add@VV"(<3 x double> %bbmin2, <3 x double> %output5)
  %return = call double @"length@FV"(<3 x double> %output)
  %output8 = call double @"div@FF"(double %return, double 2.000000e+00)
  %jitter10 = load <3 x double>, <3 x double>* %jitter
  %return11 = call double @"max@FV"(<3 x double> %jitter10)
  %output12 = fadd double %output8, %return11
  %vol13 = load i64, i64* %vol
  %volname14 = load i8*, i8** %volname
  %return16 = call double @"volumesample@FISV"(i64 %vol13, i8* %volname14, <3 x double> %output6)
  %maxiso19 = load double, double* %maxiso
  %output20 = fadd double %output12, %maxiso19
  %return21 = fcmp ogt double %return16, %output20
  %return22 = zext i1 %return21 to i64
  %return25 = call double @"neg@FF"(double %output12)
  %miniso26 = load double, double* %miniso
  %output27 = fadd double %return25, %miniso26
  %return28 = fcmp olt double %return16, %output27
  %return29 = zext i1 %return28 to i64
  %return30 = call i64 @"or@III"(i64 %return22, i64 %return29)
  ret i64 %return30
}

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
declare double @"max@FV"(<3 x double>) #2

; Function Attrs: nounwind
declare double @"volumesample@FISV"(i64, i8*, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"pointjitter@VVV"(<3 x double>* %p, <3 x double>* %jitter) #0 {
__llvm_entry:
  %p1 = load <3 x double>, <3 x double>* %p
  %return = call <3 x double> @"rand@VV"(<3 x double> %p1)
  %jitter2 = load <3 x double>, <3 x double>* %jitter
  %return3 = call <3 x double> @"neg@VV"(<3 x double> %jitter2)
  %return5 = call <3 x double> @"fit01@VVVV"(<3 x double> %return, <3 x double> %return3, <3 x double> %jitter2)
  ret <3 x double> %return5
}

; Function Attrs: nounwind
declare <3 x double> @"rand@VV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"fit01@VVVV"(<3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: alwaysinline nounwind
define private i64 @"jitteredlattice@IIVVVVFVFISFFIVFF"(i64* %geo, <3 x double>* %psep, <3 x double>* %bbmin, <3 x double>* %bbmax, <3 x double>* %jitter, double* %jitterseed, <3 x double>* %offset, double* %reject, i64* %vol, i8** %volname, double* %miniso, double* %maxiso, i64* %dodither, <3 x double>* %dithernormal, double* %ditherangle, double* %dithersep) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %psep1 = load <3 x double>, <3 x double>* %psep
  %cast = call <3 x double> @"set@VF"(double 1.000000e-03)
  %output = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %psep1)
  %bbmin2 = load <3 x double>, <3 x double>* %bbmin
  %offset3 = load <3 x double>, <3 x double>* %offset
  %output4 = call <3 x double> @"sub@VV"(<3 x double> %bbmin2, <3 x double> %offset3)
  %output6 = call <3 x double> @"add@VV"(<3 x double> %output4, <3 x double> %output)
  %output8 = call <3 x double> @"div@VV"(<3 x double> %output6, <3 x double> %psep1)
  %return = call <3 x double> @"ceil@VV"(<3 x double> %output8)
  %bbmax9 = load <3 x double>, <3 x double>* %bbmax
  %output11 = call <3 x double> @"sub@VV"(<3 x double> %bbmax9, <3 x double> %offset3)
  %output13 = call <3 x double> @"add@VV"(<3 x double> %output11, <3 x double> %output)
  %output15 = call <3 x double> @"div@VV"(<3 x double> %output13, <3 x double> %psep1)
  %return16 = call <3 x double> @"floor@VV"(<3 x double> %output15)
  %jitter17 = load <3 x double>, <3 x double>* %jitter
  %return18 = call double @"length@FV"(<3 x double> %jitter17)
  %return19 = fcmp ogt double %return18, 0.000000e+00
  %reject21 = load double, double* %reject
  %return22 = fcmp ogt double %reject21, 0.000000e+00
  %return23 = zext i1 %return22 to i64
  %jitterseed24 = load double, double* %jitterseed
  %output26 = fadd double %jitterseed24, 1.230000e+02
  %output27 = fmul double %output26, 0x3FEA20BD700C2C3E
  %output29 = fadd double %jitterseed24, 4.570000e+02
  %output30 = fmul double %output29, 0x3FFA20BD700C2C3D
  %return31 = call <3 x double> @"set@VFFF"(double %jitterseed24, double %output27, double %output30)
  %return33 = call double @"getcomp@FVI"(<3 x double> %return, i64 0)
  %cast34 = fptosi double %return33 to i64
  br label %cond

cond:                                             ; preds = %end53, %__llvm_entry
  %i.0 = phi i64 [ %cast34, %__llvm_entry ], [ %output236, %end53 ]
  %npts.0 = phi i64 [ 0, %__llvm_entry ], [ %npts.1, %end53 ]
  %return37 = call double @"getcomp@FVI"(<3 x double> %return16, i64 0)
  %cast38 = sitofp i64 %i.0 to double
  %return39 = fcmp ole double %cast38, %return37
  br i1 %return39, label %body, label %end41

body:                                             ; preds = %cond
  %return43 = call double @"getcomp@FVI"(<3 x double> %return, i64 1)
  %cast44 = fptosi double %return43 to i64
  br label %cond45

end41:                                            ; preds = %cond
  ret i64 %npts.0

cond45:                                           ; preds = %end66, %body
  %j.0 = phi i64 [ %cast44, %body ], [ %output233, %end66 ]
  %npts.1 = phi i64 [ %npts.0, %body ], [ %npts.2, %end66 ]
  %return49 = call double @"getcomp@FVI"(<3 x double> %return16, i64 1)
  %cast50 = sitofp i64 %j.0 to double
  %return51 = fcmp ole double %cast50, %return49
  br i1 %return51, label %body46, label %end53

body46:                                           ; preds = %cond45
  %return56 = call double @"getcomp@FVI"(<3 x double> %return, i64 2)
  %cast57 = fptosi double %return56 to i64
  br label %cond58

end53:                                            ; preds = %cond45
  %output236 = add i64 %i.0, 1
  br label %cond

cond58:                                           ; preds = %iter67, %body46
  %k.0 = phi i64 [ %cast57, %body46 ], [ %output230, %iter67 ]
  %npts.2 = phi i64 [ %npts.1, %body46 ], [ %npts.3, %iter67 ]
  %return62 = call double @"getcomp@FVI"(<3 x double> %return16, i64 2)
  %cast63 = sitofp i64 %k.0 to double
  %return64 = fcmp ole double %cast63, %return62
  br i1 %return64, label %body59, label %end66

body59:                                           ; preds = %cond58
  %return74 = call <3 x double> @"set@VFFF"(double %cast38, double %cast50, double %cast63)
  %cast78 = call <3 x double> @"set@VF"(double 0x3FFBB67AE8584CAA)
  %output79 = call <3 x double> @"mul@VV"(<3 x double> %return31, <3 x double> %cast78)
  %output80 = call <3 x double> @"add@VV"(<3 x double> %return74, <3 x double> %output79)
  %return81 = call double @"rand@FV"(<3 x double> %output80)
  %reject82 = load double, double* %reject
  %return83 = fcmp olt double %return81, %reject82
  %return84 = zext i1 %return83 to i64
  %return85 = call i64 @"and@III"(i64 %return23, i64 %return84)
  %2 = icmp ne i64 %return85, 0
  br i1 %2, label %iter67, label %end86

end66:                                            ; preds = %cond58
  %output233 = add i64 %j.0, 1
  br label %cond45

iter67:                                           ; preds = %false, %true220, %end123, %true203, %body59
  %npts.3 = phi i64 [ %npts.2, %body59 ], [ %output210, %true203 ], [ %npts.2, %end123 ], [ %output227, %true220 ], [ %npts.2, %false ]
  %output230 = add i64 %k.0, 1
  br label %cond58

end86:                                            ; preds = %body59
  %psep87 = load <3 x double>, <3 x double>* %psep
  %output89 = call <3 x double> @"mul@VV"(<3 x double> %psep87, <3 x double> %return74)
  %offset90 = load <3 x double>, <3 x double>* %offset
  %output91 = call <3 x double> @"add@VV"(<3 x double> %output89, <3 x double> %offset90)
  br i1 %return19, label %true93, label %end94

true93:                                           ; preds = %end86
  %output98 = call <3 x double> @"add@VV"(<3 x double> %return74, <3 x double> %return31)
  store <3 x double> %output98, <3 x double>* %0
  %jitter99 = load <3 x double>, <3 x double>* %jitter
  store <3 x double> %jitter99, <3 x double>* %1
  %pointjitter = call <3 x double> @"pointjitter@VVV"(<3 x double>* %0, <3 x double>* %1)
  %output100 = call <3 x double> @"add@VV"(<3 x double> %output91, <3 x double> %pointjitter)
  br label %end94

end94:                                            ; preds = %true93, %end86
  %samplepos.0 = phi <3 x double> [ %output100, %true93 ], [ %output91, %end86 ]
  %vol101 = load i64, i64* %vol
  %volname102 = load i8*, i8** %volname
  %return104 = call double @"volumesample@FISV"(i64 %vol101, i8* %volname102, <3 x double> %samplepos.0)
  %dodither105 = load i64, i64* %dodither
  %3 = icmp ne i64 %dodither105, 0
  br i1 %3, label %true106, label %false

true106:                                          ; preds = %end94
  %maxiso109 = load double, double* %maxiso
  %dithersep110 = load double, double* %dithersep
  %output111 = fsub double %maxiso109, %dithersep110
  %return112 = fcmp ole double %return104, %output111
  %return113 = zext i1 %return112 to i64
  %miniso115 = load double, double* %miniso
  %output117 = fadd double %miniso115, %dithersep110
  %return118 = fcmp oge double %return104, %output117
  %return119 = zext i1 %return118 to i64
  %return120 = call i64 @"and@III"(i64 %return113, i64 %return119)
  %4 = icmp ne i64 %return120, 0
  br i1 %4, label %true121, label %false122

false:                                            ; preds = %end94
  %maxiso212 = load double, double* %maxiso
  %return213 = fcmp ole double %return104, %maxiso212
  %return214 = zext i1 %return213 to i64
  %miniso216 = load double, double* %miniso
  %return217 = fcmp oge double %return104, %miniso216
  %return218 = zext i1 %return217 to i64
  %return219 = call i64 @"and@III"(i64 %return214, i64 %return218)
  %5 = icmp ne i64 %return219, 0
  br i1 %5, label %true220, label %iter67

true121:                                          ; preds = %true106
  br label %end123

false122:                                         ; preds = %true106
  %output127 = fadd double %maxiso109, %dithersep110
  %return128 = fcmp ole double %return104, %output127
  %return129 = zext i1 %return128 to i64
  %output133 = fsub double %miniso115, %dithersep110
  %return134 = fcmp oge double %return104, %output133
  %return135 = zext i1 %return134 to i64
  %return136 = call i64 @"and@III"(i64 %return129, i64 %return135)
  %6 = icmp ne i64 %return136, 0
  br i1 %6, label %true137, label %end123

end123:                                           ; preds = %false163, %true200, %true162, %true189, %false122, %true121
  %keep.0 = phi i64 [ 1, %true121 ], [ 1, %true189 ], [ 0, %true162 ], [ 1, %true200 ], [ 0, %false163 ], [ 0, %false122 ]
  %7 = icmp ne i64 %keep.0, 0
  br i1 %7, label %true203, label %iter67

true137:                                          ; preds = %false122
  %ditherangle140 = load double, double* %ditherangle
  %return141 = call i64 @"neg@II"(i64 1)
  %cast142 = sitofp i64 %return141 to double
  %return143 = fcmp ogt double %ditherangle140, %cast142
  br i1 %return143, label %true145, label %end146

true145:                                          ; preds = %true137
  %vol147 = load i64, i64* %vol
  %volname148 = load i8*, i8** %volname
  %return150 = call <3 x double> @"volumegradient@VISV"(i64 %vol147, i8* %volname148, <3 x double> %samplepos.0)
  %return152 = call <3 x double> @"normalize@VV"(<3 x double> %return150)
  %dithernormal154 = load <3 x double>, <3 x double>* %dithernormal
  %return155 = call double @"dot@FVV"(<3 x double> %return152, <3 x double> %dithernormal154)
  %ditherangle156 = load double, double* %ditherangle
  %return157 = fcmp oge double %return155, %ditherangle156
  br i1 %return157, label %true159, label %end146

end146:                                           ; preds = %true145, %true159, %true137
  %shoulddither.0 = phi i64 [ 1, %true159 ], [ 0, %true145 ], [ 1, %true137 ]
  %8 = icmp ne i64 %shoulddither.0, 0
  br i1 %8, label %true162, label %false163

true159:                                          ; preds = %true145
  br label %end146

true162:                                          ; preds = %end146
  %maxiso166 = load double, double* %maxiso
  %dithersep167 = load double, double* %dithersep
  %output168 = fsub double %maxiso166, %dithersep167
  %output169 = fsub double %return104, %output168
  %miniso170 = load double, double* %miniso
  %output172 = fadd double %miniso170, %dithersep167
  %output174 = fsub double %output172, %return104
  %return175 = call double @"max@FFF"(double %output169, double %output174)
  %output178 = fmul double %dithersep167, 2.000000e+00
  %output179 = call double @"div@FF"(double %return175, double %output178)
  %output181 = fsub double 1.000000e+00, %output179
  %output184 = call <3 x double> @"add@VV"(<3 x double> %return31, <3 x double> %samplepos.0)
  %return185 = call double @"rand@FV"(<3 x double> %output184)
  %return187 = fcmp olt double %return185, %output181
  br i1 %return187, label %true189, label %end123

false163:                                         ; preds = %end146
  %maxiso192 = load double, double* %maxiso
  %return193 = fcmp ole double %return104, %maxiso192
  %return194 = zext i1 %return193 to i64
  %miniso196 = load double, double* %miniso
  %return197 = fcmp oge double %return104, %miniso196
  %return198 = zext i1 %return197 to i64
  %return199 = call i64 @"and@III"(i64 %return194, i64 %return198)
  %9 = icmp ne i64 %return199, 0
  br i1 %9, label %true200, label %end123

true189:                                          ; preds = %true162
  br label %end123

true200:                                          ; preds = %false163
  br label %end123

true203:                                          ; preds = %end123
  %geo205 = load i64, i64* %geo
  %return207 = call i64 @"addpoint@IIV"(i64 %geo205, <3 x double> %samplepos.0)
  %output210 = add i64 %npts.2, 1
  br label %iter67

true220:                                          ; preds = %false
  %geo222 = load i64, i64* %geo
  %return224 = call i64 @"addpoint@IIV"(i64 %geo222, <3 x double> %samplepos.0)
  %output227 = add i64 %npts.2, 1
  br label %iter67
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"ceil@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"floor@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
declare double @"rand@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind
declare <3 x double> @"volumegradient@VISV"(i64, i8*, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #1

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #2

; Function Attrs: alwaysinline nounwind
define private i64 @"simplecubicpts@IIVVVVFVFISFFIVFF"(i64* %geo, <3 x double>* %psep, <3 x double>* %bbmin, <3 x double>* %bbmax, <3 x double>* %jitter, double* %jitterseed, <3 x double>* %offset, double* %reject, i64* %vol, i8** %volname, double* %miniso, double* %maxiso, i64* %dodither, <3 x double>* %dithernormal, double* %ditherangle, double* %dithersep) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca i64
  %3 = alloca i8*
  %4 = alloca double
  %5 = alloca double
  %6 = alloca i64
  %7 = alloca <3 x double>
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca <3 x double>
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca double
  %14 = alloca i64
  %15 = alloca i8*
  %16 = alloca double
  %17 = alloca double
  %18 = alloca i64
  %19 = alloca <3 x double>
  %20 = alloca double
  %21 = alloca double
  %22 = alloca <3 x double>
  %bbmin1 = load <3 x double>, <3 x double>* %bbmin
  store <3 x double> %bbmin1, <3 x double>* %22
  %bbmax2 = load <3 x double>, <3 x double>* %bbmax
  store <3 x double> %bbmax2, <3 x double>* %0
  %jitter3 = load <3 x double>, <3 x double>* %jitter
  store <3 x double> %jitter3, <3 x double>* %1
  %vol4 = load i64, i64* %vol
  store i64 %vol4, i64* %2
  %volname5 = load i8*, i8** %volname
  store i8* %volname5, i8** %3
  %miniso6 = load double, double* %miniso
  store double %miniso6, double* %4
  %maxiso7 = load double, double* %maxiso
  store double %maxiso7, double* %5
  %skipbounds = call i64 @"skipbounds@IVVVISFF"(<3 x double>* %22, <3 x double>* %0, <3 x double>* %1, i64* %2, i8** %3, double* %4, double* %5)
  %23 = icmp ne i64 %skipbounds, 0
  br i1 %23, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %geo8 = load i64, i64* %geo
  store i64 %geo8, i64* %6
  %psep9 = load <3 x double>, <3 x double>* %psep
  store <3 x double> %psep9, <3 x double>* %7
  %bbmin10 = load <3 x double>, <3 x double>* %bbmin
  store <3 x double> %bbmin10, <3 x double>* %8
  %bbmax11 = load <3 x double>, <3 x double>* %bbmax
  store <3 x double> %bbmax11, <3 x double>* %9
  %jitter12 = load <3 x double>, <3 x double>* %jitter
  store <3 x double> %jitter12, <3 x double>* %10
  %jitterseed13 = load double, double* %jitterseed
  store double %jitterseed13, double* %11
  %offset14 = load <3 x double>, <3 x double>* %offset
  store <3 x double> %offset14, <3 x double>* %12
  %reject15 = load double, double* %reject
  store double %reject15, double* %13
  %vol16 = load i64, i64* %vol
  store i64 %vol16, i64* %14
  %volname17 = load i8*, i8** %volname
  store i8* %volname17, i8** %15
  %miniso18 = load double, double* %miniso
  store double %miniso18, double* %16
  %maxiso19 = load double, double* %maxiso
  store double %maxiso19, double* %17
  %dodither20 = load i64, i64* %dodither
  store i64 %dodither20, i64* %18
  %dithernormal21 = load <3 x double>, <3 x double>* %dithernormal
  store <3 x double> %dithernormal21, <3 x double>* %19
  %ditherangle22 = load double, double* %ditherangle
  store double %ditherangle22, double* %20
  %dithersep23 = load double, double* %dithersep
  store double %dithersep23, double* %21
  %jitteredlattice = call i64 @"jitteredlattice@IIVVVVFVFISFFIVFF"(i64* %6, <3 x double>* %7, <3 x double>* %8, <3 x double>* %9, <3 x double>* %10, double* %11, <3 x double>* %12, double* %13, i64* %14, i8** %15, double* %16, double* %17, i64* %18, <3 x double>* %19, double* %20, double* %21)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end, %true
  %UnifiedRetVal = phi i64 [ 0, %true ], [ %jitteredlattice, %end ]
  ret i64 %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private i64 @"tetrahedralpts@IIVVVVFVFISFFIVFF"(i64* %geo, <3 x double>* %psep, <3 x double>* %bbmin, <3 x double>* %bbmax, <3 x double>* %jitter, double* %jitterseed, <3 x double>* %offset, double* %reject, i64* %vol, i8** %volname, double* %miniso, double* %maxiso, i64* %dodither, <3 x double>* %dithernormal, double* %ditherangle, double* %dithersep) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca i64
  %3 = alloca i8*
  %4 = alloca double
  %5 = alloca double
  %6 = alloca i64
  %7 = alloca <3 x double>
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca <3 x double>
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca double
  %14 = alloca i64
  %15 = alloca i8*
  %16 = alloca double
  %17 = alloca double
  %18 = alloca i64
  %19 = alloca <3 x double>
  %20 = alloca double
  %21 = alloca double
  %22 = alloca i64
  %23 = alloca <3 x double>
  %24 = alloca <3 x double>
  %25 = alloca <3 x double>
  %26 = alloca <3 x double>
  %27 = alloca double
  %28 = alloca <3 x double>
  %29 = alloca double
  %30 = alloca i64
  %31 = alloca i8*
  %32 = alloca double
  %33 = alloca double
  %34 = alloca i64
  %35 = alloca <3 x double>
  %36 = alloca double
  %37 = alloca double
  %38 = alloca i64
  %39 = alloca <3 x double>
  %40 = alloca <3 x double>
  %41 = alloca <3 x double>
  %42 = alloca <3 x double>
  %43 = alloca double
  %44 = alloca <3 x double>
  %45 = alloca double
  %46 = alloca i64
  %47 = alloca i8*
  %48 = alloca double
  %49 = alloca double
  %50 = alloca i64
  %51 = alloca <3 x double>
  %52 = alloca double
  %53 = alloca double
  %54 = alloca i64
  %55 = alloca <3 x double>
  %56 = alloca <3 x double>
  %57 = alloca <3 x double>
  %58 = alloca <3 x double>
  %59 = alloca double
  %60 = alloca <3 x double>
  %61 = alloca double
  %62 = alloca i64
  %63 = alloca i8*
  %64 = alloca double
  %65 = alloca double
  %66 = alloca i64
  %67 = alloca <3 x double>
  %68 = alloca double
  %69 = alloca double
  %70 = alloca <3 x double>
  %bbmin1 = load <3 x double>, <3 x double>* %bbmin
  store <3 x double> %bbmin1, <3 x double>* %70
  %bbmax2 = load <3 x double>, <3 x double>* %bbmax
  store <3 x double> %bbmax2, <3 x double>* %0
  %jitter3 = load <3 x double>, <3 x double>* %jitter
  store <3 x double> %jitter3, <3 x double>* %1
  %vol4 = load i64, i64* %vol
  store i64 %vol4, i64* %2
  %volname5 = load i8*, i8** %volname
  store i8* %volname5, i8** %3
  %miniso6 = load double, double* %miniso
  store double %miniso6, double* %4
  %maxiso7 = load double, double* %maxiso
  store double %maxiso7, double* %5
  %skipbounds = call i64 @"skipbounds@IVVVISFF"(<3 x double>* %70, <3 x double>* %0, <3 x double>* %1, i64* %2, i8** %3, double* %4, double* %5)
  %71 = icmp ne i64 %skipbounds, 0
  br i1 %71, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %offset8 = load <3 x double>, <3 x double>* %offset
  %psep9 = load <3 x double>, <3 x double>* %psep
  %output = call <3 x double> @"mul@VV"(<3 x double> %psep9, <3 x double> <double 1.000000e+00, double 0x3FFA20BD700C2C3D, double 0x3FFBB67AE8584CAA>)
  %geo11 = load i64, i64* %geo
  store i64 %geo11, i64* %6
  store <3 x double> %output, <3 x double>* %7
  %bbmin13 = load <3 x double>, <3 x double>* %bbmin
  store <3 x double> %bbmin13, <3 x double>* %8
  %bbmax14 = load <3 x double>, <3 x double>* %bbmax
  store <3 x double> %bbmax14, <3 x double>* %9
  %jitter15 = load <3 x double>, <3 x double>* %jitter
  store <3 x double> %jitter15, <3 x double>* %10
  %jitterseed16 = load double, double* %jitterseed
  store double %jitterseed16, double* %11
  store <3 x double> %offset8, <3 x double>* %12
  %reject18 = load double, double* %reject
  store double %reject18, double* %13
  %vol19 = load i64, i64* %vol
  store i64 %vol19, i64* %14
  %volname20 = load i8*, i8** %volname
  store i8* %volname20, i8** %15
  %miniso21 = load double, double* %miniso
  store double %miniso21, double* %16
  %maxiso22 = load double, double* %maxiso
  store double %maxiso22, double* %17
  %dodither23 = load i64, i64* %dodither
  store i64 %dodither23, i64* %18
  %dithernormal24 = load <3 x double>, <3 x double>* %dithernormal
  store <3 x double> %dithernormal24, <3 x double>* %19
  %ditherangle25 = load double, double* %ditherangle
  store double %ditherangle25, double* %20
  %dithersep26 = load double, double* %dithersep
  store double %dithersep26, double* %21
  %jitteredlattice = call i64 @"jitteredlattice@IIVVVVFVFISFFIVFF"(i64* %6, <3 x double>* %7, <3 x double>* %8, <3 x double>* %9, <3 x double>* %10, double* %11, <3 x double>* %12, double* %13, i64* %14, i8** %15, double* %16, double* %17, i64* %18, <3 x double>* %19, double* %20, double* %21)
  %psep29 = load <3 x double>, <3 x double>* %psep
  %cast = call <3 x double> @"set@VI"(i64 2)
  %output30 = call <3 x double> @"div@VV"(<3 x double> %psep29, <3 x double> %cast)
  %output31 = call <3 x double> @"mul@VV"(<3 x double> %output30, <3 x double> <double 1.000000e+00, double 0.000000e+00, double 0x3FFBB67AE8584CAA>)
  %output32 = call <3 x double> @"add@VV"(<3 x double> %offset8, <3 x double> %output31)
  %geo34 = load i64, i64* %geo
  store i64 %geo34, i64* %22
  store <3 x double> %output, <3 x double>* %23
  %bbmin36 = load <3 x double>, <3 x double>* %bbmin
  store <3 x double> %bbmin36, <3 x double>* %24
  %bbmax37 = load <3 x double>, <3 x double>* %bbmax
  store <3 x double> %bbmax37, <3 x double>* %25
  %jitter38 = load <3 x double>, <3 x double>* %jitter
  store <3 x double> %jitter38, <3 x double>* %26
  %jitterseed39 = load double, double* %jitterseed
  %output40 = fadd double %jitterseed39, 1.000000e+00
  %output41 = fmul double %output40, 0x400921FB4D12D84A
  store double %output41, double* %27
  store <3 x double> %output32, <3 x double>* %28
  %reject43 = load double, double* %reject
  store double %reject43, double* %29
  %vol44 = load i64, i64* %vol
  store i64 %vol44, i64* %30
  %volname45 = load i8*, i8** %volname
  store i8* %volname45, i8** %31
  %miniso46 = load double, double* %miniso
  store double %miniso46, double* %32
  %maxiso47 = load double, double* %maxiso
  store double %maxiso47, double* %33
  %dodither48 = load i64, i64* %dodither
  store i64 %dodither48, i64* %34
  %dithernormal49 = load <3 x double>, <3 x double>* %dithernormal
  store <3 x double> %dithernormal49, <3 x double>* %35
  %ditherangle50 = load double, double* %ditherangle
  store double %ditherangle50, double* %36
  %dithersep51 = load double, double* %dithersep
  store double %dithersep51, double* %37
  %jitteredlattice52 = call i64 @"jitteredlattice@IIVVVVFVFISFFIVFF"(i64* %22, <3 x double>* %23, <3 x double>* %24, <3 x double>* %25, <3 x double>* %26, double* %27, <3 x double>* %28, double* %29, i64* %30, i8** %31, double* %32, double* %33, i64* %34, <3 x double>* %35, double* %36, double* %37)
  %output53 = add i64 %jitteredlattice, %jitteredlattice52
  %psep55 = load <3 x double>, <3 x double>* %psep
  %output56 = call <3 x double> @"mul@VV"(<3 x double> %psep55, <3 x double> <double 0.000000e+00, double 0x3FEA20BD700C2C3E, double 0x3FE279A74590331C>)
  %output57 = call <3 x double> @"add@VV"(<3 x double> %output32, <3 x double> %output56)
  %geo59 = load i64, i64* %geo
  store i64 %geo59, i64* %38
  store <3 x double> %output, <3 x double>* %39
  %bbmin61 = load <3 x double>, <3 x double>* %bbmin
  store <3 x double> %bbmin61, <3 x double>* %40
  %bbmax62 = load <3 x double>, <3 x double>* %bbmax
  store <3 x double> %bbmax62, <3 x double>* %41
  %jitter63 = load <3 x double>, <3 x double>* %jitter
  store <3 x double> %jitter63, <3 x double>* %42
  %jitterseed64 = load double, double* %jitterseed
  %output65 = fadd double %jitterseed64, 2.000000e+00
  %output66 = fmul double %output65, 0x4005BF0A87427F01
  store double %output66, double* %43
  store <3 x double> %output57, <3 x double>* %44
  %reject68 = load double, double* %reject
  store double %reject68, double* %45
  %vol69 = load i64, i64* %vol
  store i64 %vol69, i64* %46
  %volname70 = load i8*, i8** %volname
  store i8* %volname70, i8** %47
  %miniso71 = load double, double* %miniso
  store double %miniso71, double* %48
  %maxiso72 = load double, double* %maxiso
  store double %maxiso72, double* %49
  %dodither73 = load i64, i64* %dodither
  store i64 %dodither73, i64* %50
  %dithernormal74 = load <3 x double>, <3 x double>* %dithernormal
  store <3 x double> %dithernormal74, <3 x double>* %51
  %ditherangle75 = load double, double* %ditherangle
  store double %ditherangle75, double* %52
  %dithersep76 = load double, double* %dithersep
  store double %dithersep76, double* %53
  %jitteredlattice77 = call i64 @"jitteredlattice@IIVVVVFVFISFFIVFF"(i64* %38, <3 x double>* %39, <3 x double>* %40, <3 x double>* %41, <3 x double>* %42, double* %43, <3 x double>* %44, double* %45, i64* %46, i8** %47, double* %48, double* %49, i64* %50, <3 x double>* %51, double* %52, double* %53)
  %output78 = add i64 %output53, %jitteredlattice77
  %offset79 = load <3 x double>, <3 x double>* %offset
  %psep80 = load <3 x double>, <3 x double>* %psep
  %output81 = call <3 x double> @"mul@VV"(<3 x double> %psep80, <3 x double> <double 0.000000e+00, double 0x3FEA20BD700C2C3E, double 0x3FE279A74590331C>)
  %output82 = call <3 x double> @"add@VV"(<3 x double> %offset79, <3 x double> %output81)
  %geo84 = load i64, i64* %geo
  store i64 %geo84, i64* %54
  store <3 x double> %output, <3 x double>* %55
  %bbmin86 = load <3 x double>, <3 x double>* %bbmin
  store <3 x double> %bbmin86, <3 x double>* %56
  %bbmax87 = load <3 x double>, <3 x double>* %bbmax
  store <3 x double> %bbmax87, <3 x double>* %57
  %jitter88 = load <3 x double>, <3 x double>* %jitter
  store <3 x double> %jitter88, <3 x double>* %58
  %jitterseed89 = load double, double* %jitterseed
  %output90 = fadd double %jitterseed89, 3.000000e+00
  %output91 = fmul double %output90, 0x3FF6A09E55C0FCB5
  store double %output91, double* %59
  store <3 x double> %output82, <3 x double>* %60
  %reject93 = load double, double* %reject
  store double %reject93, double* %61
  %vol94 = load i64, i64* %vol
  store i64 %vol94, i64* %62
  %volname95 = load i8*, i8** %volname
  store i8* %volname95, i8** %63
  %miniso96 = load double, double* %miniso
  store double %miniso96, double* %64
  %maxiso97 = load double, double* %maxiso
  store double %maxiso97, double* %65
  %dodither98 = load i64, i64* %dodither
  store i64 %dodither98, i64* %66
  %dithernormal99 = load <3 x double>, <3 x double>* %dithernormal
  store <3 x double> %dithernormal99, <3 x double>* %67
  %ditherangle100 = load double, double* %ditherangle
  store double %ditherangle100, double* %68
  %dithersep101 = load double, double* %dithersep
  store double %dithersep101, double* %69
  %jitteredlattice102 = call i64 @"jitteredlattice@IIVVVVFVFISFFIVFF"(i64* %54, <3 x double>* %55, <3 x double>* %56, <3 x double>* %57, <3 x double>* %58, double* %59, <3 x double>* %60, double* %61, i64* %62, i8** %63, double* %64, double* %65, i64* %66, <3 x double>* %67, double* %68, double* %69)
  %output103 = add i64 %output78, %jitteredlattice102
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end, %true
  %UnifiedRetVal = phi i64 [ 0, %true ], [ %output103, %end ]
  ret i64 %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private i64 @"spherepackbbox@IIFVVIVFVISFFFFIVF"(i64* %geo, double* %psep, <3 x double>* %bbmin, <3 x double>* %bbmax, i64* %pattern, <3 x double>* %jitter, double* %jitterseed, <3 x double>* %offset, i64* %vol, i8** %volname, double* %miniso, double* %maxiso, double* %oversample, double* %oversampledist, i64* %dodither, <3 x double>* %dithernormal, double* %ditherangle) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca i64
  %9 = alloca i8*
  %10 = alloca double
  %11 = alloca double
  %12 = alloca i64
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca i64
  %17 = alloca <3 x double>
  %18 = alloca <3 x double>
  %19 = alloca <3 x double>
  %20 = alloca <3 x double>
  %21 = alloca double
  %22 = alloca <3 x double>
  %23 = alloca double
  %24 = alloca i64
  %25 = alloca i8*
  %26 = alloca double
  %27 = alloca double
  %28 = alloca i64
  %29 = alloca <3 x double>
  %30 = alloca double
  %31 = alloca double
  %32 = alloca i64
  %33 = alloca <3 x double>
  %34 = alloca <3 x double>
  %35 = alloca <3 x double>
  %36 = alloca <3 x double>
  %37 = alloca double
  %38 = alloca <3 x double>
  %39 = alloca double
  %40 = alloca i64
  %41 = alloca i8*
  %42 = alloca double
  %43 = alloca double
  %44 = alloca i64
  %45 = alloca <3 x double>
  %46 = alloca double
  %47 = alloca double
  %48 = alloca i64
  %49 = alloca <3 x double>
  %50 = alloca <3 x double>
  %51 = alloca <3 x double>
  %52 = alloca <3 x double>
  %53 = alloca double
  %54 = alloca <3 x double>
  %55 = alloca double
  %56 = alloca i64
  %57 = alloca i8*
  %58 = alloca double
  %59 = alloca double
  %60 = alloca i64
  %61 = alloca <3 x double>
  %62 = alloca double
  %63 = alloca double
  %pattern1 = load i64, i64* %pattern
  %return = call i64 @"eq@III"(i64 %pattern1, i64 0)
  %64 = icmp ne i64 %return, 0
  br i1 %64, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %geo3 = load i64, i64* %geo
  store i64 %geo3, i64* %0
  %psep4 = load double, double* %psep
  %cast = call <3 x double> @"set@VF"(double %psep4)
  store <3 x double> %cast, <3 x double>* %1
  %bbmin5 = load <3 x double>, <3 x double>* %bbmin
  store <3 x double> %bbmin5, <3 x double>* %2
  %bbmax6 = load <3 x double>, <3 x double>* %bbmax
  store <3 x double> %bbmax6, <3 x double>* %3
  %jitter7 = load <3 x double>, <3 x double>* %jitter
  store <3 x double> %jitter7, <3 x double>* %4
  %jitterseed8 = load double, double* %jitterseed
  store double %jitterseed8, double* %5
  %offset9 = load <3 x double>, <3 x double>* %offset
  store <3 x double> %offset9, <3 x double>* %6
  store double 0.000000e+00, double* %7
  %vol10 = load i64, i64* %vol
  store i64 %vol10, i64* %8
  %volname11 = load i8*, i8** %volname
  store i8* %volname11, i8** %9
  %miniso12 = load double, double* %miniso
  store double %miniso12, double* %10
  %maxiso13 = load double, double* %maxiso
  store double %maxiso13, double* %11
  %dodither14 = load i64, i64* %dodither
  store i64 %dodither14, i64* %12
  %dithernormal15 = load <3 x double>, <3 x double>* %dithernormal
  store <3 x double> %dithernormal15, <3 x double>* %13
  %ditherangle16 = load double, double* %ditherangle
  store double %ditherangle16, double* %14
  %psep17 = load double, double* %psep
  store double %psep17, double* %15
  %simplecubicpts = call i64 @"simplecubicpts@IIVVVVFVFISFFIVFF"(i64* %0, <3 x double>* %1, <3 x double>* %2, <3 x double>* %3, <3 x double>* %4, double* %5, <3 x double>* %6, double* %7, i64* %8, i8** %9, double* %10, double* %11, i64* %12, <3 x double>* %13, double* %14, double* %15)
  br label %end

false:                                            ; preds = %__llvm_entry
  %return19 = call i64 @"eq@III"(i64 %pattern1, i64 1)
  %65 = icmp ne i64 %return19, 0
  br i1 %65, label %true20, label %end

end:                                              ; preds = %false, %true20, %true
  %npts.0 = phi i64 [ %simplecubicpts, %true ], [ %tetrahedralpts, %true20 ], [ 0, %false ]
  %oversample40 = load double, double* %oversample
  %return41 = call double @"max@FFF"(double %oversample40, double 0.000000e+00)
  store double %return41, double* %oversample
  %return43 = call double @"ceil@FF"(double %return41)
  %cast44 = fptosi double %return43 to i64
  %cast47 = sitofp i64 %cast44 to double
  %output48 = call double @"div@FF"(double %return41, double %cast47)
  %output49 = fsub double 1.000000e+00, %output48
  %maxiso50 = load double, double* %maxiso
  %oversampledist51 = load double, double* %oversampledist
  %output52 = fsub double %maxiso50, %oversampledist51
  %miniso53 = load double, double* %miniso
  %return54 = call double @"max@FFF"(double %output52, double %miniso53)
  br label %cond

true20:                                           ; preds = %false
  %geo23 = load i64, i64* %geo
  store i64 %geo23, i64* %16
  %psep24 = load double, double* %psep
  %cast25 = call <3 x double> @"set@VF"(double %psep24)
  store <3 x double> %cast25, <3 x double>* %17
  %bbmin26 = load <3 x double>, <3 x double>* %bbmin
  store <3 x double> %bbmin26, <3 x double>* %18
  %bbmax27 = load <3 x double>, <3 x double>* %bbmax
  store <3 x double> %bbmax27, <3 x double>* %19
  %jitter28 = load <3 x double>, <3 x double>* %jitter
  store <3 x double> %jitter28, <3 x double>* %20
  %jitterseed29 = load double, double* %jitterseed
  store double %jitterseed29, double* %21
  %offset30 = load <3 x double>, <3 x double>* %offset
  store <3 x double> %offset30, <3 x double>* %22
  store double 0.000000e+00, double* %23
  %vol31 = load i64, i64* %vol
  store i64 %vol31, i64* %24
  %volname32 = load i8*, i8** %volname
  store i8* %volname32, i8** %25
  %miniso33 = load double, double* %miniso
  store double %miniso33, double* %26
  %maxiso34 = load double, double* %maxiso
  store double %maxiso34, double* %27
  %dodither35 = load i64, i64* %dodither
  store i64 %dodither35, i64* %28
  %dithernormal36 = load <3 x double>, <3 x double>* %dithernormal
  store <3 x double> %dithernormal36, <3 x double>* %29
  %ditherangle37 = load double, double* %ditherangle
  store double %ditherangle37, double* %30
  %psep38 = load double, double* %psep
  store double %psep38, double* %31
  %tetrahedralpts = call i64 @"tetrahedralpts@IIVVVVFVFISFFIVFF"(i64* %16, <3 x double>* %17, <3 x double>* %18, <3 x double>* %19, <3 x double>* %20, double* %21, <3 x double>* %22, double* %23, i64* %24, i8** %25, double* %26, double* %27, i64* %28, <3 x double>* %29, double* %30, double* %31)
  br label %end

cond:                                             ; preds = %end63, %end
  %seed.0 = phi double [ 3.471370e+02, %end ], [ %output113, %end63 ]
  %i.0 = phi i64 [ 0, %end ], [ %output116, %end63 ]
  %npts.1 = phi i64 [ %npts.0, %end ], [ %npts.2, %end63 ]
  %return57 = call i64 @"lt@III"(i64 %i.0, i64 %cast44)
  %66 = icmp ne i64 %return57, 0
  br i1 %66, label %body, label %end58

body:                                             ; preds = %cond
  %pattern59 = load i64, i64* %pattern
  %return60 = call i64 @"eq@III"(i64 %pattern59, i64 0)
  %67 = icmp ne i64 %return60, 0
  br i1 %67, label %true61, label %false62

end58:                                            ; preds = %cond
  ret i64 %npts.1

true61:                                           ; preds = %body
  %geo65 = load i64, i64* %geo
  store i64 %geo65, i64* %32
  %psep66 = load double, double* %psep
  %cast67 = call <3 x double> @"set@VF"(double %psep66)
  store <3 x double> %cast67, <3 x double>* %33
  %bbmin68 = load <3 x double>, <3 x double>* %bbmin
  store <3 x double> %bbmin68, <3 x double>* %34
  %bbmax69 = load <3 x double>, <3 x double>* %bbmax
  store <3 x double> %bbmax69, <3 x double>* %35
  %jitter70 = load <3 x double>, <3 x double>* %jitter
  store <3 x double> %jitter70, <3 x double>* %36
  %jitterseed71 = load double, double* %jitterseed
  %output73 = fadd double %jitterseed71, %seed.0
  store double %output73, double* %37
  %offset74 = load <3 x double>, <3 x double>* %offset
  store <3 x double> %offset74, <3 x double>* %38
  store double %output49, double* %39
  %vol76 = load i64, i64* %vol
  store i64 %vol76, i64* %40
  %volname77 = load i8*, i8** %volname
  store i8* %volname77, i8** %41
  store double %return54, double* %42
  %maxiso79 = load double, double* %maxiso
  store double %maxiso79, double* %43
  %dodither80 = load i64, i64* %dodither
  store i64 %dodither80, i64* %44
  %dithernormal81 = load <3 x double>, <3 x double>* %dithernormal
  store <3 x double> %dithernormal81, <3 x double>* %45
  %ditherangle82 = load double, double* %ditherangle
  store double %ditherangle82, double* %46
  %psep83 = load double, double* %psep
  store double %psep83, double* %47
  %simplecubicpts84 = call i64 @"simplecubicpts@IIVVVVFVFISFFIVFF"(i64* %32, <3 x double>* %33, <3 x double>* %34, <3 x double>* %35, <3 x double>* %36, double* %37, <3 x double>* %38, double* %39, i64* %40, i8** %41, double* %42, double* %43, i64* %44, <3 x double>* %45, double* %46, double* %47)
  %output85 = add i64 %npts.1, %simplecubicpts84
  br label %end63

false62:                                          ; preds = %body
  %return87 = call i64 @"eq@III"(i64 %pattern59, i64 1)
  %68 = icmp ne i64 %return87, 0
  br i1 %68, label %true88, label %end63

end63:                                            ; preds = %false62, %true88, %true61
  %npts.2 = phi i64 [ %output85, %true61 ], [ %output111, %true88 ], [ %npts.1, %false62 ]
  %output113 = fmul double %seed.0, 0x4005BF0A87427F01
  %output116 = add i64 %i.0, 1
  br label %cond

true88:                                           ; preds = %false62
  %geo91 = load i64, i64* %geo
  store i64 %geo91, i64* %48
  %psep92 = load double, double* %psep
  %cast93 = call <3 x double> @"set@VF"(double %psep92)
  store <3 x double> %cast93, <3 x double>* %49
  %bbmin94 = load <3 x double>, <3 x double>* %bbmin
  store <3 x double> %bbmin94, <3 x double>* %50
  %bbmax95 = load <3 x double>, <3 x double>* %bbmax
  store <3 x double> %bbmax95, <3 x double>* %51
  %jitter96 = load <3 x double>, <3 x double>* %jitter
  store <3 x double> %jitter96, <3 x double>* %52
  %jitterseed97 = load double, double* %jitterseed
  %output99 = fadd double %jitterseed97, %seed.0
  store double %output99, double* %53
  %offset100 = load <3 x double>, <3 x double>* %offset
  store <3 x double> %offset100, <3 x double>* %54
  store double %output49, double* %55
  %vol102 = load i64, i64* %vol
  store i64 %vol102, i64* %56
  %volname103 = load i8*, i8** %volname
  store i8* %volname103, i8** %57
  store double %return54, double* %58
  %maxiso105 = load double, double* %maxiso
  store double %maxiso105, double* %59
  %dodither106 = load i64, i64* %dodither
  store i64 %dodither106, i64* %60
  %dithernormal107 = load <3 x double>, <3 x double>* %dithernormal
  store <3 x double> %dithernormal107, <3 x double>* %61
  %ditherangle108 = load double, double* %ditherangle
  store double %ditherangle108, double* %62
  %psep109 = load double, double* %psep
  store double %psep109, double* %63
  %tetrahedralpts110 = call i64 @"tetrahedralpts@IIVVVVFVFISFFIVFF"(i64* %48, <3 x double>* %49, <3 x double>* %50, <3 x double>* %51, <3 x double>* %52, double* %53, <3 x double>* %54, double* %55, i64* %56, i8** %57, double* %58, double* %59, i64* %60, <3 x double>* %61, double* %62, double* %63)
  %output111 = add i64 %npts.1, %tetrahedralpts110
  br label %end63
}

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"ceil@FF"(double) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: alwaysinline nounwind
define private void @"_obj_grid1_pointsfromvolume1_create_jittered_points_snippet1@VFFIFFFFVFFIIVF"(<3 x double>* %P, double* %particlesep, double* %voxelsize, i64* %inittype, double* %jitterscale, double* %jitterseed, double* %miniso, double* %maxiso, <3 x double>* %offset, double* %oversampling, double* %oversamplingbandwidth, i64* %npts, i64* %dodither, <3 x double>* %dithernormal, double* %ditherangle) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca double
  %2 = alloca <3 x double>
  %3 = alloca <3 x double>
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca double
  %7 = alloca <3 x double>
  %8 = alloca i64
  %9 = alloca i8*
  %10 = alloca double
  %11 = alloca double
  %12 = alloca double
  %13 = alloca i64
  %14 = alloca <3 x double>
  %15 = alloca double
  %jitterscale1 = load double, double* %jitterscale
  %particlesep2 = load double, double* %particlesep
  %output = fmul double %jitterscale1, %particlesep2
  %output3 = call double @"div@FF"(double %output, double 2.000000e+00)
  %cast = call <3 x double> @"set@VF"(double %output3)
  %P4 = load <3 x double>, <3 x double>* %P
  %voxelsize5 = load double, double* %voxelsize
  %output6 = call double @"div@FF"(double %voxelsize5, double 2.000000e+00)
  %cast7 = call <3 x double> @"set@VF"(double %output6)
  %output8 = call <3 x double> @"sub@VV"(<3 x double> %P4, <3 x double> %cast7)
  %output13 = call <3 x double> @"add@VV"(<3 x double> %P4, <3 x double> %cast7)
  %oversamplingbandwidth14 = load double, double* %oversamplingbandwidth
  %output16 = fmul double %oversamplingbandwidth14, %particlesep2
  %return = call i64 @"geoself@I"()
  store i64 %return, i64* %0
  %particlesep17 = load double, double* %particlesep
  store double %particlesep17, double* %1
  store <3 x double> %output8, <3 x double>* %2
  store <3 x double> %output13, <3 x double>* %3
  %inittype20 = load i64, i64* %inittype
  store i64 %inittype20, i64* %4
  store <3 x double> %cast, <3 x double>* %5
  %jitterseed22 = load double, double* %jitterseed
  store double %jitterseed22, double* %6
  %offset23 = load <3 x double>, <3 x double>* %offset
  store <3 x double> %offset23, <3 x double>* %7
  store i64 1, i64* %8
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i8** %9
  %miniso26 = load double, double* %miniso
  store double %miniso26, double* %10
  %maxiso27 = load double, double* %maxiso
  store double %maxiso27, double* %11
  store double %output16, double* %12
  %dodither29 = load i64, i64* %dodither
  store i64 %dodither29, i64* %13
  %dithernormal30 = load <3 x double>, <3 x double>* %dithernormal
  store <3 x double> %dithernormal30, <3 x double>* %14
  %ditherangle31 = load double, double* %ditherangle
  store double %ditherangle31, double* %15
  %spherepackbbox = call i64 @"spherepackbbox@IIFVVIVFVISFFFFIVF"(i64* %0, double* %1, <3 x double>* %2, <3 x double>* %3, i64* %4, <3 x double>* %5, double* %6, <3 x double>* %7, i64* %8, i8** %9, double* %10, double* %11, double* %oversampling, double* %12, i64* %13, <3 x double>* %14, double* %15)
  store i64 %spherepackbbox, i64* %npts
  ret void
}

; Function Attrs: nounwind
declare i64 @"geoself@I"() #2

; Function Attrs: nounwind
define void @obj_grid1_pointsfromvolume1_create_jittered_points(double %jitterscale, double %jitterseed, double %particlesep, <3 x double> %offset, double %miniso, double %maxiso, double %oversampling, double %oversamplingbandwidth, i64 %inittype, double %density, <3 x double> %P, i64 %ix, i64 %iy, i64 %iz, i64 %resx, i64 %resy, i64 %resz, <3 x double> %dPdx, <3 x double> %dPdy, <3 x double> %dPdz, <3 x double> %center, double %Time, double %Timeinc, double %Frame, i8* %OpInput2, i8* %OpInput3, i8* %OpInput4, i8* %OpInput1, i64 %parm_dodither, <3 x double> %parm_dithernormal, double %parm_ditherangle) #2 {
__llvm_entry:
  %outoversampling = alloca double
  %outnpts = alloca i64
  %0 = alloca <3 x double>
  %1 = alloca double
  %2 = alloca double
  %3 = alloca i64
  %4 = alloca double
  %5 = alloca double
  %6 = alloca double
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca double
  %10 = alloca i64
  %11 = alloca <3 x double>
  %12 = alloca double
  %cast = sitofp i64 %resx to double
  %return = call double @"neg@FF"(double 5.000000e-01)
  %output = fmul double %cast, %return
  %cast8 = call <3 x double> @"set@VF"(double %output)
  %output9 = call <3 x double> @"mul@VV"(<3 x double> %dPdx, <3 x double> %cast8)
  %cast11 = sitofp i64 %resy to double
  %output14 = fmul double %cast11, %return
  %cast17 = call <3 x double> @"set@VF"(double %output14)
  %output18 = call <3 x double> @"mul@VV"(<3 x double> %dPdy, <3 x double> %cast17)
  %cast20 = sitofp i64 %resz to double
  %output23 = fmul double %cast20, %return
  %cast26 = call <3 x double> @"set@VF"(double %output23)
  %output27 = call <3 x double> @"mul@VV"(<3 x double> %dPdz, <3 x double> %cast26)
  %output30 = call <3 x double> @"add@VV"(<3 x double> %center, <3 x double> %output9)
  %return36 = call double @"length@FV"(<3 x double> %output9)
  %return38 = call double @"length@FV"(<3 x double> %output18)
  %return40 = call double @"length@FV"(<3 x double> %output27)
  %cast49 = sitofp i64 %ix to double
  %cast51 = sitofp i64 %iy to double
  %cast53 = sitofp i64 %iz to double
  %return61 = call <3 x double> @"set@VFFF"(double %cast, double %cast11, double %cast20)
  %return63 = call i64 @"neg@II"(i64 1)
  %cast64 = call <3 x double> @"set@VI"(i64 %return63)
  %return92 = call double @"getcomp@FVI"(<3 x double> %dPdx, i64 0)
  %return95 = call double @"radians@FF"(double %parm_ditherangle)
  %return97 = call double @"cos@FF"(double %return95)
  store double %oversampling, double* %outoversampling
  store i64 0, i64* %outnpts
  store <3 x double> %P, <3 x double>* %0
  store double %particlesep, double* %1
  store double %return92, double* %2
  store i64 %inittype, i64* %3
  store double %jitterscale, double* %4
  store double %jitterseed, double* %5
  store double %miniso, double* %6
  store double %maxiso, double* %7
  store <3 x double> %offset, <3 x double>* %8
  store double %oversamplingbandwidth, double* %9
  store i64 %parm_dodither, i64* %10
  store <3 x double> %parm_dithernormal, <3 x double>* %11
  store double %return97, double* %12
  call void @"_obj_grid1_pointsfromvolume1_create_jittered_points_snippet1@VFFIFFFFVFFIIVF"(<3 x double>* %0, double* %1, double* %2, i64* %3, double* %4, double* %5, double* %6, double* %7, <3 x double>* %8, double* %outoversampling, double* %9, i64* %outnpts, i64* %10, <3 x double>* %11, double* %12)
  %output127 = fmul double %oversamplingbandwidth, 0.000000e+00
  %cast129 = fptosi double %output127 to i64
  %cast131 = sitofp i64 %cast129 to double
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), double %cast131) #3
  store double %gvalue, double* @density
  ret void
}

; Function Attrs: nounwind
declare double @"radians@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #1

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_grid1_pointsfromvolume1_create_jittered_points(double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, <3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, i64 0, double 0.000000e+00, <3 x double> zeroinitializer, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i64 0, <3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

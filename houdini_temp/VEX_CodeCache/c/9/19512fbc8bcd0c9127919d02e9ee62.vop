;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

%stat = type { i8*, i64, i64, i64, i64, i64 }

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [17 x i8] c"preview_material\00"
@2 = private constant [21 x i8] c"preview_materialName\00"
@3 = private constant [6 x i8] c"debug\00"
@4 = private constant [14 x i8] c"Is Valid Path\00"
@5 = private constant [9 x i8] c" & File \00"
@6 = private constant [24 x i8] c" However, invalid File \00"
@7 = private constant [2 x i8] c".\00"
@8 = private constant [26 x i8] c"with the Extention: [.%s]\00"
@9 = private constant [8 x i8] c"extList\00"
@10 = private constant [0 x i8*] zeroinitializer
@11 = private constant [2 x i8] c" \00"
@12 = private constant [19 x i8] c" - which is Valid.\00"
@13 = private constant [49 x i8] c" - but the list is empty, so all ext are valid !\00"
@14 = private constant [34 x i8] c" - which is an invalid File Type.\00"
@15 = private constant [16 x i8] c"uvgrid_grey.pic\00"
@16 = private constant [3 x i8] c" \0A\00"
@test = external global i8**
@filePath = external global i8*
@17 = private constant [5 x i8] c"test\00"
@18 = private constant [9 x i8] c"filePath\00"

; Function Attrs: alwaysinline nounwind
define private void @"init@Z4statM6N7st_nameSN7st_modeIN11st_filetypeIN7st_sizeIN9st_sizembIN8st_mtimeIS"(%stat* %this, i8** %name) #0 {
__llvm_entry:
  %name1 = load i8*, i8** %name
  %tmp = load %stat, %stat* %this
  %0 = insertvalue %stat %tmp, i8* %name1, 0
  store %stat %0, %stat* %this
  %name2 = load i8*, i8** %name
  %return = call { i64, i64* } @"file_stat@IS[I"(i8* %name2)
  %return3 = extractvalue { i64, i64* } %return, 0
  %output = extractvalue { i64, i64* } %return, 1
  %1 = icmp ne i64 %return3, 0
  br i1 %1, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return5 = call i64 @"getcomp@I[II"(i64* %output, i64 0)
  %2 = insertvalue %stat %0, i64 %return5, 1
  %return8 = call i64 @"getcomp@I[II"(i64* %output, i64 1)
  %3 = insertvalue %stat %2, i64 %return8, 2
  %return11 = call i64 @"getcomp@I[II"(i64* %output, i64 2)
  %4 = insertvalue %stat %3, i64 %return11, 3
  %return14 = call i64 @"getcomp@I[II"(i64* %output, i64 3)
  %5 = insertvalue %stat %4, i64 %return14, 4
  %return17 = call i64 @"getcomp@I[II"(i64* %output, i64 4)
  %6 = insertvalue %stat %5, i64 %return17, 5
  store %stat %6, %stat* %this
  br label %end

false:                                            ; preds = %__llvm_entry
  %7 = insertvalue %stat %0, i64 0, 1
  %return20 = call i64 @"neg@II"(i64 1)
  %8 = insertvalue %stat %7, i64 %return20, 2
  %9 = insertvalue %stat %8, i64 0, 3
  %10 = insertvalue %stat %9, i64 0, 4
  %11 = insertvalue %stat %10, i64 0, 5
  store %stat %11, %stat* %this
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: nounwind readnone
declare { i64, i64* } @"file_stat@IS[I"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: alwaysinline nounwind
define private i64 @"isValid@IZ4statM6N7st_nameSN7st_modeIN11st_filetypeIN7st_sizeIN9st_sizembIN8st_mtimeI"(%stat* %this) #0 {
__llvm_entry:
  %this1 = load %stat, %stat* %this
  %st_filetype = extractvalue %stat %this1, 2
  %return = call i64 @"neg@II"(i64 1)
  %return2 = call i64 @"ne@III"(i64 %st_filetype, i64 %return)
  ret i64 %return2
}

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: alwaysinline nounwind
define private i64 @"isFile@IZ4statM6N7st_nameSN7st_modeIN11st_filetypeIN7st_sizeIN9st_sizembIN8st_mtimeI"(%stat* %this) #0 {
__llvm_entry:
  %this1 = load %stat, %stat* %this
  %st_filetype = extractvalue %stat %this1, 2
  %return = call i64 @"eq@III"(i64 %st_filetype, i64 0)
  ret i64 %return
}

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: alwaysinline nounwind
define private %stat @"stat@Z4statM6N7st_nameSN7st_modeIN11st_filetypeIN7st_sizeIN9st_sizembIN8st_mtimeISIIIII"(i8** %st_name, i64* %st_mode, i64* %st_filetype, i64* %st_size, i64* %st_sizemb, i64* %st_mtime) #0 {
__llvm_entry:
  %st_name1 = load i8*, i8** %st_name
  %0 = insertvalue %stat undef, i8* %st_name1, 0
  %st_mode2 = load i64, i64* %st_mode
  %1 = insertvalue %stat %0, i64 %st_mode2, 1
  %st_filetype4 = load i64, i64* %st_filetype
  %2 = insertvalue %stat %1, i64 %st_filetype4, 2
  %st_size6 = load i64, i64* %st_size
  %3 = insertvalue %stat %2, i64 %st_size6, 3
  %st_sizemb8 = load i64, i64* %st_sizemb
  %4 = insertvalue %stat %3, i64 %st_sizemb8, 4
  %st_mtime10 = load i64, i64* %st_mtime
  %5 = insertvalue %stat %4, i64 %st_mtime10, 5
  ret %stat %5
}

; Function Attrs: alwaysinline nounwind
define private %stat @"stat@Z4statM6N7st_nameSN7st_modeIN11st_filetypeIN7st_sizeIN9st_sizembIN8st_mtimeI"() #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i8*
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8** %5
  store i64 0, i64* %0
  store i64 0, i64* %1
  store i64 0, i64* %2
  store i64 0, i64* %3
  store i64 0, i64* %4
  %stat = call %stat @"stat@Z4statM6N7st_nameSN7st_modeIN11st_filetypeIN7st_sizeIN9st_sizembIN8st_mtimeISIIIII"(i8** %5, i64* %0, i64* %1, i64* %2, i64* %3, i64* %4)
  ret %stat %stat
}

; Function Attrs: alwaysinline nounwind
define private %stat @"file_stat@Z4statM6N7st_nameSN7st_modeIN11st_filetypeIN7st_sizeIN9st_sizembIN8st_mtimeIS"(i8** %name) #0 {
__llvm_entry:
  %0 = alloca i8*
  %sbuf = alloca %stat
  %sbuf1 = call %stat @"stat@Z4statM6N7st_nameSN7st_modeIN11st_filetypeIN7st_sizeIN9st_sizembIN8st_mtimeI"()
  %sbuf1.fca.0.extract = extractvalue %stat %sbuf1, 0
  %sbuf1.fca.0.gep = getelementptr inbounds %stat, %stat* %sbuf, i32 0, i32 0
  store i8* %sbuf1.fca.0.extract, i8** %sbuf1.fca.0.gep
  %sbuf1.fca.1.extract = extractvalue %stat %sbuf1, 1
  %sbuf1.fca.1.gep = getelementptr inbounds %stat, %stat* %sbuf, i32 0, i32 1
  store i64 %sbuf1.fca.1.extract, i64* %sbuf1.fca.1.gep
  %sbuf1.fca.2.extract = extractvalue %stat %sbuf1, 2
  %sbuf1.fca.2.gep = getelementptr inbounds %stat, %stat* %sbuf, i32 0, i32 2
  store i64 %sbuf1.fca.2.extract, i64* %sbuf1.fca.2.gep
  %sbuf1.fca.3.extract = extractvalue %stat %sbuf1, 3
  %sbuf1.fca.3.gep = getelementptr inbounds %stat, %stat* %sbuf, i32 0, i32 3
  store i64 %sbuf1.fca.3.extract, i64* %sbuf1.fca.3.gep
  %sbuf1.fca.4.extract = extractvalue %stat %sbuf1, 4
  %sbuf1.fca.4.gep = getelementptr inbounds %stat, %stat* %sbuf, i32 0, i32 4
  store i64 %sbuf1.fca.4.extract, i64* %sbuf1.fca.4.gep
  %sbuf1.fca.5.extract = extractvalue %stat %sbuf1, 5
  %sbuf1.fca.5.gep = getelementptr inbounds %stat, %stat* %sbuf, i32 0, i32 5
  store i64 %sbuf1.fca.5.extract, i64* %sbuf1.fca.5.gep
  %name2 = load i8*, i8** %name
  store i8* %name2, i8** %0
  call void @"init@Z4statM6N7st_nameSN7st_modeIN11st_filetypeIN7st_sizeIN9st_sizembIN8st_mtimeIS"(%stat* %sbuf, i8** %0)
  %sbuf3.fca.0.load = load i8*, i8** %sbuf1.fca.0.gep
  %sbuf3.fca.0.insert = insertvalue %stat undef, i8* %sbuf3.fca.0.load, 0
  %sbuf3.fca.1.load = load i64, i64* %sbuf1.fca.1.gep
  %sbuf3.fca.1.insert = insertvalue %stat %sbuf3.fca.0.insert, i64 %sbuf3.fca.1.load, 1
  %sbuf3.fca.2.load = load i64, i64* %sbuf1.fca.2.gep
  %sbuf3.fca.2.insert = insertvalue %stat %sbuf3.fca.1.insert, i64 %sbuf3.fca.2.load, 2
  %sbuf3.fca.3.load = load i64, i64* %sbuf1.fca.3.gep
  %sbuf3.fca.3.insert = insertvalue %stat %sbuf3.fca.2.insert, i64 %sbuf3.fca.3.load, 3
  %sbuf3.fca.4.load = load i64, i64* %sbuf1.fca.4.gep
  %sbuf3.fca.4.insert = insertvalue %stat %sbuf3.fca.3.insert, i64 %sbuf3.fca.4.load, 4
  %sbuf3.fca.5.load = load i64, i64* %sbuf1.fca.5.gep
  %sbuf3.fca.5.insert = insertvalue %stat %sbuf3.fca.4.insert, i64 %sbuf3.fca.5.load, 5
  ret %stat %sbuf3.fca.5.insert
}

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[SS"(i8*** %_bound_test, i8** %_bound_filePath) #0 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca %stat
  %2 = alloca %stat
  %return = call i8* @"prim@SISI"(i64 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1, i64 0, i64 0), i64 0)
  %return1 = call i8* @"prim@SISI"(i64 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @2, i64 0, i64 0), i64 0)
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0))
  %s3 = call %stat @"stat@Z4statM6N7st_nameSN7st_modeIN11st_filetypeIN7st_sizeIN9st_sizembIN8st_mtimeI"()
  store i8* %return, i8** %0
  %file_stat = call %stat @"file_stat@Z4statM6N7st_nameSN7st_modeIN11st_filetypeIN7st_sizeIN9st_sizembIN8st_mtimeIS"(i8** %0)
  %file_stat.fca.0.extract = extractvalue %stat %file_stat, 0
  %file_stat.fca.1.extract = extractvalue %stat %file_stat, 1
  %file_stat.fca.2.extract = extractvalue %stat %file_stat, 2
  %file_stat.fca.3.extract = extractvalue %stat %file_stat, 3
  %file_stat.fca.4.extract = extractvalue %stat %file_stat, 4
  %file_stat.fca.5.extract = extractvalue %stat %file_stat, 5
  %s5.fca.0.gep = getelementptr inbounds %stat, %stat* %1, i32 0, i32 0
  store i8* %file_stat.fca.0.extract, i8** %s5.fca.0.gep
  %s5.fca.1.gep = getelementptr inbounds %stat, %stat* %1, i32 0, i32 1
  store i64 %file_stat.fca.1.extract, i64* %s5.fca.1.gep
  %s5.fca.2.gep = getelementptr inbounds %stat, %stat* %1, i32 0, i32 2
  store i64 %file_stat.fca.2.extract, i64* %s5.fca.2.gep
  %s5.fca.3.gep = getelementptr inbounds %stat, %stat* %1, i32 0, i32 3
  store i64 %file_stat.fca.3.extract, i64* %s5.fca.3.gep
  %s5.fca.4.gep = getelementptr inbounds %stat, %stat* %1, i32 0, i32 4
  store i64 %file_stat.fca.4.extract, i64* %s5.fca.4.gep
  %s5.fca.5.gep = getelementptr inbounds %stat, %stat* %1, i32 0, i32 5
  store i64 %file_stat.fca.5.extract, i64* %s5.fca.5.gep
  %isValid = call i64 @"isValid@IZ4statM6N7st_nameSN7st_modeIN11st_filetypeIN7st_sizeIN9st_sizembIN8st_mtimeI"(%stat* %1)
  %3 = icmp ne i64 %isValid, 0
  br i1 %3, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return7 = call i64 @"eq@III"(i64 %return2, i64 1)
  %4 = icmp ne i64 %return7, 0
  br i1 %4, label %true8, label %end9

end:                                              ; preds = %false, %true19, %true11, %true15, %__llvm_entry
  %validFile.0 = phi i64 [ 1, %true15 ], [ 1, %true11 ], [ 0, %true19 ], [ 0, %false ], [ 0, %__llvm_entry ]
  %return22 = call i8** @"split@[SSS"(i8* %return1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0))
  %return23 = call i64 @"neg@II"(i64 1)
  %return24 = call i8** @"slice@[S[SIIIIII"(i8** %return22, i64 1, i64 %return23, i64 0, i64 0, i64 0, i64 0)
  %return25 = call i8* @"join@S[SS"(i8** %return24, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0))
  %return27 = call i64 @"eq@III"(i64 %return2, i64 1)
  %5 = icmp ne i64 %return27, 0
  br i1 %5, label %true28, label %end29

true8:                                            ; preds = %true
  call void @"printf@S"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @4, i64 0, i64 0))
  br label %end9

end9:                                             ; preds = %true8, %true
  %s10.fca.0.gep = getelementptr inbounds %stat, %stat* %2, i32 0, i32 0
  store i8* %file_stat.fca.0.extract, i8** %s10.fca.0.gep
  %s10.fca.1.gep = getelementptr inbounds %stat, %stat* %2, i32 0, i32 1
  store i64 %file_stat.fca.1.extract, i64* %s10.fca.1.gep
  %s10.fca.2.gep = getelementptr inbounds %stat, %stat* %2, i32 0, i32 2
  store i64 %file_stat.fca.2.extract, i64* %s10.fca.2.gep
  %s10.fca.3.gep = getelementptr inbounds %stat, %stat* %2, i32 0, i32 3
  store i64 %file_stat.fca.3.extract, i64* %s10.fca.3.gep
  %s10.fca.4.gep = getelementptr inbounds %stat, %stat* %2, i32 0, i32 4
  store i64 %file_stat.fca.4.extract, i64* %s10.fca.4.gep
  %s10.fca.5.gep = getelementptr inbounds %stat, %stat* %2, i32 0, i32 5
  store i64 %file_stat.fca.5.extract, i64* %s10.fca.5.gep
  %isFile = call i64 @"isFile@IZ4statM6N7st_nameSN7st_modeIN11st_filetypeIN7st_sizeIN9st_sizembIN8st_mtimeI"(%stat* %2)
  %6 = icmp ne i64 %isFile, 0
  br i1 %6, label %true11, label %false

true11:                                           ; preds = %end9
  br i1 %4, label %true15, label %end

false:                                            ; preds = %end9
  br i1 %4, label %true19, label %end

true15:                                           ; preds = %true11
  call void @"printf@S"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i64 0, i64 0))
  br label %end

true19:                                           ; preds = %false
  call void @"printf@S"(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @6, i64 0, i64 0))
  br label %end

true28:                                           ; preds = %end
  call void @"printf@S:S"(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @8, i64 0, i64 0), i8* %return25)
  br label %end29

end29:                                            ; preds = %true28, %end
  %return31 = call i8* @"chs@SS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @9, i64 0, i64 0))
  %return33 = call i8** @"split@[SSS"(i8* %return31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i64 0, i64 0))
  store i8** %return33, i8*** %_bound_test
  %return36 = call i64 @"len@I[S"(i8** %return33)
  br label %cond

cond:                                             ; preds = %end48, %end29
  %validExt.0 = phi i64 [ 0, %end29 ], [ %validExt.1, %end48 ]
  %__impl_foreach_index_2f.0 = phi i64 [ 0, %end29 ], [ %output, %end48 ]
  %return39 = call i64 @"lt@III"(i64 %__impl_foreach_index_2f.0, i64 %return36)
  %7 = icmp ne i64 %return39, 0
  br i1 %7, label %body, label %end40

body:                                             ; preds = %cond
  %return43 = call i8* @"getcomp@S[SI"(i8** %return33, i64 %__impl_foreach_index_2f.0)
  %return46 = call i64 @"eq@ISS"(i8* %return25, i8* %return43)
  %8 = icmp ne i64 %return46, 0
  br i1 %8, label %true47, label %end48

end40:                                            ; preds = %cond
  %return55 = call i64 @"eq@ISS"(i8* %return31, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0))
  %9 = icmp ne i64 %return55, 0
  br i1 %9, label %true56, label %false57

true47:                                           ; preds = %body
  br i1 %5, label %true51, label %end48

end48:                                            ; preds = %true47, %true51, %body
  %validExt.1 = phi i64 [ 1, %true51 ], [ 1, %true47 ], [ %validExt.0, %body ]
  %output = add i64 %__impl_foreach_index_2f.0, 1
  br label %cond

true51:                                           ; preds = %true47
  call void @"printf@S"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @12, i64 0, i64 0))
  br label %end48

true56:                                           ; preds = %end40
  br i1 %5, label %true61, label %end58

false57:                                          ; preds = %end40
  %return66 = call i64 @"eq@III"(i64 %validExt.0, i64 0)
  %return67 = call i64 @"and@III"(i64 %return27, i64 %return66)
  %10 = icmp ne i64 %return67, 0
  br i1 %10, label %true68, label %end58

end58:                                            ; preds = %false57, %true68, %true56, %true61
  %validExt.2 = phi i64 [ 1, %true61 ], [ 1, %true56 ], [ %validExt.0, %true68 ], [ %validExt.0, %false57 ]
  %return71 = call i64 @"eq@III"(i64 %validFile.0, i64 1)
  %return73 = call i64 @"eq@III"(i64 %validExt.2, i64 1)
  %return74 = call i64 @"and@III"(i64 %return71, i64 %return73)
  %11 = icmp ne i64 %return74, 0
  br i1 %11, label %true75, label %false76

true61:                                           ; preds = %true56
  call void @"printf@S"(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @13, i64 0, i64 0))
  br label %end58

true68:                                           ; preds = %false57
  call void @"printf@S"(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @14, i64 0, i64 0))
  br label %end58

true75:                                           ; preds = %end58
  store i8* %return, i8** %_bound_filePath
  br label %end77

false76:                                          ; preds = %end58
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @15, i64 0, i64 0), i8** %_bound_filePath
  br label %end77

end77:                                            ; preds = %false76, %true75
  br i1 %5, label %true81, label %end82

true81:                                           ; preds = %end77
  call void @"printf@S"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @16, i64 0, i64 0))
  br label %end82

end82:                                            ; preds = %true81, %end77
  ret void
}

; Function Attrs: nounwind
declare i8* @"prim@SISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind
declare void @"printf@S"(i8*) #2

; Function Attrs: nounwind readnone
declare i8** @"split@[SSS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i8** @"slice@[S[SIIIIII"(i8**, i64, i64, i64, i64, i64, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"join@S[SS"(i8**, i8*) #1

; Function Attrs: nounwind
declare void @"printf@S:S"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8** %test, i8* %filePath) #2 {
__llvm_entry:
  %"<filePath>" = alloca i8*
  %"<test>" = alloca i8**
  store i8** %test, i8*** %"<test>"
  store i8* %filePath, i8** %"<filePath>"
  call void @"__vex_snippet_snippet@[SS"(i8*** %"<test>", i8** %"<filePath>")
  %evalue = load i8**, i8*** %"<test>"
  %gvalue = call i8** @"_export@[SS[S"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i64 0, i64 0), i8** %evalue) #3
  %evalue1 = load i8*, i8** %"<filePath>"
  %gvalue2 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @18, i64 0, i64 0), i8* %evalue1) #3
  store i8** %gvalue, i8*** @test
  store i8* %gvalue2, i8** @filePath
  ret void
}

declare i8** @"_export@[SS[S"(i8*, i8**)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @10, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

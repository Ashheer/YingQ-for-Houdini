;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"scale\00"
@1 = private constant [7 x i8] c"offset\00"
@up = external global <3 x double>
@N = external global <3 x double>
@P = external global <3 x double>
@Cd = external global <3 x double>
@2 = private constant [3 x i8] c"up\00"
@3 = private constant [2 x i8] c"N\00"
@4 = private constant [2 x i8] c"P\00"
@5 = private constant [3 x i8] c"Cd\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVVV"(<3 x double>* %_bound_up, <3 x double>* %_bound_N, <3 x double>* %_bound_P, <3 x double>* %_bound_Cd) #0 {
__llvm_entry:
  %_bound_N1 = load <3 x double>, <3 x double>* %_bound_N
  store <3 x double> %_bound_N1, <3 x double>* %_bound_up
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0))
  %cast = call <3 x double> @"set@VF"(double %return)
  %output = call <3 x double> @"mul@VV"(<3 x double> %_bound_P2, <3 x double> %cast)
  %return3 = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %cast4 = call <3 x double> @"set@VF"(double %return3)
  %output5 = call <3 x double> @"add@VV"(<3 x double> %output, <3 x double> %cast4)
  %return6 = call <3 x double> @"noise@VV"(<3 x double> %output5)
  %return7 = call <3 x double> @"set@VFFF"(double 5.000000e-01, double 5.000000e-01, double 5.000000e-01)
  %output8 = call <3 x double> @"sub@VV"(<3 x double> %return6, <3 x double> %return7)
  %return10 = call <3 x double> @"normalize@VV"(<3 x double> %output8)
  %_bound_N11 = load <3 x double>, <3 x double>* %_bound_N
  %return13 = call <3 x double> @"cross@VVV"(<3 x double> %_bound_N11, <3 x double> %return10)
  store <3 x double> %return13, <3 x double>* %_bound_N
  %return16 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 1.000000e+00, double 0.000000e+00)
  %return17 = call double @"dot@FVV"(<3 x double> %return13, <3 x double> %return16)
  %return18 = call i64 @"neg@II"(i64 1)
  %cast19 = sitofp i64 %return18 to double
  %return20 = call double @"fit@FFFFFF"(double %return17, double %cast19, double 1.000000e+00, double 0.000000e+00, double 1.000000e+00)
  %cast21 = call <3 x double> @"set@VF"(double %return20)
  store <3 x double> %cast21, <3 x double>* %_bound_Cd
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"noise@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %up, <3 x double> %N, <3 x double> %P, <3 x double> %Cd) #2 {
__llvm_entry:
  %"<N>" = alloca <3 x double>
  %"<Cd>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %"<up>" = alloca <3 x double>
  store <3 x double> %up, <3 x double>* %"<up>"
  store <3 x double> %N, <3 x double>* %"<N>"
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store <3 x double> %P, <3 x double>* %0
  call void @"__vex_snippet_snippet@VVVV"(<3 x double>* %"<up>", <3 x double>* %"<N>", <3 x double>* %0, <3 x double>* %"<Cd>")
  %evalue = load <3 x double>, <3 x double>* %"<up>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), <3 x double> %evalue) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<N>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %evalue2) #3
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), <3 x double> %P) #3
  %evalue6 = load <3 x double>, <3 x double>* %"<Cd>"
  %gvalue7 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i64 0, i64 0), <3 x double> %evalue6) #3
  store <3 x double> %gvalue, <3 x double>* @up
  store <3 x double> %gvalue3, <3 x double>* @N
  store <3 x double> %gvalue5, <3 x double>* @P
  store <3 x double> %gvalue7, <3 x double>* @Cd
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

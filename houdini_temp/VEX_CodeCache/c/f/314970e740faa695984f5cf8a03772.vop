;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [18 x i8] c"stroke_projcenter\00"
@1 = private constant [15 x i8] c"stroke_projdir\00"
@2 = private constant [16 x i8] c"stroke_projtype\00"
@3 = private constant [1 x i8] zeroinitializer
@stroke_orig = external global <3 x double>
@stroke_dir = external global <3 x double>
@stroke_uv = external global <3 x double>
@stroke_prim = external global i64
@stroke_hit = external global i64
@OpInput1 = external global i8*
@primnum = external global i64
@OpInput2 = external global i8*
@P = external global <3 x double>
@4 = private constant [12 x i8] c"stroke_orig\00"
@5 = private constant [11 x i8] c"stroke_dir\00"
@6 = private constant [10 x i8] c"stroke_uv\00"
@7 = private constant [12 x i8] c"stroke_prim\00"
@8 = private constant [11 x i8] c"stroke_hit\00"
@9 = private constant [9 x i8] c"OpInput1\00"
@10 = private constant [8 x i8] c"primnum\00"
@11 = private constant [9 x i8] c"OpInput2\00"
@12 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVVIISISV"(<3 x double>* %_bound_stroke_orig, <3 x double>* %_bound_stroke_dir, <3 x double>* %_bound_stroke_uv, i64* %_bound_stroke_prim, i64* %_bound_stroke_hit, i8** %_bound_OpInput1, i64* %_bound_primnum, i8** %_bound_OpInput2, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_OpInput11 = load i8*, i8** %_bound_OpInput1
  %_bound_primnum2 = load i64, i64* %_bound_primnum
  %return = call <3 x double> @"prim@VSSI"(i8* %_bound_OpInput11, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @0, i64 0, i64 0), i64 %_bound_primnum2)
  %return5 = call <3 x double> @"prim@VSSI"(i8* %_bound_OpInput11, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1, i64 0, i64 0), i64 %_bound_primnum2)
  %return7 = call <3 x double> @"normalize@VV"(<3 x double> %return5)
  %_bound_OpInput18 = load i8*, i8** %_bound_OpInput1
  %_bound_primnum9 = load i64, i64* %_bound_primnum
  %return10 = call i64 @"prim@ISSI"(i8* %_bound_OpInput18, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @2, i64 0, i64 0), i64 %_bound_primnum9)
  %return12 = call i64 @"lt@III"(i64 %return10, i64 4)
  %0 = icmp ne i64 %return12, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_bound_stroke_orig13 = load <3 x double>, <3 x double>* %_bound_stroke_orig
  %output = call <3 x double> @"sub@VV"(<3 x double> %_bound_stroke_orig13, <3 x double> %return)
  %return17 = call double @"dot@FVV"(<3 x double> %output, <3 x double> %return7)
  %_bound_stroke_orig18 = load <3 x double>, <3 x double>* %_bound_stroke_orig
  %_bound_stroke_dir19 = load <3 x double>, <3 x double>* %_bound_stroke_dir
  %cast = call <3 x double> @"set@VF"(double %return17)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %_bound_stroke_dir19, <3 x double> %cast)
  %return24 = call double @"dot@FVV"(<3 x double> %_bound_stroke_dir19, <3 x double> %return7)
  %cast25 = call <3 x double> @"set@VF"(double %return24)
  %output26 = call <3 x double> @"div@VV"(<3 x double> %output21, <3 x double> %cast25)
  %output27 = call <3 x double> @"sub@VV"(<3 x double> %_bound_stroke_orig18, <3 x double> %output26)
  store <3 x double> %output27, <3 x double>* %_bound_stroke_orig
  br label %end

false:                                            ; preds = %__llvm_entry
  %_bound_stroke_orig28 = load <3 x double>, <3 x double>* %_bound_stroke_orig
  %output30 = call <3 x double> @"sub@VV"(<3 x double> %_bound_stroke_orig28, <3 x double> %return)
  %return31 = call double @"length@FV"(<3 x double> %output30)
  %output33 = fmul double %return31, 1.000000e+02
  %_bound_stroke_dir34 = load <3 x double>, <3 x double>* %_bound_stroke_dir
  %return35 = call <3 x double> @"normalize@VV"(<3 x double> %_bound_stroke_dir34)
  %_bound_OpInput236 = load i8*, i8** %_bound_OpInput2
  %_bound_stroke_orig37 = load <3 x double>, <3 x double>* %_bound_stroke_orig
  %cast40 = call <3 x double> @"set@VF"(double %output33)
  %output41 = call <3 x double> @"mul@VV"(<3 x double> %return35, <3 x double> %cast40)
  %return42 = call { i64, <3 x double>, double, double } @"intersect@ISVVVFF"(i8* %_bound_OpInput236, <3 x double> %_bound_stroke_orig37, <3 x double> %output41)
  %return43 = extractvalue { i64, <3 x double>, double, double } %return42, 0
  %output44 = extractvalue { i64, <3 x double>, double, double } %return42, 1
  %output45 = extractvalue { i64, <3 x double>, double, double } %return42, 2
  %output46 = extractvalue { i64, <3 x double>, double, double } %return42, 3
  store <3 x double> %output44, <3 x double>* %_bound_P
  %return49 = call i64 @"ge@III"(i64 %return43, i64 0)
  store i64 %return49, i64* %_bound_stroke_hit
  store i64 %return43, i64* %_bound_stroke_prim
  %tmp = load <3 x double>, <3 x double>* %_bound_stroke_uv
  %return52 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output45, i64 0)
  %output54 = extractvalue { double, <3 x double> } %return52, 1
  store <3 x double> %output54, <3 x double>* %_bound_stroke_uv
  %return57 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output54, double %output46, i64 1)
  %output59 = extractvalue { double, <3 x double> } %return57, 1
  store <3 x double> %output59, <3 x double>* %_bound_stroke_uv
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"prim@VSSI"(i8*, i8*, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"prim@ISSI"(i8*, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare { i64, <3 x double>, double, double } @"intersect@ISVVVFF"(i8*, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %stroke_orig, <3 x double> %stroke_dir, <3 x double> %stroke_uv, i64 %stroke_prim, i64 %stroke_hit, i8* %OpInput1, i64 %primnum, i8* %OpInput2, <3 x double> %P) #2 {
__llvm_entry:
  %"<stroke_uv>" = alloca <3 x double>
  %"<stroke_prim>" = alloca i64
  %"<stroke_hit>" = alloca i64
  %"<P>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca i8*
  %2 = alloca i64
  %3 = alloca i8*
  %"<stroke_orig>" = alloca <3 x double>
  store <3 x double> %stroke_orig, <3 x double>* %"<stroke_orig>"
  store <3 x double> %stroke_uv, <3 x double>* %"<stroke_uv>"
  store i64 %stroke_prim, i64* %"<stroke_prim>"
  store i64 %stroke_hit, i64* %"<stroke_hit>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %stroke_dir, <3 x double>* %0
  store i8* %OpInput1, i8** %1
  store i64 %primnum, i64* %2
  store i8* %OpInput2, i8** %3
  call void @"__vex_snippet_snippet@VVVIISISV"(<3 x double>* %"<stroke_orig>", <3 x double>* %0, <3 x double>* %"<stroke_uv>", i64* %"<stroke_prim>", i64* %"<stroke_hit>", i8** %1, i64* %2, i8** %3, <3 x double>* %"<P>")
  %evalue = load <3 x double>, <3 x double>* %"<stroke_orig>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i64 0, i64 0), <3 x double> %evalue) #4
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0), <3 x double> %stroke_dir) #4
  %evalue7 = load <3 x double>, <3 x double>* %"<stroke_uv>"
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @6, i64 0, i64 0), <3 x double> %evalue7) #4
  %evalue9 = load i64, i64* %"<stroke_prim>"
  %gvalue10 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i64 0, i64 0), i64 %evalue9) #4
  %evalue11 = load i64, i64* %"<stroke_hit>"
  %gvalue12 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @8, i64 0, i64 0), i64 %evalue11) #4
  %gvalue14 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @9, i64 0, i64 0), i8* %OpInput1) #4
  %gvalue16 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @10, i64 0, i64 0), i64 %primnum) #4
  %gvalue18 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @11, i64 0, i64 0), i8* %OpInput2) #4
  %evalue19 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue20 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i64 0, i64 0), <3 x double> %evalue19) #4
  store <3 x double> %gvalue, <3 x double>* @stroke_orig
  store <3 x double> %gvalue6, <3 x double>* @stroke_dir
  store <3 x double> %gvalue8, <3 x double>* @stroke_uv
  store i64 %gvalue10, i64* @stroke_prim
  store i64 %gvalue12, i64* @stroke_hit
  store i8* %gvalue14, i8** @OpInput1
  store i64 %gvalue16, i64* @primnum
  store i8* %gvalue18, i8** @OpInput2
  store <3 x double> %gvalue20, <3 x double>* @P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, i64 -1, i64 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @3, i64 0, i64 0), i64 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @3, i64 0, i64 0), <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

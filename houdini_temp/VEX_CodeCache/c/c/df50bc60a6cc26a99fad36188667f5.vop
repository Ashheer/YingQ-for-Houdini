;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [17 x i8] c"../rafter_radius\00"
@opinput2_N = external global <3 x double>
@opinput1_N = external global <3 x double>
@P = external global <3 x double>
@N = external global <3 x double>
@1 = private constant [11 x i8] c"opinput2_N\00"
@2 = private constant [11 x i8] c"opinput1_N\00"
@3 = private constant [2 x i8] c"P\00"
@4 = private constant [2 x i8] c"N\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVVV"(<3 x double>* %_bound_opinput2_N, <3 x double>* %_bound_opinput1_N, <3 x double>* %_bound_P, <3 x double>* %_bound_N) #0 {
__llvm_entry:
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @0, i64 0, i64 0))
  %_bound_opinput2_N1 = load <3 x double>, <3 x double>* %_bound_opinput2_N
  %_bound_opinput1_N2 = load <3 x double>, <3 x double>* %_bound_opinput1_N
  %return3 = call <3 x double> @"normalize@VV"(<3 x double> %_bound_opinput1_N2)
  %return4 = call double @"dot@FVV"(<3 x double> %_bound_opinput2_N1, <3 x double> %return3)
  %output = call double @"div@FF"(double %return, double %return4)
  %_bound_P5 = load <3 x double>, <3 x double>* %_bound_P
  %return6 = call double @"getcomp@FVI"(<3 x double> %_bound_P5, i64 1)
  %output8 = fadd double %return6, %output
  %return9 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %_bound_P5, double %output8, i64 1)
  %output11 = extractvalue { double, <3 x double> } %return9, 1
  store <3 x double> %output11, <3 x double>* %_bound_P
  %return12 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 1.000000e+00, double 0.000000e+00)
  store <3 x double> %return12, <3 x double>* %_bound_N
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 1)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %opinput2_N, <3 x double> %opinput1_N, <3 x double> %P, <3 x double> %N) #2 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %"<N>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %N, <3 x double>* %"<N>"
  store <3 x double> %opinput2_N, <3 x double>* %0
  store <3 x double> %opinput1_N, <3 x double>* %1
  call void @"__vex_snippet_snippet@VVVV"(<3 x double>* %0, <3 x double>* %1, <3 x double>* %"<P>", <3 x double>* %"<N>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0), <3 x double> %opinput2_N) #4
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0), <3 x double> %opinput1_N) #4
  %evalue5 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %evalue5) #4
  %evalue7 = load <3 x double>, <3 x double>* %"<N>"
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), <3 x double> %evalue7) #4
  store <3 x double> %gvalue, <3 x double>* @opinput2_N
  store <3 x double> %gvalue4, <3 x double>* @opinput1_N
  store <3 x double> %gvalue6, <3 x double>* @P
  store <3 x double> %gvalue8, <3 x double>* @N
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

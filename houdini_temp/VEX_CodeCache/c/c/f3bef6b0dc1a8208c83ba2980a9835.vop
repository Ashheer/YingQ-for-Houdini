;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@P = external global <3 x double>
@density = external global double
@0 = private constant [2 x i8] c"P\00"
@1 = private constant [8 x i8] c"density\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VF"(<3 x double>* %_bound_P, double* %_bound_density) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call double @"getcomp@FVI"(<3 x double> %_bound_P1, i64 0)
  %return3 = call double @"getcomp@FVI"(<3 x double> %_bound_P1, i64 1)
  %return5 = call double @"getcomp@FVI"(<3 x double> %_bound_P1, i64 2)
  %output13 = fmul double %return5, %return
  %return33 = fcmp ole double %return, 5.000000e-01
  br i1 %return33, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output36 = fmul double 2.000000e+00, %output13
  store double %output36, double* %_bound_density
  br label %end

false:                                            ; preds = %__llvm_entry
  %output38 = fsub double 1.000000e+00, %return
  %output39 = fmul double 2.000000e+00, %output38
  %output41 = fsub double 1.000000e+00, %return5
  %output42 = fmul double %output39, %output41
  %output43 = fsub double 1.000000e+00, %output42
  store double %output43, double* %_bound_density
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, double %density) #2 {
__llvm_entry:
  %"<density>" = alloca double
  %0 = alloca <3 x double>
  store double %density, double* %"<density>"
  store <3 x double> %P, <3 x double>* %0
  call void @"__vex_snippet_snippet@VF"(<3 x double>* %0, double* %"<density>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %P) #3
  %evalue2 = load double, double* %"<density>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), double %evalue2) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store double %gvalue3, double* @density
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

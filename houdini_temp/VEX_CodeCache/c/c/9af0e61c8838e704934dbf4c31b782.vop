;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@curveu = external global double
@y = external global double
@P = external global <3 x double>
@1 = private constant [7 x i8] c"curveu\00"
@2 = private constant [2 x i8] c"y\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FFV"(double* %_bound_curveu, double* %_bound_y, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_curveu1 = load double, double* %_bound_curveu
  %return = call i64 @"neg@II"(i64 1)
  %cast = sitofp i64 %return to double
  %return2 = call double @"fit01@FFFF"(double %_bound_curveu1, double %cast, double 1.000000e+00)
  %return3 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 0)
  %return5 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return)
  %_bound_P6 = load <3 x double>, <3 x double>* %_bound_P
  %return7 = call double @"getcomp@FVI"(<3 x double> %_bound_P6, i64 0)
  %return8 = call double @"sinh@FF"(double %return7)
  %output = call double @"div@FF"(double %return8, double %return7)
  store double %output, double* %_bound_y
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind
declare double @"fit01@FFFF"(double, double, double) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare double @"sinh@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %curveu, double %y, <3 x double> %P) #2 {
__llvm_entry:
  %"<y>" = alloca double
  %0 = alloca double
  %1 = alloca <3 x double>
  store double %y, double* %"<y>"
  store double %curveu, double* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@FFV"(double* %0, double* %"<y>", <3 x double>* %1)
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), double %curveu) #3
  %evalue3 = load double, double* %"<y>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), double %evalue3) #3
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %P) #3
  store double %gvalue, double* @curveu
  store double %gvalue4, double* @y
  store <3 x double> %gvalue6, <3 x double>* @P
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	/obj/rope/dopnet1/popgrains1/get_neighbours
; ModuleID = 'obj_rope_dopnet1_popgrains1_get_neighbours'
source_filename = "obj_rope_dopnet1_popgrains1_get_neighbours"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [7 x i8] c"pscale\00"
@3 = private constant [7 x i8] c"island\00"
@neighbors = external global i64*
@4 = private constant [10 x i8] c"neighbors\00"

; Function Attrs: alwaysinline nounwind
define private void @"_obj_rope_dopnet1_popgrains1_get_neighbours_snippet1@FIIIFII[I[IFV"(double* %scale, i64* %maxn, i64* %uniformradius, i64* %explicitcollide, double* %particleseparation, i64* %_bound_island, i64* %_bound_ptnum, i64** %_bound_neighbors, i64** %_bound_ec, double* %_bound_pscale, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %uniformradius1 = load i64, i64* %uniformradius
  %0 = icmp ne i64 %uniformradius1, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %_bound_pscale3 = load double, double* %_bound_pscale
  %scale4 = load double, double* %scale
  %output = fmul double %_bound_pscale3, %scale4
  %maxn5 = load i64, i64* %maxn
  %output6 = add i64 %maxn5, 1
  %return = call i64* @"pcfind@[IISVFI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %_bound_P2, double %output, i64 %output6)
  br label %end

false:                                            ; preds = %__llvm_entry
  %scale7 = load double, double* %scale
  %output8 = fmul double 5.000000e-01, %scale7
  %_bound_P9 = load <3 x double>, <3 x double>* %_bound_P
  %_bound_pscale10 = load double, double* %_bound_pscale
  %output11 = fmul double 5.000000e-01, %_bound_pscale10
  %output13 = fmul double %output11, %scale7
  %maxn14 = load i64, i64* %maxn
  %output15 = add i64 %maxn14, 1
  %return16 = call i64* @"pcfind_radius@[IISSFVFI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), double %output8, <3 x double> %_bound_P9, double %output13, i64 %output15)
  br label %end

end:                                              ; preds = %false, %true
  %tmp.0 = phi i64* [ %return, %true ], [ %return16, %false ]
  %return18 = call i64 @"len@I[I"(i64* %tmp.0)
  br label %cond

cond:                                             ; preds = %iter, %end
  %__impl_foreach_index_14.0 = phi i64 [ 0, %end ], [ %output56, %iter ]
  %neighbors.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %end ], [ %neighbors.1, %iter ]
  %return21 = call i64 @"lt@III"(i64 %__impl_foreach_index_14.0, i64 %return18)
  %1 = icmp ne i64 %return21, 0
  br i1 %1, label %body, label %end22

body:                                             ; preds = %cond
  %return25 = call i64 @"getcomp@I[II"(i64* %tmp.0, i64 %__impl_foreach_index_14.0)
  %_bound_ptnum27 = load i64, i64* %_bound_ptnum
  %return28 = call i64 @"eq@III"(i64 %return25, i64 %_bound_ptnum27)
  %2 = icmp ne i64 %return28, 0
  br i1 %2, label %iter, label %end30

end22:                                            ; preds = %cond
  store i64* %neighbors.0, i64** %_bound_neighbors
  ret void

iter:                                             ; preds = %end35, %true34, %body, %end51
  %neighbors.1 = phi i64* [ %neighbors.0, %body ], [ %neighbors.0, %true34 ], [ %neighbors.0, %end35 ], [ %output54, %end51 ]
  %output56 = add i64 %__impl_foreach_index_14.0, 1
  br label %cond

end30:                                            ; preds = %body
  %_bound_island31 = load i64, i64* %_bound_island
  %return32 = call i64 @"neg@II"(i64 1)
  %return33 = call i64 @"ne@III"(i64 %_bound_island31, i64 %return32)
  %3 = icmp ne i64 %return33, 0
  br i1 %3, label %true34, label %end35

true34:                                           ; preds = %end30
  %return37 = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), i64 %return25)
  %_bound_island39 = load i64, i64* %_bound_island
  %return40 = call i64 @"eq@III"(i64 %return37, i64 %_bound_island39)
  %4 = icmp ne i64 %return40, 0
  br i1 %4, label %iter, label %end35

end35:                                            ; preds = %true34, %end30
  %explicitcollide43 = load i64, i64* %explicitcollide
  %return44 = call i64 @"not@II"(i64 %explicitcollide43)
  %_bound_ec45 = load i64*, i64** %_bound_ec
  %return47 = call i64 @"find@I[II"(i64* %_bound_ec45, i64 %return25)
  %return48 = call i64 @"ge@III"(i64 %return47, i64 0)
  %return49 = call i64 @"and@III"(i64 %return44, i64 %return48)
  %5 = icmp ne i64 %return49, 0
  br i1 %5, label %iter, label %end51

end51:                                            ; preds = %end35
  %output54 = call i64* @"append@[II"(i64* %neighbors.0, i64 %return25)
  br label %iter
}

; Function Attrs: nounwind
declare i64* @"pcfind@[IISVFI"(i64, i8*, <3 x double>, double, i64) #1

; Function Attrs: nounwind
declare i64* @"pcfind_radius@[IISSFVFI"(i64, i8*, i8*, double, <3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind
declare i64 @"find@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind
define void @obj_rope_dopnet1_popgrains1_get_neighbours(double %parm_scale, i64 %parm_maxn, i64 %parm_uniformradius, i64 %parm_explicitcollide, double %parm_particleseparation, i64 %island, i64 %ptnum, i64* %neighbors, i64* %ec, double %pscale, <3 x double> %P) #1 {
__llvm_entry:
  %"<neighbors>" = alloca i64*
  %0 = alloca double
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca double
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64*
  %8 = alloca double
  %9 = alloca <3 x double>
  store i64* %neighbors, i64** %"<neighbors>"
  store double %parm_scale, double* %0
  store i64 %parm_maxn, i64* %1
  store i64 %parm_uniformradius, i64* %2
  store i64 %parm_explicitcollide, i64* %3
  store i64 %island, i64* %5
  store i64 %ptnum, i64* %6
  store i64* %ec, i64** %7
  store double %pscale, double* %8
  store <3 x double> %P, <3 x double>* %9
  call void @"_obj_rope_dopnet1_popgrains1_get_neighbours_snippet1@FIIIFII[I[IFV"(double* %0, i64* %1, i64* %2, i64* %3, double* %4, i64* %5, i64* %6, i64** %"<neighbors>", i64** %7, double* %8, <3 x double>* %9)
  %evalue = load i64*, i64** %"<neighbors>"
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @4, i64 0, i64 0), i64* %evalue) #3
  store i64* %gvalue, i64** @neighbors
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_rope_dopnet1_popgrains1_get_neighbours(double 0.000000e+00, i64 0, i64 0, i64 0, double 1.000000e-01, i64 -1, i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), double 1.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

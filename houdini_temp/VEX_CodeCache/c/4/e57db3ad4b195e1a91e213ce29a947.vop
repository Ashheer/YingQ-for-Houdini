;_name	/obj/geo1/scifi_panels1/sop_lot_subdivision1/sop_color_gradient1/pointwrangle1/attribvop1
; ModuleID = 'obj_geo1_scifi_panels1_sop_lot_subdivision1_sop_color_gradient1_pointwrangle1_attribvop1'

@0 = private constant [8 x i8] c"../axis\00"
@1 = private constant [3 x i8] c"Cd\00"
@2 = private constant [20 x i8] c"../custom_attribute\00"
@3 = private constant [25 x i8] c"../custom_attribute_name\00"
@4 = private constant [8 x i8] c"../ramp\00"
@P = external global <3 x double>
@ptnum = external global i64
@5 = private constant [2 x i8] c"P\00"
@6 = private constant [6 x i8] c"ptnum\00"

define private void @"_obj_geo1_scifi_panels1_sop_lot_subdivision1_sop_color_gradient1_pointwrangle1_attribvop1_snippet1@VI"(<3 x double>* %_bound_P, i64* %_bound_ptnum) nounwind alwaysinline {
__llvm_entry:
  %output = call { <3 x double>, <3 x double> } @"getbbox@IVV"(i64 0)
  %output1 = extractvalue { <3 x double>, <3 x double> } %output, 0
  %output2 = extractvalue { <3 x double>, <3 x double> } %output, 1
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([8 x i8]* @0, i64 0, i64 0))
  %cast = fptosi double %return to i64
  %_bound_P3 = load <3 x double>* %_bound_P
  %return5 = call double @"getcomp@FVI"(<3 x double> %_bound_P3, i64 %cast)
  %return8 = call double @"getcomp@FVI"(<3 x double> %output1, i64 %cast)
  %return11 = call double @"getcomp@FVI"(<3 x double> %output2, i64 %cast)
  %return12 = call double @"ch@FS"(i8* getelementptr inbounds ([20 x i8]* @2, i64 0, i64 0))
  %cast13 = fptosi double %return12 to i64
  %0 = icmp ne i64 %cast13, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return14 = call i8* @"chs@SS"(i8* getelementptr inbounds ([25 x i8]* @3, i64 0, i64 0))
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %attribute_name.0 = phi i8* [ %return14, %true ], [ getelementptr inbounds ([3 x i8]* @1, i64 0, i64 0), %__llvm_entry ]
  %_bound_ptnum16 = load i64* %_bound_ptnum
  %return20 = call double @"fit@FFFFFF"(double %return5, double %return8, double %return11, double 0.000000e+00, double 1.000000e+00)
  %return21 = call <3 x double> @"chramp@VSF"(i8* getelementptr inbounds ([8 x i8]* @4, i64 0, i64 0), double %return20)
  %return22 = call i64 @"setpointattrib@IISIV"(i64 0, i8* %attribute_name.0, i64 %_bound_ptnum16, <3 x double> %return21)
  ret void
}

declare { <3 x double>, <3 x double> } @"getbbox@IVV"(i64) nounwind

declare double @"ch@FS"(i8*) nounwind readnone

declare double @"getcomp@FVI"(<3 x double>, i64) nounwind readnone

declare i8* @"chs@SS"(i8*) nounwind readnone

declare double @"fit@FFFFFF"(double, double, double, double, double) nounwind

declare <3 x double> @"chramp@VSF"(i8*, double) nounwind readnone

declare i64 @"setpointattrib@IISIV"(i64, i8*, i64, <3 x double>) nounwind

define void @obj_geo1_scifi_panels1_sop_lot_subdivision1_sop_color_gradient1_pointwrangle1_attribvop1(<3 x double> %P, i64 %ptnum) nounwind {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca i64
  store <3 x double> %P, <3 x double>* %0
  store i64 %ptnum, i64* %1
  call void @"_obj_geo1_scifi_panels1_sop_lot_subdivision1_sop_color_gradient1_pointwrangle1_attribvop1_snippet1@VI"(<3 x double>* %0, i64* %1)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8]* @5, i64 0, i64 0), <3 x double> %P) nounwind readonly
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8]* @6, i64 0, i64 0), i64 %ptnum) nounwind readonly
  store <3 x double> %gvalue, <3 x double>* @P
  store i64 %gvalue4, i64* @ptnum
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_geo1_scifi_panels1_sop_lot_subdivision1_sop_color_gradient1_pointwrangle1_attribvop1(<3 x double> zeroinitializer, i64 0)
  ret void
}

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"18.5.633"}
!2 = metadata !{metadata !"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [5 x i8] c"name\00"
@2 = private constant [1 x i8] zeroinitializer
@oldname = external global i8*
@name = external global i8*
@P = external global <3 x double>
@3 = private constant [8 x i8] c"oldname\00"
@4 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SSV"(i8** %_bound_oldname, i8** %_bound_name, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_name1 = load i8*, i8** %_bound_name
  store i8* %_bound_name1, i8** %_bound_oldname
  %_bound_name2 = load i8*, i8** %_bound_name
  %return = call i64 @"findattribval@IISSS"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* %_bound_name2)
  %return4 = call i64 @"neg@II"(i64 1)
  %return5 = call i64 @"eq@III"(i64 %return, i64 %return4)
  %0 = icmp ne i64 %return5, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_P6 = load <3 x double>, <3 x double>* %_bound_P
  %return7 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 1.000000e+03, double 0.000000e+00)
  %return8 = call { i64, <3 x double>, <3 x double> } @"intersect@IIVVVV"(i64 2, <3 x double> %_bound_P6, <3 x double> %return7)
  %return9 = extractvalue { i64, <3 x double>, <3 x double> } %return8, 0
  %return12 = call i64 @"ge@III"(i64 %return9, i64 0)
  %1 = icmp ne i64 %return12, 0
  br i1 %1, label %true13, label %false

end:                                              ; preds = %true13, %false, %__llvm_entry
  ret void

true13:                                           ; preds = %true
  %return16 = call i8* @"prim@SISI"(i64 2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %return9)
  store i8* %return16, i8** %_bound_name
  br label %end

false:                                            ; preds = %true
  %_bound_P17 = load <3 x double>, <3 x double>* %_bound_P
  %return18 = call i64 @"nearpoint@IIV"(i64 3, <3 x double> %_bound_P17)
  %return20 = call i8* @"point@SISI"(i64 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %return18)
  store i8* %return20, i8** %_bound_name
  br label %end
}

; Function Attrs: nounwind
declare i64 @"findattribval@IISSS"(i64, i8*, i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind
declare { i64, <3 x double>, <3 x double> } @"intersect@IIVVVV"(i64, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #2

; Function Attrs: nounwind
declare i8* @"prim@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"nearpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %oldname, i8* %name, <3 x double> %P) #1 {
__llvm_entry:
  %"<name>" = alloca i8*
  %0 = alloca <3 x double>
  %"<oldname>" = alloca i8*
  store i8* %oldname, i8** %"<oldname>"
  store i8* %name, i8** %"<name>"
  store <3 x double> %P, <3 x double>* %0
  call void @"__vex_snippet_snippet@SSV"(i8** %"<oldname>", i8** %"<name>", <3 x double>* %0)
  %evalue = load i8*, i8** %"<oldname>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i8* %evalue) #3
  %evalue2 = load i8*, i8** %"<name>"
  %gvalue3 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* %evalue2) #3
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), <3 x double> %P) #3
  store i8* %gvalue, i8** @oldname
  store i8* %gvalue3, i8** @name
  store <3 x double> %gvalue5, <3 x double>* @P
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

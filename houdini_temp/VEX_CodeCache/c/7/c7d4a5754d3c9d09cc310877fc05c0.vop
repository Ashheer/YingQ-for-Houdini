;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"transform\00"
@1 = private constant [11 x i8] c"rotation_x\00"
@2 = private constant [11 x i8] c"rotation_y\00"
@3 = private constant [11 x i8] c"rotation_z\00"
@4 = private constant [6 x i8] c"scale\00"
@5 = private constant [10 x i8] c"translate\00"
@ptnum = external global i64
@P = external global <3 x double>
@6 = private constant [6 x i8] c"ptnum\00"
@7 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IV"(i64* %_bound_ptnum, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call <9 x double> @"primintrinsic@3ISI"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), i64 %_bound_ptnum1)
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %output = call <3 x double> @"mul@VV"(<3 x double> %_bound_P2, <3 x double> <double 1.000000e+01, double 1.000000e+01, double 1.000000e+01>)
  %return3 = call double @"xnoise@FV"(<3 x double> %output)
  %return4 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0))
  %return5 = call double @"radians@FF"(double %return4)
  %output7 = fmul double %return5, %return3
  %return8 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0))
  %return9 = call double @"radians@FF"(double %return8)
  %output11 = fmul double %return9, %return3
  %return12 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0))
  %return13 = call double @"radians@FF"(double %return12)
  %output15 = fmul double %return13, %return3
  %output18 = call <9 x double> @"rotate@3FV"(<9 x double> %return, double %output7, <3 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>)
  %output21 = call <9 x double> @"rotate@3FV"(<9 x double> %output18, double %output11, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>)
  %output24 = call <9 x double> @"rotate@3FV"(<9 x double> %output21, double %output15, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  %return25 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0))
  %output28 = call <9 x double> @"scale@3V"(<9 x double> %output24, <3 x double> %return25)
  %return29 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i64 0, i64 0))
  %_bound_P30 = load <3 x double>, <3 x double>* %_bound_P
  %output32 = call <3 x double> @"add@VV"(<3 x double> %_bound_P30, <3 x double> %return29)
  store <3 x double> %output32, <3 x double>* %_bound_P
  %_bound_ptnum33 = load i64, i64* %_bound_ptnum
  %return35 = call i64 @"setprimintrinsic@IISI3"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), i64 %_bound_ptnum33, <9 x double> %output28)
  ret void
}

; Function Attrs: nounwind
declare <9 x double> @"primintrinsic@3ISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"xnoise@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind
declare double @"radians@FF"(double) #1

; Function Attrs: nounwind readnone
declare <9 x double> @"rotate@3FV"(<9 x double>, double, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #2

; Function Attrs: nounwind readnone
declare <9 x double> @"scale@3V"(<9 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"setprimintrinsic@IISI3"(i64, i8*, i64, <9 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %P) #1 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@IV"(i64* %0, <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0), <3 x double> %evalue2) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue3, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

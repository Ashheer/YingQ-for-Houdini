;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [9 x i8] c"ux_param\00"
@1 = private constant [9 x i8] c"ux_scale\00"
@ux = external global double
@id = external global i64
@ptnum = external global i64
@2 = private constant [3 x i8] c"ux\00"
@3 = private constant [3 x i8] c"id\00"
@4 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FII"(double* %_bound_ux, i64* %_bound_id, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound_ux1 = load double, double* %_bound_ux
  %output = fsub double %_bound_ux1, 5.000000e-01
  %return = call double @"abs@FF"(double %output)
  store double %return, double* %_bound_ux
  %return3 = call double @"fit@FFFFFF"(double %return, double 0.000000e+00, double 5.000000e-01, double 0.000000e+00, double 1.000000e+00)
  %return5 = call double @"chramp@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0), double %return3)
  %return6 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0))
  %output7 = fmul double %return5, %return6
  store double %output7, double* %_bound_ux
  %_bound_ptnum8 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum8, i64* %_bound_id
  ret void
}

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"chramp@FSF"(i8*, double) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(double %ux, i64 %id, i64 %ptnum) #1 {
__llvm_entry:
  %"<id>" = alloca i64
  %0 = alloca i64
  %"<ux>" = alloca double
  store double %ux, double* %"<ux>"
  store i64 %id, i64* %"<id>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@FII"(double* %"<ux>", i64* %"<id>", i64* %0)
  %evalue = load double, double* %"<ux>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), double %evalue) #3
  %evalue2 = load i64, i64* %"<id>"
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), i64 %evalue2) #3
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #3
  store double %gvalue, double* @ux
  store i64 %gvalue3, i64* @id
  store i64 %gvalue5, i64* @ptnum
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, i64 -1, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

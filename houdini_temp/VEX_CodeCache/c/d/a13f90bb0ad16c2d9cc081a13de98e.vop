;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [18 x i8] c"user_scale_attrib\00"
@1 = private constant [13 x i8] c"global_scale\00"
@2 = private constant [14 x i8] c"output_attrib\00"
@ptnum = external global i64
@3 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %cast = sitofp i64 %_bound_ptnum1 to double
  %return = call double @"rand@FF"(double %cast)
  %return2 = call i8* @"chs@SS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @0, i64 0, i64 0))
  %_bound_ptnum3 = load i64, i64* %_bound_ptnum
  %return4 = call double @"point@FISI"(i64 0, i8* %return2, i64 %_bound_ptnum3)
  %output = fmul double %return, %return4
  %return7 = call double @"chf@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0))
  %output8 = fmul double %output, %return7
  %return9 = call i8* @"chs@SS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @2, i64 0, i64 0))
  %_bound_ptnum10 = load i64, i64* %_bound_ptnum
  %return12 = call i64 @"setpointattrib@IISIF"(i64 0, i8* %return9, i64 %_bound_ptnum10, double %output8)
  ret void
}

; Function Attrs: nounwind
declare double @"rand@FF"(double) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIF"(i64, i8*, i64, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum) #1 {
__llvm_entry:
  %0 = alloca i64
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  store i64 %gvalue, i64* @ptnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

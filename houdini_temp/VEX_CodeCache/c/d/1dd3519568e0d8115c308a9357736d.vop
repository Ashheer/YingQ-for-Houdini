;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [11 x i8] c"unrealPath\00"
@1 = private constant [11 x i8] c"objectName\00"
@2 = private constant [8 x i8] c"fbxPath\00"
@3 = private constant [13 x i8] c"materialPath\00"
@4 = private constant [1 x i8] zeroinitializer
@N = external global <3 x double>
@up = external global <3 x double>
@pscale = external global double
@unreal_instance = external global i8*
@objectName = external global i8*
@object = external global i8*
@materialForUnreal = external global i8*
@5 = private constant [2 x i8] c"N\00"
@6 = private constant [3 x i8] c"up\00"
@7 = private constant [7 x i8] c"pscale\00"
@8 = private constant [16 x i8] c"unreal_instance\00"
@9 = private constant [7 x i8] c"object\00"
@10 = private constant [18 x i8] c"materialForUnreal\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVFSSSS"(<3 x double>* %_bound_N, <3 x double>* %_bound_up, double* %_bound_pscale, i8** %_bound_unreal_instance, i8** %_bound_objectName, i8** %_bound_object, i8** %_bound_materialForUnreal) #0 {
__llvm_entry:
  store <3 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>, <3 x double>* %_bound_N
  store <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>, <3 x double>* %_bound_up
  store double 1.000000e+00, double* %_bound_pscale
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i64 0, i64 0))
  store i8* %return, i8** %_bound_unreal_instance
  %return1 = call i8* @"chs@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0))
  store i8* %return1, i8** %_bound_objectName
  %return2 = call i8* @"chs@SS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  store i8* %return2, i8** %_bound_object
  %return3 = call i8* @"chs@SS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @3, i64 0, i64 0))
  store i8* %return3, i8** %_bound_materialForUnreal
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %N, <3 x double> %up, double %pscale, i8* %unreal_instance, i8* %objectName, i8* %object, i8* %materialForUnreal) #2 {
__llvm_entry:
  %"<up>" = alloca <3 x double>
  %"<pscale>" = alloca double
  %"<unreal_instance>" = alloca i8*
  %"<objectName>" = alloca i8*
  %"<object>" = alloca i8*
  %"<materialForUnreal>" = alloca i8*
  %"<N>" = alloca <3 x double>
  store <3 x double> %N, <3 x double>* %"<N>"
  store <3 x double> %up, <3 x double>* %"<up>"
  store double %pscale, double* %"<pscale>"
  store i8* %unreal_instance, i8** %"<unreal_instance>"
  store i8* %objectName, i8** %"<objectName>"
  store i8* %object, i8** %"<object>"
  store i8* %materialForUnreal, i8** %"<materialForUnreal>"
  call void @"__vex_snippet_snippet@VVFSSSS"(<3 x double>* %"<N>", <3 x double>* %"<up>", double* %"<pscale>", i8** %"<unreal_instance>", i8** %"<objectName>", i8** %"<object>", i8** %"<materialForUnreal>")
  %evalue = load <3 x double>, <3 x double>* %"<N>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), <3 x double> %evalue) #3
  %evalue1 = load <3 x double>, <3 x double>* %"<up>"
  %gvalue2 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @6, i64 0, i64 0), <3 x double> %evalue1) #3
  %evalue3 = load double, double* %"<pscale>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), double %evalue3) #3
  %evalue5 = load i8*, i8** %"<unreal_instance>"
  %gvalue6 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @8, i64 0, i64 0), i8* %evalue5) #3
  %evalue7 = load i8*, i8** %"<objectName>"
  %gvalue8 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0), i8* %evalue7) #3
  %evalue9 = load i8*, i8** %"<object>"
  %gvalue10 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @9, i64 0, i64 0), i8* %evalue9) #3
  %evalue11 = load i8*, i8** %"<materialForUnreal>"
  %gvalue12 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @10, i64 0, i64 0), i8* %evalue11) #3
  store <3 x double> %gvalue, <3 x double>* @N
  store <3 x double> %gvalue2, <3 x double>* @up
  store double %gvalue4, double* @pscale
  store i8* %gvalue6, i8** @unreal_instance
  store i8* %gvalue8, i8** @objectName
  store i8* %gvalue10, i8** @object
  store i8* %gvalue12, i8** @materialForUnreal
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @4, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @4, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @4, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @4, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"N\00"
@1 = private constant [5 x i8] c"area\00"
@cut_area = external global double
@N = external global <3 x double>
@2 = private constant [9 x i8] c"cut_area\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FV"(double* %_bound_cut_area, <3 x double>* %_bound_N) #0 {
__llvm_entry:
  store double 0.000000e+00, double* %_bound_cut_area
  br label %cond

cond:                                             ; preds = %end8, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %end8 ]
  %return = call i64 @"nprimitives@II"(i64 1)
  %return2 = call i64 @"lt@III"(i64 %i.0, i64 %return)
  %0 = icmp ne i64 %return2, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return4 = call <3 x double> @"prim@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %i.0)
  %_bound_N5 = load <3 x double>, <3 x double>* %_bound_N
  %return7 = call i64 @"eq@IVV"(<3 x double> %_bound_N5, <3 x double> %return4)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %true, label %end8

end:                                              ; preds = %cond
  ret void

true:                                             ; preds = %body
  %return10 = call double @"prim@FISI"(i64 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %i.0)
  store double %return10, double* %_bound_cut_area
  br label %end8

end8:                                             ; preds = %true, %body
  %output = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind
declare i64 @"nprimitives@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"prim@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@IVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"prim@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %cut_area, <3 x double> %N) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %"<cut_area>" = alloca double
  store double %cut_area, double* %"<cut_area>"
  store <3 x double> %N, <3 x double>* %0
  call void @"__vex_snippet_snippet@FV"(double* %"<cut_area>", <3 x double>* %0)
  %evalue = load double, double* %"<cut_area>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), double %evalue) #3
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %N) #3
  store double %gvalue, double* @cut_area
  store <3 x double> %gvalue3, <3 x double>* @N
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [17 x i8] c"MODULE_DIMENSION\00"
@scale = external global <3 x double>
@1 = private constant [6 x i8] c"scale\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@V"(<3 x double>* %_bound_scale) #0 {
__llvm_entry:
  %return = call i64 @"npoints@II"(i64 1)
  %return1 = call i64 @"gt@III"(i64 %return, i64 0)
  %0 = icmp ne i64 %return1, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_scale2 = load <3 x double>, <3 x double>* %_bound_scale
  %return3 = call double @"getcomp@FVI"(<3 x double> %_bound_scale2, i64 1)
  %return4 = call <2 x double> @"prim@UISI"(i64 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @0, i64 0, i64 0), i64 0)
  %return5 = call double @"getcomp@FUI"(<2 x double> %return4, i64 1)
  %output = call double @"div@FF"(double %return3, double %return5)
  %tmp = load <3 x double>, <3 x double>* %_bound_scale
  %return6 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output, i64 1)
  %output8 = extractvalue { double, <3 x double> } %return6, 1
  store <3 x double> %output8, <3 x double>* %_bound_scale
  %return10 = call double @"getcomp@FVI"(<3 x double> %output8, i64 2)
  %return11 = call <2 x double> @"prim@UISI"(i64 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @0, i64 0, i64 0), i64 0)
  %return12 = call double @"getcomp@FUI"(<2 x double> %return11, i64 0)
  %output13 = call double @"div@FF"(double %return10, double %return12)
  %tmp14 = load <3 x double>, <3 x double>* %_bound_scale
  %return15 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp14, double %output13, i64 2)
  %output17 = extractvalue { double, <3 x double> } %return15, 1
  store <3 x double> %output17, <3 x double>* %_bound_scale
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #2

; Function Attrs: nounwind
declare <2 x double> @"prim@UISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #2

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %scale) #1 {
__llvm_entry:
  %"<scale>" = alloca <3 x double>
  store <3 x double> %scale, <3 x double>* %"<scale>"
  call void @"__vex_snippet_snippet@V"(<3 x double>* %"<scale>")
  %evalue = load <3 x double>, <3 x double>* %"<scale>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #4
  store <3 x double> %gvalue, <3 x double>* @scale
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

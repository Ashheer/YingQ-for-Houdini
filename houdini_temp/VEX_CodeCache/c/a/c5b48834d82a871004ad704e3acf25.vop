;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [11 x i8] c"distmetric\00"
@2 = private constant [7 x i8] c"inside\00"
@3 = private constant [10 x i8] c"iteration\00"
@ptnum = external global i64
@P = external global <3 x double>
@__dist = external global double
@4 = private constant [6 x i8] c"ptnum\00"
@5 = private constant [7 x i8] c"__dist\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVF"(i64* %_bound_ptnum, <3 x double>* %_bound_P, double* %_bound___dist) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %_bound_ptnum1)
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %output = call <3 x double> @"sub@VV"(<3 x double> %_bound_P2, <3 x double> %return)
  %return5 = call double @"length@FV"(<3 x double> %output)
  %return6 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0))
  %_bound_ptnum7 = load i64, i64* %_bound_ptnum
  %return8 = call i64 @"point@IISI"(i64 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), i64 %_bound_ptnum7)
  %return10 = call i64 @"eq@III"(i64 %return6, i64 1)
  %0 = icmp ne i64 %return10, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return12 = call i64 @"eq@III"(i64 %return8, i64 0)
  %1 = icmp ne i64 %return12, 0
  br i1 %1, label %true13, label %end

false:                                            ; preds = %__llvm_entry
  %return18 = call i64 @"ne@III"(i64 %return8, i64 0)
  %2 = icmp ne i64 %return18, 0
  br i1 %2, label %true19, label %end

end:                                              ; preds = %false, %true19, %true, %true13
  %d.0 = phi double [ %return16, %true13 ], [ %return5, %true ], [ %return22, %true19 ], [ %return5, %false ]
  %return23 = call i64 @"detail@IIS"(i64 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0))
  %return24 = call i64 @"eq@III"(i64 %return23, i64 0)
  %_bound___dist30 = load double, double* %_bound___dist
  %return32 = fcmp olt double %_bound___dist30, %d.0
  %return33 = zext i1 %return32 to i64
  %return36 = fcmp ogt double %_bound___dist30, %d.0
  %return37 = zext i1 %return36 to i64
  %phi = select i1 %0, i64 %return33, i64 %return37
  %return38 = call i64 @"or@III"(i64 %return24, i64 %phi)
  %3 = icmp ne i64 %return38, 0
  br i1 %3, label %true39, label %end40

true13:                                           ; preds = %true
  %return16 = call double @"neg@FF"(double %return5)
  br label %end

true19:                                           ; preds = %false
  %return22 = call double @"neg@FF"(double %return5)
  br label %end

true39:                                           ; preds = %end
  store double %d.0, double* %_bound___dist
  br label %end40

end40:                                            ; preds = %true39, %end
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"detail@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %P, double %__dist) #1 {
__llvm_entry:
  %"<__dist>" = alloca double
  %0 = alloca i64
  %1 = alloca <3 x double>
  store double %__dist, double* %"<__dist>"
  store i64 %ptnum, i64* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@IVF"(i64* %0, <3 x double>* %1, double* %"<__dist>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %P) #3
  %evalue5 = load double, double* %"<__dist>"
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0), double %evalue5) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue4, <3 x double>* @P
  store double %gvalue6, double* @__dist
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

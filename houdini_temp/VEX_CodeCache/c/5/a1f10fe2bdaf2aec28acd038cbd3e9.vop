;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [18 x i8] c"raw_data_in_pos_a\00"
@1 = private constant [137 x i8] c"The data in Position Texture Alpha               cannot have any negative values.               At least one negative value is detected.\00"
@pscale = external global double
@__pscale_raw = external global double
@2 = private constant [7 x i8] c"pscale\00"
@3 = private constant [13 x i8] c"__pscale_raw\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FF"(double* %_bound_pscale, double* %_bound___pscale_raw) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_bound___pscale_raw1 = load double, double* %_bound___pscale_raw
  store double %_bound___pscale_raw1, double* %_bound_pscale
  br label %end

false:                                            ; preds = %__llvm_entry
  %_bound_pscale2 = load double, double* %_bound_pscale
  %return3 = fcmp olt double %_bound_pscale2, 0.000000e+00
  br i1 %return3, label %true5, label %end

end:                                              ; preds = %false, %true5, %true
  ret void

true5:                                            ; preds = %false
  call void @"error@S"(i8* getelementptr inbounds ([137 x i8], [137 x i8]* @1, i64 0, i64 0))
  br label %end
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind
declare void @"error@S"(i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(double %pscale, double %__pscale_raw) #2 {
__llvm_entry:
  %0 = alloca double
  %"<pscale>" = alloca double
  store double %pscale, double* %"<pscale>"
  store double %__pscale_raw, double* %0
  call void @"__vex_snippet_snippet@FF"(double* %"<pscale>", double* %0)
  %evalue = load double, double* %"<pscale>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), double %evalue) #3
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @3, i64 0, i64 0), double %__pscale_raw) #3
  store double %gvalue, double* @pscale
  store double %gvalue3, double* @__pscale_raw
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

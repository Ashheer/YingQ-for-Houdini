;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [13 x i8] c"global_scale\00"
@ptnum = external global i64
@scaled = external global double
@user_scale = external global double
@1 = private constant [6 x i8] c"ptnum\00"
@2 = private constant [7 x i8] c"scaled\00"
@3 = private constant [11 x i8] c"user_scale\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IFF"(i64* %_bound_ptnum, double* %_bound_scaled, double* %_bound_user_scale) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %cast = sitofp i64 %_bound_ptnum1 to double
  %return = call double @"rand@FF"(double %cast)
  %_bound_user_scale3 = load double, double* %_bound_user_scale
  %output = fmul double %return, %_bound_user_scale3
  %return4 = call double @"chf@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0))
  %output5 = fmul double %output, %return4
  store double %output5, double* %_bound_scaled
  ret void
}

; Function Attrs: nounwind
declare double @"rand@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, double %scaled, double %user_scale) #1 {
__llvm_entry:
  %"<scaled>" = alloca double
  %0 = alloca i64
  %1 = alloca double
  store double %scaled, double* %"<scaled>"
  store i64 %ptnum, i64* %0
  store double %user_scale, double* %1
  call void @"__vex_snippet_snippet@IFF"(i64* %0, double* %"<scaled>", double* %1)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i64 %ptnum) #3
  %evalue3 = load double, double* %"<scaled>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), double %evalue3) #3
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0), double %user_scale) #3
  store i64 %gvalue, i64* @ptnum
  store double %gvalue4, double* @scaled
  store double %gvalue6, double* @user_scale
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [12 x i8] c"start_frame\00"
@1 = private constant [0 x i64] zeroinitializer
@__frame_ref = external global i64
@__numpt_error_fs = external global i64*
@__intrinsic_pivot_update_count = external global i64
@2 = private constant [12 x i8] c"__frame_ref\00"
@3 = private constant [17 x i8] c"__numpt_error_fs\00"
@4 = private constant [31 x i8] c"__intrinsic_pivot_update_count\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I[II"(i64* %_bound___frame_ref, i64** %_bound___numpt_error_fs, i64* %_bound___intrinsic_pivot_update_count) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i64 0, i64 0))
  %output = sub i64 %return, 1
  store i64 %output, i64* %_bound___frame_ref
  store i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), i64** %_bound___numpt_error_fs
  store i64 0, i64* %_bound___intrinsic_pivot_update_count
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %__frame_ref, i64* %__numpt_error_fs, i64 %__intrinsic_pivot_update_count) #2 {
__llvm_entry:
  %"<__numpt_error_fs>" = alloca i64*
  %"<__intrinsic_pivot_update_count>" = alloca i64
  %"<__frame_ref>" = alloca i64
  store i64 %__frame_ref, i64* %"<__frame_ref>"
  store i64* %__numpt_error_fs, i64** %"<__numpt_error_fs>"
  store i64 %__intrinsic_pivot_update_count, i64* %"<__intrinsic_pivot_update_count>"
  call void @"__vex_snippet_snippet@I[II"(i64* %"<__frame_ref>", i64** %"<__numpt_error_fs>", i64* %"<__intrinsic_pivot_update_count>")
  %evalue = load i64, i64* %"<__frame_ref>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i64 0, i64 0), i64 %evalue) #3
  %evalue1 = load i64*, i64** %"<__numpt_error_fs>"
  %gvalue2 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @3, i64 0, i64 0), i64* %evalue1) #3
  %evalue3 = load i64, i64* %"<__intrinsic_pivot_update_count>"
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @4, i64 0, i64 0), i64 %evalue3) #3
  store i64 %gvalue, i64* @__frame_ref
  store i64* %gvalue2, i64** @__numpt_error_fs
  store i64 %gvalue4, i64* @__intrinsic_pivot_update_count
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

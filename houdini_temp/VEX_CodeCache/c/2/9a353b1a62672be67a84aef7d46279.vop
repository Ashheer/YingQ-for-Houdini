;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [4 x i8] c"amp\00"
@Cd = external global <3 x double>
@P = external global <3 x double>
@1 = private constant [3 x i8] c"Cd\00"
@2 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VV"(<3 x double>* %_bound_Cd, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i64 0, i64 0))
  %_bound_Cd1 = load <3 x double>, <3 x double>* %_bound_Cd
  %return2 = call double @"avg@FV"(<3 x double> %_bound_Cd1)
  %_bound_P3 = load <3 x double>, <3 x double>* %_bound_P
  %output = fmul double %return2, %return
  %return6 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double %output, double 0.000000e+00)
  %output7 = call <3 x double> @"add@VV"(<3 x double> %_bound_P3, <3 x double> %return6)
  store <3 x double> %output7, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"avg@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %Cd, <3 x double> %P) #2 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %Cd, <3 x double>* %0
  call void @"__vex_snippet_snippet@VV"(<3 x double>* %0, <3 x double>* %"<P>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0), <3 x double> %Cd) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %evalue2) #3
  store <3 x double> %gvalue, <3 x double>* @Cd
  store <3 x double> %gvalue3, <3 x double>* @P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

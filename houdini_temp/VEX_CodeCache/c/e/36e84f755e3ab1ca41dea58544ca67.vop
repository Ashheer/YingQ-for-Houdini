;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"shape\00"
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [5 x i8] c"poly\00"
@3 = private constant [5 x i8] c"last\00"
@primnum = external global i64
@4 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_primnum) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum1)
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0))
  %cast = sitofp i64 %return2 to double
  %output = fsub double %cast, 2.000000e+00
  %output4 = fmul double 0x400921FB54442D18, %output
  %output7 = call double @"div@FF"(double %output4, double %cast)
  %return8 = call <16 x double> @"ident@4"()
  %return11 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 1.000000e+00, double 0.000000e+00)
  %output12 = call <16 x double> @"rotate@4FV"(<16 x double> %return8, double %output7, <3 x double> %return11)
  br label %cond

cond:                                             ; preds = %end29, %__llvm_entry
  %n.0 = phi i64 [ 0, %__llvm_entry ], [ %output54, %end29 ]
  %return15 = call i64 @"lt@III"(i64 %n.0, i64 %return2)
  %0 = icmp ne i64 %return15, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return18 = call i64 @"getcomp@I[II"(i64* %return, i64 %n.0)
  %return19 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return18)
  %return20 = call i64 @"addprim@IIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0))
  %return22 = call i64 @"setprimgroup@IISII"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), i64 %return20, i64 1)
  br label %cond23

end:                                              ; preds = %cond
  ret void

cond23:                                           ; preds = %body24, %body
  %i.0 = phi i64 [ 0, %body ], [ %output51, %body24 ]
  %return27 = call i64 @"len@I[I"(i64* %return)
  %return28 = call i64 @"lt@III"(i64 %i.0, i64 %return27)
  %1 = icmp ne i64 %return28, 0
  br i1 %1, label %body24, label %end29

body24:                                           ; preds = %cond23
  %return33 = call i64 @"getcomp@I[II"(i64* %return, i64 %i.0)
  %return34 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return33)
  %output37 = call <3 x double> @"sub@VV"(<3 x double> %return34, <3 x double> %return19)
  %output40 = call <3 x double> @"mul@V4"(<3 x double> %output37, <16 x double> %output12)
  %output43 = call <3 x double> @"add@VV"(<3 x double> %output40, <3 x double> %return19)
  %return45 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %output43)
  %return48 = call i64 @"addvertex@IIII"(i64 0, i64 %return20, i64 %return45)
  %output51 = add i64 %i.0, 1
  br label %cond23

end29:                                            ; preds = %cond23
  %output54 = add i64 %n.0, 1
  br label %cond
}

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #2

; Function Attrs: nounwind
declare <16 x double> @"ident@4"() #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"rotate@4FV"(<16 x double>, double, <3 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"addprim@IIS"(i64, i8*) #1

; Function Attrs: nounwind
declare i64 @"setprimgroup@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"mul@V4"(<3 x double>, <16 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"addvertex@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum) #1 {
__llvm_entry:
  %0 = alloca i64
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), i64 %primnum) #3
  store i64 %gvalue, i64* @primnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

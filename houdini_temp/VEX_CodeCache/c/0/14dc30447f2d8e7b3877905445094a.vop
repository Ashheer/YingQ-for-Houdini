;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"class_str\00"
@1 = private constant [12 x i8] c"../idattrib\00"
@2 = private constant [1 x i8] zeroinitializer
@3 = private constant [2 x i8] c"@\00"
@4 = private constant [3 x i8] c"==\00"
@5 = private constant [10 x i8] c"class_int\00"
@ptnum = external global i64
@name = external global i8*
@P = external global <3 x double>
@6 = private constant [6 x i8] c"ptnum\00"
@7 = private constant [5 x i8] c"name\00"
@8 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@ISV"(i64* %_bound_ptnum, i8** %_bound_name, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0))
  %return1 = call i8* @"chs@SS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"attribtype@IISS"(i64 0, i8* %return, i8* %return1)
  %output = call i8* @"add@SS"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), i8* %return1)
  %output4 = call i8* @"add@SS"(i8* %output, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0))
  %return5 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i64 0, i64 0))
  %return6 = call i64 @"eq@III"(i64 %return5, i64 0)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_bound_ptnum7 = load i64, i64* %_bound_ptnum
  %return8 = call i64* @"pointprims@[III"(i64 0, i64 %_bound_ptnum7)
  %return9 = call i64 @"getcomp@I[II"(i64* %return8, i64 0)
  %return12 = call i64 @"eq@III"(i64 %return2, i64 2)
  %return15 = call i8* @"prim@SISI"(i64 0, i8* %return1, i64 %return9)
  %return18 = call i64 @"prim@IISI"(i64 0, i8* %return1, i64 %return9)
  %return19 = call i8* @"itoa@SI"(i64 %return18)
  %1 = icmp ne i64 %return12, 0
  %return20 = select i1 %1, i8* %return15, i8* %return19
  %output21 = call i8* @"add@SS"(i8* %output4, i8* %return20)
  br label %end

false:                                            ; preds = %__llvm_entry
  %_bound_name23 = load i8*, i8** %_bound_name
  %output24 = call i8* @"add@SS"(i8* %output4, i8* %_bound_name23)
  br label %end

end:                                              ; preds = %false, %true
  %groupsyntax.0 = phi i8* [ %output21, %true ], [ %output24, %false ]
  %_bound_P25 = load <3 x double>, <3 x double>* %_bound_P
  %return26 = call double @"getcomp@FVI"(<3 x double> %_bound_P25, i64 1)
  %return28 = call <3 x double> @"getbbox_min@VIS"(i64 0, i8* %groupsyntax.0)
  %return29 = call double @"getcomp@FVI"(<3 x double> %return28, i64 1)
  %output30 = fsub double %return26, %return29
  %tmp = load <3 x double>, <3 x double>* %_bound_P
  %return31 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output30, i64 1)
  %output33 = extractvalue { double, <3 x double> } %return31, 1
  store <3 x double> %output33, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"attribtype@IISS"(i64, i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"add@SS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64* @"pointprims@[III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i8* @"prim@SISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"prim@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"getbbox_min@VIS"(i64, i8*) #2

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 1)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i8* %name, <3 x double> %P) #2 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca i8*
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  store i8* %name, i8** %1
  call void @"__vex_snippet_snippet@ISV"(i64* %0, i8** %1, <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i64 0, i64 0), i64 %ptnum) #4
  %gvalue4 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i64 0, i64 0), i8* %name) #4
  %evalue5 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), <3 x double> %evalue5) #4
  store i64 %gvalue, i64* @ptnum
  store i8* %gvalue4, i8** @name
  store <3 x double> %gvalue6, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i8* @"_export@SSS"(i8*, i8*)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"colorname\00"
@1 = private constant [10 x i8] c"primitive\00"
@2 = private constant [0 x i64] zeroinitializer
@__offsets = external global i64*
@__sizes = external global i64*
@3 = private constant [10 x i8] c"__offsets\00"
@4 = private constant [8 x i8] c"__sizes\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[I[I"(i64** %_bound___offsets, i64** %_bound___sizes) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0))
  %return2 = call i64 @"nuniqueval@IISS"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), i8* %return)
  %_bound___offsets3 = load i64*, i64** %_bound___offsets
  %output = call i64* @"resize@[II"(i64* %_bound___offsets3, i64 %return2)
  store i64* %output, i64** %_bound___offsets
  %_bound___sizes5 = load i64*, i64** %_bound___sizes
  %output7 = call i64* @"resize@[II"(i64* %_bound___sizes5, i64 %return2)
  store i64* %output7, i64** %_bound___sizes
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output33, %body ]
  %offset.0 = phi i64 [ 0, %__llvm_entry ], [ %output30, %body ]
  %return10 = call i64 @"lt@III"(i64 %i.0, i64 %return2)
  %0 = icmp ne i64 %return10, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return13 = call i64 @"uniqueval@IISSI"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), i8* %return, i64 %i.0)
  %return16 = call i64 @"findattribvalcount@IISSI"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), i8* %return, i64 %return13)
  %tmp = load i64*, i64** %_bound___offsets
  %return19 = call { i64, i64* } @"setcomp@I[III"(i64* %tmp, i64 %offset.0, i64 %i.0)
  %output21 = extractvalue { i64, i64* } %return19, 1
  store i64* %output21, i64** %_bound___offsets
  %tmp24 = load i64*, i64** %_bound___sizes
  %return25 = call { i64, i64* } @"setcomp@I[III"(i64* %tmp24, i64 %return16, i64 %i.0)
  %output27 = extractvalue { i64, i64* } %return25, 1
  store i64* %output27, i64** %_bound___sizes
  %output30 = add i64 %offset.0, %return16
  %output33 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"nuniqueval@IISS"(i64, i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64* @"resize@[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"uniqueval@IISSI"(i64, i8*, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"findattribvalcount@IISSI"(i64, i8*, i8*, i64) #2

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64* %__offsets, i64* %__sizes) #2 {
__llvm_entry:
  %"<__sizes>" = alloca i64*
  %"<__offsets>" = alloca i64*
  store i64* %__offsets, i64** %"<__offsets>"
  store i64* %__sizes, i64** %"<__sizes>"
  call void @"__vex_snippet_snippet@[I[I"(i64** %"<__offsets>", i64** %"<__sizes>")
  %evalue = load i64*, i64** %"<__offsets>"
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), i64* %evalue) #3
  %evalue1 = load i64*, i64** %"<__sizes>"
  %gvalue2 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), i64* %evalue1) #3
  store i64* %gvalue, i64** @__offsets
  store i64* %gvalue2, i64** @__sizes
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @2, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @2, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

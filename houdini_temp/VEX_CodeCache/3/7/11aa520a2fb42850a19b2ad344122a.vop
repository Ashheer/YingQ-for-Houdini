;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [14 x i8] c"../mTraceAxis\00"
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [20 x i8] c"packedfulltransform\00"
@transform = external global <16 x double>
@3 = private constant [10 x i8] c"transform\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@4"(<16 x double>* %_bound_transform) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"ne@III"(i64 %return, i64 4)
  %0 = icmp ne i64 %return1, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return2 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 0)
  %return3 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 0)
  %output = call <3 x double> @"sub@VV"(<3 x double> %return2, <3 x double> %return3)
  %return4 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %return5 = call i64 @"neg@II"(i64 1)
  %cast = sitofp i64 %return5 to double
  %return6 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double %cast)
  %return8 = call <9 x double> @"dihedral@3VV"(<3 x double> %return6, <3 x double> %return4)
  %cast9 = call <16 x double> @"set@43"(<9 x double> %return8)
  store <16 x double> %cast9, <16 x double>* %_bound_transform
  br label %end

false:                                            ; preds = %__llvm_entry
  %return11 = call <16 x double> @"primintrinsic@4ISI"(i64 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @2, i64 0, i64 0), i64 0)
  store <16 x double> %return11, <16 x double>* %_bound_transform
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <9 x double> @"dihedral@3VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <16 x double> @"set@43"(<9 x double>) #2

; Function Attrs: nounwind
declare <16 x double> @"primintrinsic@4ISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(<16 x double> %transform) #2 {
__llvm_entry:
  %"<transform>" = alloca <16 x double>
  store <16 x double> %transform, <16 x double>* %"<transform>"
  call void @"__vex_snippet_snippet@4"(<16 x double>* %"<transform>")
  %evalue = load <16 x double>, <16 x double>* %"<transform>"
  %gvalue = call <16 x double> @"_export@4S4"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), <16 x double> %evalue) #3
  store <16 x double> %gvalue, <16 x double>* @transform
  ret void
}

declare <16 x double> @"_export@4S4"(i8*, <16 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<16 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

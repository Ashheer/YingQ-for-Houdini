;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"transform\00"
@1 = private constant [12 x i8] c"appendpoint\00"
@2 = private constant [13 x i8] c"prependpoint\00"
@3 = private constant [7 x i8] c"delete\00"
@4 = private constant [7 x i8] c"insert\00"
@5 = private constant [5 x i8] c"fuse\00"
@6 = private constant [5 x i8] c"join\00"
@7 = private constant [6 x i8] c"close\00"
@8 = private constant [4 x i8] c"cut\00"
@9 = private constant [7 x i8] c"expand\00"
@10 = private constant [9 x i8] c"contract\00"
@11 = private constant [16 x i8] c"segmentcontract\00"
@12 = private constant [8 x i8] c"balance\00"
@13 = private constant [7 x i8] c"corner\00"
@14 = private constant [7 x i8] c"smooth\00"
@15 = private constant [5 x i8] c"pull\00"
@16 = private constant [14 x i8] c"segmentdelete\00"
@17 = private constant [8 x i8] c"reverse\00"
@18 = private constant [17 x i8] c"bezierhandlemove\00"
@19 = private constant [17 x i8] c"bakeroundcorners\00"
@20 = private constant [19 x i8] c"roundcornersradius\00"
@21 = private constant [18 x i8] c"roundcornerssplit\00"
@22 = private constant [17 x i8] c"roundcornersfuse\00"
@23 = private constant [12 x i8] c"evenlyspace\00"
@24 = private constant [20 x i8] c"straightenselection\00"
@25 = private constant [14 x i8] c"spaceoncircle\00"
@26 = private constant [8 x i8] c"flatten\00"
@27 = private constant [15 x i8] c"relaxselection\00"
@28 = private constant [4 x i8] c"nop\00"
@29 = private constant [29 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @7, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @8, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @9, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @10, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @11, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @12, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @14, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @15, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @16, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @17, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @18, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @19, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @20, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @21, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @22, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @23, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @24, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @25, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @26, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @27, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @28, i64 0, i64 0)]
@30 = private constant [8 x i8] c"optypes\00"

; Function Attrs: alwaysinline nounwind
define private void @__vex_snippet_snippet() #0 {
__llvm_entry:
  %return = call i64 @"len@I[S"(i8** getelementptr inbounds ([29 x i8*], [29 x i8*]* @29, i64 0, i64 0))
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %__impl_foreach_index_5.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %body ]
  %return4 = call i64 @"lt@III"(i64 %__impl_foreach_index_5.0, i64 %return)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return8 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  %return9 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return8)
  %return13 = call i8* @"getcomp@S[SI"(i8** getelementptr inbounds ([29 x i8*], [29 x i8*]* @29, i64 0, i64 0), i64 %return9)
  %return14 = call i64 @"setpointattrib@IISIS"(i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @30, i64 0, i64 0), i64 %return9, i8* %return13)
  %output = add i64 %__impl_foreach_index_5.0, 1
  br label %cond

end:                                              ; preds = %cond
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIS"(i64, i8*, i64, i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet() #2 {
__llvm_entry:
  call void @__vex_snippet_snippet()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@P = external global <3 x double>
@velocity = external global <3 x double>
@0 = private constant [2 x i8] c"P\00"
@1 = private constant [9 x i8] c"velocity\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VV"(<3 x double>* %_bound_P, <3 x double>* %_bound_velocity) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call <3 x double> @"minpos@VIV"(i64 1, <3 x double> %_bound_P1)
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %output = call <3 x double> @"sub@VV"(<3 x double> %_bound_P2, <3 x double> %return)
  %return4 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %return5 = call <16 x double> @"ident@4"()
  %return7 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 1.000000e+00, double 0.000000e+00)
  %output8 = call <16 x double> @"rotate@4FV"(<16 x double> %return5, double 0x3FF921FB54442D18, <3 x double> %return7)
  %output11 = call <3 x double> @"mul@V4"(<3 x double> %return4, <16 x double> %output8)
  %_bound_P14 = load <3 x double>, <3 x double>* %_bound_P
  %return15 = call double @"distance@FVV"(<3 x double> %return, <3 x double> %_bound_P14)
  %cast = call <3 x double> @"set@VF"(double %return15)
  %output16 = call <3 x double> @"mul@VV"(<3 x double> %output11, <3 x double> %cast)
  store <3 x double> %output16, <3 x double>* %_bound_velocity
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"minpos@VIV"(i64, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare <16 x double> @"ident@4"() #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"rotate@4FV"(<16 x double>, double, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"mul@V4"(<3 x double>, <16 x double>) #1

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, <3 x double> %velocity) #1 {
__llvm_entry:
  %"<velocity>" = alloca <3 x double>
  %0 = alloca <3 x double>
  store <3 x double> %velocity, <3 x double>* %"<velocity>"
  store <3 x double> %P, <3 x double>* %0
  call void @"__vex_snippet_snippet@VV"(<3 x double>* %0, <3 x double>* %"<velocity>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %P) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<velocity>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0), <3 x double> %evalue2) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store <3 x double> %gvalue3, <3 x double>* @velocity
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

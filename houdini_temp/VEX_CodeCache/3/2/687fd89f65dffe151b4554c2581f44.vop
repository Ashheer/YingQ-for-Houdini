;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x <3 x double>] zeroinitializer
@1 = private constant [100 x <3 x double>] [<3 x double> <double -5.000000e+00, double 0.000000e+00, double -5.000000e+00>, <3 x double> <double -3.888890e+00, double 0.000000e+00, double -5.000000e+00>, <3 x double> <double -2.777780e+00, double 0.000000e+00, double -5.000000e+00>, <3 x double> <double -1.666670e+00, double 0.000000e+00, double -5.000000e+00>, <3 x double> <double -5.555550e-01, double 0.000000e+00, double -5.000000e+00>, <3 x double> <double 5.555560e-01, double 0.000000e+00, double -5.000000e+00>, <3 x double> <double 1.666670e+00, double 0.000000e+00, double -5.000000e+00>, <3 x double> <double 2.777780e+00, double 0.000000e+00, double -5.000000e+00>, <3 x double> <double 3.888890e+00, double 0.000000e+00, double -5.000000e+00>, <3 x double> <double 5.000000e+00, double 0.000000e+00, double -5.000000e+00>, <3 x double> <double -5.000000e+00, double 0.000000e+00, double -3.888890e+00>, <3 x double> <double -3.888890e+00, double 0.000000e+00, double -3.888890e+00>, <3 x double> <double -2.777780e+00, double 0.000000e+00, double -3.888890e+00>, <3 x double> <double -1.666670e+00, double 0.000000e+00, double -3.888890e+00>, <3 x double> <double -5.555550e-01, double 0.000000e+00, double -3.888890e+00>, <3 x double> <double 5.555560e-01, double 0.000000e+00, double -3.888890e+00>, <3 x double> <double 1.666670e+00, double 0.000000e+00, double -3.888890e+00>, <3 x double> <double 2.777780e+00, double 0.000000e+00, double -3.888890e+00>, <3 x double> <double 3.888890e+00, double 0.000000e+00, double -3.888890e+00>, <3 x double> <double 5.000000e+00, double 0.000000e+00, double -3.888890e+00>, <3 x double> <double -5.000000e+00, double 0.000000e+00, double -2.777780e+00>, <3 x double> <double -3.888890e+00, double 0.000000e+00, double -2.777780e+00>, <3 x double> <double -2.777780e+00, double 0.000000e+00, double -2.777780e+00>, <3 x double> <double -1.666670e+00, double 0.000000e+00, double -2.777780e+00>, <3 x double> <double -5.555550e-01, double 0.000000e+00, double -2.777780e+00>, <3 x double> <double 5.555560e-01, double 0.000000e+00, double -2.777780e+00>, <3 x double> <double 1.666670e+00, double 0.000000e+00, double -2.777780e+00>, <3 x double> <double 2.777780e+00, double 0.000000e+00, double -2.777780e+00>, <3 x double> <double 3.888890e+00, double 0.000000e+00, double -2.777780e+00>, <3 x double> <double 5.000000e+00, double 0.000000e+00, double -2.777780e+00>, <3 x double> <double -5.000000e+00, double 0.000000e+00, double -1.666670e+00>, <3 x double> <double -3.888890e+00, double 0.000000e+00, double -1.666670e+00>, <3 x double> <double -2.777780e+00, double 0.000000e+00, double -1.666670e+00>, <3 x double> <double -1.666670e+00, double 0.000000e+00, double -1.666670e+00>, <3 x double> <double -5.555550e-01, double 0.000000e+00, double -1.666670e+00>, <3 x double> <double 5.555560e-01, double 0.000000e+00, double -1.666670e+00>, <3 x double> <double 1.666670e+00, double 0.000000e+00, double -1.666670e+00>, <3 x double> <double 2.777780e+00, double 0.000000e+00, double -1.666670e+00>, <3 x double> <double 3.888890e+00, double 0.000000e+00, double -1.666670e+00>, <3 x double> <double 5.000000e+00, double 0.000000e+00, double -1.666670e+00>, <3 x double> <double -5.000000e+00, double 0.000000e+00, double -5.555550e-01>, <3 x double> <double -3.888890e+00, double 0.000000e+00, double -5.555550e-01>, <3 x double> <double -2.777780e+00, double 0.000000e+00, double -5.555550e-01>, <3 x double> <double -1.666670e+00, double 0.000000e+00, double -5.555550e-01>, <3 x double> <double -5.555550e-01, double 0.000000e+00, double -5.555550e-01>, <3 x double> <double 5.555560e-01, double 0.000000e+00, double -5.555550e-01>, <3 x double> <double 1.666670e+00, double 0.000000e+00, double -5.555550e-01>, <3 x double> <double 2.777780e+00, double 0.000000e+00, double -5.555550e-01>, <3 x double> <double 3.888890e+00, double 0.000000e+00, double -5.555550e-01>, <3 x double> <double 5.000000e+00, double 0.000000e+00, double -5.555550e-01>, <3 x double> <double -5.000000e+00, double 0.000000e+00, double 5.555560e-01>, <3 x double> <double -3.888890e+00, double 0.000000e+00, double 5.555560e-01>, <3 x double> <double -2.777780e+00, double 0.000000e+00, double 5.555560e-01>, <3 x double> <double -1.666670e+00, double 0.000000e+00, double 5.555560e-01>, <3 x double> <double -5.555550e-01, double 0.000000e+00, double 5.555560e-01>, <3 x double> <double 5.555560e-01, double 0.000000e+00, double 5.555560e-01>, <3 x double> <double 1.666670e+00, double 0.000000e+00, double 5.555560e-01>, <3 x double> <double 2.777780e+00, double 0.000000e+00, double 5.555560e-01>, <3 x double> <double 3.888890e+00, double 0.000000e+00, double 5.555560e-01>, <3 x double> <double 5.000000e+00, double 0.000000e+00, double 5.555560e-01>, <3 x double> <double -5.000000e+00, double 0.000000e+00, double 1.666670e+00>, <3 x double> <double -3.888890e+00, double 0.000000e+00, double 1.666670e+00>, <3 x double> <double -2.777780e+00, double 0.000000e+00, double 1.666670e+00>, <3 x double> <double -1.666670e+00, double 0.000000e+00, double 1.666670e+00>, <3 x double> <double -5.555550e-01, double 0.000000e+00, double 1.666670e+00>, <3 x double> <double 5.555560e-01, double 0.000000e+00, double 1.666670e+00>, <3 x double> <double 1.666670e+00, double 0.000000e+00, double 1.666670e+00>, <3 x double> <double 2.777780e+00, double 0.000000e+00, double 1.666670e+00>, <3 x double> <double 3.888890e+00, double 0.000000e+00, double 1.666670e+00>, <3 x double> <double 5.000000e+00, double 0.000000e+00, double 1.666670e+00>, <3 x double> <double -5.000000e+00, double 0.000000e+00, double 2.777780e+00>, <3 x double> <double -3.888890e+00, double 0.000000e+00, double 2.777780e+00>, <3 x double> <double -2.777780e+00, double 0.000000e+00, double 2.777780e+00>, <3 x double> <double -1.666670e+00, double 0.000000e+00, double 2.777780e+00>, <3 x double> <double -5.555550e-01, double 0.000000e+00, double 2.777780e+00>, <3 x double> <double 5.555560e-01, double 0.000000e+00, double 2.777780e+00>, <3 x double> <double 1.666670e+00, double 0.000000e+00, double 2.777780e+00>, <3 x double> <double 2.777780e+00, double 0.000000e+00, double 2.777780e+00>, <3 x double> <double 3.888890e+00, double 0.000000e+00, double 2.777780e+00>, <3 x double> <double 5.000000e+00, double 0.000000e+00, double 2.777780e+00>, <3 x double> <double -5.000000e+00, double 0.000000e+00, double 3.888890e+00>, <3 x double> <double -3.888890e+00, double 0.000000e+00, double 3.888890e+00>, <3 x double> <double -2.777780e+00, double 0.000000e+00, double 3.888890e+00>, <3 x double> <double -1.666670e+00, double 0.000000e+00, double 3.888890e+00>, <3 x double> <double -5.555550e-01, double 0.000000e+00, double 3.888890e+00>, <3 x double> <double 5.555560e-01, double 0.000000e+00, double 3.888890e+00>, <3 x double> <double 1.666670e+00, double 0.000000e+00, double 3.888890e+00>, <3 x double> <double 2.777780e+00, double 0.000000e+00, double 3.888890e+00>, <3 x double> <double 3.888890e+00, double 0.000000e+00, double 3.888890e+00>, <3 x double> <double 5.000000e+00, double 0.000000e+00, double 3.888890e+00>, <3 x double> <double -5.000000e+00, double 0.000000e+00, double 5.000000e+00>, <3 x double> <double -3.888890e+00, double 0.000000e+00, double 5.000000e+00>, <3 x double> <double -2.777780e+00, double 0.000000e+00, double 5.000000e+00>, <3 x double> <double -1.666670e+00, double 0.000000e+00, double 5.000000e+00>, <3 x double> <double -5.555550e-01, double 0.000000e+00, double 5.000000e+00>, <3 x double> <double 5.555560e-01, double 0.000000e+00, double 5.000000e+00>, <3 x double> <double 1.666670e+00, double 0.000000e+00, double 5.000000e+00>, <3 x double> <double 2.777780e+00, double 0.000000e+00, double 5.000000e+00>, <3 x double> <double 3.888890e+00, double 0.000000e+00, double 5.000000e+00>, <3 x double> <double 5.000000e+00, double 0.000000e+00, double 5.000000e+00>]
@2 = private constant [0 x i64] zeroinitializer
@3 = private constant [324 x i64] [i64 0, i64 1, i64 11, i64 10, i64 1, i64 2, i64 12, i64 11, i64 2, i64 3, i64 13, i64 12, i64 3, i64 4, i64 14, i64 13, i64 4, i64 5, i64 15, i64 14, i64 5, i64 6, i64 16, i64 15, i64 6, i64 7, i64 17, i64 16, i64 7, i64 8, i64 18, i64 17, i64 8, i64 9, i64 19, i64 18, i64 10, i64 11, i64 21, i64 20, i64 11, i64 12, i64 22, i64 21, i64 12, i64 13, i64 23, i64 22, i64 13, i64 14, i64 24, i64 23, i64 14, i64 15, i64 25, i64 24, i64 15, i64 16, i64 26, i64 25, i64 16, i64 17, i64 27, i64 26, i64 17, i64 18, i64 28, i64 27, i64 18, i64 19, i64 29, i64 28, i64 20, i64 21, i64 31, i64 30, i64 21, i64 22, i64 32, i64 31, i64 22, i64 23, i64 33, i64 32, i64 23, i64 24, i64 34, i64 33, i64 24, i64 25, i64 35, i64 34, i64 25, i64 26, i64 36, i64 35, i64 26, i64 27, i64 37, i64 36, i64 27, i64 28, i64 38, i64 37, i64 28, i64 29, i64 39, i64 38, i64 30, i64 31, i64 41, i64 40, i64 31, i64 32, i64 42, i64 41, i64 32, i64 33, i64 43, i64 42, i64 33, i64 34, i64 44, i64 43, i64 34, i64 35, i64 45, i64 44, i64 35, i64 36, i64 46, i64 45, i64 36, i64 37, i64 47, i64 46, i64 37, i64 38, i64 48, i64 47, i64 38, i64 39, i64 49, i64 48, i64 40, i64 41, i64 51, i64 50, i64 41, i64 42, i64 52, i64 51, i64 42, i64 43, i64 53, i64 52, i64 43, i64 44, i64 54, i64 53, i64 44, i64 45, i64 55, i64 54, i64 45, i64 46, i64 56, i64 55, i64 46, i64 47, i64 57, i64 56, i64 47, i64 48, i64 58, i64 57, i64 48, i64 49, i64 59, i64 58, i64 50, i64 51, i64 61, i64 60, i64 51, i64 52, i64 62, i64 61, i64 52, i64 53, i64 63, i64 62, i64 53, i64 54, i64 64, i64 63, i64 54, i64 55, i64 65, i64 64, i64 55, i64 56, i64 66, i64 65, i64 56, i64 57, i64 67, i64 66, i64 57, i64 58, i64 68, i64 67, i64 58, i64 59, i64 69, i64 68, i64 60, i64 61, i64 71, i64 70, i64 61, i64 62, i64 72, i64 71, i64 62, i64 63, i64 73, i64 72, i64 63, i64 64, i64 74, i64 73, i64 64, i64 65, i64 75, i64 74, i64 65, i64 66, i64 76, i64 75, i64 66, i64 67, i64 77, i64 76, i64 67, i64 68, i64 78, i64 77, i64 68, i64 69, i64 79, i64 78, i64 70, i64 71, i64 81, i64 80, i64 71, i64 72, i64 82, i64 81, i64 72, i64 73, i64 83, i64 82, i64 73, i64 74, i64 84, i64 83, i64 74, i64 75, i64 85, i64 84, i64 75, i64 76, i64 86, i64 85, i64 76, i64 77, i64 87, i64 86, i64 77, i64 78, i64 88, i64 87, i64 78, i64 79, i64 89, i64 88, i64 80, i64 81, i64 91, i64 90, i64 81, i64 82, i64 92, i64 91, i64 82, i64 83, i64 93, i64 92, i64 83, i64 84, i64 94, i64 93, i64 84, i64 85, i64 95, i64 94, i64 85, i64 86, i64 96, i64 95, i64 86, i64 87, i64 97, i64 96, i64 87, i64 88, i64 98, i64 97, i64 88, i64 89, i64 99, i64 98]
@4 = private constant [81 x i64] [i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4]
@5 = private constant [100 x <3 x double>] [<3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>]
@pts = external global <3 x double>*
@ptcount = external global i64
@primpts = external global i64*
@primcount = external global i64
@ptstart = external global i64*
@colors = external global <3 x double>*
@ncolors = external global i64
@openprims = external global i64*
@6 = private constant [4 x i8] c"pts\00"
@7 = private constant [8 x i8] c"ptcount\00"
@8 = private constant [8 x i8] c"primpts\00"
@9 = private constant [10 x i8] c"primcount\00"
@10 = private constant [8 x i8] c"ptstart\00"
@11 = private constant [7 x i8] c"colors\00"
@12 = private constant [8 x i8] c"ncolors\00"
@13 = private constant [10 x i8] c"openprims\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[VI[II[I[VI[I"(<3 x double>** %_bound_pts, i64* %_bound_ptcount, i64** %_bound_primpts, i64* %_bound_primcount, i64** %_bound_ptstart, <3 x double>** %_bound_colors, i64* %_bound_ncolors, i64** %_bound_openprims) #0 {
__llvm_entry:
  store <3 x double>* getelementptr inbounds ([100 x <3 x double>], [100 x <3 x double>]* @1, i64 0, i64 0), <3 x double>** %_bound_pts
  %return = call i64 @"len@I[V"(<3 x double>* getelementptr inbounds ([100 x <3 x double>], [100 x <3 x double>]* @1, i64 0, i64 0))
  store i64 %return, i64* %_bound_ptcount
  store i64* getelementptr inbounds ([324 x i64], [324 x i64]* @3, i64 0, i64 0), i64** %_bound_primpts
  %return5 = call i64 @"len@I[I"(i64* getelementptr inbounds ([81 x i64], [81 x i64]* @4, i64 0, i64 0))
  store i64 %return5, i64* %_bound_primcount
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %__impl_foreach_index_3.0 = phi i64 [ 0, %__llvm_entry ], [ %output21, %body ]
  %ptstart.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @2, i64 0, i64 0), %__llvm_entry ], [ %output, %body ]
  %start.0 = phi i64 [ 0, %__llvm_entry ], [ %output19, %body ]
  %return11 = call i64 @"lt@III"(i64 %__impl_foreach_index_3.0, i64 %return5)
  %0 = icmp ne i64 %return11, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return14 = call i64 @"getcomp@I[II"(i64* getelementptr inbounds ([81 x i64], [81 x i64]* @4, i64 0, i64 0), i64 %__impl_foreach_index_3.0)
  %output = call i64* @"push@[II"(i64* %ptstart.0, i64 %start.0)
  %output19 = add i64 %start.0, %return14
  %output21 = add i64 %__impl_foreach_index_3.0, 1
  br label %cond

end:                                              ; preds = %cond
  %output24 = call i64* @"push@[II"(i64* %ptstart.0, i64 %start.0)
  store i64* %output24, i64** %_bound_ptstart
  store <3 x double>* getelementptr inbounds ([100 x <3 x double>], [100 x <3 x double>]* @5, i64 0, i64 0), <3 x double>** %_bound_colors
  %return28 = call i64 @"len@I[V"(<3 x double>* getelementptr inbounds ([100 x <3 x double>], [100 x <3 x double>]* @5, i64 0, i64 0))
  store i64 %return28, i64* %_bound_ncolors
  store i64* getelementptr inbounds ([0 x i64], [0 x i64]* @2, i64 0, i64 0), i64** %_bound_openprims
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"len@I[V"(<3 x double>*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64* @"push@[II"(i64*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double>* %pts, i64 %ptcount, i64* %primpts, i64 %primcount, i64* %ptstart, <3 x double>* %colors, i64 %ncolors, i64* %openprims) #2 {
__llvm_entry:
  %"<ptcount>" = alloca i64
  %"<primpts>" = alloca i64*
  %"<primcount>" = alloca i64
  %"<ptstart>" = alloca i64*
  %"<colors>" = alloca <3 x double>*
  %"<ncolors>" = alloca i64
  %"<openprims>" = alloca i64*
  %"<pts>" = alloca <3 x double>*
  store <3 x double>* %pts, <3 x double>** %"<pts>"
  store i64 %ptcount, i64* %"<ptcount>"
  store i64* %primpts, i64** %"<primpts>"
  store i64 %primcount, i64* %"<primcount>"
  store i64* %ptstart, i64** %"<ptstart>"
  store <3 x double>* %colors, <3 x double>** %"<colors>"
  store i64 %ncolors, i64* %"<ncolors>"
  store i64* %openprims, i64** %"<openprims>"
  call void @"__vex_snippet_snippet@[VI[II[I[VI[I"(<3 x double>** %"<pts>", i64* %"<ptcount>", i64** %"<primpts>", i64* %"<primcount>", i64** %"<ptstart>", <3 x double>** %"<colors>", i64* %"<ncolors>", i64** %"<openprims>")
  %evalue = load <3 x double>*, <3 x double>** %"<pts>"
  %gvalue = call <3 x double>* @"_export@[VS[V"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @6, i64 0, i64 0), <3 x double>* %evalue) #3
  %evalue1 = load i64, i64* %"<ptcount>"
  %gvalue2 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @7, i64 0, i64 0), i64 %evalue1) #3
  %evalue3 = load i64*, i64** %"<primpts>"
  %gvalue4 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0), i64* %evalue3) #3
  %evalue5 = load i64, i64* %"<primcount>"
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @9, i64 0, i64 0), i64 %evalue5) #3
  %evalue7 = load i64*, i64** %"<ptstart>"
  %gvalue8 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @10, i64 0, i64 0), i64* %evalue7) #3
  %evalue9 = load <3 x double>*, <3 x double>** %"<colors>"
  %gvalue10 = call <3 x double>* @"_export@[VS[V"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @11, i64 0, i64 0), <3 x double>* %evalue9) #3
  %evalue11 = load i64, i64* %"<ncolors>"
  %gvalue12 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @12, i64 0, i64 0), i64 %evalue11) #3
  %evalue13 = load i64*, i64** %"<openprims>"
  %gvalue14 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @13, i64 0, i64 0), i64* %evalue13) #3
  store <3 x double>* %gvalue, <3 x double>** @pts
  store i64 %gvalue2, i64* @ptcount
  store i64* %gvalue4, i64** @primpts
  store i64 %gvalue6, i64* @primcount
  store i64* %gvalue8, i64** @ptstart
  store <3 x double>* %gvalue10, <3 x double>** @colors
  store i64 %gvalue12, i64* @ncolors
  store i64* %gvalue14, i64** @openprims
  ret void
}

declare <3 x double>* @"_export@[VS[V"(i8*, <3 x double>*)

declare i64 @"_export@ISI"(i8*, i64)

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @0, i64 0, i64 0), i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @2, i64 0, i64 0), i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @2, i64 0, i64 0), <3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @0, i64 0, i64 0), i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @2, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

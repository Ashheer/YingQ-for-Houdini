;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [6 x i8] c"point\00"
@2 = private constant [8 x i8] c"__piece\00"
@3 = private constant [13 x i8] c"__otherpiece\00"
@4 = private constant [9 x i8] c"polyline\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound___piece, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound___piece1 = load i64, i64* %_bound___piece
  %return = call i64* @"findattribval@[IISSI"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i64 %_bound___piece1)
  %return2 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %end15, %__llvm_entry
  %__impl_foreach_index_3.0 = phi i64 [ 0, %__llvm_entry ], [ %output30, %end15 ]
  %known_pieces.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %__llvm_entry ], [ %known_pieces.1, %end15 ]
  %return5 = call i64 @"lt@III"(i64 %__impl_foreach_index_3.0, i64 %return2)
  %0 = icmp ne i64 %return5, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %_bound___piece6 = load i64, i64* %_bound___piece
  %return7 = call i64* @"findattribval@[IISSI"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i64 %_bound___piece6)
  %return9 = call i64 @"getcomp@I[II"(i64* %return7, i64 %__impl_foreach_index_3.0)
  %return11 = call i64 @"point@IISI"(i64 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @3, i64 0, i64 0), i64 %return9)
  %_bound___piece12 = load i64, i64* %_bound___piece
  %return14 = call i64 @"lt@III"(i64 %_bound___piece12, i64 %return11)
  %1 = icmp ne i64 %return14, 0
  br i1 %1, label %true, label %end15

end:                                              ; preds = %cond
  ret void

true:                                             ; preds = %body
  %return18 = call i64 @"find@I[II"(i64* %known_pieces.0, i64 %return11)
  %return19 = call i64 @"lt@III"(i64 %return18, i64 0)
  %2 = icmp ne i64 %return19, 0
  br i1 %2, label %true20, label %end15

end15:                                            ; preds = %true, %true20, %body
  %known_pieces.1 = phi i64* [ %output, %true20 ], [ %known_pieces.0, %true ], [ %known_pieces.0, %body ]
  %output30 = add i64 %__impl_foreach_index_3.0, 1
  br label %cond

true20:                                           ; preds = %true
  %output = call i64* @"append@[II"(i64* %known_pieces.0, i64 %return11)
  %return25 = call i64 @"findattribval@IISSI"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i64 %return11)
  %_bound_ptnum26 = load i64, i64* %_bound_ptnum
  %return28 = call i64 @"addprim@IISII"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0), i64 %_bound_ptnum26, i64 %return25)
  br label %end15
}

; Function Attrs: nounwind
declare i64* @"findattribval@[IISSI"(i64, i8*, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"find@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64 @"findattribval@IISSI"(i64, i8*, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"addprim@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %__piece, i64 %ptnum) #1 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  store i64 %__piece, i64* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@II"(i64* %0, i64* %1)
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

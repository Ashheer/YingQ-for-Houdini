;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [12 x i8] c"cuttdirmode\00"
@1 = private constant [5 x i8] c"skew\00"
@N = external global <3 x double>
@2 = private constant [2 x i8] c"N\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@V"(<3 x double>* %_bound_N) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"eq@III"(i64 %return, i64 1)
  %0 = icmp ne i64 %return1, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %return2 = call <3 x double> @"getbbox_size@VI"(i64 1)
  %return3 = call <16 x double> @"ident@4"()
  %return5 = call double @"max@FV"(<3 x double> %return2)
  %return7 = call double @"getcomp@FVI"(<3 x double> %return2, i64 1)
  %return9 = fcmp olt double %return7, %return5
  %return14 = call double @"getcomp@FVI"(<3 x double> %return2, i64 0)
  %return16 = call double @"getcomp@FVI"(<3 x double> %return2, i64 2)
  %return17 = fcmp oge double %return14, %return16
  br i1 %return9, label %true11, label %false

true11:                                           ; preds = %end
  br i1 %return17, label %true19, label %false20

false:                                            ; preds = %end
  br i1 %return17, label %true28, label %false29

end12:                                            ; preds = %true28, %false29, %true19, %false20
  %axis.0 = phi <3 x double> [ <double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>, %true19 ], [ <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>, %false20 ], [ <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>, %true28 ], [ <double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>, %false29 ]
  %_bound_N31 = load <3 x double>, <3 x double>* %_bound_N
  %return34 = call <3 x double> @"cross@VVV"(<3 x double> %_bound_N31, <3 x double> %axis.0)
  %return35 = call <3 x double> @"cross@VVV"(<3 x double> %_bound_N31, <3 x double> %return34)
  %return37 = call double @"ch@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0))
  %return38 = call double @"radians@FF"(double %return37)
  %output = call <16 x double> @"rotate@4FV"(<16 x double> %return3, double %return38, <3 x double> %return35)
  %_bound_N40 = load <3 x double>, <3 x double>* %_bound_N
  %output42 = call <3 x double> @"mul@V4"(<3 x double> %_bound_N40, <16 x double> %output)
  store <3 x double> %output42, <3 x double>* %_bound_N
  br label %UnifiedReturnBlock

true19:                                           ; preds = %true11
  br label %end12

false20:                                          ; preds = %true11
  br label %end12

true28:                                           ; preds = %false
  br label %end12

false29:                                          ; preds = %false
  br label %end12

UnifiedReturnBlock:                               ; preds = %end12, %true
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"getbbox_size@VI"(i64) #2

; Function Attrs: nounwind
declare <16 x double> @"ident@4"() #2

; Function Attrs: nounwind
declare double @"max@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"radians@FF"(double) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"rotate@4FV"(<16 x double>, double, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"mul@V4"(<3 x double>, <16 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %N) #2 {
__llvm_entry:
  %"<N>" = alloca <3 x double>
  store <3 x double> %N, <3 x double>* %"<N>"
  call void @"__vex_snippet_snippet@V"(<3 x double>* %"<N>")
  %evalue = load <3 x double>, <3 x double>* %"<N>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %evalue) #3
  store <3 x double> %gvalue, <3 x double>* @N
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

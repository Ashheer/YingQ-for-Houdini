;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"@__class=\00"
@__class = external global i64
@P = external global <3 x double>
@__scalefactor = external global double
@__uv = external global <3 x double>
@1 = private constant [8 x i8] c"__class\00"
@2 = private constant [2 x i8] c"P\00"
@3 = private constant [14 x i8] c"__scalefactor\00"
@4 = private constant [5 x i8] c"__uv\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVFV"(i64* %_bound___class, <3 x double>* %_bound_P, double* %_bound___scalefactor, <3 x double>* %_bound___uv) #0 {
__llvm_entry:
  %_bound___class1 = load i64, i64* %_bound___class
  %return = call i8* @"itoa@SI"(i64 %_bound___class1)
  %output = call i8* @"add@SS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), i8* %return)
  %return2 = call <3 x double> @"getbbox_center@VIS"(i64 0, i8* %output)
  %_bound_P3 = load <3 x double>, <3 x double>* %_bound_P
  %output5 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P3, <3 x double> %return2)
  store <3 x double> %output5, <3 x double>* %_bound_P
  %_bound___scalefactor7 = load double, double* %_bound___scalefactor
  %cast = call <3 x double> @"set@VF"(double %_bound___scalefactor7)
  %output8 = call <3 x double> @"mul@VV"(<3 x double> %output5, <3 x double> %cast)
  %output11 = call <3 x double> @"add@VV"(<3 x double> %output8, <3 x double> %return2)
  store <3 x double> %output11, <3 x double>* %_bound_P
  %return13 = call double @"getcomp@FVI"(<3 x double> %output11, i64 0)
  %return15 = call double @"getcomp@FVI"(<3 x double> %output11, i64 2)
  %return16 = call <3 x double> @"set@VFFF"(double %return13, double %return15, double 0.000000e+00)
  store <3 x double> %return16, <3 x double>* %_bound___uv
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #1

; Function Attrs: nounwind readnone
declare i8* @"add@SS"(i8*, i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"getbbox_center@VIS"(i64, i8*) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %__class, <3 x double> %P, double %__scalefactor, <3 x double> %__uv) #2 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %"<__uv>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca double
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %__uv, <3 x double>* %"<__uv>"
  store i64 %__class, i64* %0
  store double %__scalefactor, double* %1
  call void @"__vex_snippet_snippet@IVFV"(i64* %0, <3 x double>* %"<P>", double* %1, <3 x double>* %"<__uv>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i64 %__class) #3
  %evalue3 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %evalue3) #3
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @3, i64 0, i64 0), double %__scalefactor) #3
  %evalue7 = load <3 x double>, <3 x double>* %"<__uv>"
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0), <3 x double> %evalue7) #3
  store i64 %gvalue, i64* @__class
  store <3 x double> %gvalue4, <3 x double>* @P
  store double %gvalue6, double* @__scalefactor
  store <3 x double> %gvalue8, <3 x double>* @__uv
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

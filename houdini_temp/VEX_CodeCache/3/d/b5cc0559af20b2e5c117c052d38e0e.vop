;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [7 x i8] c"orient\00"
@2 = private constant [9 x i8] c"polyline\00"
@3 = private constant [13 x i8] c"stretchshear\00"
@4 = private constant [11 x i8] c"restlength\00"
@5 = private constant [11 x i8] c"restvector\00"
@6 = private constant [10 x i8] c"bendtwist\00"
@7 = private constant [11 x i8] c"branchweld\00"
@8 = private constant [10 x i8] c"stiffness\00"
@9 = private constant [13 x i8] c"dampingratio\00"
@10 = private constant [5 x i8] c"type\00"
@11 = private constant [13 x i8] c"branchstitch\00"
@12 = private constant [16 x i8] c"__constraintsrc\00"
@13 = private constant [18 x i8] c"__bendconstraints\00"
@14 = private constant [17 x i8] c"domaxbranchangle\00"
@15 = private constant [15 x i8] c"maxbranchangle\00"
@ptnum = external global i64
@16 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private double @"computeDistanceRestLength@FIII"(i64* %geo, i64* %p0, i64* %p1) #0 {
__llvm_entry:
  %geo1 = load i64, i64* %geo
  %p02 = load i64, i64* %p0
  %return = call <3 x double> @"point@VISI"(i64 %geo1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %p02)
  %geo3 = load i64, i64* %geo
  %p14 = load i64, i64* %p1
  %return5 = call <3 x double> @"point@VISI"(i64 %geo3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %p14)
  %return6 = call double @"distance@FVV"(<3 x double> %return, <3 x double> %return5)
  ret double %return6
}

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private <4 x double> @"computeBendTwistRestVector@PIII"(i64* %geo, i64* %pt0, i64* %pt1) #0 {
__llvm_entry:
  %geo1 = load i64, i64* %geo
  %pt02 = load i64, i64* %pt0
  %return = call <4 x double> @"point@PISI"(i64 %geo1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i64 %pt02)
  %output = call <4 x double> @"mul@PP"(<4 x double> %return, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double 1.000000e+00>)
  %geo3 = load i64, i64* %geo
  %pt14 = load i64, i64* %pt1
  %return5 = call <4 x double> @"point@PISI"(i64 %geo3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i64 %pt14)
  %return8 = call <4 x double> @"qmultiply@PPP"(<4 x double> %output, <4 x double> %return5)
  %output10 = call <4 x double> @"add@PP"(<4 x double> %return8, <4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  %output12 = call <4 x double> @"sub@PP"(<4 x double> %return8, <4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  %return15 = call double @"dot@FPP"(<4 x double> %output12, <4 x double> %output12)
  %return18 = call double @"dot@FPP"(<4 x double> %output10, <4 x double> %output10)
  %return19 = fcmp ogt double %return15, %return18
  br i1 %return19, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return22 = call i64 @"neg@II"(i64 1)
  %cast = call <4 x double> @"set@PI"(i64 %return22)
  %output23 = call <4 x double> @"mul@PP"(<4 x double> %return8, <4 x double> %cast)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %restDarbeaux.0 = phi <4 x double> [ %output23, %true ], [ %return8, %__llvm_entry ]
  ret <4 x double> %restDarbeaux.0
}

; Function Attrs: nounwind
declare <4 x double> @"point@PISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"mul@PP"(<4 x double>, <4 x double>) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"qmultiply@PPP"(<4 x double>, <4 x double>) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"add@PP"(<4 x double>, <4 x double>) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"sub@PP"(<4 x double>, <4 x double>) #2

; Function Attrs: nounwind
declare double @"dot@FPP"(<4 x double>, <4 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PI"(i64) #2

; Function Attrs: alwaysinline nounwind
define private void @"createOutEdgeConstraint@IISSIS"(i64* %geo, i64* %ptnum, i8** %srcgrp, i8** %type, i64* %outgeo, i8** %outgrp) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %geo1 = load i64, i64* %geo
  %ptnum2 = load i64, i64* %ptnum
  %return = call i64* @"neighbours@[III"(i64 %geo1, i64 %ptnum2)
  %return4 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %true, %__llvm_entry
  %__impl_foreach_index_219.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %true ]
  %return7 = call i64 @"lt@III"(i64 %__impl_foreach_index_219.0, i64 %return4)
  %3 = icmp ne i64 %return7, 0
  br i1 %3, label %body, label %end

body:                                             ; preds = %cond
  %return10 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_219.0)
  %geo11 = load i64, i64* %geo
  %srcgrp12 = load i8*, i8** %srcgrp
  %return14 = call i64 @"inpointgroup@IISI"(i64 %geo11, i8* %srcgrp12, i64 %return10)
  %return15 = call i64 @"not@II"(i64 %return14)
  %geo16 = load i64, i64* %geo
  %ptnum17 = load i64, i64* %ptnum
  %return19 = call i64 @"pointhedge@IIII"(i64 %geo16, i64 %ptnum17, i64 %return10)
  %return20 = call i64 @"lt@III"(i64 %return19, i64 0)
  %return21 = call i64 @"or@III"(i64 %return15, i64 %return20)
  %4 = icmp ne i64 %return21, 0
  br i1 %4, label %true, label %end22

end:                                              ; preds = %cond
  br label %UnifiedReturnBlock

true:                                             ; preds = %body
  %output = add i64 %__impl_foreach_index_219.0, 1
  br label %cond

end22:                                            ; preds = %body
  %outgeo23 = load i64, i64* %outgeo
  %ptnum24 = load i64, i64* %ptnum
  %return26 = call i64* @"array@[I:II"(i64 %ptnum24, i64 %return10)
  %return27 = call i64 @"addprim@IIS[I"(i64 %outgeo23, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), i64* %return26)
  %type28 = load i8*, i8** %type
  %return29 = call i64 @"eq@ISS"(i8* %type28, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @3, i64 0, i64 0))
  %5 = icmp ne i64 %return29, 0
  %outgeo32 = load i64, i64* %outgeo
  %geo34 = load i64, i64* %geo
  store i64 %geo34, i64* %0
  %ptnum35 = load i64, i64* %ptnum
  store i64 %ptnum35, i64* %1
  store i64 %return10, i64* %2
  br i1 %5, label %true30, label %false

true30:                                           ; preds = %end22
  %computeDistanceRestLength = call double @"computeDistanceRestLength@FIII"(i64* %0, i64* %1, i64* %2)
  %return37 = call i64 @"setprimattrib@IISIF"(i64 %outgeo32, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0), i64 %return27, double %computeDistanceRestLength)
  br label %end31

false:                                            ; preds = %end22
  %computeBendTwistRestVector = call <4 x double> @"computeBendTwistRestVector@PIII"(i64* %0, i64* %1, i64* %2)
  %return43 = call i64 @"setprimattrib@IISIP"(i64 %outgeo32, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0), i64 %return27, <4 x double> %computeBendTwistRestVector)
  br label %end31

end31:                                            ; preds = %false, %true30
  %outgeo44 = load i64, i64* %outgeo
  %outgrp45 = load i8*, i8** %outgrp
  %return47 = call i64 @"setprimgroup@IISII"(i64 %outgeo44, i8* %outgrp45, i64 %return27, i64 1)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end31, %end
  ret void
}

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"inpointgroup@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind
declare i64 @"pointhedge@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64* @"array@[I:II"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"addprim@IIS[I"(i64, i8*, i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #2

; Function Attrs: nounwind
declare i64 @"setprimattrib@IISIF"(i64, i8*, i64, double) #1

; Function Attrs: nounwind
declare i64 @"setprimattrib@IISIP"(i64, i8*, i64, <4 x double>) #1

; Function Attrs: nounwind
declare i64 @"setprimgroup@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: alwaysinline nounwind
define private void @"createBendTwistConstraint@IISIS"(i64* %geo, i64* %ptnum, i8** %srcgrp, i64* %outgeo, i8** %outgrp) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i8*
  %2 = alloca i8*
  %3 = alloca i64
  %4 = alloca i8*
  %5 = alloca i64
  %geo1 = load i64, i64* %geo
  store i64 %geo1, i64* %5
  %ptnum2 = load i64, i64* %ptnum
  store i64 %ptnum2, i64* %0
  %srcgrp3 = load i8*, i8** %srcgrp
  store i8* %srcgrp3, i8** %1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @6, i64 0, i64 0), i8** %2
  %outgeo4 = load i64, i64* %outgeo
  store i64 %outgeo4, i64* %3
  %outgrp5 = load i8*, i8** %outgrp
  store i8* %outgrp5, i8** %4
  call void @"createOutEdgeConstraint@IISSIS"(i64* %5, i64* %0, i8** %1, i8** %2, i64* %3, i8** %4)
  ret void
}

; Function Attrs: alwaysinline nounwind
define private i64 @"findBranchBendPoints@IIIIII"(i64* %geo, i64* %ptnum, i64* %weld, i64* %pt0, i64* %pt1) #0 {
__llvm_entry:
  %geo1 = load i64, i64* %geo
  %weld2 = load i64, i64* %weld
  %return = call i64* @"neighbours@[III"(i64 %geo1, i64 %weld2)
  %return4 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %end16, %__llvm_entry
  %__impl_foreach_index_21a.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %end16 ]
  %return7 = call i64 @"lt@III"(i64 %__impl_foreach_index_21a.0, i64 %return4)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return10 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_21a.0)
  %geo11 = load i64, i64* %geo
  %weld13 = load i64, i64* %weld
  %return14 = call i64 @"pointhedge@IIII"(i64 %geo11, i64 %return10, i64 %weld13)
  %return15 = call i64 @"ge@III"(i64 %return14, i64 0)
  %1 = icmp ne i64 %return15, 0
  br i1 %1, label %true, label %end16

end:                                              ; preds = %cond
  %return22 = call i64 @"eq@III"(i64 %return4, i64 1)
  %2 = icmp ne i64 %return22, 0
  br i1 %2, label %true23, label %end24

true:                                             ; preds = %body
  store i64 %return10, i64* %pt0
  %ptnum18 = load i64, i64* %ptnum
  store i64 %ptnum18, i64* %pt1
  br label %UnifiedReturnBlock

end16:                                            ; preds = %body
  %output = add i64 %__impl_foreach_index_21a.0, 1
  br label %cond

true23:                                           ; preds = %end
  %weld25 = load i64, i64* %weld
  store i64 %weld25, i64* %pt0
  %ptnum26 = load i64, i64* %ptnum
  store i64 %ptnum26, i64* %pt1
  br label %UnifiedReturnBlock

end24:                                            ; preds = %end
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end24, %true23, %true
  %UnifiedRetVal = phi i64 [ 1, %true ], [ 1, %true23 ], [ 0, %end24 ]
  ret i64 %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: alwaysinline nounwind
define private void @"createBranchWeldConstraints@IISFIS"(i64* %geo, i64* %ptnum, i8** %srcgrp, double* %maxbranchangle, i64* %outgeo, i8** %outbendgrp) #0 {
__llvm_entry:
  %pt0 = alloca i64
  %pt1 = alloca i64
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %geo1 = load i64, i64* %geo
  %ptnum2 = load i64, i64* %ptnum
  %return = call i64 @"point@IISI"(i64 %geo1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @7, i64 0, i64 0), i64 %ptnum2)
  %return4 = call i64 @"lt@III"(i64 %return, i64 0)
  %geo5 = load i64, i64* %geo
  %srcgrp6 = load i8*, i8** %srcgrp
  %return8 = call i64 @"inpointgroup@IISI"(i64 %geo5, i8* %srcgrp6, i64 %return)
  %return9 = call i64 @"not@II"(i64 %return8)
  %return10 = call i64 @"or@III"(i64 %return4, i64 %return9)
  %6 = icmp ne i64 %return10, 0
  br i1 %6, label %true, label %end

true:                                             ; preds = %end33, %end, %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %outgeo11 = load i64, i64* %outgeo
  %ptnum13 = load i64, i64* %ptnum
  %return14 = call i64* @"array@[I:II"(i64 %return, i64 %ptnum13)
  %return15 = call i64 @"addprim@IIS[I"(i64 %outgeo11, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), i64* %return14)
  %outgeo16 = load i64, i64* %outgeo
  %return18 = call i64 @"setprimattrib@IISII"(i64 %outgeo16, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0), i64 %return15, i64 0)
  %outgeo19 = load i64, i64* %outgeo
  %return21 = call i64 @"setprimattrib@IISIF"(i64 %outgeo19, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @8, i64 0, i64 0), i64 %return15, double 1.000000e+20)
  %outgeo22 = load i64, i64* %outgeo
  %return24 = call i64 @"setprimattrib@IISIF"(i64 %outgeo22, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @9, i64 0, i64 0), i64 %return15, double 1.000000e-03)
  %outgeo25 = load i64, i64* %outgeo
  %return27 = call i64 @"setprimattrib@IISIS"(i64 %outgeo25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i64 0, i64 0), i64 %return15, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @11, i64 0, i64 0))
  store i64 0, i64* %pt0, !vex-initializer-store !3
  store i64 0, i64* %pt1, !vex-initializer-store !3
  %geo28 = load i64, i64* %geo
  store i64 %geo28, i64* %0
  %ptnum29 = load i64, i64* %ptnum
  store i64 %ptnum29, i64* %1
  store i64 %return, i64* %2
  %findBranchBendPoints = call i64 @"findBranchBendPoints@IIIIII"(i64* %0, i64* %1, i64* %2, i64* %pt0, i64* %pt1)
  %return31 = call i64 @"not@II"(i64 %findBranchBendPoints)
  %7 = icmp ne i64 %return31, 0
  br i1 %7, label %true, label %end33

end33:                                            ; preds = %end
  %geo34 = load i64, i64* %geo
  store i64 %geo34, i64* %3
  %pt035 = load i64, i64* %pt0
  store i64 %pt035, i64* %4
  %pt136 = load i64, i64* %pt1
  store i64 %pt136, i64* %5
  %computeBendTwistRestVector = call <4 x double> @"computeBendTwistRestVector@PIII"(i64* %3, i64* %4, i64* %5)
  %maxbranchangle37 = load double, double* %maxbranchangle
  %return38 = call double @"radians@FF"(double %maxbranchangle37)
  %return40 = call <3 x double> @"qconvert@VP"(<4 x double> %computeBendTwistRestVector)
  %return41 = call double @"length@FV"(<3 x double> %return40)
  %return43 = fcmp ogt double %return41, %return38
  br i1 %return43, label %true, label %end46

end46:                                            ; preds = %end33
  %outgeo47 = load i64, i64* %outgeo
  %pt048 = load i64, i64* %pt0
  %pt149 = load i64, i64* %pt1
  %return50 = call i64* @"array@[I:II"(i64 %pt048, i64 %pt149)
  %return51 = call i64 @"addprim@IIS[I"(i64 %outgeo47, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), i64* %return50)
  %outgeo52 = load i64, i64* %outgeo
  %return55 = call i64 @"setprimattrib@IISIP"(i64 %outgeo52, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0), i64 %return51, <4 x double> %computeBendTwistRestVector)
  %outgeo56 = load i64, i64* %outgeo
  %outbendgrp57 = load i8*, i8** %outbendgrp
  %return59 = call i64 @"setprimgroup@IISII"(i64 %outgeo56, i8* %outbendgrp57, i64 %return51, i64 1)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end46, %true
  ret void
}

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"setprimattrib@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"setprimattrib@IISIS"(i64, i8*, i64, i8*) #1

; Function Attrs: nounwind
declare double @"radians@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"qconvert@VP"(<4 x double>) #2

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_ptnum) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i8*
  %2 = alloca i64
  %3 = alloca i8*
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i8*
  %7 = alloca double
  %8 = alloca i64
  %9 = alloca i8*
  %10 = alloca i64
  store i64 1, i64* %10
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum1, i64* %0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @12, i64 0, i64 0), i8** %1
  %return = call i64 @"geoself@I"()
  store i64 %return, i64* %2
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @13, i64 0, i64 0), i8** %3
  call void @"createBendTwistConstraint@IISIS"(i64* %10, i64* %0, i8** %1, i64* %2, i8** %3)
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @14, i64 0, i64 0))
  %11 = icmp ne i64 %return2, 0
  br i1 %11, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return3 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @15, i64 0, i64 0))
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %maxbranchangle.0 = phi double [ %return3, %true ], [ 3.600000e+02, %__llvm_entry ]
  %return4 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @7, i64 0, i64 0))
  %12 = icmp ne i64 %return4, 0
  br i1 %12, label %true5, label %end6

true5:                                            ; preds = %end
  store i64 1, i64* %4
  %_bound_ptnum7 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum7, i64* %5
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @12, i64 0, i64 0), i8** %6
  store double %maxbranchangle.0, double* %7
  %return9 = call i64 @"geoself@I"()
  store i64 %return9, i64* %8
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @13, i64 0, i64 0), i8** %9
  call void @"createBranchWeldConstraints@IISFIS"(i64* %4, i64* %5, i8** %6, double* %7, i64* %8, i8** %9)
  br label %end6

end6:                                             ; preds = %true5, %end
  ret void
}

; Function Attrs: nounwind
declare i64 @"geoself@I"() #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind
declare i64 @"haspointattrib@IIS"(i64, i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum) #1 {
__llvm_entry:
  %0 = alloca i64
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @16, i64 0, i64 0), i64 %ptnum) #3
  store i64 %gvalue, i64* @ptnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end

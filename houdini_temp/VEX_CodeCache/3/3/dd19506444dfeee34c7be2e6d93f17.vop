;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"../offset\00"
@gridsize = external global i64
@dimensions = external global double
@1 = private constant [9 x i8] c"gridsize\00"
@2 = private constant [11 x i8] c"dimensions\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IF"(i64* %_bound_gridsize, double* %_bound_dimensions) #0 {
__llvm_entry:
  %return = call i64 @"npoints@II"(i64 0)
  %cast = sitofp i64 %return to double
  %return2 = call double @"sqrt@FF"(double %cast)
  %return3 = call double @"ceil@FF"(double %return2)
  %cast4 = fptosi double %return3 to i64
  store i64 %cast4, i64* %_bound_gridsize
  %return5 = call <3 x double> @"getbbox_size@VI"(i64 1)
  %return7 = call double @"getcomp@FVI"(<3 x double> %return5, i64 0)
  %return9 = call double @"getcomp@FVI"(<3 x double> %return5, i64 2)
  %return10 = call double @"max@FFF"(double %return7, double %return9)
  %_bound_gridsize12 = load i64, i64* %_bound_gridsize
  %cast13 = sitofp i64 %_bound_gridsize12 to double
  %output = fmul double %return10, %cast13
  %output14 = fsub double %output, 1.000000e+00
  %return15 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0))
  %output16 = fadd double %output14, %return15
  store double %output16, double* %_bound_dimensions
  ret void
}

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #1

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"ceil@FF"(double) #2

; Function Attrs: nounwind
declare <3 x double> @"getbbox_size@VI"(i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #2

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %gridsize, double %dimensions) #1 {
__llvm_entry:
  %"<dimensions>" = alloca double
  %"<gridsize>" = alloca i64
  store i64 %gridsize, i64* %"<gridsize>"
  store double %dimensions, double* %"<dimensions>"
  call void @"__vex_snippet_snippet@IF"(i64* %"<gridsize>", double* %"<dimensions>")
  %evalue = load i64, i64* %"<gridsize>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0), i64 %evalue) #3
  %evalue1 = load double, double* %"<dimensions>"
  %gvalue2 = call double @"_export@FSF"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0), double %evalue1) #3
  store i64 %gvalue, i64* @gridsize
  store double %gvalue2, double* @dimensions
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

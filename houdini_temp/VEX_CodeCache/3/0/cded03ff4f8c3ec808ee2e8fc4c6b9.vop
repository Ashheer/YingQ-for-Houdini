;_name	/obj/geo1/attribnoise1/generate_noise
; ModuleID = 'obj_geo1_attribnoise1_generate_noise'
source_filename = "obj_geo1_attribnoise1_generate_noise"

%nsdata = type { i8*, double, double, double, i64 }
%nndata = type { double, double }

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [8 x i8] c"simplex\00"
@__noise = external global <3 x double>
@2 = private constant [8 x i8] c"__noise\00"

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #0

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #0

; Function Attrs: nounwind readnone
declare i64* @"array@[I"() #0

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #0

; Function Attrs: nounwind readnone
declare i64 @"min@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i64* @"resize@[II"(i64*, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"max@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #0

; Function Attrs: nounwind readnone
declare double* @"array@[F"() #0

; Function Attrs: nounwind readnone
declare i64 @"len@I[F"(double*) #0

; Function Attrs: nounwind readnone
declare double* @"resize@[FI"(double*, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #0

; Function Attrs: nounwind readnone
declare { double, double* } @"setcomp@F[FFI"(double*, double, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double>* @"array@[V"() #0

; Function Attrs: nounwind readnone
declare i64 @"len@I[V"(<3 x double>*) #0

; Function Attrs: nounwind readnone
declare <3 x double>* @"resize@[VI"(<3 x double>*, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"max@VVV"(<3 x double>, <3 x double>) #0

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>*, <3 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <4 x double>* @"array@[P"() #0

; Function Attrs: nounwind readnone
declare i64 @"len@I[P"(<4 x double>*) #0

; Function Attrs: nounwind readnone
declare <4 x double>* @"resize@[PI"(<4 x double>*, i64) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"getcomp@P[PI"(<4 x double>*, i64) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"max@PPP"(<4 x double>, <4 x double>) #0

; Function Attrs: nounwind readnone
declare { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>*, <4 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PF"(double) #0

; Function Attrs: nounwind readnone
declare double @"min@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FPI"(<4 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PFFFF"(double, double, double, double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"min@VVV"(<3 x double>, <3 x double>) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"min@PPP"(<4 x double>, <4 x double>) #0

; Function Attrs: nounwind readnone
declare double @"pow@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare i64 @"le@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"pow@VVF"(<3 x double>, double) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"pow@PPF"(<4 x double>, double) #0

; Function Attrs: nounwind readnone
declare double @"log@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"log@VV"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"log@PP"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"div@PP"(<4 x double>, <4 x double>) #0

; Function Attrs: alwaysinline nounwind
define private double @"bias@FFF"(double* %x, double* %b) #1 {
__llvm_entry:
  %b1 = load double, double* %b
  %return = fcmp oeq double %b1, 5.000000e-01
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %x3 = load double, double* %x
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %return5 = call double @"clamp@FFFF"(double %b1, double 1.000000e-06, double 9.999990e-01)
  %x6 = load double, double* %x
  %return8 = call double @"log@FF"(double %return5)
  %return9 = call double @"neg@FF"(double %return8)
  %output = call double @"div@FF"(double %return9, double 0x3FE62E42FEFA39EF)
  %return10 = call double @"pow@FFF"(double %x6, double %output)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end, %true
  %UnifiedRetVal = phi double [ %x3, %true ], [ %return10, %end ]
  ret double %UnifiedRetVal
}

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #0

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"bias@VVV"(<3 x double>* %x, <3 x double>* %b) #1 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  %b1 = load <3 x double>, <3 x double>* %b
  %cast = call <3 x double> @"set@VF"(double 5.000000e-01)
  %return = call i64 @"eq@IVV"(<3 x double> %b1, <3 x double> %cast)
  %6 = icmp ne i64 %return, 0
  br i1 %6, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %x2 = load <3 x double>, <3 x double>* %x
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %x3 = load <3 x double>, <3 x double>* %x
  %return4 = call double @"getcomp@FVI"(<3 x double> %x3, i64 0)
  store double %return4, double* %0
  %b5 = load <3 x double>, <3 x double>* %b
  %return6 = call double @"getcomp@FVI"(<3 x double> %b5, i64 0)
  store double %return6, double* %1
  %bias = call double @"bias@FFF"(double* %0, double* %1)
  %x7 = load <3 x double>, <3 x double>* %x
  %return8 = call double @"getcomp@FVI"(<3 x double> %x7, i64 1)
  store double %return8, double* %2
  %b9 = load <3 x double>, <3 x double>* %b
  %return10 = call double @"getcomp@FVI"(<3 x double> %b9, i64 1)
  store double %return10, double* %3
  %bias11 = call double @"bias@FFF"(double* %2, double* %3)
  %x12 = load <3 x double>, <3 x double>* %x
  %return13 = call double @"getcomp@FVI"(<3 x double> %x12, i64 2)
  store double %return13, double* %4
  %b14 = load <3 x double>, <3 x double>* %b
  %return15 = call double @"getcomp@FVI"(<3 x double> %b14, i64 2)
  store double %return15, double* %5
  %bias16 = call double @"bias@FFF"(double* %4, double* %5)
  %return17 = call <3 x double> @"set@VFFF"(double %bias, double %bias11, double %bias16)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end, %true
  %UnifiedRetVal = phi <3 x double> [ %x2, %true ], [ %return17, %end ]
  ret <3 x double> %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare i64 @"eq@IVV"(<3 x double>, <3 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #0

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"gain@VVV"(<3 x double>* %x, <3 x double>* %g) #1 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %g1 = load <3 x double>, <3 x double>* %g
  %cast = call <3 x double> @"set@VF"(double 5.000000e-01)
  %return = call i64 @"eq@IVV"(<3 x double> %g1, <3 x double> %cast)
  %9 = icmp ne i64 %return, 0
  br i1 %9, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %x2 = load <3 x double>, <3 x double>* %x
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %output = call <3 x double> @"sub@VV"(<3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> %g1)
  %x5 = load <3 x double>, <3 x double>* %x
  %cast6 = call <3 x double> @"set@VI"(i64 2)
  %output7 = call <3 x double> @"mul@VV"(<3 x double> %x5, <3 x double> %cast6)
  %return9 = call double @"getcomp@FVI"(<3 x double> %x5, i64 0)
  %return10 = fcmp olt double %return9, 5.000000e-01
  %return15 = call double @"getcomp@FVI"(<3 x double> %output7, i64 0)
  br i1 %return10, label %true12, label %false

true12:                                           ; preds = %end
  store double %return15, double* %0
  %return17 = call double @"getcomp@FVI"(<3 x double> %output, i64 0)
  store double %return17, double* %1
  %bias = call double @"bias@FFF"(double* %0, double* %1)
  %output18 = fmul double %bias, 5.000000e-01
  br label %end13

false:                                            ; preds = %end
  %output21 = fsub double 2.000000e+00, %return15
  store double %output21, double* %0
  %return23 = call double @"getcomp@FVI"(<3 x double> %output, i64 0)
  store double %return23, double* %2
  %bias24 = call double @"bias@FFF"(double* %0, double* %2)
  %output25 = fmul double %bias24, 5.000000e-01
  %output26 = fsub double 1.000000e+00, %output25
  br label %end13

end13:                                            ; preds = %false, %true12
  %phi = phi double [ %output18, %true12 ], [ %output26, %false ]
  %x27 = load <3 x double>, <3 x double>* %x
  %return28 = call double @"getcomp@FVI"(<3 x double> %x27, i64 1)
  %return29 = fcmp olt double %return28, 5.000000e-01
  %return35 = call double @"getcomp@FVI"(<3 x double> %output7, i64 1)
  br i1 %return29, label %true31, label %false32

true31:                                           ; preds = %end13
  store double %return35, double* %3
  %return37 = call double @"getcomp@FVI"(<3 x double> %output, i64 1)
  store double %return37, double* %4
  %bias38 = call double @"bias@FFF"(double* %3, double* %4)
  %output39 = fmul double %bias38, 5.000000e-01
  br label %end33

false32:                                          ; preds = %end13
  %output42 = fsub double 2.000000e+00, %return35
  store double %output42, double* %3
  %return44 = call double @"getcomp@FVI"(<3 x double> %output, i64 1)
  store double %return44, double* %5
  %bias45 = call double @"bias@FFF"(double* %3, double* %5)
  %output46 = fmul double %bias45, 5.000000e-01
  %output47 = fsub double 1.000000e+00, %output46
  br label %end33

end33:                                            ; preds = %false32, %true31
  %phi48 = phi double [ %output39, %true31 ], [ %output47, %false32 ]
  %x49 = load <3 x double>, <3 x double>* %x
  %return50 = call double @"getcomp@FVI"(<3 x double> %x49, i64 2)
  %return51 = fcmp olt double %return50, 5.000000e-01
  %return57 = call double @"getcomp@FVI"(<3 x double> %output7, i64 2)
  br i1 %return51, label %true53, label %false54

true53:                                           ; preds = %end33
  store double %return57, double* %6
  %return59 = call double @"getcomp@FVI"(<3 x double> %output, i64 2)
  store double %return59, double* %7
  %bias60 = call double @"bias@FFF"(double* %6, double* %7)
  %output61 = fmul double %bias60, 5.000000e-01
  br label %end55

false54:                                          ; preds = %end33
  %output64 = fsub double 2.000000e+00, %return57
  store double %output64, double* %6
  %return66 = call double @"getcomp@FVI"(<3 x double> %output, i64 2)
  store double %return66, double* %8
  %bias67 = call double @"bias@FFF"(double* %6, double* %8)
  %output68 = fmul double %bias67, 5.000000e-01
  %output69 = fsub double 1.000000e+00, %output68
  br label %end55

end55:                                            ; preds = %false54, %true53
  %phi70 = phi double [ %output61, %true53 ], [ %output69, %false54 ]
  %return71 = call <3 x double> @"set@VFFF"(double %phi, double %phi48, double %phi70)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end55, %true
  %UnifiedRetVal = phi <3 x double> [ %x2, %true ], [ %return71, %end55 ]
  ret <3 x double> %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #0

; Function Attrs: alwaysinline nounwind
define private double @"pyro_vopfw_VOP_CTXT@FP"(<4 x double>* %p) #1 {
__llvm_entry:
  ret double undef
}

; Function Attrs: alwaysinline nounwind
define private %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %name, double* %min, double* %max, double* %avg, i64* %symmetric) #1 {
__llvm_entry:
  %name1 = load i8*, i8** %name
  %0 = insertvalue %nsdata undef, i8* %name1, 0
  %min2 = load double, double* %min
  %1 = insertvalue %nsdata %0, double %min2, 1
  %max4 = load double, double* %max
  %2 = insertvalue %nsdata %1, double %max4, 2
  %avg6 = load double, double* %avg
  %3 = insertvalue %nsdata %2, double %avg6, 3
  %symmetric8 = load i64, i64* %symmetric
  %4 = insertvalue %nsdata %3, i64 %symmetric8, 4
  ret %nsdata %4
}

; Function Attrs: alwaysinline nounwind
define private %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"() #1 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca i64
  %4 = alloca i8*
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8** %4
  store double 0.000000e+00, double* %0
  store double 0.000000e+00, double* %1
  store double 0.000000e+00, double* %2
  store i64 0, i64* %3
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %4, double* %0, double* %1, double* %2, i64* %3)
  ret %nsdata %nsdata
}

; Function Attrs: alwaysinline nounwind
define private double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %stats) #1 {
__llvm_entry:
  %stats1 = load %nsdata, %nsdata* %stats
  %avg = extractvalue %nsdata %stats1, 3
  ret double %avg
}

; Function Attrs: nounwind readnone
declare double @"xnoise@FF"(double) #0

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare double @"xnoise@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"xnoise@FV"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare double @"xnoise@FP"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VF"(double) #0

; Function Attrs: nounwind
declare <3 x double> @"fit@VVVVVV"(<3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VFF"(double, double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VV"(<3 x double>) #0

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"nwrap_simplex@VPPF"(<4 x double>* %p, <4 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <4 x double>, <4 x double>* %p
  %return = call <3 x double> @"xnoise@VP"(<4 x double> %p1)
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i8** %0
  store double 1.360200e-01, double* %1
  store double 8.486790e-01, double* %2
  store double 5.103550e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  %cast = call <3 x double> @"set@VF"(double %min)
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i8** %5
  store double 1.360200e-01, double* %6
  store double 8.486790e-01, double* %7
  store double 5.103550e-01, double* %8
  store i64 1, i64* %9
  %nsdata2 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata2, 2
  %cast3 = call <3 x double> @"set@VF"(double %max)
  %return4 = call <3 x double> @"fit@VVVVVV"(<3 x double> %return, <3 x double> %cast, <3 x double> %cast3, <3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  ret <3 x double> %return4
}

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VP"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare { double, double } @"xnoised@FFF"(double) #0

; Function Attrs: nounwind readnone
declare { double, double, double } @"xnoised@FFFFF"(double, double) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #0

; Function Attrs: nounwind readnone
declare { double, double, double, double } @"xnoised@VFFFF"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare { double, double, double, double, double } @"xnoised@PFFFFF"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double> } @"xnoised@FVV"(double) #0

; Function Attrs: nounwind
declare double @"avg@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>, <3 x double> } @"xnoised@FFVVV"(double, double) #0

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>, <3 x double>, <3 x double> } @"xnoised@VVVVV"(<3 x double>) #0

; Function Attrs: alwaysinline nounwind
define private <4 x double> @"vngrad_simplex@PPPFF"(<4 x double>* %p, <4 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %p1 = load <4 x double>, <4 x double>* %p
  %output = call { <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double> } @"xnoised@PVVVVV"(<4 x double> %p1)
  %output3 = extractvalue { <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double> } %output, 1
  %output4 = extractvalue { <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double> } %output, 2
  %output5 = extractvalue { <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double> } %output, 3
  %output6 = extractvalue { <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double> } %output, 4
  %return = call double @"avg@FV"(<3 x double> %output3)
  %return9 = call double @"avg@FV"(<3 x double> %output4)
  %return11 = call double @"avg@FV"(<3 x double> %output5)
  %return13 = call double @"avg@FV"(<3 x double> %output6)
  %return14 = call <4 x double> @"set@PFFFF"(double %return, double %return9, double %return11, double %return13)
  ret <4 x double> %return14
}

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double> } @"xnoised@PVVVVV"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #0

; Function Attrs: nounwind
declare double @"abs@FF"(double) #2

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"noise_correct@VVZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(<3 x double>* %val, %nsdata* %stats, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <4 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow) #1 {
__llvm_entry:
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %cast = call <3 x double> @"set@VI"(i64 1)
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = load %nsdata, %nsdata* %stats
  %avg = extractvalue %nsdata %stats3, 3
  %val4 = load <3 x double>, <3 x double>* %val
  %fold5 = load i64, i64* %fold
  %symmetric = extractvalue %nsdata %stats3, 4
  %return7 = call i64 @"and@III"(i64 %fold5, i64 %symmetric)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %true8, label %end9

true8:                                            ; preds = %end
  %cast12 = call <3 x double> @"set@VF"(double %avg)
  %output = call <3 x double> @"sub@VV"(<3 x double> %val4, <3 x double> %cast12)
  %return13 = call <3 x double> @"abs@VV"(<3 x double> %output)
  %output16 = fsub double 1.000000e+00, %avg
  %return17 = call double @"max@FFF"(double %avg, double %output16)
  %cast18 = call <3 x double> @"set@VF"(double %return17)
  %output19 = call <3 x double> @"div@VV"(<3 x double> %return13, <3 x double> %cast18)
  br label %end9

end9:                                             ; preds = %true8, %end
  %out.0 = phi <3 x double> [ %output19, %true8 ], [ %val4, %end ]
  %inv20 = load i64, i64* %inv
  %1 = icmp ne i64 %inv20, 0
  br i1 %1, label %true21, label %end22

true21:                                           ; preds = %end9
  %output24 = call <3 x double> @"sub@VV"(<3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> %out.0)
  br label %end22

end22:                                            ; preds = %true21, %end9
  %out.1 = phi <3 x double> [ %output24, %true21 ], [ %out.0, %end9 ]
  %expon25 = load double, double* %expon
  %return26 = fcmp one double %expon25, 1.000000e+00
  br i1 %return26, label %true28, label %end29

true28:                                           ; preds = %end22
  %return32 = call <3 x double> @"pow@VVF"(<3 x double> %out.1, double %expon25)
  br label %end29

end29:                                            ; preds = %true28, %end22
  %out.2 = phi <3 x double> [ %return32, %true28 ], [ %out.1, %end22 ]
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end29, %true
  %UnifiedRetVal = phi <3 x double> [ %cast, %true ], [ %out.2, %end29 ]
  ret <3 x double> %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare <3 x double> @"abs@VV"(<3 x double>) #0

; Function Attrs: alwaysinline nounwind
define private double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %stats, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <4 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow) #1 {
__llvm_entry:
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = load %nsdata, %nsdata* %stats
  %avg = extractvalue %nsdata %stats3, 3
  %fold4 = load i64, i64* %fold
  %symmetric = extractvalue %nsdata %stats3, 4
  %return6 = call i64 @"and@III"(i64 %fold4, i64 %symmetric)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %true7, label %end8

true7:                                            ; preds = %end
  %output = fmul double %avg, %avg
  br label %end8

end8:                                             ; preds = %true7, %end
  %navg.0 = phi double [ %output, %true7 ], [ %avg, %end ]
  %inv11 = load i64, i64* %inv
  %1 = icmp ne i64 %inv11, 0
  br i1 %1, label %true12, label %end13

true12:                                           ; preds = %end8
  %output15 = fsub double 1.000000e+00, %navg.0
  br label %end13

end13:                                            ; preds = %true12, %end8
  %navg.1 = phi double [ %output15, %true12 ], [ %navg.0, %end8 ]
  %expon16 = load double, double* %expon
  %return17 = fcmp one double %expon16, 1.000000e+00
  br i1 %return17, label %true19, label %end20

true19:                                           ; preds = %end13
  %return23 = call double @"pow@FFF"(double %navg.1, double %expon16)
  br label %end20

end20:                                            ; preds = %true19, %end13
  %navg.2 = phi double [ %return23, %true19 ], [ %navg.1, %end13 ]
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end20, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %navg.2, %end20 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %tgt, %nsdata* %stats, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <4 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow) #1 {
__llvm_entry:
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %tgt3 = load double, double* %tgt
  %fold4 = load i64, i64* %fold
  %stats5 = load %nsdata, %nsdata* %stats
  %symmetric = extractvalue %nsdata %stats5, 4
  %return6 = call i64 @"and@III"(i64 %fold4, i64 %symmetric)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %true7, label %end8

true7:                                            ; preds = %end
  %output = fmul double %tgt3, %tgt3
  br label %end8

end8:                                             ; preds = %true7, %end
  %navg.0 = phi double [ %output, %true7 ], [ %tgt3, %end ]
  %inv11 = load i64, i64* %inv
  %1 = icmp ne i64 %inv11, 0
  br i1 %1, label %true12, label %end13

true12:                                           ; preds = %end8
  %output15 = fsub double 1.000000e+00, %navg.0
  br label %end13

end13:                                            ; preds = %true12, %end8
  %navg.1 = phi double [ %output15, %true12 ], [ %navg.0, %end8 ]
  %expon16 = load double, double* %expon
  %return17 = fcmp one double %expon16, 1.000000e+00
  br i1 %return17, label %true19, label %end20

true19:                                           ; preds = %end13
  %return23 = call double @"pow@FFF"(double %navg.1, double %expon16)
  br label %end20

end20:                                            ; preds = %true19, %end13
  %navg.2 = phi double [ %return23, %true19 ], [ %navg.1, %end13 ]
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end20, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %navg.2, %end20 ]
  ret double %UnifiedRetVal
}

; Function Attrs: nounwind
declare double @"set@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"smooth@FFFF"(double, double, double) #0

; Function Attrs: nounwind
declare double @"lerp@FFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UI"(i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UF"(double) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"add@UU"(<2 x double>, <2 x double>) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"mul@UU"(<2 x double>, <2 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VU"(<2 x double>) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UV"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PI"(i64) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"add@PP"(<4 x double>, <4 x double>) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"mul@PP"(<4 x double>, <4 x double>) #0

; Function Attrs: nounwind
declare <3 x double> @"set@VP"(<4 x double>) #2

; Function Attrs: nounwind
declare <4 x double> @"set@PV"(<3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"lerp@VVVF"(<3 x double>, <3 x double>, double) #2

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"noise_simplex@VPIIIIFFPIIFFFFFV"(<4 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <4 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <4 x double>
  %6 = alloca <4 x double>
  %7 = alloca double
  %8 = alloca <4 x double>
  %9 = alloca <4 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <4 x double>
  %13 = alloca <4 x double>
  %14 = alloca double
  %15 = alloca <3 x double>
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  %cast3 = call <3 x double> @"set@VI"(i64 1)
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats4 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i8** %0
  store double 1.360200e-01, double* %1
  store double 8.486790e-01, double* %2
  store double 5.103550e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast5 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast5, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp7 = load <4 x double>, <4 x double>* %pp
  %cast8 = call <4 x double> @"set@PI"(i64 0)
  %disp10 = load double, double* %disp
  %dolw11 = load i64, i64* %dolw
  %cast12 = sitofp i64 %dolw11 to double
  %output = fmul double %disp10, %cast12
  %return13 = fcmp one double %output, 0.000000e+00
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  %cast18 = call <4 x double> @"set@PF"(double 1.234560e+02)
  %output19 = call <4 x double> @"add@PP"(<4 x double> %pp7, <4 x double> %cast18)
  %dfreq20 = load double, double* %dfreq
  %cast21 = call <4 x double> @"set@PF"(double %dfreq20)
  %output22 = call <4 x double> @"mul@PP"(<4 x double> %output19, <4 x double> %cast21)
  store <4 x double> %output22, <4 x double>* %5
  %nwrap_simplex = call <3 x double> @"nwrap_simplex@VPPF"(<4 x double>* %5, <4 x double>* %6, double* %7)
  %disp24 = load double, double* %disp
  %cast27 = call <3 x double> @"set@VF"(double %nsdata.fca.3.extract)
  %output28 = call <3 x double> @"sub@VV"(<3 x double> %nwrap_simplex, <3 x double> %cast27)
  %cast29 = call <3 x double> @"set@VF"(double %disp24)
  %output30 = call <3 x double> @"mul@VV"(<3 x double> %cast29, <3 x double> %output28)
  %output33 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return34 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output33)
  %cast35 = call <3 x double> @"set@VF"(double %return34)
  %output36 = call <3 x double> @"div@VV"(<3 x double> %output30, <3 x double> %cast35)
  %cast37 = call <4 x double> @"set@PV"(<3 x double> %output36)
  br label %end16

end16:                                            ; preds = %true15, %end
  %dpl.0 = phi <4 x double> [ %cast37, %true15 ], [ %cast8, %end ]
  %gflow38 = load double, double* %gflow
  %dogw39 = load i64, i64* %dogw
  %cast40 = sitofp i64 %dogw39 to double
  %output41 = fmul double %gflow38, %cast40
  %return42 = fcmp one double %output41, 0.000000e+00
  br i1 %return42, label %true44, label %end45

true44:                                           ; preds = %end16
  %pp47 = load <4 x double>, <4 x double>* %pp
  store <4 x double> %pp47, <4 x double>* %8
  %vngrad_simplex = call <4 x double> @"vngrad_simplex@PPPFF"(<4 x double>* %8, <4 x double>* %9, double* %10, double* %11)
  %cast48 = call <4 x double> @"set@PF"(double %gflow38)
  %output49 = call <4 x double> @"mul@PP"(<4 x double> %cast48, <4 x double> %vngrad_simplex)
  br label %end45

end45:                                            ; preds = %true44, %end16
  %dpg.0 = phi <4 x double> [ %output49, %true44 ], [ %cast8, %end16 ]
  %pp50 = load <4 x double>, <4 x double>* %pp
  %accl51 = load i64, i64* %accl
  %cast53 = call <4 x double> @"set@PI"(i64 %accl51)
  %output54 = call <4 x double> @"mul@PP"(<4 x double> %cast53, <4 x double> %dpl.0)
  %accg55 = load i64, i64* %accg
  %cast57 = call <4 x double> @"set@PI"(i64 %accg55)
  %output58 = call <4 x double> @"mul@PP"(<4 x double> %cast57, <4 x double> %dpg.0)
  %output59 = call <4 x double> @"add@PP"(<4 x double> %output54, <4 x double> %output58)
  %output60 = call <4 x double> @"add@PP"(<4 x double> %pp50, <4 x double> %output59)
  store <4 x double> %output60, <4 x double>* %pp
  %output63 = call <4 x double> @"add@PP"(<4 x double> %dpl.0, <4 x double> %dpg.0)
  %cast64 = call <3 x double> @"set@VP"(<4 x double> %output63)
  store <3 x double> %cast64, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off67 = load <3 x double>, <3 x double>* %x_off
  %cast68 = call <4 x double> @"set@PV"(<3 x double> %x_off67)
  %output69 = call <4 x double> @"add@PP"(<4 x double> %pp7, <4 x double> %cast68)
  store <4 x double> %output69, <4 x double>* %12
  %nwrap_simplex71 = call <3 x double> @"nwrap_simplex@VPPF"(<4 x double>* %12, <4 x double>* %13, double* %14)
  store <3 x double> %nwrap_simplex71, <3 x double>* %15
  %stats73.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats73.fca.0.gep
  %stats73.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats73.fca.1.gep
  %stats73.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats73.fca.2.gep
  %stats73.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats73.fca.3.gep
  %stats73.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats73.fca.4.gep
  %inv74 = load i64, i64* %inv
  store i64 %inv74, i64* %17
  %fold75 = load i64, i64* %fold
  store i64 %fold75, i64* %18
  %expon76 = load double, double* %expon
  store double %expon76, double* %22
  %noise_correct = call <3 x double> @"noise_correct@VVZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(<3 x double>* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats77.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats77.fca.0.gep
  %stats77.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats77.fca.1.gep
  %stats77.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats77.fca.2.gep
  %stats77.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats77.fca.3.gep
  %stats77.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats77.fca.4.gep
  %inv78 = load i64, i64* %inv
  store i64 %inv78, i64* %31
  %fold79 = load i64, i64* %fold
  store i64 %fold79, i64* %32
  %expon80 = load double, double* %expon
  store double %expon80, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw81 = load double, double* %fw
  %disp82 = load double, double* %disp
  %dfreq83 = load double, double* %dfreq
  %output84 = fmul double %disp82, %dfreq83
  %return85 = call double @"abs@FF"(double %output84)
  %output86 = fadd double %return85, 1.000000e+00
  %output87 = fmul double %fw81, %output86
  %x_avg89 = load double, double* %x_avg
  %cast90 = call <3 x double> @"set@VF"(double %x_avg89)
  %return92 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output87)
  %return93 = call <3 x double> @"lerp@VVVF"(<3 x double> %noise_correct, <3 x double> %cast90, double %return92)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end45, %true
  %UnifiedRetVal = phi <3 x double> [ %cast3, %true ], [ %return93, %end45 ]
  ret <3 x double> %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %scale, double* %blend) #1 {
__llvm_entry:
  %scale1 = load double, double* %scale
  %0 = insertvalue %nndata undef, double %scale1, 0
  %blend2 = load double, double* %blend
  %1 = insertvalue %nndata %0, double %blend2, 1
  ret %nndata %1
}

; Function Attrs: alwaysinline nounwind
define private %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"() #1 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  store double 0.000000e+00, double* %1
  store double 0.000000e+00, double* %0
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %1, double* %0)
  ret %nndata %nndata
}

; Function Attrs: alwaysinline nounwind
define private double @"nattencomp@FFFF"(double* %x, double* %k, double* %e) #1 {
__llvm_entry:
  %x1 = load double, double* %x
  %output = fmul double %x1, %x1
  %output3 = fsub double 1.000000e+00, %output
  %e4 = load double, double* %e
  %output5 = fmul double %e4, 5.000000e-01
  %return = call double @"pow@FFF"(double %output3, double %output5)
  %k6 = load double, double* %k
  %output7 = fsub double 1.000000e+00, %k6
  %output8 = fmul double %return, %output7
  %output10 = fadd double %output8, %k6
  ret double %output10
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"natten@VVFF"(<3 x double>* %n, double* %k, double* %e) #1 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %n1 = load <3 x double>, <3 x double>* %n
  %cast = call <3 x double> @"set@VI"(i64 2)
  %output = call <3 x double> @"mul@VV"(<3 x double> %n1, <3 x double> %cast)
  %cast2 = call <3 x double> @"set@VI"(i64 1)
  %output3 = call <3 x double> @"sub@VV"(<3 x double> %output, <3 x double> %cast2)
  %return = call double @"getcomp@FVI"(<3 x double> %output3, i64 0)
  store double %return, double* %0
  %k5 = load double, double* %k
  store double %k5, double* %1
  %e6 = load double, double* %e
  store double %e6, double* %2
  %nattencomp = call double @"nattencomp@FFFF"(double* %0, double* %1, double* %2)
  %return8 = call double @"getcomp@FVI"(<3 x double> %output3, i64 1)
  store double %return8, double* %3
  %k9 = load double, double* %k
  store double %k9, double* %4
  %e10 = load double, double* %e
  store double %e10, double* %5
  %nattencomp11 = call double @"nattencomp@FFFF"(double* %3, double* %4, double* %5)
  %return13 = call double @"getcomp@FVI"(<3 x double> %output3, i64 2)
  store double %return13, double* %6
  %k14 = load double, double* %k
  store double %k14, double* %7
  %e15 = load double, double* %e
  store double %e15, double* %8
  %nattencomp16 = call double @"nattencomp@FFFF"(double* %6, double* %7, double* %8)
  %return17 = call <3 x double> @"set@VFFF"(double %nattencomp, double %nattencomp11, double %nattencomp16)
  ret <3 x double> %return17
}

; Function Attrs: nounwind readnone
declare <4 x double> @"sub@PP"(<4 x double>, <4 x double>) #0

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare double @"frac@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"ne@IVV"(<3 x double>, <3 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"sqrt@VV"(<3 x double>) #0

; Function Attrs: nounwind
declare <3 x double> @"clamp@VVVV"(<3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fBm_simplex@VPIIIIFFPIIFFFFFVFFFF"(<4 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <4 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <4 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <4 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <4 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca <3 x double>
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i8** %0
  store double 1.360200e-01, double* %1
  store double 8.486790e-01, double* %2
  store double 5.103550e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_simplex = call <3 x double> @"noise_simplex@VPIIIIFFPIIFFFFFV"(<4 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <4 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return = fcmp oge double %fsize26, 1.000000e+00
  %return27 = zext i1 %return to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <4 x double>, <4 x double>* %p
  store <4 x double> %p41, <4 x double>* %pp
  %cast = call <3 x double> @"set@VF"(double %navg_correct14)
  %output44 = call <3 x double> @"sub@VV"(<3 x double> %noise_simplex, <3 x double> %cast)
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output50 = fmul double %gain47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast54 = sitofp i64 %output53 to double
  %output55 = fmul double %fsize51, %cast54
  %cast57 = call <3 x double> @"set@VI"(i64 1)
  %output61 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  %cast69 = call <3 x double> @"set@VF"(double %return68)
  br label %body

body:                                             ; preds = %end109, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end109 ]
  %fw.0 = phi double [ %output55, %end ], [ %output104, %end109 ]
  %out.0 = phi <3 x double> [ %output44, %end ], [ %output144, %end109 ]
  %wsum.0 = phi <3 x double> [ %cast57, %end ], [ %output151, %end109 ]
  %w.0 = phi <3 x double> [ %cast57, %end ], [ %w.2, %end109 ]
  %cast81 = call <3 x double> @"set@VF"(double %output50)
  %output82 = call <3 x double> @"mul@VV"(<3 x double> %w.0, <3 x double> %cast81)
  %output84 = fadd double %oct.0, 1.000000e+00
  %maxoctaves86 = load double, double* %maxoctaves
  %return87 = fcmp ogt double %output84, %maxoctaves86
  br i1 %return87, label %true89, label %end90

end78:                                            ; preds = %end109
  store double %oct.2, double* %x_oct
  %cast154 = call <3 x double> @"set@VI"(i64 0)
  %return155 = call i64 @"ne@IVV"(<3 x double> %output151, <3 x double> %cast154)
  %70 = icmp ne i64 %return155, 0
  br i1 %70, label %true156, label %end157

true89:                                           ; preds = %body
  %return94 = call double @"frac@FF"(double %maxoctaves86)
  store double %return94, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %cast95 = call <3 x double> @"set@VF"(double %bias)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %output82, <3 x double> %cast95)
  br label %end90

end90:                                            ; preds = %true89, %body
  %oct.1 = phi double [ %maxoctaves86, %true89 ], [ %output84, %body ]
  %w.1 = phi <3 x double> [ %output96, %true89 ], [ %output82, %body ]
  %pp98 = load <4 x double>, <4 x double>* %pp
  %cast100 = call <4 x double> @"set@PF"(double %return46)
  %output101 = call <4 x double> @"mul@PP"(<4 x double> %pp98, <4 x double> %cast100)
  store <4 x double> %output101, <4 x double>* %pp
  %output104 = fmul double %fw.0, %return46
  %return106 = fcmp ogt double %output104, 1.000000e+00
  br i1 %return106, label %true108, label %end109

true108:                                          ; preds = %end90
  %output111 = fsub double 1.000000e+00, %fw.0
  %output114 = fsub double %output104, %fw.0
  %output115 = call double @"div@FF"(double %output111, double %output114)
  %output118 = fsub double 1.000000e+00, %output115
  %output119 = fsub double %oct.1, %output118
  %cast122 = call <3 x double> @"set@VF"(double %output115)
  %output123 = call <3 x double> @"mul@VV"(<3 x double> %w.1, <3 x double> %cast122)
  br label %end109

end109:                                           ; preds = %true108, %end90
  %oct.2 = phi double [ %output119, %true108 ], [ %oct.1, %end90 ]
  %w.2 = phi <3 x double> [ %output123, %true108 ], [ %w.1, %end90 ]
  %inv124 = load i64, i64* %inv
  store i64 %inv124, i64* %52
  %fold125 = load i64, i64* %fold
  store i64 %fold125, i64* %53
  %accl126 = load i64, i64* %accl
  store i64 %accl126, i64* %54
  %accg127 = load i64, i64* %accg
  store i64 %accg127, i64* %55
  %fsize128 = load double, double* %fsize
  store double %fsize128, double* %56
  %expon129 = load double, double* %expon
  store double %expon129, double* %57
  %dolw130 = load i64, i64* %dolw
  store i64 %dolw130, i64* %59
  %dogw131 = load i64, i64* %dogw
  store i64 %dogw131, i64* %60
  %disp132 = load double, double* %disp
  store double %disp132, double* %61
  %dfreq133 = load double, double* %dfreq
  store double %dfreq133, double* %62
  %gflow134 = load double, double* %gflow
  store double %gflow134, double* %63
  %noise_simplex135 = call <3 x double> @"noise_simplex@VPIIIIFFPIIFFFFFV"(<4 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <4 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output139 = call <3 x double> @"sub@VV"(<3 x double> %noise_simplex135, <3 x double> %cast)
  %output143 = call <3 x double> @"mul@VV"(<3 x double> %w.2, <3 x double> %output139)
  %output144 = call <3 x double> @"add@VV"(<3 x double> %out.0, <3 x double> %output143)
  %output148 = call <3 x double> @"mul@VV"(<3 x double> %cast69, <3 x double> %w.2)
  %output150 = call <3 x double> @"mul@VV"(<3 x double> %output148, <3 x double> %w.2)
  %output151 = call <3 x double> @"add@VV"(<3 x double> %wsum.0, <3 x double> %output150)
  %maxoctaves71 = load double, double* %maxoctaves
  %return72 = fcmp olt double %oct.2, %maxoctaves71
  %return73 = zext i1 %return72 to i64
  %return75 = fcmp olt double %output104, 1.000000e+00
  %return76 = zext i1 %return75 to i64
  %return77 = call i64 @"and@III"(i64 %return73, i64 %return76)
  %71 = icmp ne i64 %return77, 0
  br i1 %71, label %body, label %end78

true156:                                          ; preds = %end78
  %return160 = call <3 x double> @"sqrt@VV"(<3 x double> %output151)
  %output161 = call <3 x double> @"div@VV"(<3 x double> %output144, <3 x double> %return160)
  br label %end157

end157:                                           ; preds = %true156, %end78
  %out.1 = phi <3 x double> [ %output161, %true156 ], [ %output144, %end78 ]
  %cast166 = call <3 x double> @"set@VF"(double 1.000000e-01)
  %output171 = call <3 x double> @"add@VV"(<3 x double> %out.1, <3 x double> %cast)
  store <3 x double> %output171, <3 x double>* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call <3 x double> @"natten@VVFF"(<3 x double>* %65, double* %66, double* %67)
  %return172 = call <3 x double> @"fit@VVVVVV"(<3 x double> %cast81, <3 x double> %cast154, <3 x double> %cast166, <3 x double> %cast57, <3 x double> %natten)
  %output173 = call <3 x double> @"mul@VV"(<3 x double> %out.1, <3 x double> %return172)
  %output176 = call <3 x double> @"add@VV"(<3 x double> %output173, <3 x double> %cast)
  %return180 = call <3 x double> @"clamp@VVVV"(<3 x double> %output176, <3 x double> %cast154, <3 x double> %cast57)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end157, %true
  %UnifiedRetVal = phi <3 x double> [ %noise_simplex, %true ], [ %return180, %end157 ]
  ret <3 x double> %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"noise_cc@VVIIVIVIVVV"(<3 x double>* %chaos, i64* %inv, i64* %dobias, <3 x double>* %ccbias, i64* %dogain, <3 x double>* %ccgain, i64* %dorng, <3 x double>* %rnglo, <3 x double>* %rnghi, <3 x double>* %amp) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  %3 = alloca <3 x double>
  %chaos1 = load <3 x double>, <3 x double>* %chaos
  %dobias2 = load i64, i64* %dobias
  %4 = icmp ne i64 %dobias2, 0
  br i1 %4, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store <3 x double> %chaos1, <3 x double>* %0
  %ccbias4 = load <3 x double>, <3 x double>* %ccbias
  %cast = call <3 x double> @"set@VF"(double 1.000000e-05)
  %cast5 = call <3 x double> @"set@VI"(i64 1)
  %output = call <3 x double> @"sub@VV"(<3 x double> %cast5, <3 x double> %cast)
  %return = call <3 x double> @"clamp@VVVV"(<3 x double> %ccbias4, <3 x double> %cast, <3 x double> %output)
  store <3 x double> %return, <3 x double>* %1
  %bias = call <3 x double> @"bias@VVV"(<3 x double>* %0, <3 x double>* %1)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %out.0 = phi <3 x double> [ %bias, %true ], [ %chaos1, %__llvm_entry ]
  %dogain7 = load i64, i64* %dogain
  %5 = icmp ne i64 %dogain7, 0
  br i1 %5, label %true8, label %end9

true8:                                            ; preds = %end
  store <3 x double> %out.0, <3 x double>* %2
  %ccgain11 = load <3 x double>, <3 x double>* %ccgain
  %cast12 = call <3 x double> @"set@VF"(double 1.000000e-05)
  %cast13 = call <3 x double> @"set@VI"(i64 1)
  %output15 = call <3 x double> @"sub@VV"(<3 x double> %cast13, <3 x double> %cast12)
  %return16 = call <3 x double> @"clamp@VVVV"(<3 x double> %ccgain11, <3 x double> %cast12, <3 x double> %output15)
  store <3 x double> %return16, <3 x double>* %3
  %gain = call <3 x double> @"gain@VVV"(<3 x double>* %2, <3 x double>* %3)
  br label %end9

end9:                                             ; preds = %true8, %end
  %out.1 = phi <3 x double> [ %gain, %true8 ], [ %out.0, %end ]
  %inv17 = load i64, i64* %inv
  %6 = icmp ne i64 %inv17, 0
  br i1 %6, label %true18, label %end19

true18:                                           ; preds = %end9
  %output21 = call <3 x double> @"sub@VV"(<3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> %out.1)
  br label %end19

end19:                                            ; preds = %true18, %end9
  %out.2 = phi <3 x double> [ %output21, %true18 ], [ %out.1, %end9 ]
  %dorng22 = load i64, i64* %dorng
  %7 = icmp ne i64 %dorng22, 0
  br i1 %7, label %true23, label %end24

true23:                                           ; preds = %end19
  %rnglo26 = load <3 x double>, <3 x double>* %rnglo
  %rnghi27 = load <3 x double>, <3 x double>* %rnghi
  %return28 = call <3 x double> @"fit@VVVVVV"(<3 x double> %out.2, <3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> %rnglo26, <3 x double> %rnghi27)
  br label %end24

end24:                                            ; preds = %true23, %end19
  %out.3 = phi <3 x double> [ %return28, %true23 ], [ %out.2, %end19 ]
  %amp30 = load <3 x double>, <3 x double>* %amp
  %output31 = call <3 x double> @"mul@VV"(<3 x double> %out.3, <3 x double> %amp30)
  ret <3 x double> %output31
}

; Function Attrs: nounwind
define void @obj_geo1_attribnoise1_generate_noise(i64 %animated, double %time, <3 x double> %P, double %timefrequency, <3 x double> %frequency, <3 x double> %__noise, <3 x double> %offset, <4 x double> %period, double %oct, double %lac, double %rough, i64 %dolwarp, i64 %accuml, double %disp, double %dispfreq, i64 %dogwarp, i64 %accumg, double %gflow, double %flowrot) #2 {
__llvm_entry:
  %x_avg = alloca double
  %x_oct = alloca double
  %x_off = alloca <3 x double>
  %p1 = alloca <4 x double>
  %0 = alloca <4 x double>
  %1 = alloca <4 x double>
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca double
  %7 = alloca double
  %8 = alloca <4 x double>
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca double
  %12 = alloca double
  %13 = alloca double
  %14 = alloca double
  %15 = alloca double
  %16 = alloca double
  %17 = alloca double
  %18 = alloca <3 x double>
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca <3 x double>
  %22 = alloca i64
  %23 = alloca <3 x double>
  %24 = alloca i64
  %25 = alloca <3 x double>
  %26 = alloca <3 x double>
  %27 = alloca <3 x double>
  %return = call i64 @"ne@III"(i64 0, i64 0)
  %28 = icmp ne i64 %return, 0
  %return2 = call i64 @"ne@III"(i64 %animated, i64 0)
  %29 = icmp ne i64 %return2, 0
  %phi = select i1 %29, double 0.000000e+00, double %time
  %phi13 = select i1 %29, double %time, double 0.000000e+00
  %phi14 = select i1 %28, double %phi, double %phi13
  %cast = call <4 x double> @"set@PV"(<3 x double> %P)
  %output = call <4 x double> @"setcomp@PFI"(<4 x double> %cast, double %phi14, i64 3)
  %cast19 = call <4 x double> @"set@PV"(<3 x double> %frequency)
  %output22 = call <4 x double> @"setcomp@PFI"(<4 x double> %cast19, double %timefrequency, i64 3)
  %cast24 = call <4 x double> @"set@PV"(<3 x double> %offset)
  %output26 = call <4 x double> @"setcomp@PFI"(<4 x double> %cast24, double 0.000000e+00, i64 3)
  store double 0.000000e+00, double* %x_avg
  store double 0.000000e+00, double* %x_oct
  %cast28 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast28, <3 x double>* %x_off
  %output39 = call <4 x double> @"mul@PP"(<4 x double> %output, <4 x double> %output22)
  %output41 = call <4 x double> @"sub@PP"(<4 x double> %output39, <4 x double> %output26)
  store <4 x double> %output41, <4 x double>* %p1
  %pyro_vopfw_VOP_CTXT = call double @"pyro_vopfw_VOP_CTXT@FP"(<4 x double>* %0)
  br i1 false, label %true48, label %false49

true48:                                           ; preds = %__llvm_entry
  %pyro_vopfw_VOP_CTXT51 = call double @"pyro_vopfw_VOP_CTXT@FP"(<4 x double>* %1)
  br label %end50

false49:                                          ; preds = %__llvm_entry
  br label %end50

end50:                                            ; preds = %false49, %true48
  %return55 = call double @"max@FP"(<4 x double> %output22)
  %output58 = fmul double %disp, %return55
  %return64 = call double @"max@FFF"(double 0.000000e+00, double 1.000000e+00)
  br i1 true, label %true70, label %end71

true70:                                           ; preds = %end50
  store i64 0, i64* %2
  store i64 0, i64* %3
  store i64 %accuml, i64* %4
  store i64 %accumg, i64* %5
  store double 0.000000e+00, double* %6
  store double %return64, double* %7
  store i64 %dolwarp, i64* %9
  store i64 %dogwarp, i64* %10
  store double %output58, double* %11
  store double %dispfreq, double* %12
  store double %gflow, double* %13
  store double %oct, double* %15
  store double %lac, double* %16
  store double %rough, double* %17
  %fBm_simplex = call <3 x double> @"fBm_simplex@VPIIIIFFPIIFFFFFVFFFF"(<4 x double>* %p1, i64* %2, i64* %3, i64* %4, i64* %5, double* %6, double* %7, <4 x double>* %8, i64* %9, i64* %10, double* %11, double* %12, double* %13, double* %14, double* %x_avg, <3 x double>* %x_off, double* %15, double* %16, double* %17, double* %x_oct)
  br label %end71

end71:                                            ; preds = %true70, %end50
  %n1.0 = phi <3 x double> [ %fBm_simplex, %true70 ], [ %cast28, %end50 ]
  %cast87 = call <3 x double> @"set@VF"(double 1.000000e+00)
  %output88 = call <3 x double> @"mul@VV"(<3 x double> %n1.0, <3 x double> %cast87)
  %cast91 = call <3 x double> @"set@VF"(double 0.000000e+00)
  %output92 = call <3 x double> @"mul@VV"(<3 x double> %cast28, <3 x double> %cast91)
  %output93 = call <3 x double> @"add@VV"(<3 x double> %output88, <3 x double> %output92)
  store <3 x double> %output93, <3 x double>* %18
  store i64 0, i64* %19
  store i64 0, i64* %20
  store <3 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <3 x double>* %21
  store i64 0, i64* %22
  store <3 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <3 x double>* %23
  store i64 0, i64* %24
  store <3 x double> zeroinitializer, <3 x double>* %25
  store <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double>* %26
  store <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double>* %27
  %noise_cc = call <3 x double> @"noise_cc@VVIIVIVIVVV"(<3 x double>* %18, i64* %19, i64* %20, <3 x double>* %21, i64* %22, <3 x double>* %23, i64* %24, <3 x double>* %25, <3 x double>* %26, <3 x double>* %27)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), <3 x double> %noise_cc) #3
  store <3 x double> %gvalue, <3 x double>* @__noise
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"setcomp@PFI"(<4 x double>, double, i64) #0

; Function Attrs: nounwind
declare double @"max@FP"(<4 x double>) #2

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_geo1_attribnoise1_generate_noise(i64 0, double 0.000000e+00, <3 x double> zeroinitializer, double 0.000000e+00, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, double 8.000000e+00, double 2.012340e+00, double 5.000000e-01, i64 0, i64 0, double 0.000000e+00, double 1.000000e+00, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline nounwind }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

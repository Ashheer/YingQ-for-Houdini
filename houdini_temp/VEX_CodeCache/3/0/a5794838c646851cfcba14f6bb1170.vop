;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [11 x i8] c"outputtype\00"
@1 = private constant [6 x i8] c"nurbs\00"
@2 = private constant [7 x i8] c"bezier\00"
@3 = private constant [7 x i8] c"closed\00"
@4 = private constant [6 x i8] c"order\00"
@5 = private constant [2 x i8] c"P\00"
@primnum = external global i64
@6 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_primnum) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64 @"primvertexcount@III"(i64 0, i64 %_bound_primnum1)
  %return4 = call i64 @"eq@III"(i64 %return, i64 0)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return6 = call i64 @"removeprim@IIII"(i64 0, i64 %_bound_primnum1, i64 1)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %return7 = call i8* @"chs@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i64 0, i64 0))
  %return9 = call i64 @"ne@ISS"(i8* %return7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0))
  %return11 = call i64 @"ne@ISS"(i8* %return7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0))
  %return12 = call i64 @"and@III"(i64 %return9, i64 %return11)
  %1 = icmp ne i64 %return12, 0
  br i1 %1, label %true13, label %end14

true13:                                           ; preds = %cond95, %false, %cond, %end
  ret void

end14:                                            ; preds = %end
  %return16 = call i64 @"primintrinsic@IISI"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), i64 %_bound_primnum1)
  %return17 = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0))
  %return19 = call i64 @"eq@ISS"(i8* %return7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0))
  %return22 = call i64 @"lt@III"(i64 %return, i64 %return17)
  %return23 = call i64 @"and@III"(i64 %return19, i64 %return22)
  %return25 = call i64 @"gt@III"(i64 %return, i64 0)
  %return26 = call i64 @"and@III"(i64 %return23, i64 %return25)
  %2 = icmp ne i64 %return26, 0
  br i1 %2, label %true27, label %false

true27:                                           ; preds = %end14
  %output = sub i64 %return17, %return
  %return32 = call i64 @"not@II"(i64 %return16)
  %3 = icmp ne i64 %return32, 0
  br i1 %3, label %true33, label %end34

false:                                            ; preds = %end14
  %return54 = call i64 @"eq@ISS"(i8* %return7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0))
  %return56 = call i64 @"gt@III"(i64 %return, i64 1)
  %return57 = call i64 @"and@III"(i64 %return54, i64 %return56)
  %return59 = call i64 @"ge@III"(i64 %return17, i64 3)
  %return60 = call i64 @"and@III"(i64 %return57, i64 %return59)
  %output63 = sub i64 %return17, 1
  %return64 = call i64 @"mod@III"(i64 %return, i64 %output63)
  %output66 = sub i64 1, %return16
  %return67 = call i64 @"ne@III"(i64 %return64, i64 %output66)
  %return68 = call i64 @"and@III"(i64 %return60, i64 %return67)
  %4 = icmp ne i64 %return68, 0
  br i1 %4, label %true69, label %true13

true33:                                           ; preds = %true27
  %output36 = sub i64 %return, 1
  br label %end34

end34:                                            ; preds = %true33, %true27
  %idx.0 = phi i64 [ %output36, %true33 ], [ 0, %true27 ]
  %return39 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum1, i64 %idx.0)
  %return41 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), i64 %return39)
  br label %cond

cond:                                             ; preds = %body, %end34
  %i.0 = phi i64 [ 0, %end34 ], [ %output52, %body ]
  %return44 = call i64 @"lt@III"(i64 %i.0, i64 %output)
  %5 = icmp ne i64 %return44, 0
  br i1 %5, label %body, label %true13

body:                                             ; preds = %cond
  %return47 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return41)
  %return50 = call i64 @"addvertex@IIII"(i64 0, i64 %_bound_primnum1, i64 %return47)
  %output52 = add i64 %i.0, 1
  br label %cond

true69:                                           ; preds = %false
  %output75 = sub i64 %return, 1
  %return78 = call i64 @"mod@III"(i64 %output75, i64 %output63)
  %output79 = sub i64 %output63, %return78
  %6 = icmp ne i64 %return16, 0
  br i1 %6, label %true81, label %end82

true81:                                           ; preds = %true69
  %output84 = sub i64 %output79, 1
  %return85 = call i64 @"max@III"(i64 0, i64 %output84)
  br label %end82

end82:                                            ; preds = %true81, %true69
  %extras71.0 = phi i64 [ %return85, %true81 ], [ %output79, %true69 ]
  %return90 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum1, i64 %output75)
  %return93 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), i64 %return90)
  br label %cond95

cond95:                                           ; preds = %body96, %end82
  %i94.0 = phi i64 [ 0, %end82 ], [ %output109, %body96 ]
  %return99 = call i64 @"lt@III"(i64 %i94.0, i64 %extras71.0)
  %7 = icmp ne i64 %return99, 0
  br i1 %7, label %body96, label %true13

body96:                                           ; preds = %cond95
  %return104 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return93)
  %return107 = call i64 @"addvertex@IIII"(i64 0, i64 %_bound_primnum1, i64 %return104)
  %output109 = add i64 %i94.0, 1
  br label %cond95
}

; Function Attrs: nounwind
declare i64 @"primvertexcount@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"removeprim@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"primintrinsic@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind
declare i64 @"primpoint@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"addvertex@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"max@III"(i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum) #1 {
__llvm_entry:
  %0 = alloca i64
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @6, i64 0, i64 0), i64 %primnum) #3
  store i64 %gvalue, i64* @primnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

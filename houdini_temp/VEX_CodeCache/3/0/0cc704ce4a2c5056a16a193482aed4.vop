;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"minradius\00"
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [9 x i8] c"__pscale\00"
@P = external global <3 x double>
@__pscale = external global double
@ptnum = external global i64
@3 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VFI"(<3 x double>* %_bound_P, double* %_bound___pscale, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"npoints@II"(i64 0)
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %_bound___pscale3 = load double, double* %_bound___pscale
  %return5 = call i64* @"pcfind_radius@[IISSFVFI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), double 1.000000e+00, <3 x double> %_bound_P2, double %_bound___pscale3, i64 %return1)
  %return7 = call i64 @"len@I[I"(i64* %return5)
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %__impl_foreach_index_2.0 = phi i64 [ 0, %__llvm_entry ], [ %output38, %iter ]
  %scale.0 = phi double [ 1.000000e+00, %__llvm_entry ], [ %scale.1, %iter ]
  %return10 = call i64 @"lt@III"(i64 %__impl_foreach_index_2.0, i64 %return7)
  %0 = icmp ne i64 %return10, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return13 = call i64 @"getcomp@I[II"(i64* %return5, i64 %__impl_foreach_index_2.0)
  %_bound_ptnum15 = load i64, i64* %_bound_ptnum
  %return16 = call i64 @"eq@III"(i64 %return13, i64 %_bound_ptnum15)
  %1 = icmp ne i64 %return16, 0
  br i1 %1, label %iter, label %end17

end:                                              ; preds = %cond
  %return39 = call i64 @"npoints@II"(i64 1)
  %_bound_P40 = load <3 x double>, <3 x double>* %_bound_P
  %_bound___pscale41 = load double, double* %_bound___pscale
  %return43 = call i64* @"pcfind_radius@[IISSFVFI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), double 1.000000e+00, <3 x double> %_bound_P40, double %_bound___pscale41, i64 %return39)
  %return46 = call i64 @"len@I[I"(i64* %return43)
  br label %cond47

iter:                                             ; preds = %end17, %true34, %body
  %scale.1 = phi double [ %scale.0, %body ], [ %output29, %true34 ], [ %scale.0, %end17 ]
  %output38 = add i64 %__impl_foreach_index_2.0, 1
  br label %cond

end17:                                            ; preds = %body
  %return19 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return13)
  %return21 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), i64 %return13)
  %_bound_P23 = load <3 x double>, <3 x double>* %_bound_P
  %output = call <3 x double> @"sub@VV"(<3 x double> %return19, <3 x double> %_bound_P23)
  %return24 = call double @"length@FV"(<3 x double> %output)
  %_bound___pscale26 = load double, double* %_bound___pscale
  %output28 = fadd double %_bound___pscale26, %return21
  %output29 = call double @"div@FF"(double %return24, double %output28)
  %return32 = fcmp olt double %output29, %scale.0
  br i1 %return32, label %true34, label %iter

true34:                                           ; preds = %end17
  br label %iter

cond47:                                           ; preds = %end79, %end
  %__impl_foreach_index_3.0 = phi i64 [ 0, %end ], [ %output82, %end79 ]
  %scale.2 = phi double [ %scale.0, %end ], [ %scale.3, %end79 ]
  %return51 = call i64 @"lt@III"(i64 %__impl_foreach_index_3.0, i64 %return46)
  %2 = icmp ne i64 %return51, 0
  br i1 %2, label %body48, label %end52

body48:                                           ; preds = %cond47
  %return56 = call i64 @"getcomp@I[II"(i64* %return43, i64 %__impl_foreach_index_3.0)
  %return59 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return56)
  %return62 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), i64 %return56)
  %_bound_P65 = load <3 x double>, <3 x double>* %_bound_P
  %output66 = call <3 x double> @"sub@VV"(<3 x double> %return59, <3 x double> %_bound_P65)
  %return67 = call double @"length@FV"(<3 x double> %output66)
  %output71 = fsub double %return67, %return62
  %_bound___pscale72 = load double, double* %_bound___pscale
  %output73 = call double @"div@FF"(double %output71, double %_bound___pscale72)
  %return76 = fcmp olt double %output73, %scale.2
  br i1 %return76, label %true78, label %end79

end52:                                            ; preds = %cond47
  %_bound___pscale84 = load double, double* %_bound___pscale
  %output85 = fmul double %scale.2, %_bound___pscale84
  %return88 = fcmp olt double %output85, %return
  br i1 %return88, label %true90, label %end91

true78:                                           ; preds = %body48
  br label %end79

end79:                                            ; preds = %true78, %body48
  %scale.3 = phi double [ %output73, %true78 ], [ %scale.2, %body48 ]
  %output82 = add i64 %__impl_foreach_index_3.0, 1
  br label %cond47

true90:                                           ; preds = %end52
  br label %end91

end91:                                            ; preds = %true90, %end52
  %scale.4 = phi double [ %return, %true90 ], [ %output85, %end52 ]
  store double %scale.4, double* %_bound___pscale
  ret void
}

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #2

; Function Attrs: nounwind
declare i64* @"pcfind_radius@[IISSFVFI"(i64, i8*, i8*, double, <3 x double>, double, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, double %__pscale, i64 %ptnum) #2 {
__llvm_entry:
  %"<__pscale>" = alloca double
  %0 = alloca <3 x double>
  %1 = alloca i64
  store double %__pscale, double* %"<__pscale>"
  store <3 x double> %P, <3 x double>* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@VFI"(<3 x double>* %0, double* %"<__pscale>", i64* %1)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %P) #3
  %evalue3 = load double, double* %"<__pscale>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), double %evalue3) #3
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store double %gvalue4, double* @__pscale
  store i64 %gvalue6, i64* @ptnum
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

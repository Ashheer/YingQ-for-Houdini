;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [17 x i8] c"strength_scaling\00"
@1 = private constant [16 x i8] c"strength_attrib\00"
@2 = private constant [1 x i8] zeroinitializer
@3 = private constant [9 x i8] c"strength\00"
@4 = private constant [17 x i8] c"halflife_scaling\00"
@5 = private constant [16 x i8] c"halflife_attrib\00"
@6 = private constant [9 x i8] c"halflife\00"
@7 = private constant [24 x i8] c"propagationrate_scaling\00"
@8 = private constant [23 x i8] c"propagationrate_attrib\00"
@9 = private constant [14 x i8] c"propagaterate\00"
@strength = external global double
@primnum = external global i64
@impulse_halflife = external global double
@propagate_rate = external global double
@10 = private constant [8 x i8] c"primnum\00"
@11 = private constant [17 x i8] c"impulse_halflife\00"
@12 = private constant [15 x i8] c"propagate_rate\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FIFF"(double* %_bound_strength, i64* %_bound_primnum, double* %_bound_impulse_halflife, double* %_bound_propagate_rate) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @0, i64 0, i64 0))
  %return1 = call i8* @"chs@SS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"ne@ISS"(i8* %return1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0))
  %return3 = call i64 @"and@III"(i64 %return, i64 %return2)
  %return5 = call i64 @"hasprimattrib@IIS"(i64 0, i8* %return1)
  %return6 = call i64 @"and@III"(i64 %return3, i64 %return5)
  %0 = icmp ne i64 %return6, 0
  %return7 = call double @"ch@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0))
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_bound_primnum9 = load i64, i64* %_bound_primnum
  %return10 = call double @"prim@FISI"(i64 0, i8* %return1, i64 %_bound_primnum9)
  %output = fmul double %return7, %return10
  store double %output, double* %_bound_strength
  br label %end

false:                                            ; preds = %__llvm_entry
  store double %return7, double* %_bound_strength
  br label %end

end:                                              ; preds = %false, %true
  %return12 = call i64 @"chi@IS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @4, i64 0, i64 0))
  %return13 = call i8* @"chs@SS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @5, i64 0, i64 0))
  %return14 = call i64 @"ne@ISS"(i8* %return13, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0))
  %return15 = call i64 @"and@III"(i64 %return12, i64 %return14)
  %return17 = call i64 @"hasprimattrib@IIS"(i64 0, i8* %return13)
  %return18 = call i64 @"and@III"(i64 %return15, i64 %return17)
  %1 = icmp ne i64 %return18, 0
  %return22 = call double @"ch@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @6, i64 0, i64 0))
  br i1 %1, label %true19, label %false20

true19:                                           ; preds = %end
  %_bound_primnum24 = load i64, i64* %_bound_primnum
  %return25 = call double @"prim@FISI"(i64 0, i8* %return13, i64 %_bound_primnum24)
  %output26 = fmul double %return22, %return25
  store double %output26, double* %_bound_impulse_halflife
  br label %end21

false20:                                          ; preds = %end
  store double %return22, double* %_bound_impulse_halflife
  br label %end21

end21:                                            ; preds = %false20, %true19
  %return28 = call i64 @"chi@IS"(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @7, i64 0, i64 0))
  %return29 = call i8* @"chs@SS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @8, i64 0, i64 0))
  %return30 = call i64 @"ne@ISS"(i8* %return29, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0))
  %return31 = call i64 @"and@III"(i64 %return28, i64 %return30)
  %return33 = call i64 @"hasprimattrib@IIS"(i64 0, i8* %return29)
  %return34 = call i64 @"and@III"(i64 %return31, i64 %return33)
  %2 = icmp ne i64 %return34, 0
  %return38 = call double @"ch@FS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @9, i64 0, i64 0))
  br i1 %2, label %true35, label %false36

true35:                                           ; preds = %end21
  %_bound_primnum40 = load i64, i64* %_bound_primnum
  %return41 = call double @"prim@FISI"(i64 0, i8* %return29, i64 %_bound_primnum40)
  %output42 = fmul double %return38, %return41
  store double %output42, double* %_bound_propagate_rate
  br label %end37

false36:                                          ; preds = %end21
  store double %return38, double* %_bound_propagate_rate
  br label %end37

end37:                                            ; preds = %false36, %true35
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"hasprimattrib@IIS"(i64, i8*) #2

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"prim@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(double %strength, i64 %primnum, double %impulse_halflife, double %propagate_rate) #2 {
__llvm_entry:
  %"<impulse_halflife>" = alloca double
  %"<propagate_rate>" = alloca double
  %0 = alloca i64
  %"<strength>" = alloca double
  store double %strength, double* %"<strength>"
  store double %impulse_halflife, double* %"<impulse_halflife>"
  store double %propagate_rate, double* %"<propagate_rate>"
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@FIFF"(double* %"<strength>", i64* %0, double* %"<impulse_halflife>", double* %"<propagate_rate>")
  %evalue = load double, double* %"<strength>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0), double %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @10, i64 0, i64 0), i64 %primnum) #3
  %evalue4 = load double, double* %"<impulse_halflife>"
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @11, i64 0, i64 0), double %evalue4) #3
  %evalue6 = load double, double* %"<propagate_rate>"
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @12, i64 0, i64 0), double %evalue6) #3
  store double %gvalue, double* @strength
  store i64 %gvalue3, i64* @primnum
  store double %gvalue5, double* @impulse_halflife
  store double %gvalue7, double* @propagate_rate
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, i64 0, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

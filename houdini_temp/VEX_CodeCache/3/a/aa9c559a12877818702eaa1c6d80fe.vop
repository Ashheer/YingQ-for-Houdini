;_name	/obj/sphere1/vellumsolver1/dopnet1/vellumsolver1/compute_stress/geometryvop1
; ModuleID = 'obj_sphere1_vellumsolver1_dopnet1_vellumsolver1_compute_stress_geometryvop1'
source_filename = "obj_sphere1_vellumsolver1_dopnet1_vellumsolver1_compute_stress_geometryvop1"

@0 = private constant [11 x i8] c"tetarapvol\00"
@1 = private constant [13 x i8] c"tetarapnlvol\00"
@2 = private constant [15 x i8] c"tetarapnormvol\00"
@3 = private constant [10 x i8] c"triarapnl\00"
@4 = private constant [10 x i8] c"tetarapnl\00"
@5 = private constant [10 x i8] c"normalize\00"
@6 = private constant [1 x i8] zeroinitializer
@stress = external global double
@7 = private constant [7 x i8] c"stress\00"

; Function Attrs: alwaysinline nounwind
define private i64 @"isTetARAPVol@IS"(i8** %type) #0 {
__llvm_entry:
  %type1 = load i8*, i8** %type
  %return = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i64 0, i64 0))
  %return3 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0))
  %return4 = call i64 @"or@III"(i64 %return, i64 %return3)
  %return6 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i64 0, i64 0))
  %return7 = call i64 @"or@III"(i64 %return4, i64 %return6)
  ret i64 %return7
}

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: alwaysinline nounwind
define private i64 @"isNonLinearARAP@IS"(i8** %type) #0 {
__llvm_entry:
  %type1 = load i8*, i8** %type
  %return = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0))
  %return3 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @4, i64 0, i64 0))
  %return4 = call i64 @"or@III"(i64 %return, i64 %return3)
  %return6 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0))
  %return7 = call i64 @"or@III"(i64 %return4, i64 %return6)
  ret i64 %return7
}

; Function Attrs: alwaysinline nounwind
define private double @"computeStress@FSVFI"(i8** %type, <3 x double>* %Lin, double* %dt, i64* %normalize) #0 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca i8*
  %Lin1 = load <3 x double>, <3 x double>* %Lin
  %type2 = load i8*, i8** %type
  store i8* %type2, i8** %0
  %isTetARAPVol = call i64 @"isTetARAPVol@IS"(i8** %0)
  %Lin3 = load <3 x double>, <3 x double>* %Lin
  %return = call double @"getcomp@FVI"(<3 x double> %Lin3, i64 2)
  %2 = icmp ne i64 %isTetARAPVol, 0
  %return4 = select i1 %2, double 0.000000e+00, double %return
  %return5 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %Lin1, double %return4, i64 2)
  %output = extractvalue { double, <3 x double> } %return5, 1
  %normalize7 = load i64, i64* %normalize
  %return8 = call i64 @"not@II"(i64 %normalize7)
  %3 = icmp ne i64 %return8, 0
  br i1 %3, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return10 = call double @"length@FV"(<3 x double> %output)
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %type11 = load i8*, i8** %type
  store i8* %type11, i8** %1
  %isNonLinearARAP = call i64 @"isNonLinearARAP@IS"(i8** %1)
  %dt12 = load double, double* %dt
  %output15 = fmul double %dt12, %dt12
  %4 = icmp ne i64 %isNonLinearARAP, 0
  %return16 = select i1 %4, double %dt12, double %output15
  %output17 = call double @"div@FF"(double 1.000000e+00, double %return16)
  %return19 = call double @"length@FV"(<3 x double> %output)
  %output21 = fmul double %return19, %output17
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end, %true
  %UnifiedRetVal = phi double [ %return10, %true ], [ %output21, %end ]
  ret double %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 2)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #3

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: alwaysinline nounwind
define private void @"_obj_sphere1_vellumsolver1_dopnet1_vellumsolver1_compute_stress_geometryvop1_snippet1@FSVF"(double* %_bound_stress, i8** %_bound_type, <3 x double>* %_bound_L, double* %_bound_TimeInc) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca double
  %2 = alloca i64
  %3 = alloca i8*
  %_bound_type1 = load i8*, i8** %_bound_type
  store i8* %_bound_type1, i8** %3
  %_bound_L2 = load <3 x double>, <3 x double>* %_bound_L
  store <3 x double> %_bound_L2, <3 x double>* %0
  %_bound_TimeInc3 = load double, double* %_bound_TimeInc
  store double %_bound_TimeInc3, double* %1
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i64 0, i64 0))
  store i64 %return, i64* %2
  %computeStress = call double @"computeStress@FSVFI"(i8** %3, <3 x double>* %0, double* %1, i64* %2)
  store double %computeStress, double* %_bound_stress
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind
define void @obj_sphere1_vellumsolver1_dopnet1_vellumsolver1_compute_stress_geometryvop1(double %stress, i8* %type, <3 x double> %L, double %TimeInc) #3 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  %"<stress>" = alloca double
  store double %stress, double* %"<stress>"
  store i8* %type, i8** %0
  store <3 x double> %L, <3 x double>* %1
  store double %TimeInc, double* %2
  call void @"_obj_sphere1_vellumsolver1_dopnet1_vellumsolver1_compute_stress_geometryvop1_snippet1@FSVF"(double* %"<stress>", i8** %0, <3 x double>* %1, double* %2)
  %evalue = load double, double* %"<stress>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), double %evalue) #4
  store double %gvalue, double* @stress
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_sphere1_vellumsolver1_dopnet1_vellumsolver1_compute_stress_geometryvop1(double 0.000000e+00, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0), <3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

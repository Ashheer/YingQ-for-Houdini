;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [7 x i8] c"orient\00"
@gradRedValue = external global <3 x double>
@ptnum = external global i64
@pscale = external global double
@1 = private constant [13 x i8] c"gradRedValue\00"
@2 = private constant [6 x i8] c"ptnum\00"
@3 = private constant [7 x i8] c"pscale\00"

; Function Attrs: alwaysinline nounwind
define private <4 x double> @"orientForCopy@PVF"(<3 x double>* %normal, double* %rotation) #0 {
__llvm_entry:
  %return = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 1.000000e+00, double 0.000000e+00)
  %rotation1 = load double, double* %rotation
  %return3 = call <4 x double> @"quaternion@PFV"(double %rotation1, <3 x double> %return)
  %normal5 = load <3 x double>, <3 x double>* %normal
  %return6 = call <4 x double> @"dihedral@PVV"(<3 x double> %return, <3 x double> %normal5)
  %return9 = call <4 x double> @"qmultiply@PPP"(<4 x double> %return6, <4 x double> %return3)
  ret <4 x double> %return9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"quaternion@PFV"(double, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"dihedral@PVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"qmultiply@PPP"(<4 x double>, <4 x double>) #1

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VIF"(<3 x double>* %_bound_gradRedValue, i64* %_bound_ptnum, double* %_bound_pscale) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca double
  %_bound_gradRedValue1 = load <3 x double>, <3 x double>* %_bound_gradRedValue
  %return = call double @"length@FV"(<3 x double> %_bound_gradRedValue1)
  %cast = call <3 x double> @"set@VF"(double %return)
  %output = call <3 x double> @"div@VV"(<3 x double> %_bound_gradRedValue1, <3 x double> %cast)
  store <3 x double> %output, <3 x double>* %0
  store double 0.000000e+00, double* %1
  %orientForCopy = call <4 x double> @"orientForCopy@PVF"(<3 x double>* %0, double* %1)
  %return5 = call i64 @"geoself@I"()
  %_bound_ptnum6 = load i64, i64* %_bound_ptnum
  %return8 = call i64 @"setpointattrib@IISIP"(i64 %return5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0), i64 %_bound_ptnum6, <4 x double> %orientForCopy)
  %return10 = call double @"length@FV"(<3 x double> %_bound_gradRedValue1)
  store double %return10, double* %_bound_pscale
  ret void
}

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"geoself@I"() #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIP"(i64, i8*, i64, <4 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %gradRedValue, i64 %ptnum, double %pscale) #2 {
__llvm_entry:
  %"<pscale>" = alloca double
  %0 = alloca <3 x double>
  %1 = alloca i64
  store double %pscale, double* %"<pscale>"
  store <3 x double> %gradRedValue, <3 x double>* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@VIF"(<3 x double>* %0, i64* %1, double* %"<pscale>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0), <3 x double> %gradRedValue) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %ptnum) #3
  %evalue5 = load double, double* %"<pscale>"
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), double %evalue5) #3
  store <3 x double> %gvalue, <3 x double>* @gradRedValue
  store i64 %gvalue4, i64* @ptnum
  store double %gvalue6, double* @pscale
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"primitive\00"
@1 = private constant [13 x i8] c"gradRedValue\00"
@gradRedValue = external global <3 x double>
@ptnum = external global i64
@2 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"averagePrimToPoint@VIS"(<3 x double>* %attrib, i64* %ptId, i8** %attributeName) #0 {
__llvm_entry:
  %ptId1 = load i64, i64* %ptId
  %return = call i64* @"pointprims@[III"(i64 0, i64 %ptId1)
  %return2 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  %return4 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %vec.0 = phi <3 x double> [ %return2, %__llvm_entry ], [ %output, %body ]
  %__impl_foreach_index_16.0 = phi i64 [ 0, %__llvm_entry ], [ %output16, %body ]
  %return7 = call i64 @"lt@III"(i64 %__impl_foreach_index_16.0, i64 %return4)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return10 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_16.0)
  %attributeName12 = load i8*, i8** %attributeName
  %return14 = call <3 x double> @"attrib@VISSI"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), i8* %attributeName12, i64 %return10)
  %output = call <3 x double> @"add@VV"(<3 x double> %vec.0, <3 x double> %return14)
  %output16 = add i64 %__impl_foreach_index_16.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast = call <3 x double> @"set@VI"(i64 %return4)
  %output20 = call <3 x double> @"div@VV"(<3 x double> %vec.0, <3 x double> %cast)
  store <3 x double> %output20, <3 x double>* %attrib
  ret void
}

; Function Attrs: nounwind
declare i64* @"pointprims@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"attrib@VISSI"(i64, i8*, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VI"(<3 x double>* %_bound_gradRedValue, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca i64
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum1, i64* %1
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0), i8** %0
  call void @"averagePrimToPoint@VIS"(<3 x double>* %_bound_gradRedValue, i64* %1, i8** %0)
  ret void
}

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %gradRedValue, i64 %ptnum) #1 {
__llvm_entry:
  %0 = alloca i64
  %"<gradRedValue>" = alloca <3 x double>
  store <3 x double> %gradRedValue, <3 x double>* %"<gradRedValue>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@VI"(<3 x double>* %"<gradRedValue>", i64* %0)
  %evalue = load <3 x double>, <3 x double>* %"<gradRedValue>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %ptnum) #3
  store <3 x double> %gvalue, <3 x double>* @gradRedValue
  store i64 %gvalue3, i64* @ptnum
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x <3 x double>] zeroinitializer
@1 = private constant [13 x i8] c"sourceprimuv\00"
@P = external global <3 x double>
@ptnum = external global i64
@sourceprimuv = external global <3 x double>*
@2 = private constant [2 x i8] c"P\00"
@3 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VI[V"(<3 x double>* %_bound_P, i64* %_bound_ptnum, <3 x double>** %_bound_sourceprimuv) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call i64* @"nearpoints@[IIVFI"(i64 0, <3 x double> %_bound_P1, double 1.000000e-05, i64 2)
  %return3 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %end13, %__llvm_entry
  %__impl_foreach_index_1.0 = phi i64 [ 0, %__llvm_entry ], [ %output21, %end13 ]
  %return6 = call i64 @"lt@III"(i64 %__impl_foreach_index_1.0, i64 %return3)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return9 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_1.0)
  %_bound_ptnum10 = load i64, i64* %_bound_ptnum
  %return12 = call i64 @"ne@III"(i64 %_bound_ptnum10, i64 %return9)
  %1 = icmp ne i64 %return12, 0
  br i1 %1, label %true, label %end13

end:                                              ; preds = %cond
  ret void

true:                                             ; preds = %body
  %return15 = call <3 x double>* @"point@[VISI"(i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0), i64 %return9)
  %_bound_sourceprimuv16 = load <3 x double>*, <3 x double>** %_bound_sourceprimuv
  %return18 = call i64 @"neg@II"(i64 1)
  %return19 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %return15, i64 %return18)
  %output = call <3 x double>* @"push@[VV"(<3 x double>* %_bound_sourceprimuv16, <3 x double> %return19)
  store <3 x double>* %output, <3 x double>** %_bound_sourceprimuv
  br label %end13

end13:                                            ; preds = %true, %body
  %output21 = add i64 %__impl_foreach_index_1.0, 1
  br label %cond
}

; Function Attrs: nounwind
declare i64* @"nearpoints@[IIVFI"(i64, <3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #2

; Function Attrs: nounwind
declare <3 x double>* @"point@[VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double>* @"push@[VV"(<3 x double>*, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, i64 %ptnum, <3 x double>* %sourceprimuv) #1 {
__llvm_entry:
  %"<sourceprimuv>" = alloca <3 x double>*
  %0 = alloca <3 x double>
  %1 = alloca i64
  store <3 x double>* %sourceprimuv, <3 x double>** %"<sourceprimuv>"
  store <3 x double> %P, <3 x double>* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@VI[V"(<3 x double>* %0, i64* %1, <3 x double>** %"<sourceprimuv>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %P) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  %evalue5 = load <3 x double>*, <3 x double>** %"<sourceprimuv>"
  %gvalue6 = call <3 x double>* @"_export@[VS[V"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0), <3 x double>* %evalue5) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store i64 %gvalue4, i64* @ptnum
  store <3 x double>* %gvalue6, <3 x double>** @sourceprimuv
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double>* @"_export@[VS[V"(i8*, <3 x double>*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0, <3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @0, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

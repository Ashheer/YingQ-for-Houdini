;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [15 x i8] c"Num_of_Samples\00"
@1 = private constant [8 x i8] c"blurdia\00"
@dir = external global <3 x double>
@P = external global <3 x double>
@2 = private constant [4 x i8] c"dir\00"
@3 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VV"(<3 x double>* %_bound_dir, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %dir, <3 x double> %P) #2 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  store <3 x double> %dir, <3 x double>* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@VV"(<3 x double>* %0, <3 x double>* %1)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i64 0, i64 0), <3 x double> %dir) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %P) #3
  store <3 x double> %gvalue, <3 x double>* @dir
  store <3 x double> %gvalue4, <3 x double>* @P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [5 x i8] c"isle\00"
@2 = private constant [5 x i8] c"area\00"
@3 = private constant [7 x i8] c"cutoff\00"
@isle = external global i64
@area = external global double
@side = external global i64
@4 = private constant [5 x i8] c"side\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IFI"(i64* %_bound_isle, double* %_bound_area, i64* %_bound_side) #0 {
__llvm_entry:
  %_bound_isle1 = load i64, i64* %_bound_isle
  %return = call i64 @"findattribval@IISSI"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %_bound_isle1)
  %return3 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), i64 %return)
  store double %return3, double* %_bound_area
  %return6 = call double @"ch@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0))
  %return7 = fcmp olt double %return3, %return6
  br i1 %return7, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return9 = call i64 @"neg@II"(i64 1)
  store i64 %return9, i64* %_bound_side
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind
declare i64 @"findattribval@IISSI"(i64, i8*, i8*, i64) #1

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %isle, double %area, i64 %side) #1 {
__llvm_entry:
  %"<area>" = alloca double
  %"<side>" = alloca i64
  %0 = alloca i64
  store double %area, double* %"<area>"
  store i64 %side, i64* %"<side>"
  store i64 %isle, i64* %0
  call void @"__vex_snippet_snippet@IFI"(i64* %0, double* %"<area>", i64* %"<side>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %isle) #3
  %evalue2 = load double, double* %"<area>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), double %evalue2) #3
  %evalue4 = load i64, i64* %"<side>"
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0), i64 %evalue4) #3
  store i64 %gvalue, i64* @isle
  store double %gvalue3, double* @area
  store i64 %gvalue5, i64* @side
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, double 0.000000e+00, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [14 x i8] c"binormal_mode\00"
@tangentv = external global <3 x double>
@N = external global <3 x double>
@tangentu = external global <3 x double>
@1 = private constant [9 x i8] c"tangentv\00"
@2 = private constant [2 x i8] c"N\00"
@3 = private constant [9 x i8] c"tangentu\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVV"(<3 x double>* %_bound_tangentv, <3 x double>* %_bound_N, <3 x double>* %_bound_tangentu) #0 {
__llvm_entry:
  %_bound_N1 = load <3 x double>, <3 x double>* %_bound_N
  %_bound_tangentu2 = load <3 x double>, <3 x double>* %_bound_tangentu
  %return = call <3 x double> @"cross@VVV"(<3 x double> %_bound_N1, <3 x double> %_bound_tangentu2)
  store <3 x double> %return, <3 x double>* %_bound_tangentv
  %return4 = call <3 x double> @"normalize@VV"(<3 x double> %return)
  store <3 x double> %return4, <3 x double>* %_bound_tangentv
  %return5 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @0, i64 0, i64 0))
  %return6 = call i64 @"eq@III"(i64 %return5, i64 1)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return8 = call double @"neg@FF"(double 1.000000e+00)
  %cast = call <3 x double> @"set@VF"(double %return8)
  %output = call <3 x double> @"mul@VV"(<3 x double> %return4, <3 x double> %cast)
  store <3 x double> %output, <3 x double>* %_bound_tangentv
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %tangentv, <3 x double> %N, <3 x double> %tangentu) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %"<tangentv>" = alloca <3 x double>
  store <3 x double> %tangentv, <3 x double>* %"<tangentv>"
  store <3 x double> %N, <3 x double>* %0
  store <3 x double> %tangentu, <3 x double>* %1
  call void @"__vex_snippet_snippet@VVV"(<3 x double>* %"<tangentv>", <3 x double>* %0, <3 x double>* %1)
  %evalue = load <3 x double>, <3 x double>* %"<tangentv>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %N) #3
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0), <3 x double> %tangentu) #3
  store <3 x double> %gvalue, <3 x double>* @tangentv
  store <3 x double> %gvalue4, <3 x double>* @N
  store <3 x double> %gvalue6, <3 x double>* @tangentu
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

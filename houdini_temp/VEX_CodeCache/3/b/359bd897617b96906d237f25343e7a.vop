;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [0 x double] zeroinitializer
@hitprim = external global i64
@P = external global <3 x double>
@blendverts = external global i64*
@blendweights = external global double*
@3 = private constant [8 x i8] c"hitprim\00"
@4 = private constant [11 x i8] c"blendverts\00"
@5 = private constant [13 x i8] c"blendweights\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IV[I[F"(i64* %_bound_hitprim, <3 x double>* %_bound_P, i64** %_bound_blendverts, double** %_bound_blendweights) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  %3 = alloca <3 x double>
  %_bound_hitprim1 = load i64, i64* %_bound_hitprim
  %return = call i64* @"primpoints@[III"(i64 1, i64 %_bound_hitprim1)
  %return3 = call i64 @"getcomp@I[II"(i64* %return, i64 0)
  %return4 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return3)
  %return6 = call i64 @"getcomp@I[II"(i64* %return, i64 1)
  %return7 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return6)
  %return9 = call i64 @"getcomp@I[II"(i64* %return, i64 2)
  %return10 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return9)
  %_bound_P11 = load <3 x double>, <3 x double>* %_bound_P
  store <3 x double> %_bound_P11, <3 x double>* %0
  store <3 x double> %return4, <3 x double>* %1
  store <3 x double> %return7, <3 x double>* %2
  store <3 x double> %return10, <3 x double>* %3
  %compute_barycentric = call <3 x double> @"compute_barycentric@VVVVV"(<3 x double>* %0, <3 x double>* %1, <3 x double>* %2, <3 x double>* %3)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output26, %body ]
  %return16 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %4 = icmp ne i64 %return16, 0
  br i1 %4, label %body, label %end

body:                                             ; preds = %cond
  %return20 = call i64 @"getcomp@I[II"(i64* %return, i64 %i.0)
  %return21 = call i64 @"pointvertex@III"(i64 1, i64 %return20)
  %tmp = load i64*, i64** %_bound_blendverts
  %return22 = call { i64, i64* } @"setcomp@I[III"(i64* %tmp, i64 %return21, i64 %i.0)
  %output = extractvalue { i64, i64* } %return22, 1
  store i64* %output, i64** %_bound_blendverts
  %output26 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %_bound_blendweights27 = load double*, double** %_bound_blendweights
  %return29 = call double @"getcomp@FVI"(<3 x double> %compute_barycentric, i64 0)
  %output30 = call double* @"append@[FF"(double* %_bound_blendweights27, double %return29)
  store double* %output30, double** %_bound_blendweights
  %return33 = call double @"getcomp@FVI"(<3 x double> %compute_barycentric, i64 1)
  %output34 = call double* @"append@[FF"(double* %output30, double %return33)
  store double* %output34, double** %_bound_blendweights
  %return37 = call double @"getcomp@FVI"(<3 x double> %compute_barycentric, i64 2)
  %output38 = call double* @"append@[FF"(double* %output34, double %return37)
  store double* %output38, double** %_bound_blendweights
  ret void
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"compute_barycentric@VVVVV"(<3 x double>* %p, <3 x double>* %a, <3 x double>* %b, <3 x double>* %c) #0 {
__llvm_entry:
  %b1 = load <3 x double>, <3 x double>* %b
  %a2 = load <3 x double>, <3 x double>* %a
  %output = call <3 x double> @"sub@VV"(<3 x double> %b1, <3 x double> %a2)
  %c3 = load <3 x double>, <3 x double>* %c
  %output5 = call <3 x double> @"sub@VV"(<3 x double> %c3, <3 x double> %a2)
  %p6 = load <3 x double>, <3 x double>* %p
  %output8 = call <3 x double> @"sub@VV"(<3 x double> %p6, <3 x double> %a2)
  %return = call double @"dot@FVV"(<3 x double> %output, <3 x double> %output)
  %return13 = call double @"dot@FVV"(<3 x double> %output, <3 x double> %output5)
  %return16 = call double @"dot@FVV"(<3 x double> %output5, <3 x double> %output5)
  %return19 = call double @"dot@FVV"(<3 x double> %output8, <3 x double> %output)
  %return22 = call double @"dot@FVV"(<3 x double> %output8, <3 x double> %output5)
  %output25 = fmul double %return, %return16
  %output28 = fmul double %return13, %return13
  %output29 = fsub double %output25, %output28
  %output32 = fmul double %return16, %return19
  %output35 = fmul double %return13, %return22
  %output36 = fsub double %output32, %output35
  %output38 = call double @"div@FF"(double %output36, double %output29)
  %return39 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> zeroinitializer, double %output38, i64 1)
  %output41 = extractvalue { double, <3 x double> } %return39, 1
  %output44 = fmul double %return, %return22
  %output47 = fmul double %return13, %return19
  %output48 = fsub double %output44, %output47
  %output50 = call double @"div@FF"(double %output48, double %output29)
  %return52 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output41, double %output50, i64 2)
  %output54 = extractvalue { double, <3 x double> } %return52, 1
  %return56 = call double @"getcomp@FVI"(<3 x double> %output54, i64 1)
  %output57 = fsub double 1.000000e+00, %return56
  %return59 = call double @"getcomp@FVI"(<3 x double> %output54, i64 2)
  %output60 = fsub double %output57, %return59
  %return62 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output54, double %output60, i64 0)
  %output64 = extractvalue { double, <3 x double> } %return62, 1
  ret <3 x double> %output64
}

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"pointvertex@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #1

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %hitprim, <3 x double> %P, i64* %blendverts, double* %blendweights) #2 {
__llvm_entry:
  %"<blendverts>" = alloca i64*
  %"<blendweights>" = alloca double*
  %0 = alloca i64
  %1 = alloca <3 x double>
  store i64* %blendverts, i64** %"<blendverts>"
  store double* %blendweights, double** %"<blendweights>"
  store i64 %hitprim, i64* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@IV[I[F"(i64* %0, <3 x double>* %1, i64** %"<blendverts>", double** %"<blendweights>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i64 %hitprim) #4
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %P) #4
  %evalue5 = load i64*, i64** %"<blendverts>"
  %gvalue6 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0), i64* %evalue5) #4
  %evalue7 = load double*, double** %"<blendweights>"
  %gvalue8 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @5, i64 0, i64 0), double* %evalue7) #4
  store i64 %gvalue, i64* @hitprim
  store <3 x double> %gvalue4, <3 x double>* @P
  store i64* %gvalue6, i64** @blendverts
  store double* %gvalue8, double** @blendweights
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64* @"_export@[IS[I"(i8*, i64*)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

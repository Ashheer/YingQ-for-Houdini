;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"seed\00"
@up = external global <3 x double>
@pscale = external global double
@ptnum = external global i64
@N = external global <3 x double>
@1 = private constant [3 x i8] c"up\00"
@2 = private constant [7 x i8] c"pscale\00"
@3 = private constant [6 x i8] c"ptnum\00"
@4 = private constant [2 x i8] c"N\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VFIV"(<3 x double>* %_bound_up, double* %_bound_pscale, i64* %_bound_ptnum, <3 x double>* %_bound_N) #0 {
__llvm_entry:
  store <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>, <3 x double>* %_bound_up
  store double 1.000000e+00, double* %_bound_pscale
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %output = add i64 %_bound_ptnum1, 1
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  %cast = sitofp i64 %output to double
  %output2 = fmul double %cast, %return
  %return3 = call double @"rand@FF"(double %output2)
  %output5 = fmul double %return3, 4.000000e+00
  %return6 = call i64 @"floor@IF"(double %output5)
  %output7 = mul i64 %return6, 90
  %cast8 = sitofp i64 %output7 to double
  %return10 = call double @"radians@FF"(double %cast8)
  %return11 = call double @"sin@FF"(double %return10)
  %tmp = load <3 x double>, <3 x double>* %_bound_N
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %return11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %_bound_N
  %return16 = call double @"radians@FF"(double %cast8)
  %return17 = call double @"cos@FF"(double %return16)
  %tmp18 = load <3 x double>, <3 x double>* %_bound_N
  %return19 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp18, double %return17, i64 2)
  %output21 = extractvalue { double, <3 x double> } %return19, 1
  store <3 x double> %output21, <3 x double>* %_bound_N
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"rand@FF"(double) #2

; Function Attrs: nounwind
declare i64 @"floor@IF"(double) #2

; Function Attrs: nounwind
declare double @"radians@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %up, double %pscale, i64 %ptnum, <3 x double> %N) #2 {
__llvm_entry:
  %"<pscale>" = alloca double
  %"<N>" = alloca <3 x double>
  %0 = alloca i64
  %"<up>" = alloca <3 x double>
  store <3 x double> %up, <3 x double>* %"<up>"
  store double %pscale, double* %"<pscale>"
  store <3 x double> %N, <3 x double>* %"<N>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@VFIV"(<3 x double>* %"<up>", double* %"<pscale>", i64* %0, <3 x double>* %"<N>")
  %evalue = load <3 x double>, <3 x double>* %"<up>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #4
  %evalue2 = load double, double* %"<pscale>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), double %evalue2) #4
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #4
  %evalue6 = load <3 x double>, <3 x double>* %"<N>"
  %gvalue7 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), <3 x double> %evalue6) #4
  store <3 x double> %gvalue, <3 x double>* @up
  store double %gvalue3, double* @pscale
  store i64 %gvalue5, i64* @ptnum
  store <3 x double> %gvalue7, <3 x double>* @N
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

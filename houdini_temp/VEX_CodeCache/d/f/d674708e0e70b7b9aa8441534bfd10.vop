;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@age_scale = external global double
@nage = external global double
@0 = private constant [10 x i8] c"age_scale\00"
@1 = private constant [5 x i8] c"nage\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FF"(double* %_bound_age_scale, double* %_bound_nage) #0 {
__llvm_entry:
  %_bound_age_scale1 = load double, double* %_bound_age_scale
  %_bound_nage2 = load double, double* %_bound_nage
  %output = fsub double 1.000000e+00, %_bound_nage2
  %output3 = fmul double %_bound_age_scale1, %output
  store double %output3, double* %_bound_age_scale
  ret void
}

; Function Attrs: nounwind
define void @__vex_snippet(double %age_scale, double %nage) #1 {
__llvm_entry:
  %0 = alloca double
  %"<age_scale>" = alloca double
  store double %age_scale, double* %"<age_scale>"
  store double %nage, double* %0
  call void @"__vex_snippet_snippet@FF"(double* %"<age_scale>", double* %0)
  %evalue = load double, double* %"<age_scale>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), double %evalue) #2
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), double %nage) #2
  store double %gvalue, double* @age_scale
  store double %gvalue3, double* @nage
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

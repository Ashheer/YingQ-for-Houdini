;_name	/obj/sphere1/vellumsolver1/dopnet1/vellumsolver1/update_soft_pin_constraints/geometryvop1
; ModuleID = 'obj_sphere1_vellumsolver1_dopnet1_vellumsolver1_update_soft_pin_constraints_geometryvop1'
source_filename = "obj_sphere1_vellumsolver1_dopnet1_vellumsolver1_update_soft_pin_constraints_geometryvop1"

@0 = private constant [4 x i8] c"pin\00"
@1 = private constant [10 x i8] c"target_pt\00"
@2 = private constant [1 x i8] zeroinitializer
@3 = private constant [12 x i8] c"target_path\00"
@4 = private constant [2 x i8] c"P\00"
@5 = private constant [10 x i8] c"pinorient\00"
@6 = private constant [7 x i8] c"orient\00"
@primnum = external global i64
@type = external global i8*
@restvector = external global <4 x double>
@7 = private constant [8 x i8] c"primnum\00"
@8 = private constant [5 x i8] c"type\00"
@9 = private constant [11 x i8] c"restvector\00"

; Function Attrs: alwaysinline nounwind
define private void @"_obj_sphere1_vellumsolver1_dopnet1_vellumsolver1_update_soft_pin_constraints_geometryvop1_snippet1@ISP"(i64* %_bound_primnum, i8** %_bound_type, <4 x double>* %_bound_restvector) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum1)
  %return2 = call i64 @"getcomp@I[II"(i64* %return, i64 0)
  %_bound_type3 = load i8*, i8** %_bound_type
  %return4 = call i64 @"eq@ISS"(i8* %_bound_type3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return5 = call i64 @"neg@II"(i64 1)
  %return6 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0))
  %1 = icmp ne i64 %return6, 0
  br i1 %1, label %true7, label %end8

false:                                            ; preds = %__llvm_entry
  %return23 = call i64 @"eq@ISS"(i8* %_bound_type3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i64 0, i64 0))
  %2 = icmp ne i64 %return23, 0
  br i1 %2, label %true24, label %end

end:                                              ; preds = %true43, %false44, %false, %end14
  ret void

true7:                                            ; preds = %true
  %return10 = call i64 @"point@IISI"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), i64 %return2)
  br label %end8

end8:                                             ; preds = %true7, %true
  %targetpt.0 = phi i64 [ %return10, %true7 ], [ %return5, %true ]
  %return12 = call i64 @"lt@III"(i64 %targetpt.0, i64 0)
  %3 = icmp ne i64 %return12, 0
  br i1 %3, label %true13, label %end14

true13:                                           ; preds = %end8
  br label %end14

end14:                                            ; preds = %true13, %end8
  %targetpt.1 = phi i64 [ %return2, %true13 ], [ %targetpt.0, %end8 ]
  %return17 = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i64 0, i64 0), i64 %return2)
  %return20 = call <3 x double> @"point@VSSI"(i8* %return17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), i64 %targetpt.1)
  %cast = call <4 x double> @"set@PV"(<3 x double> %return20)
  store <4 x double> %cast, <4 x double>* %_bound_restvector
  br label %end

true24:                                           ; preds = %false
  %return27 = call i64 @"neg@II"(i64 1)
  %return28 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0))
  %4 = icmp ne i64 %return28, 0
  br i1 %4, label %true29, label %end30

true29:                                           ; preds = %true24
  %return32 = call i64 @"point@IISI"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), i64 %return2)
  br label %end30

end30:                                            ; preds = %true29, %true24
  %targetpt26.0 = phi i64 [ %return32, %true29 ], [ %return27, %true24 ]
  %return34 = call i64 @"lt@III"(i64 %targetpt26.0, i64 0)
  %5 = icmp ne i64 %return34, 0
  br i1 %5, label %true35, label %end36

true35:                                           ; preds = %end30
  br label %end36

end36:                                            ; preds = %true35, %end30
  %targetpt26.1 = phi i64 [ %return2, %true35 ], [ %targetpt26.0, %end30 ]
  %return40 = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i64 0, i64 0), i64 %return2)
  %return42 = call i64 @"haspointattrib@ISS"(i8* %return40, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0))
  %6 = icmp ne i64 %return42, 0
  br i1 %6, label %true43, label %false44

true43:                                           ; preds = %end36
  %return48 = call <4 x double> @"point@PSSI"(i8* %return40, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0), i64 %targetpt26.1)
  store <4 x double> %return48, <4 x double>* %_bound_restvector
  br label %end

false44:                                          ; preds = %end36
  store <4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>, <4 x double>* %_bound_restvector
  br label %end
}

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind
declare i64 @"haspointattrib@IIS"(i64, i8*) #1

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"point@VSSI"(i8*, i8*, i64) #2

; Function Attrs: nounwind
declare <4 x double> @"set@PV"(<3 x double>) #1

; Function Attrs: nounwind
declare i64 @"haspointattrib@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"point@PSSI"(i8*, i8*, i64) #2

; Function Attrs: nounwind
define void @obj_sphere1_vellumsolver1_dopnet1_vellumsolver1_update_soft_pin_constraints_geometryvop1(i64 %primnum, i8* %type, <4 x double> %restvector) #1 {
__llvm_entry:
  %"<restvector>" = alloca <4 x double>
  %0 = alloca i64
  %1 = alloca i8*
  store <4 x double> %restvector, <4 x double>* %"<restvector>"
  store i64 %primnum, i64* %0
  store i8* %type, i8** %1
  call void @"_obj_sphere1_vellumsolver1_dopnet1_vellumsolver1_update_soft_pin_constraints_geometryvop1_snippet1@ISP"(i64* %0, i8** %1, <4 x double>* %"<restvector>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @7, i64 0, i64 0), i64 %primnum) #3
  %gvalue4 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0), i8* %type) #3
  %evalue5 = load <4 x double>, <4 x double>* %"<restvector>"
  %gvalue6 = call <4 x double> @"_export@PSP"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @9, i64 0, i64 0), <4 x double> %evalue5) #3
  store i64 %gvalue, i64* @primnum
  store i8* %gvalue4, i8** @type
  store <4 x double> %gvalue6, <4 x double>* @restvector
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i8* @"_export@SSS"(i8*, i8*)

declare <4 x double> @"_export@PSP"(i8*, <4 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_sphere1_vellumsolver1_dopnet1_vellumsolver1_update_soft_pin_constraints_geometryvop1(i64 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), <4 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

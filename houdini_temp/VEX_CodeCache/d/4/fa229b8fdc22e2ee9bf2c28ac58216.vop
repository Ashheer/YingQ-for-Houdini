;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [15 x i8] c"w_not_provided\00"
@1 = private constant [16 x i8] c"max_rpf_allowed\00"
@w = external global <3 x double>
@TimeInc = external global double
@__frame_ref = external global double
@Frame = external global double
@2 = private constant [2 x i8] c"w\00"
@3 = private constant [8 x i8] c"TimeInc\00"
@4 = private constant [12 x i8] c"__frame_ref\00"
@5 = private constant [6 x i8] c"Frame\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VFFF"(<3 x double>* %_bound_w, double* %_bound_TimeInc, double* %_bound___frame_ref, double* %_bound_Frame) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  store <3 x double> zeroinitializer, <3 x double>* %_bound_w
  br label %end

false:                                            ; preds = %__llvm_entry
  %_bound_w1 = load <3 x double>, <3 x double>* %_bound_w
  %return2 = call double @"length@FV"(<3 x double> %_bound_w1)
  %_bound_TimeInc3 = load double, double* %_bound_TimeInc
  %output = fmul double %return2, %_bound_TimeInc3
  %return4 = call double @"chf@FS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1, i64 0, i64 0))
  %output6 = fmul double %return4, 0x401921FB53C8D4F1
  %return7 = fcmp ogt double %output, %output6
  br i1 %return7, label %true9, label %end

end:                                              ; preds = %false, %true9, %true
  %_bound_Frame20 = load double, double* %_bound_Frame
  store double %_bound_Frame20, double* %_bound___frame_ref
  ret void

true9:                                            ; preds = %false
  %_bound_w11 = load <3 x double>, <3 x double>* %_bound_w
  %return12 = call <3 x double> @"normalize@VV"(<3 x double> %_bound_w11)
  store <3 x double> %return12, <3 x double>* %_bound_w
  %_bound_TimeInc17 = load double, double* %_bound_TimeInc
  %output18 = call double @"div@FF"(double %output6, double %_bound_TimeInc17)
  %cast = call <3 x double> @"set@VF"(double %output18)
  %output19 = call <3 x double> @"mul@VV"(<3 x double> %return12, <3 x double> %cast)
  store <3 x double> %output19, <3 x double>* %_bound_w
  br label %end
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %w, double %TimeInc, double %__frame_ref, double %Frame) #2 {
__llvm_entry:
  %"<__frame_ref>" = alloca double
  %0 = alloca double
  %1 = alloca double
  %"<w>" = alloca <3 x double>
  store <3 x double> %w, <3 x double>* %"<w>"
  store double %__frame_ref, double* %"<__frame_ref>"
  store double %TimeInc, double* %0
  store double %Frame, double* %1
  call void @"__vex_snippet_snippet@VFFF"(<3 x double>* %"<w>", double* %0, double* %"<__frame_ref>", double* %1)
  %evalue = load <3 x double>, <3 x double>* %"<w>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), double %TimeInc) #3
  %evalue5 = load double, double* %"<__frame_ref>"
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i64 0, i64 0), double %evalue5) #3
  %gvalue8 = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i64 0, i64 0), double %Frame) #3
  store <3 x double> %gvalue, <3 x double>* @w
  store double %gvalue4, double* @TimeInc
  store double %gvalue6, double* @__frame_ref
  store double %gvalue8, double* @Frame
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

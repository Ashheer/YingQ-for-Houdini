;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [18 x i8] c"__bendconstraints\00"
@1 = private constant [5 x i8] c"type\00"
@2 = private constant [5 x i8] c"bend\00"
@3 = private constant [10 x i8] c"stiffness\00"
@4 = private constant [13 x i8] c"dampingratio\00"
@primnum = external global i64
@stiffness = external global double
@dampingratio = external global double
@5 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IFF"(i64* %_bound_primnum, double* %_bound_stiffness, double* %_bound_dampingratio) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum1)
  %return3 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %end19, %__llvm_entry
  %dampingratio.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %dampingratio.1, %end19 ]
  %matches.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %matches.1, %end19 ]
  %__impl_foreach_index_199.0 = phi i64 [ 0, %__llvm_entry ], [ %output47, %end19 ]
  %stiffness.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %stiffness.1, %end19 ]
  %return6 = call i64 @"lt@III"(i64 %__impl_foreach_index_199.0, i64 %return3)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return9 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_199.0)
  %return11 = call i64* @"pointprims@[III"(i64 0, i64 %return9)
  %return13 = call i64 @"len@I[I"(i64* %return11)
  br label %cond14

end:                                              ; preds = %cond
  %return49 = fcmp ogt double %matches.0, 0.000000e+00
  br i1 %return49, label %true51, label %end52

cond14:                                           ; preds = %end27, %body
  %dampingratio.1 = phi double [ %dampingratio.0, %body ], [ %dampingratio.2, %end27 ]
  %matches.1 = phi double [ %matches.0, %body ], [ %matches.2, %end27 ]
  %__impl_foreach_index_198.0 = phi i64 [ 0, %body ], [ %output45, %end27 ]
  %stiffness.1 = phi double [ %stiffness.0, %body ], [ %stiffness.2, %end27 ]
  %return18 = call i64 @"lt@III"(i64 %__impl_foreach_index_198.0, i64 %return13)
  %1 = icmp ne i64 %return18, 0
  br i1 %1, label %body15, label %end19

body15:                                           ; preds = %cond14
  %return23 = call i64 @"getcomp@I[II"(i64* %return11, i64 %__impl_foreach_index_198.0)
  %return25 = call i64 @"inprimgroup@IISI"(i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @0, i64 0, i64 0), i64 %return23)
  %return26 = call i64 @"not@II"(i64 %return25)
  %2 = icmp ne i64 %return26, 0
  br i1 %2, label %true, label %end27

end19:                                            ; preds = %cond14
  %output47 = add i64 %__impl_foreach_index_199.0, 1
  br label %cond

true:                                             ; preds = %body15
  %return29 = call i8* @"prim@SISI"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %return23)
  %return31 = call i64 @"eq@ISS"(i8* %return29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0))
  %3 = icmp ne i64 %return31, 0
  br i1 %3, label %true32, label %end27

end27:                                            ; preds = %true, %true32, %body15
  %dampingratio.2 = phi double [ %output40, %true32 ], [ %dampingratio.1, %true ], [ %dampingratio.1, %body15 ]
  %matches.2 = phi double [ %output43, %true32 ], [ %matches.1, %true ], [ %matches.1, %body15 ]
  %stiffness.2 = phi double [ %output, %true32 ], [ %stiffness.1, %true ], [ %stiffness.1, %body15 ]
  %output45 = add i64 %__impl_foreach_index_198.0, 1
  br label %cond14

true32:                                           ; preds = %true
  %return36 = call double @"prim@FISI"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), i64 %return23)
  %output = fadd double %stiffness.1, %return36
  %return39 = call double @"prim@FISI"(i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @4, i64 0, i64 0), i64 %return23)
  %output40 = fadd double %dampingratio.1, %return39
  %output43 = fadd double %matches.1, 1.000000e+00
  br label %end27

true51:                                           ; preds = %end
  %output55 = call double @"div@FF"(double %stiffness.0, double %matches.0)
  %output58 = call double @"div@FF"(double %dampingratio.0, double %matches.0)
  store double %output55, double* %_bound_stiffness
  store double %output58, double* %_bound_dampingratio
  br label %end52

end52:                                            ; preds = %true51, %end
  ret void
}

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64* @"pointprims@[III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"inprimgroup@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind
declare i8* @"prim@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #2

; Function Attrs: nounwind
declare double @"prim@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, double %stiffness, double %dampingratio) #1 {
__llvm_entry:
  %"<stiffness>" = alloca double
  %"<dampingratio>" = alloca double
  %0 = alloca i64
  store double %stiffness, double* %"<stiffness>"
  store double %dampingratio, double* %"<dampingratio>"
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@IFF"(i64* %0, double* %"<stiffness>", double* %"<dampingratio>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @5, i64 0, i64 0), i64 %primnum) #3
  %evalue2 = load double, double* %"<stiffness>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), double %evalue2) #3
  %evalue4 = load double, double* %"<dampingratio>"
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @4, i64 0, i64 0), double %evalue4) #3
  store i64 %gvalue, i64* @primnum
  store double %gvalue3, double* @stiffness
  store double %gvalue5, double* @dampingratio
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [22 x i8] c"constraintradiusscale\00"
@1 = private constant [7 x i8] c"pscale\00"
@__pscale = external global double
@ptnum = external global i64
@2 = private constant [9 x i8] c"__pscale\00"
@3 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FI"(double* %_bound___pscale, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @0, i64 0, i64 0))
  store double %return, double* %_bound___pscale
  %return1 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %0 = icmp ne i64 %return1, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound___pscale2 = load double, double* %_bound___pscale
  %_bound_ptnum3 = load i64, i64* %_bound_ptnum
  %return4 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i64 %_bound_ptnum3)
  %output = fmul double %_bound___pscale2, %return4
  store double %output, double* %_bound___pscale
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"haspointattrib@IIS"(i64, i8*) #2

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(double %__pscale, i64 %ptnum) #2 {
__llvm_entry:
  %0 = alloca i64
  %"<__pscale>" = alloca double
  store double %__pscale, double* %"<__pscale>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@FI"(double* %"<__pscale>", i64* %0)
  %evalue = load double, double* %"<__pscale>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), double %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  store double %gvalue, double* @__pscale
  store i64 %gvalue3, i64* @ptnum
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

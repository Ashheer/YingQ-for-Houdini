;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"mask\00"
@1 = private constant [10 x i8] c"primitive\00"
@2 = private constant [5 x i8] c"name\00"
@has_mask = external global i64
@3 = private constant [9 x i8] c"has_mask\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_has_mask) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  %return2 = call i64 @"findattribval@IISSS"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), i8* %return)
  %return3 = call i64 @"neg@II"(i64 1)
  %return4 = call i64 @"ne@III"(i64 %return2, i64 %return3)
  store i64 %return4, i64* %_bound_has_mask
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"findattribval@IISSS"(i64, i8*, i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %has_mask) #2 {
__llvm_entry:
  %"<has_mask>" = alloca i64
  store i64 %has_mask, i64* %"<has_mask>"
  call void @"__vex_snippet_snippet@I"(i64* %"<has_mask>")
  %evalue = load i64, i64* %"<has_mask>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0), i64 %evalue) #3
  store i64 %gvalue, i64* @has_mask
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

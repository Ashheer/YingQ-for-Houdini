;_name	/obj/rope/dopnet1/popsolver1/integrate_forces
; ModuleID = 'obj_rope_dopnet1_popsolver1_integrate_forces'
source_filename = "obj_rope_dopnet1_popsolver1_integrate_forces"

@0 = private constant [2 x i8] c"P\00"
@v = external global <3 x double>
@torque = external global <3 x double>
@1 = private constant [10 x i8] c"dragshape\00"
@2 = private constant [2 x i8] c"v\00"
@3 = private constant [7 x i8] c"torque\00"

; Function Attrs: alwaysinline nounwind
define private void @"_obj_rope_dopnet1_popsolver1_integrate_forces_if_implicit_targetv_snippet1@FIVVFFFVIFFPIV"(double* %dragexp, i64* %implicitdrag, <3 x double>* %targetv, <3 x double>* %v, double* %airresist, double* %tinc, double* %invmass, <3 x double>* %dragshape, i64* %hasdragshape, double* %dragnormal, double* %dragtangent, <4 x double>* %_bound_orient, i64* %_bound_ptnum, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %implicitdrag1 = load i64, i64* %implicitdrag
  %return = call i64 @"not@II"(i64 %implicitdrag1)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %end, %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %v2 = load <3 x double>, <3 x double>* %v
  %targetv3 = load <3 x double>, <3 x double>* %targetv
  %output = call <3 x double> @"sub@VV"(<3 x double> %v2, <3 x double> %targetv3)
  store <3 x double> %output, <3 x double>* %v
  %airresist4 = load double, double* %airresist
  %invmass5 = load double, double* %invmass
  %output6 = fmul double %airresist4, %invmass5
  store double %output6, double* %airresist
  %return8 = fcmp oeq double %output6, 0.000000e+00
  br i1 %return8, label %true, label %end11

end11:                                            ; preds = %end
  %hasdragshape12 = load i64, i64* %hasdragshape
  %1 = icmp ne i64 %hasdragshape12, 0
  br i1 %1, label %true13, label %false

true13:                                           ; preds = %end11
  %_bound_orient15 = load <4 x double>, <4 x double>* %_bound_orient
  br label %end14

false:                                            ; preds = %end11
  %dragnormal16 = load double, double* %dragnormal
  %return17 = fcmp one double %dragnormal16, 1.000000e+00
  %return18 = zext i1 %return17 to i64
  %dragtangent19 = load double, double* %dragtangent
  %return20 = fcmp one double %dragtangent19, 1.000000e+00
  %return21 = zext i1 %return20 to i64
  %return22 = call i64 @"or@III"(i64 %return18, i64 %return21)
  %2 = icmp ne i64 %return22, 0
  br i1 %2, label %true23, label %end14

end14:                                            ; preds = %false, %end32, %true13
  %lcl_orient.0 = phi <4 x double> [ %_bound_orient15, %true13 ], [ %return60, %end32 ], [ zeroinitializer, %false ]
  %hasdragshape69 = load i64, i64* %hasdragshape
  %3 = icmp ne i64 %hasdragshape69, 0
  br i1 %3, label %true70, label %false71

true23:                                           ; preds = %false
  store i64 1, i64* %hasdragshape
  %_bound_ptnum25 = load i64, i64* %_bound_ptnum
  %return26 = call i64* @"neighbours@[III"(i64 0, i64 %_bound_ptnum25)
  %cast = call <9 x double> @"set@3I"(i64 0)
  %return28 = call i64 @"len@I[I"(i64* %return26)
  br label %cond

cond:                                             ; preds = %body, %true23
  %__impl_foreach_index_27.0 = phi i64 [ 0, %true23 ], [ %output49, %body ]
  %g.0 = phi <9 x double> [ %cast, %true23 ], [ %output47, %body ]
  %return31 = call i64 @"lt@III"(i64 %__impl_foreach_index_27.0, i64 %return28)
  %4 = icmp ne i64 %return31, 0
  br i1 %4, label %body, label %end32

body:                                             ; preds = %cond
  %return35 = call i64 @"getcomp@I[II"(i64* %return26, i64 %__impl_foreach_index_27.0)
  %return37 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return35)
  %_bound_P39 = load <3 x double>, <3 x double>* %_bound_P
  %output40 = call <3 x double> @"sub@VV"(<3 x double> %return37, <3 x double> %_bound_P39)
  %return42 = call <3 x double> @"normalize@VV"(<3 x double> %output40)
  %return46 = call <9 x double> @"outerproduct@3VV"(<3 x double> %return42, <3 x double> %return42)
  %output47 = call <9 x double> @"add@33"(<9 x double> %g.0, <9 x double> %return46)
  %output49 = add i64 %__impl_foreach_index_27.0, 1
  br label %cond

end32:                                            ; preds = %cond
  %cast53 = sitofp i64 %return28 to double
  %output54 = call <9 x double> @"div@3F"(<9 x double> %g.0, double %cast53)
  %return56 = call { <9 x double>, <3 x double> } @"diagonalizesymmetric@33V"(<9 x double> %output54)
  %return57 = extractvalue { <9 x double>, <3 x double> } %return56, 0
  %output58 = extractvalue { <9 x double>, <3 x double> } %return56, 1
  %return60 = call <4 x double> @"quaternion@P3"(<9 x double> %return57)
  %cast62 = call <3 x double> @"set@VI"(i64 0)
  %cast63 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %dragnormal64 = load double, double* %dragnormal
  %cast65 = call <3 x double> @"set@VF"(double %dragnormal64)
  %dragtangent66 = load double, double* %dragtangent
  %cast67 = call <3 x double> @"set@VF"(double %dragtangent66)
  %return68 = call <3 x double> @"fit@VVVVVV"(<3 x double> %output58, <3 x double> %cast62, <3 x double> %cast63, <3 x double> %cast65, <3 x double> %cast67)
  store <3 x double> %return68, <3 x double>* %dragshape
  br label %end14

true70:                                           ; preds = %end14
  %return75 = call <4 x double> @"qinvert@PP"(<4 x double> %lcl_orient.0)
  %v77 = load <3 x double>, <3 x double>* %v
  %return78 = call <3 x double> @"qrotate@VPV"(<4 x double> %return75, <3 x double> %v77)
  store <3 x double> %return78, <3 x double>* %v
  %dragexp79 = load double, double* %dragexp
  %return80 = fcmp oeq double %dragexp79, 2.000000e+00
  br i1 %return80, label %true82, label %false83

false71:                                          ; preds = %end14
  %dragexp175 = load double, double* %dragexp
  %return176 = fcmp oeq double %dragexp175, 2.000000e+00
  br i1 %return176, label %true178, label %false179

end72:                                            ; preds = %true199, %false200, %true178, %end84
  %v258 = load <3 x double>, <3 x double>* %v
  %targetv259 = load <3 x double>, <3 x double>* %targetv
  %output260 = call <3 x double> @"add@VV"(<3 x double> %v258, <3 x double> %targetv259)
  store <3 x double> %output260, <3 x double>* %v
  br label %UnifiedReturnBlock

true82:                                           ; preds = %true70
  %airresist85 = load double, double* %airresist
  %tinc86 = load double, double* %tinc
  %output87 = fmul double %airresist85, %tinc86
  %return89 = call <3 x double> @"abs@VV"(<3 x double> %return78)
  %cast90 = call <3 x double> @"set@VF"(double %output87)
  %output91 = call <3 x double> @"mul@VV"(<3 x double> %cast90, <3 x double> %return89)
  %dragshape92 = load <3 x double>, <3 x double>* %dragshape
  %output93 = call <3 x double> @"mul@VV"(<3 x double> %output91, <3 x double> %dragshape92)
  %cast95 = call <3 x double> @"set@VI"(i64 1)
  %output96 = call <3 x double> @"add@VV"(<3 x double> %output93, <3 x double> %cast95)
  %output99 = call <3 x double> @"div@VV"(<3 x double> %cast95, <3 x double> %output96)
  %output102 = call <3 x double> @"mul@VV"(<3 x double> %return78, <3 x double> %output99)
  store <3 x double> %output102, <3 x double>* %v
  br label %end84

false83:                                          ; preds = %true70
  %return104 = fcmp oeq double %dragexp79, 1.000000e+00
  br i1 %return104, label %true106, label %false107

end84:                                            ; preds = %true106, %false107, %true82
  %v173 = load <3 x double>, <3 x double>* %v
  %return174 = call <3 x double> @"qrotate@VPV"(<4 x double> %lcl_orient.0, <3 x double> %v173)
  store <3 x double> %return174, <3 x double>* %v
  br label %end72

true106:                                          ; preds = %false83
  %tinc110 = load double, double* %tinc
  %airresist111 = load double, double* %airresist
  %output112 = fmul double %tinc110, %airresist111
  %dragshape113 = load <3 x double>, <3 x double>* %dragshape
  %cast114 = call <3 x double> @"set@VF"(double %output112)
  %output115 = call <3 x double> @"mul@VV"(<3 x double> %cast114, <3 x double> %dragshape113)
  %return117 = call <3 x double> @"neg@VV"(<3 x double> %output115)
  %return118 = call <3 x double> @"exp@VV"(<3 x double> %return117)
  %output121 = call <3 x double> @"mul@VV"(<3 x double> %return78, <3 x double> %return118)
  store <3 x double> %output121, <3 x double>* %v
  br label %end84

false107:                                         ; preds = %false83
  %output123 = fsub double 2.000000e+00, %dragexp79
  %cast124 = call <3 x double> @"set@VF"(double %output123)
  %output126 = fsub double %dragexp79, 1.000000e+00
  %cast127 = call <3 x double> @"set@VF"(double %output126)
  %return129 = call <3 x double> @"abs@VV"(<3 x double> %return78)
  %airresist131 = load double, double* %airresist
  %dragshape132 = load <3 x double>, <3 x double>* %dragshape
  %cast133 = call <3 x double> @"set@VF"(double %airresist131)
  %output134 = call <3 x double> @"mul@VV"(<3 x double> %cast133, <3 x double> %dragshape132)
  %output135 = call <3 x double> @"mul@VV"(<3 x double> %cast124, <3 x double> %output134)
  %output141 = call <3 x double> @"mul@VV"(<3 x double> %cast127, <3 x double> %output134)
  %output145 = call <3 x double> @"mul@VV"(<3 x double> %output141, <3 x double> %return129)
  %output146 = call <3 x double> @"div@VV"(<3 x double> %output135, <3 x double> %output145)
  %cast147 = call <3 x double> @"set@VI"(i64 1)
  %output148 = call <3 x double> @"add@VV"(<3 x double> %output146, <3 x double> %cast147)
  %return149 = call <3 x double> @"log@VV"(<3 x double> %output148)
  %output151 = call <3 x double> @"div@VV"(<3 x double> %return149, <3 x double> %output135)
  %tinc156 = load double, double* %tinc
  %cast157 = call <3 x double> @"set@VF"(double %tinc156)
  %output158 = call <3 x double> @"add@VV"(<3 x double> %output151, <3 x double> %cast157)
  %output159 = call <3 x double> @"mul@VV"(<3 x double> %output135, <3 x double> %output158)
  %return160 = call <3 x double> @"exp@VV"(<3 x double> %output159)
  %output162 = call <3 x double> @"sub@VV"(<3 x double> %return160, <3 x double> %cast147)
  %output163 = call <3 x double> @"mul@VV"(<3 x double> %output141, <3 x double> %output162)
  %output164 = call <3 x double> @"div@VV"(<3 x double> %output135, <3 x double> %output163)
  %output168 = call <3 x double> @"div@VV"(<3 x double> %output164, <3 x double> %return129)
  %output171 = call <3 x double> @"mul@VV"(<3 x double> %return78, <3 x double> %output168)
  store <3 x double> %output171, <3 x double>* %v
  br label %end84

true178:                                          ; preds = %false71
  %airresist182 = load double, double* %airresist
  %tinc183 = load double, double* %tinc
  %output184 = fmul double %airresist182, %tinc183
  %v185 = load <3 x double>, <3 x double>* %v
  %return186 = call double @"length@FV"(<3 x double> %v185)
  %output187 = fmul double %output184, %return186
  %output189 = fadd double %output187, 1.000000e+00
  %output191 = call double @"div@FF"(double 1.000000e+00, double %output189)
  %v192 = load <3 x double>, <3 x double>* %v
  %cast194 = call <3 x double> @"set@VF"(double %output191)
  %output195 = call <3 x double> @"mul@VV"(<3 x double> %v192, <3 x double> %cast194)
  store <3 x double> %output195, <3 x double>* %v
  br label %end72

false179:                                         ; preds = %false71
  %return197 = fcmp oeq double %dragexp175, 1.000000e+00
  br i1 %return197, label %true199, label %false200

true199:                                          ; preds = %false179
  %tinc203 = load double, double* %tinc
  %airresist204 = load double, double* %airresist
  %output205 = fmul double %tinc203, %airresist204
  %return207 = call double @"neg@FF"(double %output205)
  %return208 = call double @"exp@FF"(double %return207)
  %v209 = load <3 x double>, <3 x double>* %v
  %cast211 = call <3 x double> @"set@VF"(double %return208)
  %output212 = call <3 x double> @"mul@VV"(<3 x double> %v209, <3 x double> %cast211)
  store <3 x double> %output212, <3 x double>* %v
  br label %end72

false200:                                         ; preds = %false179
  %output215 = fsub double 2.000000e+00, %dragexp175
  %output218 = fsub double %dragexp175, 1.000000e+00
  %v220 = load <3 x double>, <3 x double>* %v
  %return221 = call double @"length@FV"(<3 x double> %v220)
  %airresist223 = load double, double* %airresist
  %output224 = fmul double %output215, %airresist223
  %output227 = fmul double %output218, %airresist223
  %output232 = fmul double %output227, %return221
  %output233 = call double @"div@FF"(double %output224, double %output232)
  %output234 = fadd double %output233, 1.000000e+00
  %return235 = call double @"log@FF"(double %output234)
  %output237 = call double @"div@FF"(double %return235, double %output224)
  %tinc243 = load double, double* %tinc
  %output244 = fadd double %output237, %tinc243
  %output245 = fmul double %output224, %output244
  %return246 = call double @"exp@FF"(double %output245)
  %output247 = fsub double %return246, 1.000000e+00
  %output248 = fmul double %output227, %output247
  %output249 = call double @"div@FF"(double %output224, double %output248)
  %output253 = call double @"div@FF"(double %output249, double %return221)
  %v254 = load <3 x double>, <3 x double>* %v
  %cast256 = call <3 x double> @"set@VF"(double %output253)
  %output257 = call <3 x double> @"mul@VV"(<3 x double> %v254, <3 x double> %cast256)
  store <3 x double> %output257, <3 x double>* %v
  br label %end72

UnifiedReturnBlock:                               ; preds = %end72, %true
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #2

; Function Attrs: nounwind
declare <9 x double> @"set@3I"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <9 x double> @"outerproduct@3VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <9 x double> @"add@33"(<9 x double>, <9 x double>) #1

; Function Attrs: nounwind
declare <9 x double> @"div@3F"(<9 x double>, double) #2

; Function Attrs: nounwind readnone
declare { <9 x double>, <3 x double> } @"diagonalizesymmetric@33V"(<9 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"quaternion@P3"(<9 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind
declare <3 x double> @"fit@VVVVVV"(<3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"qinvert@PP"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"qrotate@VPV"(<4 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"abs@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"exp@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"log@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"exp@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"log@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private void @"_obj_rope_dopnet1_popsolver1_integrate_forces_if_explicit_target_v_snippet1@FIVVFFFVIFFPIV"(double* %dragexp, i64* %implicitdrag, <3 x double>* %targetv, <3 x double>* %v, double* %airresist, double* %tinc, double* %invmass, <3 x double>* %dragshape, i64* %hasdragshape, double* %dragnormal, double* %dragtangent, <4 x double>* %_bound_orient, i64* %_bound_ptnum, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %implicitdrag1 = load i64, i64* %implicitdrag
  %0 = icmp ne i64 %implicitdrag1, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %end, %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %v2 = load <3 x double>, <3 x double>* %v
  %targetv3 = load <3 x double>, <3 x double>* %targetv
  %output = call <3 x double> @"sub@VV"(<3 x double> %v2, <3 x double> %targetv3)
  %airresist4 = load double, double* %airresist
  %invmass5 = load double, double* %invmass
  %output6 = fmul double %airresist4, %invmass5
  store double %output6, double* %airresist
  %dragexp7 = load double, double* %dragexp
  %output8 = fsub double 2.000000e+00, %dragexp7
  %output10 = fsub double %dragexp7, 1.000000e+00
  %return = fcmp oeq double %output6, 0.000000e+00
  br i1 %return, label %true, label %end14

end14:                                            ; preds = %end
  %hasdragshape15 = load i64, i64* %hasdragshape
  %1 = icmp ne i64 %hasdragshape15, 0
  br i1 %1, label %true16, label %false

true16:                                           ; preds = %end14
  %_bound_orient18 = load <4 x double>, <4 x double>* %_bound_orient
  br label %end17

false:                                            ; preds = %end14
  %dragnormal19 = load double, double* %dragnormal
  %return20 = fcmp one double %dragnormal19, 1.000000e+00
  %return21 = zext i1 %return20 to i64
  %dragtangent22 = load double, double* %dragtangent
  %return23 = fcmp one double %dragtangent22, 1.000000e+00
  %return24 = zext i1 %return23 to i64
  %return25 = call i64 @"or@III"(i64 %return21, i64 %return24)
  %2 = icmp ne i64 %return25, 0
  br i1 %2, label %true26, label %end17

end17:                                            ; preds = %false, %end36, %true16
  %lcl_orient.0 = phi <4 x double> [ %_bound_orient18, %true16 ], [ %return64, %end36 ], [ zeroinitializer, %false ]
  %hasdragshape73 = load i64, i64* %hasdragshape
  %3 = icmp ne i64 %hasdragshape73, 0
  br i1 %3, label %true74, label %false75

true26:                                           ; preds = %false
  store i64 1, i64* %hasdragshape
  %_bound_ptnum28 = load i64, i64* %_bound_ptnum
  %return29 = call i64* @"neighbours@[III"(i64 0, i64 %_bound_ptnum28)
  %cast30 = call <9 x double> @"set@3I"(i64 0)
  %return32 = call i64 @"len@I[I"(i64* %return29)
  br label %cond

cond:                                             ; preds = %body, %true26
  %g.0 = phi <9 x double> [ %cast30, %true26 ], [ %output51, %body ]
  %__impl_foreach_index_28.0 = phi i64 [ 0, %true26 ], [ %output53, %body ]
  %return35 = call i64 @"lt@III"(i64 %__impl_foreach_index_28.0, i64 %return32)
  %4 = icmp ne i64 %return35, 0
  br i1 %4, label %body, label %end36

body:                                             ; preds = %cond
  %return39 = call i64 @"getcomp@I[II"(i64* %return29, i64 %__impl_foreach_index_28.0)
  %return41 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return39)
  %_bound_P43 = load <3 x double>, <3 x double>* %_bound_P
  %output44 = call <3 x double> @"sub@VV"(<3 x double> %return41, <3 x double> %_bound_P43)
  %return46 = call <3 x double> @"normalize@VV"(<3 x double> %output44)
  %return50 = call <9 x double> @"outerproduct@3VV"(<3 x double> %return46, <3 x double> %return46)
  %output51 = call <9 x double> @"add@33"(<9 x double> %g.0, <9 x double> %return50)
  %output53 = add i64 %__impl_foreach_index_28.0, 1
  br label %cond

end36:                                            ; preds = %cond
  %cast57 = sitofp i64 %return32 to double
  %output58 = call <9 x double> @"div@3F"(<9 x double> %g.0, double %cast57)
  %return60 = call { <9 x double>, <3 x double> } @"diagonalizesymmetric@33V"(<9 x double> %output58)
  %return61 = extractvalue { <9 x double>, <3 x double> } %return60, 0
  %output62 = extractvalue { <9 x double>, <3 x double> } %return60, 1
  %return64 = call <4 x double> @"quaternion@P3"(<9 x double> %return61)
  %cast66 = call <3 x double> @"set@VI"(i64 0)
  %cast67 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %dragnormal68 = load double, double* %dragnormal
  %cast69 = call <3 x double> @"set@VF"(double %dragnormal68)
  %dragtangent70 = load double, double* %dragtangent
  %cast71 = call <3 x double> @"set@VF"(double %dragtangent70)
  %return72 = call <3 x double> @"fit@VVVVVV"(<3 x double> %output62, <3 x double> %cast66, <3 x double> %cast67, <3 x double> %cast69, <3 x double> %cast71)
  store <3 x double> %return72, <3 x double>* %dragshape
  br label %end17

true74:                                           ; preds = %end17
  %return79 = call <4 x double> @"qinvert@PP"(<4 x double> %lcl_orient.0)
  %return82 = call <3 x double> @"qrotate@VPV"(<4 x double> %return79, <3 x double> %output)
  %return84 = call <3 x double> @"abs@VV"(<3 x double> %return82)
  %output87 = call <3 x double> @"div@VV"(<3 x double> %return82, <3 x double> %return84)
  %cast90 = call <3 x double> @"set@VF"(double %output8)
  %output91 = call <3 x double> @"mul@VV"(<3 x double> %cast90, <3 x double> %return84)
  %cast94 = call <3 x double> @"set@VF"(double %output10)
  %output95 = call <3 x double> @"mul@VV"(<3 x double> %cast94, <3 x double> %return84)
  %output97 = call <3 x double> @"mul@VV"(<3 x double> %output95, <3 x double> %return84)
  %output98 = call <3 x double> @"add@VV"(<3 x double> %output91, <3 x double> %output97)
  %airresist100 = load double, double* %airresist
  %dragshape101 = load <3 x double>, <3 x double>* %dragshape
  %cast102 = call <3 x double> @"set@VF"(double %airresist100)
  %output103 = call <3 x double> @"mul@VV"(<3 x double> %cast102, <3 x double> %dragshape101)
  %output104 = call <3 x double> @"mul@VV"(<3 x double> %output98, <3 x double> %output103)
  %output107 = call <3 x double> @"mul@VV"(<3 x double> %output87, <3 x double> %output104)
  %return110 = call <3 x double> @"qrotate@VPV"(<4 x double> %lcl_orient.0, <3 x double> %output107)
  br label %end76

false75:                                          ; preds = %end17
  %return113 = call double @"length@FV"(<3 x double> %output)
  %cast116 = call <3 x double> @"set@VF"(double %return113)
  %output117 = call <3 x double> @"div@VV"(<3 x double> %output, <3 x double> %cast116)
  %output120 = fmul double %output8, %return113
  %output123 = fmul double %output10, %return113
  %output125 = fmul double %output123, %return113
  %output126 = fadd double %output120, %output125
  %airresist128 = load double, double* %airresist
  %output129 = fmul double %output126, %airresist128
  %cast132 = call <3 x double> @"set@VF"(double %output129)
  %output133 = call <3 x double> @"mul@VV"(<3 x double> %output117, <3 x double> %cast132)
  br label %end76

end76:                                            ; preds = %false75, %true74
  %force.0 = phi <3 x double> [ %return110, %true74 ], [ %output133, %false75 ]
  %v134 = load <3 x double>, <3 x double>* %v
  %tinc136 = load double, double* %tinc
  %cast137 = call <3 x double> @"set@VF"(double %tinc136)
  %output138 = call <3 x double> @"mul@VV"(<3 x double> %force.0, <3 x double> %cast137)
  %output139 = call <3 x double> @"sub@VV"(<3 x double> %v134, <3 x double> %output138)
  store <3 x double> %output139, <3 x double>* %v
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end76, %true
  ret void
}

; Function Attrs: nounwind
define void @obj_rope_dopnet1_popsolver1_integrate_forces(<3 x double> %v, <3 x double> %force, double %Timeinc, <3 x double> %targetv, double %dragexp, double %airresist, double %drag, i64 %implicitdrag, double %mass, i64 %parm_usemass, double %age, i64 %stopped, <4 x double> %orient, <3 x double> %dragcenter, <3 x double> %torque, <3 x double> %dragshape, double %dragnormal, double %dragtangent, i64 %ptnum, <3 x double> %P) #2 {
__llvm_entry:
  %outv = alloca <3 x double>
  %outairresist = alloca double
  %outdragshape = alloca <3 x double>
  %outhasdragshape = alloca i64
  %outv1 = alloca <3 x double>
  %outairresist1 = alloca double
  %outdragshape1 = alloca <3 x double>
  %outhasdragshape1 = alloca i64
  %0 = alloca double
  %1 = alloca i64
  %2 = alloca <3 x double>
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  %6 = alloca double
  %7 = alloca <4 x double>
  %8 = alloca i64
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca i64
  %12 = alloca <3 x double>
  %13 = alloca double
  %14 = alloca double
  %15 = alloca double
  %16 = alloca double
  %17 = alloca <4 x double>
  %18 = alloca i64
  %19 = alloca <3 x double>
  store <3 x double> zeroinitializer, <3 x double>* %outv, !vex-initializer-store !3
  store double 0.000000e+00, double* %outairresist, !vex-initializer-store !3
  store <3 x double> zeroinitializer, <3 x double>* %outdragshape, !vex-initializer-store !3
  store i64 0, i64* %outhasdragshape, !vex-initializer-store !3
  store <3 x double> zeroinitializer, <3 x double>* %outv1, !vex-initializer-store !3
  store double 0.000000e+00, double* %outairresist1, !vex-initializer-store !3
  store <3 x double> zeroinitializer, <3 x double>* %outdragshape1, !vex-initializer-store !3
  store i64 0, i64* %outhasdragshape1, !vex-initializer-store !3
  %output = fmul double %airresist, %drag
  %return = fcmp ogt double %output, 0.000000e+00
  %return6 = zext i1 %return to i64
  %output9 = fadd double %Timeinc, %age
  %return12 = call double @"clamp@FFFF"(double %output9, double 0.000000e+00, double %Timeinc)
  %return13 = call i64 @"ne@III"(i64 0, i64 0)
  %20 = icmp ne i64 %return13, 0
  %return15 = call i64 @"ne@III"(i64 %parm_usemass, i64 0)
  %21 = icmp ne i64 %return15, 0
  %phi = select i1 %21, double 1.000000e+00, double %mass
  %phi26 = select i1 %21, double %mass, double 1.000000e+00
  %phi27 = select i1 %20, double %phi, double %phi26
  %output29 = call double @"div@FF"(double 1.000000e+00, double %phi27)
  %cast = call <3 x double> @"set@VF"(double %return12)
  %output32 = call <3 x double> @"mul@VV"(<3 x double> %force, <3 x double> %cast)
  %cast34 = call <3 x double> @"set@VF"(double %output29)
  %output35 = call <3 x double> @"mul@VV"(<3 x double> %output32, <3 x double> %cast34)
  %output38 = call <3 x double> @"add@VV"(<3 x double> %v, <3 x double> %output35)
  %return39 = call i64 @"isbound@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0))
  %return52 = call i64 @"ne@III"(i64 %return6, i64 0)
  %22 = icmp ne i64 %return52, 0
  br i1 %22, label %true53, label %end54

true53:                                           ; preds = %__llvm_entry
  store <3 x double> %output38, <3 x double>* %outv
  store double %output, double* %outairresist
  store <3 x double> %dragshape, <3 x double>* %outdragshape
  store i64 %return39, i64* %outhasdragshape
  store double %dragexp, double* %0
  store i64 %implicitdrag, i64* %1
  store <3 x double> %targetv, <3 x double>* %2
  store double %return12, double* %3
  store double %output29, double* %4
  store double %dragnormal, double* %5
  store double %dragtangent, double* %6
  store <4 x double> %orient, <4 x double>* %7
  store i64 %ptnum, i64* %8
  store <3 x double> %P, <3 x double>* %9
  call void @"_obj_rope_dopnet1_popsolver1_integrate_forces_if_implicit_targetv_snippet1@FIVVFFFVIFFPIV"(double* %0, i64* %1, <3 x double>* %2, <3 x double>* %outv, double* %outairresist, double* %3, double* %4, <3 x double>* %outdragshape, i64* %outhasdragshape, double* %5, double* %6, <4 x double>* %7, i64* %8, <3 x double>* %9)
  %outv76 = load <3 x double>, <3 x double>* %outv
  br label %end54

end54:                                            ; preds = %true53, %__llvm_entry
  %_sum.0 = phi <3 x double> [ %outv76, %true53 ], [ %output38, %__llvm_entry ]
  br i1 %22, label %true90, label %end91

true90:                                           ; preds = %end54
  store <3 x double> %output38, <3 x double>* %outv1
  store double %output, double* %outairresist1
  store <3 x double> %dragshape, <3 x double>* %outdragshape1
  store i64 %return39, i64* %outhasdragshape1
  store double %dragexp, double* %10
  store i64 %implicitdrag, i64* %11
  store <3 x double> %targetv, <3 x double>* %12
  store double %return12, double* %13
  store double %output29, double* %14
  store double %dragnormal, double* %15
  store double %dragtangent, double* %16
  store <4 x double> %orient, <4 x double>* %17
  store i64 %ptnum, i64* %18
  store <3 x double> %P, <3 x double>* %19
  call void @"_obj_rope_dopnet1_popsolver1_integrate_forces_if_explicit_target_v_snippet1@FIVVFFFVIFFPIV"(double* %10, i64* %11, <3 x double>* %12, <3 x double>* %outv1, double* %outairresist1, double* %13, double* %14, <3 x double>* %outdragshape1, i64* %outhasdragshape1, double* %15, double* %16, <4 x double>* %17, i64* %18, <3 x double>* %19)
  %outv1113 = load <3 x double>, <3 x double>* %outv1
  br label %end91

end91:                                            ; preds = %true90, %end54
  %_sum1.0 = phi <3 x double> [ %outv1113, %true90 ], [ %output38, %end54 ]
  %return119 = call i64 @"ne@III"(i64 %implicitdrag, i64 0)
  %23 = icmp ne i64 %return119, 0
  br i1 %20, label %true115, label %false116

true115:                                          ; preds = %end91
  %phi125 = select i1 %23, <3 x double> %_sum1.0, <3 x double> %_sum.0
  br label %end117

false116:                                         ; preds = %end91
  %phi133 = select i1 %23, <3 x double> %_sum.0, <3 x double> %_sum1.0
  br label %end117

end117:                                           ; preds = %false116, %true115
  %phi134 = phi <3 x double> [ %phi125, %true115 ], [ %phi133, %false116 ]
  %return140 = call i64 @"ne@III"(i64 %stopped, i64 0)
  %24 = icmp ne i64 %return140, 0
  br i1 %20, label %true136, label %false137

true136:                                          ; preds = %end117
  %phi146 = select i1 %24, <3 x double> %phi134, <3 x double> %v
  br label %end138

false137:                                         ; preds = %end117
  %phi154 = select i1 %24, <3 x double> %v, <3 x double> %phi134
  br label %end138

end138:                                           ; preds = %false137, %true136
  %phi155 = phi <3 x double> [ %phi146, %true136 ], [ %phi154, %false137 ]
  %return160 = call <3 x double> @"qrotate@VPV"(<4 x double> %orient, <3 x double> %dragcenter)
  %output163 = call <3 x double> @"sub@VV"(<3 x double> %phi134, <3 x double> %output38)
  %output167 = call <3 x double> @"div@VV"(<3 x double> %output163, <3 x double> %cast)
  %return170 = call <3 x double> @"cross@VVV"(<3 x double> %return160, <3 x double> %output167)
  %output173 = call <3 x double> @"add@VV"(<3 x double> %torque, <3 x double> %return170)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %phi155) #3
  %gvalue176 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), <3 x double> %output173) #3
  store <3 x double> %gvalue, <3 x double>* @v
  store <3 x double> %gvalue176, <3 x double>* @torque
  ret void
}

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"isbound@IS"(i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #2

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_rope_dopnet1_popsolver1_integrate_forces(<3 x double> zeroinitializer, <3 x double> zeroinitializer, double 1.000000e+00, <3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00, i64 0, double 1.000000e+00, i64 0, double 0.000000e+00, i64 0, <4 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, double 1.000000e+00, double 1.000000e+00, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@numprim = external global i64
@primnum = external global i64
@id = external global i64
@0 = private constant [8 x i8] c"numprim\00"
@1 = private constant [8 x i8] c"primnum\00"
@2 = private constant [3 x i8] c"id\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@III"(i64* %_bound_numprim, i64* %_bound_primnum, i64* %_bound_id) #0 {
__llvm_entry:
  %_bound_numprim1 = load i64, i64* %_bound_numprim
  %output = call i64 @"div@II"(i64 %_bound_numprim1, i64 2)
  %_bound_primnum2 = load i64, i64* %_bound_primnum
  %return = call i64 @"lt@III"(i64 %_bound_primnum2, i64 %output)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output5 = mul i64 2, %_bound_primnum2
  store i64 %output5, i64* %_bound_id
  br label %end

false:                                            ; preds = %__llvm_entry
  %output8 = sub i64 %_bound_primnum2, %output
  %output9 = mul i64 2, %output8
  %output10 = add i64 %output9, 1
  store i64 %output10, i64* %_bound_id
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"div@II"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %numprim, i64 %primnum, i64 %id) #2 {
__llvm_entry:
  %"<id>" = alloca i64
  %0 = alloca i64
  %1 = alloca i64
  store i64 %id, i64* %"<id>"
  store i64 %numprim, i64* %0
  store i64 %primnum, i64* %1
  call void @"__vex_snippet_snippet@III"(i64* %0, i64* %1, i64* %"<id>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0), i64 %numprim) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i64 %primnum) #3
  %evalue5 = load i64, i64* %"<id>"
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), i64 %evalue5) #3
  store i64 %gvalue, i64* @numprim
  store i64 %gvalue4, i64* @primnum
  store i64 %gvalue6, i64* @id
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, i64 -1)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

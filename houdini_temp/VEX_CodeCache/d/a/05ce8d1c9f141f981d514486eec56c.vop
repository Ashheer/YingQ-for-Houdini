;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [9 x i8] c"objectID\00"
@1 = private constant [30 x i8] c"rendered_collision_geo_ucx_%d\00"
@2 = private constant [4 x i8] c"set\00"
@primnum = external global i64
@3 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_primnum) #0 {
__llvm_entry:
  %return = call i64 @"prim@IISI"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0), i64 0)
  %return2 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @1, i64 0, i64 0), i64 %return)
  %_bound_primnum4 = load i64, i64* %_bound_primnum
  %return5 = call i64 @"setprimgroup@IISIIS"(i64 0, i8* %return2, i64 %_bound_primnum4, i64 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i64 0, i64 0))
  ret void
}

; Function Attrs: nounwind
declare i64 @"prim@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"sprintf@SS:I"(i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"setprimgroup@IISIIS"(i64, i8*, i64, i64, i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum) #1 {
__llvm_entry:
  %0 = alloca i64
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i64 %primnum) #3
  store i64 %gvalue, i64* @primnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

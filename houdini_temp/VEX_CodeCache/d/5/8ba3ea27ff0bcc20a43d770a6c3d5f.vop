;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"size\00"
@1 = private constant [10 x i8] c"../invert\00"
@collectivesize = external global double
@group_Selection = external global i64
@2 = private constant [15 x i8] c"collectivesize\00"
@3 = private constant [16 x i8] c"group_Selection\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FI"(double* %_bound_collectivesize, i64* %_bound_group_Selection) #0 {
__llvm_entry:
  %_bound_collectivesize1 = load double, double* %_bound_collectivesize
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  %return2 = fcmp ole double %_bound_collectivesize1, %return
  %return3 = zext i1 %return2 to i64
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0))
  %return5 = call i64 @"not@II"(i64 %return4)
  %return6 = call i64 @"eq@III"(i64 %return3, i64 %return5)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store i64 1, i64* %_bound_group_Selection
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %collectivesize, i64 %group_Selection) #2 {
__llvm_entry:
  %"<group_Selection>" = alloca i64
  %0 = alloca double
  store i64 %group_Selection, i64* %"<group_Selection>"
  store double %collectivesize, double* %0
  call void @"__vex_snippet_snippet@FI"(double* %0, i64* %"<group_Selection>")
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i64 0, i64 0), double %collectivesize) #3
  %evalue2 = load i64, i64* %"<group_Selection>"
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @3, i64 0, i64 0), i64 %evalue2) #3
  store double %gvalue, double* @collectivesize
  store i64 %gvalue3, i64* @group_Selection
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

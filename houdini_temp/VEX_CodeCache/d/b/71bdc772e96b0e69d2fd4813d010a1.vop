;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"iteration\00"
@1 = private constant [19 x i8] c"../groupselection_\00"
@2 = private constant [17 x i8] c"../materialname_\00"
@3 = private constant [17 x i8] c"principledshader\00"
@4 = private constant [13 x i8] c"matcapshader\00"
@5 = private constant [2 x i8*] [i8* getelementptr inbounds ([17 x i8], [17 x i8]* @3, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @4, i64 0, i64 0)]
@6 = private constant [1 x i8] zeroinitializer
@7 = private constant [2 x i8] c"_\00"
@8 = private constant [20 x i8] c"materialdefinition_\00"
@9 = private constant [11 x i8] c"../matnet/\00"
@10 = private constant [2 x i8] c"/\00"
@group = external global i8*
@material_name = external global i8*
@parms = external global i62
@materialpath = external global i8*
@material_override = external global i8*
@11 = private constant [6 x i8] c"group\00"
@12 = private constant [14 x i8] c"material_name\00"
@13 = private constant [6 x i8] c"parms\00"
@14 = private constant [13 x i8] c"materialpath\00"
@15 = private constant [18 x i8] c"material_override\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SSDSS"(i8** %_bound_group, i8** %_bound_material_name, i62* %_bound_parms, i8** %_bound_materialpath, i8** %_bound_material_override) #0 {
__llvm_entry:
  %return = call i64 @"detail@IISI"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), i64 0)
  %output = add i64 %return, 1
  %return2 = call i8* @"itoa@SI"(i64 %output)
  %output3 = call i8* @"add@SS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1, i64 0, i64 0), i8* %return2)
  %return4 = call i8* @"chs@SS"(i8* %output3)
  store i8* %return4, i8** %_bound_group
  %output7 = call i8* @"add@SS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @2, i64 0, i64 0), i8* %return2)
  %return8 = call i8* @"chs@SS"(i8* %output7)
  store i8* %return8, i8** %_bound_material_name
  %_bound_parms9 = load i62, i62* %_bound_parms
  %return10 = call i8** @"keys@[SD"(i62 %_bound_parms9)
  %return11 = call i64 @"len@I[S"(i8** %return10)
  br label %cond

cond:                                             ; preds = %end40, %__llvm_entry
  %__impl_foreach_index_1.0 = phi i64 [ 0, %__llvm_entry ], [ %output63, %end40 ]
  %converteddict.0 = phi i62 [ 0, %__llvm_entry ], [ %converteddict.1, %end40 ]
  %return14 = call i64 @"lt@III"(i64 %__impl_foreach_index_1.0, i64 %return11)
  %0 = icmp ne i64 %return14, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %_bound_parms15 = load i62, i62* %_bound_parms
  %return16 = call i8** @"keys@[SD"(i62 %_bound_parms15)
  %return18 = call i8* @"getcomp@S[SI"(i8** %return16, i64 %__impl_foreach_index_1.0)
  %output21 = call i8* @"add@SS"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0), i8* %return2)
  %output25 = call i8* @"add@SS"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @8, i64 0, i64 0), i8* %return2)
  %return26 = call i64 @"getcomp@IDS"(i62 %_bound_parms15, i8* %output25)
  %return29 = call i8* @"getcomp@S[SI"(i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @5, i64 0, i64 0), i64 %return26)
  %return30 = call i8* @"opfullpath@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @9, i64 0, i64 0))
  %output31 = call i8* @"add@SS"(i8* %return30, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i64 0, i64 0))
  %output35 = call i8* @"add@SS"(i8* %output31, i8* %return29)
  store i8* %output35, i8** %_bound_materialpath
  %return38 = call i64 @"startswith@ISS"(i8* %return18, i8* %return29)
  %return39 = call i64 @"eq@III"(i64 %return38, i64 1)
  %1 = icmp ne i64 %return39, 0
  br i1 %1, label %true, label %end40

end:                                              ; preds = %cond
  %return65 = call i8* @"json_dumps@SDI"(i62 %converteddict.0, i64 2)
  store i8* %return65, i8** %_bound_material_override
  ret void

true:                                             ; preds = %body
  %return43 = call i64 @"endswith@ISS"(i8* %return18, i8* %output21)
  %return44 = call i64 @"eq@III"(i64 %return43, i64 1)
  %2 = icmp ne i64 %return44, 0
  br i1 %2, label %true45, label %end40

end40:                                            ; preds = %true, %true45, %body
  %converteddict.1 = phi i62 [ %output61, %true45 ], [ %converteddict.0, %true ], [ %converteddict.0, %body ]
  %output63 = add i64 %__impl_foreach_index_1.0, 1
  br label %cond

true45:                                           ; preds = %true
  %return49 = call i64 @"len@IS"(i8* %return29)
  %output50 = add i64 %return49, 1
  %return52 = call i64 @"len@IS"(i8* %output21)
  %return53 = call i64 @"neg@II"(i64 %return52)
  %return54 = call i8* @"slice@SSIIIIII"(i8* %return18, i64 1, i64 %output50, i64 1, i64 %return53, i64 0, i64 0)
  %_bound_parms57 = load i62, i62* %_bound_parms
  %return59 = call { i64, i62 } @"insert@IDSDS"(i62 %converteddict.0, i8* %return54, i62 %_bound_parms57, i8* %return18)
  %output61 = extractvalue { i64, i62 } %return59, 1
  br label %end40
}

; Function Attrs: nounwind
declare i64 @"detail@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #2

; Function Attrs: nounwind readnone
declare i8* @"add@SS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind readnone
declare i8** @"keys@[SD"(i62) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@IDS"(i62, i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"opfullpath@SS"(i8*) #2

; Function Attrs: nounwind
declare i64 @"startswith@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"endswith@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare i8* @"slice@SSIIIIII"(i8*, i64, i64, i64, i64, i64, i64) #2

; Function Attrs: nounwind readnone
declare { i64, i62 } @"insert@IDSDS"(i62, i8*, i62, i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"json_dumps@SDI"(i62, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i8* %group, i8* %material_name, i62 %parms, i8* %materialpath, i8* %material_override) #1 {
__llvm_entry:
  %"<material_name>" = alloca i8*
  %"<materialpath>" = alloca i8*
  %"<material_override>" = alloca i8*
  %0 = alloca i62
  %"<group>" = alloca i8*
  store i8* %group, i8** %"<group>"
  store i8* %material_name, i8** %"<material_name>"
  store i8* %materialpath, i8** %"<materialpath>"
  store i8* %material_override, i8** %"<material_override>"
  store i62 %parms, i62* %0
  call void @"__vex_snippet_snippet@SSDSS"(i8** %"<group>", i8** %"<material_name>", i62* %0, i8** %"<materialpath>", i8** %"<material_override>")
  %evalue = load i8*, i8** %"<group>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @11, i64 0, i64 0), i8* %evalue) #3
  %evalue2 = load i8*, i8** %"<material_name>"
  %gvalue3 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @12, i64 0, i64 0), i8* %evalue2) #3
  %gvalue5 = call i62 @"_export@DSD"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @13, i64 0, i64 0), i62 %parms) #3
  %evalue6 = load i8*, i8** %"<materialpath>"
  %gvalue7 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @14, i64 0, i64 0), i8* %evalue6) #3
  %evalue8 = load i8*, i8** %"<material_override>"
  %gvalue9 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @15, i64 0, i64 0), i8* %evalue8) #3
  store i8* %gvalue, i8** @group
  store i8* %gvalue3, i8** @material_name
  store i62 %gvalue5, i62* @parms
  store i8* %gvalue7, i8** @materialpath
  store i8* %gvalue9, i8** @material_override
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i62 @"_export@DSD"(i8*, i62)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0), i62 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [9 x i8] c"dispRamp\00"
@1 = private constant [9 x i8] c"rampMult\00"
@2 = private constant [6 x i8] c"twist\00"
@pscale = external global double
@uv = external global <3 x double>
@tangentu = external global <3 x double>
@curveu = external global double
@N = external global <3 x double>
@sourceP = external global <3 x double>
@P = external global <3 x double>
@3 = private constant [7 x i8] c"pscale\00"
@4 = private constant [3 x i8] c"uv\00"
@5 = private constant [9 x i8] c"tangentu\00"
@6 = private constant [7 x i8] c"curveu\00"
@7 = private constant [2 x i8] c"N\00"
@8 = private constant [8 x i8] c"sourceP\00"
@9 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FVVFVVV"(double* %_bound_pscale, <3 x double>* %_bound_uv, <3 x double>* %_bound_tangentu, double* %_bound_curveu, <3 x double>* %_bound_N, <3 x double>* %_bound_sourceP, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_pscale1 = load double, double* %_bound_pscale
  %_bound_uv2 = load <3 x double>, <3 x double>* %_bound_uv
  %return = call double @"getcomp@FVI"(<3 x double> %_bound_uv2, i64 1)
  %return3 = call double @"chramp@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0), double %return)
  %output = fmul double %return3, 2.000000e+00
  %return4 = call double @"ch@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0))
  %output5 = fmul double %output, %return4
  %output6 = fmul double %_bound_pscale1, %output5
  store double %output6, double* %_bound_pscale
  %return7 = call <9 x double> @"ident@3"()
  %_bound_tangentu8 = load <3 x double>, <3 x double>* %_bound_tangentu
  %return9 = call <3 x double> @"normalize@VV"(<3 x double> %_bound_tangentu8)
  %return10 = call double @"ch@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0))
  %output11 = fmul double %return10, 6.283180e+00
  %_bound_curveu12 = load double, double* %_bound_curveu
  %output13 = fmul double %output11, %_bound_curveu12
  %output17 = call <9 x double> @"rotate@3FV"(<9 x double> %return7, double %output13, <3 x double> %return9)
  %_bound_N18 = load <3 x double>, <3 x double>* %_bound_N
  %return19 = call <3 x double> @"normalize@VV"(<3 x double> %_bound_N18)
  store <3 x double> %return19, <3 x double>* %_bound_N
  %output22 = call <3 x double> @"mul@V3"(<3 x double> %return19, <9 x double> %output17)
  store <3 x double> %output22, <3 x double>* %_bound_N
  %_bound_P23 = load <3 x double>, <3 x double>* %_bound_P
  store <3 x double> %_bound_P23, <3 x double>* %_bound_sourceP
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare double @"chramp@FSF"(i8*, double) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare <9 x double> @"ident@3"() #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <9 x double> @"rotate@3FV"(<9 x double>, double, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"mul@V3"(<3 x double>, <9 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(double %pscale, <3 x double> %uv, <3 x double> %tangentu, double %curveu, <3 x double> %N, <3 x double> %sourceP, <3 x double> %P) #2 {
__llvm_entry:
  %"<N>" = alloca <3 x double>
  %"<sourceP>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %"<pscale>" = alloca double
  store double %pscale, double* %"<pscale>"
  store <3 x double> %N, <3 x double>* %"<N>"
  store <3 x double> %sourceP, <3 x double>* %"<sourceP>"
  store <3 x double> %uv, <3 x double>* %0
  store <3 x double> %tangentu, <3 x double>* %1
  store double %curveu, double* %2
  store <3 x double> %P, <3 x double>* %3
  call void @"__vex_snippet_snippet@FVVFVVV"(double* %"<pscale>", <3 x double>* %0, <3 x double>* %1, double* %2, <3 x double>* %"<N>", <3 x double>* %"<sourceP>", <3 x double>* %3)
  %evalue = load double, double* %"<pscale>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), double %evalue) #3
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), <3 x double> %uv) #3
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i64 0, i64 0), <3 x double> %tangentu) #3
  %gvalue10 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0), double %curveu) #3
  %evalue11 = load <3 x double>, <3 x double>* %"<N>"
  %gvalue12 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0), <3 x double> %evalue11) #3
  %evalue13 = load <3 x double>, <3 x double>* %"<sourceP>"
  %gvalue14 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0), <3 x double> %evalue13) #3
  %gvalue16 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i64 0, i64 0), <3 x double> %P) #3
  store double %gvalue, double* @pscale
  store <3 x double> %gvalue6, <3 x double>* @uv
  store <3 x double> %gvalue8, <3 x double>* @tangentu
  store double %gvalue10, double* @curveu
  store <3 x double> %gvalue12, <3 x double>* @N
  store <3 x double> %gvalue14, <3 x double>* @sourceP
  store <3 x double> %gvalue16, <3 x double>* @P
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, <3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@opinput1_up = external global <3 x double>
@opinput2_up = external global <3 x double>
@up = external global <3 x double>
@0 = private constant [12 x i8] c"opinput1_up\00"
@1 = private constant [12 x i8] c"opinput2_up\00"
@2 = private constant [3 x i8] c"up\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVV"(<3 x double>* %_bound_opinput1_up, <3 x double>* %_bound_opinput2_up, <3 x double>* %_bound_up) #0 {
__llvm_entry:
  %_bound_opinput1_up1 = load <3 x double>, <3 x double>* %_bound_opinput1_up
  %_bound_opinput2_up2 = load <3 x double>, <3 x double>* %_bound_opinput2_up
  %return = call double @"dot@FVV"(<3 x double> %_bound_opinput1_up1, <3 x double> %_bound_opinput2_up2)
  %return3 = call double @"abs@FF"(double %return)
  %return4 = fcmp olt double %return3, 1.000000e-05
  br i1 %return4, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_opinput1_up6 = load <3 x double>, <3 x double>* %_bound_opinput1_up
  store <3 x double> %_bound_opinput1_up6, <3 x double>* %_bound_up
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %opinput1_up, <3 x double> %opinput2_up, <3 x double> %up) #1 {
__llvm_entry:
  %"<up>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  store <3 x double> %up, <3 x double>* %"<up>"
  store <3 x double> %opinput1_up, <3 x double>* %0
  store <3 x double> %opinput2_up, <3 x double>* %1
  call void @"__vex_snippet_snippet@VVV"(<3 x double>* %0, <3 x double>* %1, <3 x double>* %"<up>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i64 0, i64 0), <3 x double> %opinput1_up) #2
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i64 0, i64 0), <3 x double> %opinput2_up) #2
  %evalue5 = load <3 x double>, <3 x double>* %"<up>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), <3 x double> %evalue5) #2
  store <3 x double> %gvalue, <3 x double>* @opinput1_up
  store <3 x double> %gvalue4, <3 x double>* @opinput2_up
  store <3 x double> %gvalue6, <3 x double>* @up
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

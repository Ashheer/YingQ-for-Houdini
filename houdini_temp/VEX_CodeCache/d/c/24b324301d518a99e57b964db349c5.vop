;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [30 x i8] c"origprimborderedges_subdivide\00"
@isclosed = external global i64
@isboundarypt = external global i64
@edgeneighbours = external global i64*
@ptnum = external global i64
@group_origpts_subdivide = external global i64
@2 = private constant [9 x i8] c"isclosed\00"
@3 = private constant [13 x i8] c"isboundarypt\00"
@4 = private constant [15 x i8] c"edgeneighbours\00"
@5 = private constant [6 x i8] c"ptnum\00"
@6 = private constant [24 x i8] c"group_origpts_subdivide\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II[III"(i64* %_bound_isclosed, i64* %_bound_isboundarypt, i64** %_bound_edgeneighbours, i64* %_bound_ptnum, i64* %_bound_group_origpts_subdivide) #0 {
__llvm_entry:
  %_bound_isclosed1 = load i64, i64* %_bound_isclosed
  %_bound_isboundarypt2 = load i64, i64* %_bound_isboundarypt
  %return = call i64 @"and@III"(i64 %_bound_isclosed1, i64 %_bound_isboundarypt2)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_edgeneighbours3 = load i64*, i64** %_bound_edgeneighbours
  %return5 = call i64 @"len@I[I"(i64* %_bound_edgeneighbours3)
  br label %cond

end:                                              ; preds = %end9, %__llvm_entry
  ret void

cond:                                             ; preds = %end17, %true
  %openedgepts.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %true ], [ %openedgepts.1, %end17 ]
  %__impl_foreach_index_9.0 = phi i64 [ 0, %true ], [ %output26, %end17 ]
  %return8 = call i64 @"lt@III"(i64 %__impl_foreach_index_9.0, i64 %return5)
  %1 = icmp ne i64 %return8, 0
  br i1 %1, label %body, label %end9

body:                                             ; preds = %cond
  %return12 = call i64 @"getcomp@I[II"(i64* %_bound_edgeneighbours3, i64 %__impl_foreach_index_9.0)
  %_bound_ptnum13 = load i64, i64* %_bound_ptnum
  %return15 = call i64 @"inedgegroup@IISII"(i64 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @1, i64 0, i64 0), i64 %_bound_ptnum13, i64 %return12)
  %2 = icmp ne i64 %return15, 0
  br i1 %2, label %true16, label %end17

end9:                                             ; preds = %true21, %cond
  store i64* %openedgepts.0, i64** %_bound_edgeneighbours
  br label %end

true16:                                           ; preds = %body
  %return19 = call i64 @"len@I[I"(i64* %openedgepts.0)
  %return20 = call i64 @"eq@III"(i64 %return19, i64 2)
  %3 = icmp ne i64 %return20, 0
  br i1 %3, label %true21, label %end22

end17:                                            ; preds = %end22, %body
  %openedgepts.1 = phi i64* [ %output, %end22 ], [ %openedgepts.0, %body ]
  %output26 = add i64 %__impl_foreach_index_9.0, 1
  br label %cond

true21:                                           ; preds = %true16
  store i64 0, i64* %_bound_group_origpts_subdivide
  br label %end9

end22:                                            ; preds = %true16
  %output = call i64* @"append@[II"(i64* %openedgepts.0, i64 %return12)
  br label %end17
}

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64 @"inedgegroup@IISII"(i64, i8*, i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %isclosed, i64 %isboundarypt, i64* %edgeneighbours, i64 %ptnum, i64 %group_origpts_subdivide) #2 {
__llvm_entry:
  %"<edgeneighbours>" = alloca i64*
  %"<group_origpts_subdivide>" = alloca i64
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  store i64* %edgeneighbours, i64** %"<edgeneighbours>"
  store i64 %group_origpts_subdivide, i64* %"<group_origpts_subdivide>"
  store i64 %isclosed, i64* %0
  store i64 %isboundarypt, i64* %1
  store i64 %ptnum, i64* %2
  call void @"__vex_snippet_snippet@II[III"(i64* %0, i64* %1, i64** %"<edgeneighbours>", i64* %2, i64* %"<group_origpts_subdivide>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), i64 %isclosed) #3
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @3, i64 0, i64 0), i64 %isboundarypt) #3
  %evalue6 = load i64*, i64** %"<edgeneighbours>"
  %gvalue7 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @4, i64 0, i64 0), i64* %evalue6) #3
  %gvalue9 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i64 0, i64 0), i64 %ptnum) #3
  %evalue10 = load i64, i64* %"<group_origpts_subdivide>"
  %gvalue11 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @6, i64 0, i64 0), i64 %evalue10) #3
  store i64 %gvalue, i64* @isclosed
  store i64 %gvalue5, i64* @isboundarypt
  store i64* %gvalue7, i64** @edgeneighbours
  store i64 %gvalue9, i64* @ptnum
  store i64 %gvalue11, i64* @group_origpts_subdivide
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

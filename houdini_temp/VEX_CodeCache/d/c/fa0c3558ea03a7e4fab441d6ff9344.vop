;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [12 x i8] c"first_frame\00"
@1 = private constant [18 x i8] c"custom_data_in_pa\00"
@Frame = external global double
@pscale = external global double
@P_texture = external global <3 x double>
@2 = private constant [6 x i8] c"Frame\00"
@3 = private constant [7 x i8] c"pscale\00"
@4 = private constant [10 x i8] c"P_texture\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FFV"(double* %_bound_Frame, double* %_bound_pscale, <3 x double>* %_bound_P_texture) #0 {
__llvm_entry:
  %_bound_Frame1 = load double, double* %_bound_Frame
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i64 0, i64 0))
  %cast = sitofp i64 %return to double
  %return2 = fcmp oeq double %_bound_Frame1, %cast
  br i1 %return2, label %true, label %end

true:                                             ; preds = %true6, %false, %__llvm_entry
  ret void

end:                                              ; preds = %__llvm_entry
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1, i64 0, i64 0))
  %return5 = call i64 @"eq@III"(i64 %return4, i64 0)
  %0 = icmp ne i64 %return5, 0
  br i1 %0, label %true6, label %false

true6:                                            ; preds = %end
  store double 0.000000e+00, double* %_bound_pscale
  br label %true

false:                                            ; preds = %end
  store <3 x double> zeroinitializer, <3 x double>* %_bound_P_texture
  br label %true
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %Frame, double %pscale, <3 x double> %P_texture) #2 {
__llvm_entry:
  %"<pscale>" = alloca double
  %"<P_texture>" = alloca <3 x double>
  %0 = alloca double
  store double %pscale, double* %"<pscale>"
  store <3 x double> %P_texture, <3 x double>* %"<P_texture>"
  store double %Frame, double* %0
  call void @"__vex_snippet_snippet@FFV"(double* %0, double* %"<pscale>", <3 x double>* %"<P_texture>")
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), double %Frame) #3
  %evalue2 = load double, double* %"<pscale>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), double %evalue2) #3
  %evalue4 = load <3 x double>, <3 x double>* %"<P_texture>"
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @4, i64 0, i64 0), <3 x double> %evalue4) #3
  store double %gvalue, double* @Frame
  store double %gvalue3, double* @pscale
  store <3 x double> %gvalue5, <3 x double>* @P_texture
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

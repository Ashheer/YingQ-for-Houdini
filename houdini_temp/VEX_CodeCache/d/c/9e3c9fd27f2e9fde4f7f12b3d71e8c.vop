;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"name\00"
@1 = private constant [1 x i8] zeroinitializer
@name_orig = external global i8*
@elemnum = external global i64
@2 = private constant [10 x i8] c"name_orig\00"
@3 = private constant [8 x i8] c"elemnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SI"(i8** %_bound_name_orig, i64* %_bound_elemnum) #0 {
__llvm_entry:
  %_bound_elemnum1 = load i64, i64* %_bound_elemnum
  %return = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0), i64 %_bound_elemnum1)
  store i8* %return, i8** %_bound_name_orig
  ret void
}

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %name_orig, i64 %elemnum) #1 {
__llvm_entry:
  %0 = alloca i64
  %"<name_orig>" = alloca i8*
  store i8* %name_orig, i8** %"<name_orig>"
  store i64 %elemnum, i64* %0
  call void @"__vex_snippet_snippet@SI"(i8** %"<name_orig>", i64* %0)
  %evalue = load i8*, i8** %"<name_orig>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0), i8* %evalue) #2
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i64 %elemnum) #2
  store i8* %gvalue, i8** @name_orig
  store i64 %gvalue3, i64* @elemnum
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0), i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@P = external global <3 x double>
@dist = external global double
@1 = private constant [5 x i8] c"dist\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VF"(<3 x double>* %_bound_P, double* %_bound_dist) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call i64 @"nearpoint@IIV"(i64 1, <3 x double> %_bound_P1)
  %return3 = call i64 @"ge@III"(i64 %return, i64 0)
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return5 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return)
  %_bound_P6 = load <3 x double>, <3 x double>* %_bound_P
  %output = call <3 x double> @"sub@VV"(<3 x double> %_bound_P6, <3 x double> %return5)
  %return8 = call double @"length@FV"(<3 x double> %output)
  store double %return8, double* %_bound_dist
  br label %end

false:                                            ; preds = %__llvm_entry
  store double 0.000000e+00, double* %_bound_dist
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: nounwind
declare i64 @"nearpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, double %dist) #1 {
__llvm_entry:
  %"<dist>" = alloca double
  %0 = alloca <3 x double>
  store double %dist, double* %"<dist>"
  store <3 x double> %P, <3 x double>* %0
  call void @"__vex_snippet_snippet@VF"(<3 x double>* %0, double* %"<dist>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %P) #3
  %evalue2 = load double, double* %"<dist>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), double %evalue2) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store double %gvalue3, double* @dist
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

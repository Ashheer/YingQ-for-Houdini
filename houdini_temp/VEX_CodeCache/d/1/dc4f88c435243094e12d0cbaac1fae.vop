;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [14 x i8] c"override_text\00"
@1 = private constant [12 x i8] c"override_bg\00"
@2 = private constant [19 x i8] c"override_font_size\00"
@3 = private constant [16 x i8] c"override_offset\00"
@4 = private constant [11 x i8] c"color_text\00"
@5 = private constant [9 x i8] c"color_bg\00"
@6 = private constant [10 x i8] c"font_size\00"
@7 = private constant [7 x i8] c"offset\00"
@8 = private constant [11 x i8] c"disable_bg\00"
@line_id = external global i64
@Cd_text = external global <3 x double>
@Cd_bg = external global <3 x double>
@font_size = external global double
@offset = external global double
@disable_bg = external global i64
@9 = private constant [8 x i8] c"line_id\00"
@10 = private constant [8 x i8] c"Cd_text\00"
@11 = private constant [6 x i8] c"Cd_bg\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVVFFI"(i64* %_bound_line_id, <3 x double>* %_bound_Cd_text, <3 x double>* %_bound_Cd_bg, double* %_bound_font_size, double* %_bound_offset, i64* %_bound_disable_bg) #0 {
__llvm_entry:
  %_bound_line_id1 = load i64, i64* %_bound_line_id
  %return = call i8* @"itoa@SI"(i64 %_bound_line_id1)
  %output = call i8* @"add@SS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @0, i64 0, i64 0), i8* %return)
  %return3 = call i64 @"chi@IS"(i8* %output)
  %output5 = call i8* @"add@SS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i64 0, i64 0), i8* %return)
  %return6 = call i64 @"chi@IS"(i8* %output5)
  %output8 = call i8* @"add@SS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @2, i64 0, i64 0), i8* %return)
  %return9 = call i64 @"chi@IS"(i8* %output8)
  %output11 = call i8* @"add@SS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @3, i64 0, i64 0), i8* %return)
  %return12 = call i64 @"chi@IS"(i8* %output11)
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output15 = call i8* @"add@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0), i8* %return)
  %return16 = call <3 x double> @"chv@VS"(i8* %output15)
  br label %end

false:                                            ; preds = %__llvm_entry
  %return17 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0))
  br label %end

end:                                              ; preds = %false, %true
  %phi = phi <3 x double> [ %return16, %true ], [ %return17, %false ]
  store <3 x double> %phi, <3 x double>* %_bound_Cd_text
  %1 = icmp ne i64 %return6, 0
  br i1 %1, label %true19, label %false20

true19:                                           ; preds = %end
  %output23 = call i8* @"add@SS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i64 0, i64 0), i8* %return)
  %return24 = call <3 x double> @"chv@VS"(i8* %output23)
  br label %end21

false20:                                          ; preds = %end
  %return25 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i64 0, i64 0))
  br label %end21

end21:                                            ; preds = %false20, %true19
  %phi26 = phi <3 x double> [ %return24, %true19 ], [ %return25, %false20 ]
  store <3 x double> %phi26, <3 x double>* %_bound_Cd_bg
  %2 = icmp ne i64 %return9, 0
  br i1 %2, label %true28, label %end30

true28:                                           ; preds = %end21
  %output32 = call i8* @"add@SS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @6, i64 0, i64 0), i8* %return)
  %return33 = call double @"chf@FS"(i8* %output32)
  br label %end30

end30:                                            ; preds = %end21, %true28
  %phi34 = phi double [ %return33, %true28 ], [ 1.000000e+00, %end21 ]
  store double %phi34, double* %_bound_font_size
  %3 = icmp ne i64 %return12, 0
  br i1 %3, label %true36, label %end38

true36:                                           ; preds = %end30
  %output40 = call i8* @"add@SS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), i8* %return)
  %return41 = call double @"chf@FS"(i8* %output40)
  br label %end38

end38:                                            ; preds = %end30, %true36
  %phi42 = phi double [ %return41, %true36 ], [ 0.000000e+00, %end30 ]
  store double %phi42, double* %_bound_offset
  %output44 = call i8* @"add@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @8, i64 0, i64 0), i8* %return)
  %return45 = call i64 @"chi@IS"(i8* %output44)
  store i64 %return45, i64* %_bound_disable_bg
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #1

; Function Attrs: nounwind readnone
declare i8* @"add@SS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %line_id, <3 x double> %Cd_text, <3 x double> %Cd_bg, double %font_size, double %offset, i64 %disable_bg) #2 {
__llvm_entry:
  %"<Cd_text>" = alloca <3 x double>
  %"<Cd_bg>" = alloca <3 x double>
  %"<font_size>" = alloca double
  %"<offset>" = alloca double
  %"<disable_bg>" = alloca i64
  %0 = alloca i64
  store <3 x double> %Cd_text, <3 x double>* %"<Cd_text>"
  store <3 x double> %Cd_bg, <3 x double>* %"<Cd_bg>"
  store double %font_size, double* %"<font_size>"
  store double %offset, double* %"<offset>"
  store i64 %disable_bg, i64* %"<disable_bg>"
  store i64 %line_id, i64* %0
  call void @"__vex_snippet_snippet@IVVFFI"(i64* %0, <3 x double>* %"<Cd_text>", <3 x double>* %"<Cd_bg>", double* %"<font_size>", double* %"<offset>", i64* %"<disable_bg>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @9, i64 0, i64 0), i64 %line_id) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<Cd_text>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @10, i64 0, i64 0), <3 x double> %evalue2) #3
  %evalue4 = load <3 x double>, <3 x double>* %"<Cd_bg>"
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @11, i64 0, i64 0), <3 x double> %evalue4) #3
  %evalue6 = load double, double* %"<font_size>"
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @6, i64 0, i64 0), double %evalue6) #3
  %evalue8 = load double, double* %"<offset>"
  %gvalue9 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), double %evalue8) #3
  %evalue10 = load i64, i64* %"<disable_bg>"
  %gvalue11 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @8, i64 0, i64 0), i64 %evalue10) #3
  store i64 %gvalue, i64* @line_id
  store <3 x double> %gvalue3, <3 x double>* @Cd_text
  store <3 x double> %gvalue5, <3 x double>* @Cd_bg
  store double %gvalue7, double* @font_size
  store double %gvalue9, double* @offset
  store i64 %gvalue11, i64* @disable_bg
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

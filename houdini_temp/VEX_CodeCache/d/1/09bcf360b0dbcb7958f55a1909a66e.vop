;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [9 x i8] c"distance\00"
@P = external global <3 x double>
@N = external global <3 x double>
@uv = external global <3 x double>
@ptnum = external global i64
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [2 x i8] c"N\00"
@3 = private constant [3 x i8] c"uv\00"
@4 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVVI"(<3 x double>* %_bound_P, <3 x double>* %_bound_N, <3 x double>* %_bound_uv, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %_bound_N2 = load <3 x double>, <3 x double>* %_bound_N
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0))
  %cast = call <3 x double> @"set@VF"(double %return)
  %output = call <3 x double> @"mul@VV"(<3 x double> %_bound_N2, <3 x double> %cast)
  %output3 = call <3 x double> @"add@VV"(<3 x double> %_bound_P1, <3 x double> %output)
  store <3 x double> %output3, <3 x double>* %_bound_P
  %_bound_ptnum4 = load i64, i64* %_bound_ptnum
  %cast5 = sitofp i64 %_bound_ptnum4 to double
  %tmp = load <3 x double>, <3 x double>* %_bound_uv
  %return6 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %cast5, i64 0)
  %output8 = extractvalue { double, <3 x double> } %return6, 1
  store <3 x double> %output8, <3 x double>* %_bound_uv
  %return10 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output8, double 1.000000e+00, i64 1)
  %output12 = extractvalue { double, <3 x double> } %return10, 1
  store <3 x double> %output12, <3 x double>* %_bound_uv
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, <3 x double> %N, <3 x double> %uv, i64 %ptnum) #3 {
__llvm_entry:
  %"<uv>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca i64
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %uv, <3 x double>* %"<uv>"
  store <3 x double> %N, <3 x double>* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@VVVI"(<3 x double>* %"<P>", <3 x double>* %0, <3 x double>* %"<uv>", i64* %1)
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #4
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %N) #4
  %evalue5 = load <3 x double>, <3 x double>* %"<uv>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), <3 x double> %evalue5) #4
  %gvalue8 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #4
  store <3 x double> %gvalue, <3 x double>* @P
  store <3 x double> %gvalue4, <3 x double>* @N
  store <3 x double> %gvalue6, <3 x double>* @uv
  store i64 %gvalue8, i64* @ptnum
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

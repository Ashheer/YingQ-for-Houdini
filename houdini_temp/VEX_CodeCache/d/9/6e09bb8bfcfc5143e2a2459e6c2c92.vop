;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"iteration\00"
@1 = private constant [1 x i8] zeroinitializer
@2 = private constant [16 x i8] c"../basegroup_%s\00"
@3 = private constant [12 x i8] c"../sName_%g\00"
@ptnum = external global i64
@name = external global i8*
@4 = private constant [6 x i8] c"ptnum\00"
@5 = private constant [5 x i8] c"name\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IS"(i64* %_bound_ptnum, i8** %_bound_name) #0 {
__llvm_entry:
  %return = call i64 @"detail@IISI"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), i64 0)
  %output = add i64 %return, 1
  %return2 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @2, i64 0, i64 0), i64 %output)
  %return3 = call i8* @"chs@SS"(i8* %return2)
  %return5 = call i64 @"ne@ISS"(i8* %return3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0))
  %0 = icmp ne i64 %return5, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_ptnum7 = load i64, i64* %_bound_ptnum
  %return8 = call i64 @"inpointgroup@IISI"(i64 0, i8* %return3, i64 %_bound_ptnum7)
  %1 = icmp ne i64 %return8, 0
  br i1 %1, label %true9, label %end

end:                                              ; preds = %true, %true9, %__llvm_entry
  ret void

true9:                                            ; preds = %true
  %return13 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i64 0, i64 0), i64 %output)
  %return14 = call i8* @"chs@SS"(i8* %return13)
  store i8* %return14, i8** %_bound_name
  br label %end
}

; Function Attrs: nounwind
declare i64 @"detail@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"sprintf@SS:I"(i8*, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #2

; Function Attrs: nounwind
declare i64 @"inpointgroup@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i8* %name) #1 {
__llvm_entry:
  %"<name>" = alloca i8*
  %0 = alloca i64
  store i8* %name, i8** %"<name>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@IS"(i64* %0, i8** %"<name>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load i8*, i8** %"<name>"
  %gvalue3 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i64 0, i64 0), i8* %evalue2) #3
  store i64 %gvalue, i64* @ptnum
  store i8* %gvalue3, i8** @name
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

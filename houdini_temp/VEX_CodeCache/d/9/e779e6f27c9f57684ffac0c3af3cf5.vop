;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [9 x i8] c"__raydir\00"
@1 = private constant [14 x i8] c"__expandscale\00"
@2 = private constant [4 x i8] c"max\00"
@3 = private constant [2 x i8] c"P\00"
@4 = private constant [6 x i8] c"radii\00"
@5 = private constant [35 x i8] c"VEX Assertion Failed %s:%d - (%s)\0A\00"
@6 = private constant [156 x i8] c"/obj/Wall_Breaking/rbdmaterialfracture1/CONCRETE_FRACTURE0/CSGVoronoi/generate_cutters/build_cutter_geo/voronoi_diagram_3d/expand_boundary_faces/attribvop1\00"
@7 = private constant [16 x i8] c"intersects == 1\00"
@8 = private constant [7 x i8] c"global\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIV"(i64* %_bound_primnum, i64* %_bound_numvtx, <3 x double>* %_bound_N) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum1, i64 0)
  %_bound_primnum2 = load i64, i64* %_bound_primnum
  %_bound_numvtx3 = load i64, i64* %_bound_numvtx
  %output = sub i64 %_bound_numvtx3, 1
  %return4 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum2, i64 %output)
  %return6 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), i64 %return)
  %return8 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), i64 %return4)
  %return11 = call double @"distance@FVV"(<3 x double> %return6, <3 x double> %return8)
  %output14 = call <3 x double> @"sub@VV"(<3 x double> %return8, <3 x double> %return6)
  %return15 = call <3 x double> @"normalize@VV"(<3 x double> %output14)
  %_bound_N16 = load <3 x double>, <3 x double>* %_bound_N
  %return17 = call <3 x double> @"detail@VIS"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0))
  %return19 = call double @"getcomp@FVI"(<3 x double> %return17, i64 0)
  %return20 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), i64 0)
  %return25 = call { i64, <3 x double>, double, double } @"planesphereintersect@IVVVFVFF"(<3 x double> %return6, <3 x double> %_bound_N16, <3 x double> %return20, double %return19)
  %return26 = extractvalue { i64, <3 x double>, double, double } %return25, 0
  %output28 = extractvalue { i64, <3 x double>, double, double } %return25, 2
  %return30 = call i64 @"assert_enabled@I"()
  %8 = icmp ne i64 %return30, 0
  br i1 %8, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return32 = call i64 @"eq@III"(i64 %return26, i64 1)
  %return33 = call i64 @"not@II"(i64 %return32)
  %9 = icmp ne i64 %return33, 0
  br i1 %9, label %true34, label %end

end:                                              ; preds = %true, %true34, %__llvm_entry
  %output42 = fmul double %output28, %output28
  %output45 = fmul double %return11, %return11
  %output46 = call double @"div@FF"(double %output45, double 4.000000e+00)
  %output47 = fsub double %output42, %output46
  %return48 = call double @"sqrt@FF"(double %output47)
  %output49 = fsub double %output28, %return48
  %output52 = fmul double 2.000000e+00, %output28
  %output54 = fsub double %output52, %output49
  %return55 = call double @"max@FFF"(double %output49, double %output54)
  %return59 = call <3 x double> @"cross@VVV"(<3 x double> %return15, <3 x double> %_bound_N16)
  %return60 = call <3 x double> @"normalize@VV"(<3 x double> %return59)
  %cast = call <3 x double> @"set@VF"(double %return55)
  %output61 = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %return60)
  store i64 %return, i64* %0
  store <3 x double> %output61, <3 x double>* %2
  store double %return55, double* %3
  call void @"expand_ray@IVVF"(i64* %0, <3 x double>* %1, <3 x double>* %2, double* %3)
  store i64 %return4, i64* %4
  store <3 x double> %output61, <3 x double>* %6
  store double %return55, double* %7
  call void @"expand_ray@IVVF"(i64* %4, <3 x double>* %5, <3 x double>* %6, double* %7)
  ret void

true34:                                           ; preds = %true
  %return36 = call i8* @"sprintf@SS:SIS"(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @5, i64 0, i64 0), i8* getelementptr inbounds ([156 x i8], [156 x i8]* @6, i64 0, i64 0), i64 43, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @7, i64 0, i64 0))
  call void @"print_once@S:SI"(i8* %return36, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @8, i64 0, i64 0), i64 1)
  br label %end
}

; Function Attrs: alwaysinline nounwind
define private void @"expand_ray@IVVF"(i64* %pt, <3 x double>* %pos, <3 x double>* %edge_expansion, double* %h) #0 {
__llvm_entry:
  %pt1 = load i64, i64* %pt
  %return = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0), i64 %pt1)
  %edge_expansion3 = load <3 x double>, <3 x double>* %edge_expansion
  %return4 = call double @"dot@FVV"(<3 x double> %return, <3 x double> %edge_expansion3)
  %edge_expansion5 = load <3 x double>, <3 x double>* %edge_expansion
  %return6 = call double @"length@FV"(<3 x double> %edge_expansion5)
  %output = call double @"div@FF"(double %return4, double %return6)
  %h7 = load double, double* %h
  %output9 = call double @"div@FF"(double %h7, double %output)
  %pt10 = load i64, i64* %pt
  %return12 = call i64 @"setpointattrib@IISIFS"(i64 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1, i64 0, i64 0), i64 %pt10, double %output9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i64 0, i64 0))
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIFS"(i64, i8*, i64, double, i8*) #1

; Function Attrs: nounwind
declare i64 @"primpoint@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"detail@VIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #2

; Function Attrs: nounwind
declare { i64, <3 x double>, double, double } @"planesphereintersect@IVVVFVFF"(<3 x double>, <3 x double>, <3 x double>, double) #1

; Function Attrs: nounwind readnone
declare i64 @"assert_enabled@I"() #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind readnone
declare i8* @"sprintf@SS:SIS"(i8*, i8*, i64, i8*) #2

; Function Attrs: nounwind
declare void @"print_once@S:SI"(i8*, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #2

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, i64 %numvtx, <3 x double> %N) #1 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca <3 x double>
  store i64 %primnum, i64* %0
  store i64 %numvtx, i64* %1
  store <3 x double> %N, <3 x double>* %2
  call void @"__vex_snippet_snippet@IIV"(i64* %0, i64* %1, <3 x double>* %2)
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

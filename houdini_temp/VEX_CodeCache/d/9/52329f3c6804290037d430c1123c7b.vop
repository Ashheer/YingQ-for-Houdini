;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"seed\00"
@1 = private constant [6 x i8] c"ratio\00"
@P = external global <3 x double>
@Cd = external global <3 x double>
@2 = private constant [2 x i8] c"P\00"
@3 = private constant [3 x i8] c"Cd\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VV"(<3 x double>* %_bound_P, <3 x double>* %_bound_Cd) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %cast = call <3 x double> @"set@VF"(double 4.630000e+00)
  %output = call <3 x double> @"add@VV"(<3 x double> %_bound_P1, <3 x double> %cast)
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  %cast2 = call <3 x double> @"set@VF"(double %return)
  %output3 = call <3 x double> @"add@VV"(<3 x double> %output, <3 x double> %cast2)
  %return4 = call double @"rand@FV"(<3 x double> %output3)
  %return5 = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0))
  %return6 = call double @"clamp@FFFF"(double %return5, double 1.000000e-02, double 9.000000e-01)
  %return7 = fcmp olt double %return4, %return6
  br i1 %return7, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_P9 = load <3 x double>, <3 x double>* %_bound_P
  %cast10 = call <3 x double> @"set@VF"(double 2.300000e+01)
  %output11 = call <3 x double> @"add@VV"(<3 x double> %_bound_P9, <3 x double> %cast10)
  %output14 = call <3 x double> @"add@VV"(<3 x double> %output11, <3 x double> %cast2)
  %return15 = call double @"rand@FV"(<3 x double> %output14)
  %return16 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double 1.000000e+00, double 1.000000e+00)
  %return17 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double 1.000000e+00, double 0.000000e+00)
  %return19 = call <3 x double> @"lerp@VVVF"(<3 x double> %return16, <3 x double> %return17, double %return15)
  store <3 x double> %return19, <3 x double>* %_bound_Cd
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"rand@FV"(<3 x double>) #2

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind
declare <3 x double> @"lerp@VVVF"(<3 x double>, <3 x double>, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, <3 x double> %Cd) #2 {
__llvm_entry:
  %"<Cd>" = alloca <3 x double>
  %0 = alloca <3 x double>
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store <3 x double> %P, <3 x double>* %0
  call void @"__vex_snippet_snippet@VV"(<3 x double>* %0, <3 x double>* %"<Cd>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %P) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<Cd>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), <3 x double> %evalue2) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store <3 x double> %gvalue3, <3 x double>* @Cd
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

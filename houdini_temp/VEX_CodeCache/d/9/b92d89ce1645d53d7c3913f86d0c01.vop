;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [15 x i8] c"winding_number\00"
@inside = external global i64
@winding_number = external global double
@ptnum = external global i64
@1 = private constant [7 x i8] c"inside\00"
@2 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IFI"(i64* %_bound_inside, double* %_bound_winding_number, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound_winding_number1 = load double, double* %_bound_winding_number
  %_bound_ptnum2 = load i64, i64* %_bound_ptnum
  %return = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i64 0, i64 0), i64 %_bound_ptnum2)
  %output = fadd double %_bound_winding_number1, %return
  %return3 = call double @"abs@FF"(double %output)
  %return4 = fcmp ogt double %return3, 5.000000e-01
  %return5 = zext i1 %return4 to i64
  store i64 %return5, i64* %_bound_inside
  ret void
}

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %inside, double %winding_number, i64 %ptnum) #1 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca i64
  %"<inside>" = alloca i64
  store i64 %inside, i64* %"<inside>"
  store double %winding_number, double* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@IFI"(i64* %"<inside>", double* %0, i64* %1)
  %evalue = load i64, i64* %"<inside>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i64 %evalue) #2
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i64 0, i64 0), double %winding_number) #2
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %ptnum) #2
  store i64 %gvalue, i64* @inside
  store double %gvalue4, double* @winding_number
  store i64 %gvalue6, i64* @ptnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, double 0.000000e+00, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

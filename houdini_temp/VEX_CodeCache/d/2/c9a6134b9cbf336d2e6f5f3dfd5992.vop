;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [12 x i8] c"__frame_ref\00"
@1 = private constant [17 x i8] c"__numpt_error_fs\00"
@2 = private constant [0 x i64] zeroinitializer
@__frame_ref = external global i64
@__numpt_error_fs = external global i64*
@numpt = external global i64
@3 = private constant [6 x i8] c"numpt\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I[II"(i64* %_bound___frame_ref, i64** %_bound___numpt_error_fs, i64* %_bound_numpt) #0 {
__llvm_entry:
  %return = call i64 @"detail@IISI"(i64 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i64 0, i64 0), i64 0)
  %output = add i64 %return, 1
  store i64 %output, i64* %_bound___frame_ref
  %return1 = call i64* @"detail@[IISI"(i64 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1, i64 0, i64 0), i64 0)
  store i64* %return1, i64** %_bound___numpt_error_fs
  %_bound_numpt2 = load i64, i64* %_bound_numpt
  %return3 = call i64 @"npoints@II"(i64 1)
  %return4 = call i64 @"ne@III"(i64 %_bound_numpt2, i64 %return3)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound___numpt_error_fs5 = load i64*, i64** %_bound___numpt_error_fs
  %_bound___frame_ref6 = load i64, i64* %_bound___frame_ref
  %output7 = call i64* @"append@[II"(i64* %_bound___numpt_error_fs5, i64 %_bound___frame_ref6)
  store i64* %output7, i64** %_bound___numpt_error_fs
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind
declare i64 @"detail@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64* @"detail@[IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %__frame_ref, i64* %__numpt_error_fs, i64 %numpt) #1 {
__llvm_entry:
  %"<__numpt_error_fs>" = alloca i64*
  %0 = alloca i64
  %"<__frame_ref>" = alloca i64
  store i64 %__frame_ref, i64* %"<__frame_ref>"
  store i64* %__numpt_error_fs, i64** %"<__numpt_error_fs>"
  store i64 %numpt, i64* %0
  call void @"__vex_snippet_snippet@I[II"(i64* %"<__frame_ref>", i64** %"<__numpt_error_fs>", i64* %0)
  %evalue = load i64, i64* %"<__frame_ref>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i64 0, i64 0), i64 %evalue) #3
  %evalue2 = load i64*, i64** %"<__numpt_error_fs>"
  %gvalue3 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1, i64 0, i64 0), i64* %evalue2) #3
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %numpt) #3
  store i64 %gvalue, i64* @__frame_ref
  store i64* %gvalue3, i64** @__numpt_error_fs
  store i64 %gvalue5, i64* @numpt
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @2, i64 0, i64 0), i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

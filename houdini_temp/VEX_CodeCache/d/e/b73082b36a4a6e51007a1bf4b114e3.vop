;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@hasEdge = external global i64
@numvtx = external global i64
@0 = private constant [8 x i8] c"hasEdge\00"
@1 = private constant [7 x i8] c"numvtx\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound_hasEdge, i64* %_bound_numvtx) #0 {
__llvm_entry:
  store i64 0, i64* %_bound_hasEdge
  br label %cond

cond:                                             ; preds = %true, %__llvm_entry
  %vtxnum.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %true ]
  %_bound_numvtx2 = load i64, i64* %_bound_numvtx
  %return = call i64 @"lt@III"(i64 %vtxnum.0, i64 %_bound_numvtx2)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return4 = call i64 @"hedge_nextequiv@III"(i64 0, i64 %vtxnum.0)
  %return7 = call i64 @"ne@III"(i64 %return4, i64 %vtxnum.0)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %true, label %end8

end:                                              ; preds = %end8, %cond
  ret void

true:                                             ; preds = %body
  %output = add i64 %vtxnum.0, 1
  br label %cond

end8:                                             ; preds = %body
  store i64 1, i64* %_bound_hasEdge
  br label %end
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"hedge_nextequiv@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %hasEdge, i64 %numvtx) #2 {
__llvm_entry:
  %0 = alloca i64
  %"<hasEdge>" = alloca i64
  store i64 %hasEdge, i64* %"<hasEdge>"
  store i64 %numvtx, i64* %0
  call void @"__vex_snippet_snippet@II"(i64* %"<hasEdge>", i64* %0)
  %evalue = load i64, i64* %"<hasEdge>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0), i64 %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i64 %numvtx) #3
  store i64 %gvalue, i64* @hasEdge
  store i64 %gvalue3, i64* @numvtx
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

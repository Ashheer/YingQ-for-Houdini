;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"N\00"
@1 = private constant [15 x i8] c"../ray3/hitgrp\00"
@2 = private constant [2 x i8] c"P\00"
@ptnum = external global i64
@grp = external global i64
@N = external global <3 x double>
@up = external global <3 x double>
@P = external global <3 x double>
@3 = private constant [6 x i8] c"ptnum\00"
@4 = private constant [4 x i8] c"grp\00"
@5 = private constant [3 x i8] c"up\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIVVV"(i64* %_bound_ptnum, i64* %_bound_grp, <3 x double>* %_bound_N, <3 x double>* %_bound_up, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64 @"pointvertex@III"(i64 0, i64 %_bound_ptnum1)
  %return3 = call i64 @"vertexprim@III"(i64 0, i64 %return)
  %return5 = call <3 x double> @"prim@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return3)
  %_bound_grp6 = load i64, i64* %_bound_grp
  %0 = icmp ne i64 %_bound_grp6, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_bound_N7 = load <3 x double>, <3 x double>* %_bound_N
  %_bound_up8 = load <3 x double>, <3 x double>* %_bound_up
  %return9 = call <3 x double> @"cross@VVV"(<3 x double> %_bound_N7, <3 x double> %_bound_up8)
  %_bound_N10 = load <3 x double>, <3 x double>* %_bound_N
  %return11 = call <3 x double> @"cross@VVV"(<3 x double> %return9, <3 x double> %_bound_N10)
  %return12 = call <3 x double> @"normalize@VV"(<3 x double> %return11)
  br label %end

false:                                            ; preds = %__llvm_entry
  %_bound_ptnum13 = load i64, i64* %_bound_ptnum
  %return14 = call i64* @"neighbours@[III"(i64 0, i64 %_bound_ptnum13)
  %return16 = call i64 @"len@I[I"(i64* %return14)
  br label %cond

end:                                              ; preds = %cond, %end40, %true
  %dir.0 = phi <3 x double> [ %return12, %true ], [ %return50, %end40 ], [ zeroinitializer, %cond ]
  %return56 = call double @"dot@FVV"(<3 x double> %dir.0, <3 x double> %return5)
  %cast57 = call <3 x double> @"set@VF"(double %return56)
  %output58 = call <3 x double> @"div@VV"(<3 x double> %dir.0, <3 x double> %cast57)
  store <3 x double> %output58, <3 x double>* %_bound_N
  ret void

cond:                                             ; preds = %true27, %false
  %__impl_foreach_index_164.0 = phi i64 [ 0, %false ], [ %output52, %true27 ]
  %return19 = call i64 @"lt@III"(i64 %__impl_foreach_index_164.0, i64 %return16)
  %1 = icmp ne i64 %return19, 0
  br i1 %1, label %body, label %end

body:                                             ; preds = %cond
  %return23 = call i64 @"getcomp@I[II"(i64* %return14, i64 %__impl_foreach_index_164.0)
  %return24 = call i8* @"chs@SS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1, i64 0, i64 0))
  %return26 = call i64 @"inpointgroup@IISI"(i64 0, i8* %return24, i64 %return23)
  %2 = icmp ne i64 %return26, 0
  br i1 %2, label %true27, label %end28

true27:                                           ; preds = %body
  %output52 = add i64 %__impl_foreach_index_164.0, 1
  br label %cond

end28:                                            ; preds = %body
  %return30 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), i64 %return23)
  %_bound_P31 = load <3 x double>, <3 x double>* %_bound_P
  %output = call <3 x double> @"sub@VV"(<3 x double> %_bound_P31, <3 x double> %return30)
  %return33 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %_bound_up34 = load <3 x double>, <3 x double>* %_bound_up
  %return36 = call double @"dot@FVV"(<3 x double> %_bound_up34, <3 x double> %return33)
  %return37 = fcmp olt double %return36, 0.000000e+00
  br i1 %return37, label %true39, label %end40

true39:                                           ; preds = %end28
  %return42 = call i64 @"neg@II"(i64 1)
  %cast = call <3 x double> @"set@VI"(i64 %return42)
  %output43 = call <3 x double> @"mul@VV"(<3 x double> %return33, <3 x double> %cast)
  br label %end40

end40:                                            ; preds = %true39, %end28
  %dir.1 = phi <3 x double> [ %output43, %true39 ], [ %return33, %end28 ]
  %_bound_up45 = load <3 x double>, <3 x double>* %_bound_up
  %return46 = call <3 x double> @"cross@VVV"(<3 x double> %dir.1, <3 x double> %_bound_up45)
  %_bound_N47 = load <3 x double>, <3 x double>* %_bound_N
  %return49 = call <3 x double> @"cross@VVV"(<3 x double> %_bound_N47, <3 x double> %return46)
  %return50 = call <3 x double> @"normalize@VV"(<3 x double> %return49)
  br label %end
}

; Function Attrs: nounwind
declare i64 @"pointvertex@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"vertexprim@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"prim@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind
declare i64 @"inpointgroup@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64 %grp, <3 x double> %N, <3 x double> %up, <3 x double> %P) #1 {
__llvm_entry:
  %"<N>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca <3 x double>
  %3 = alloca <3 x double>
  store <3 x double> %N, <3 x double>* %"<N>"
  store i64 %ptnum, i64* %0
  store i64 %grp, i64* %1
  store <3 x double> %up, <3 x double>* %2
  store <3 x double> %P, <3 x double>* %3
  call void @"__vex_snippet_snippet@IIVVV"(i64* %0, i64* %1, <3 x double>* %"<N>", <3 x double>* %2, <3 x double>* %3)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0), i64 %grp) #3
  %evalue7 = load <3 x double>, <3 x double>* %"<N>"
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %evalue7) #3
  %gvalue10 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i64 0, i64 0), <3 x double> %up) #3
  %gvalue12 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %P) #3
  store i64 %gvalue, i64* @ptnum
  store i64 %gvalue6, i64* @grp
  store <3 x double> %gvalue8, <3 x double>* @N
  store <3 x double> %gvalue10, <3 x double>* @up
  store <3 x double> %gvalue12, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

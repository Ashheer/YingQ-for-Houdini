;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [1 x i8] zeroinitializer
@name = external global i8*
@variant = external global double
@1 = private constant [5 x i8] c"name\00"
@2 = private constant [8 x i8] c"variant\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SF"(i8** %_bound_name, double* %_bound_variant) #0 {
__llvm_entry:
  %_bound_variant1 = load double, double* %_bound_variant
  %cast = fptosi double %_bound_variant1 to i64
  %return = call i8* @"itoa@SI"(i64 %cast)
  store i8* %return, i8** %_bound_name
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %name, double %variant) #2 {
__llvm_entry:
  %0 = alloca double
  %"<name>" = alloca i8*
  store i8* %name, i8** %"<name>"
  store double %variant, double* %0
  call void @"__vex_snippet_snippet@SF"(i8** %"<name>", double* %0)
  %evalue = load i8*, i8** %"<name>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* %evalue) #3
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), double %variant) #3
  store i8* %gvalue, i8** @name
  store double %gvalue3, double* @variant
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

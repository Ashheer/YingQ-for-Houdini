;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [10 x i8] c"MODULE_ID\00"
@2 = private constant [13 x i8] c"MODULE_WIDTH\00"
@3 = private constant [16 x i8] c"MODULE_INSTANCE\00"
@4 = private constant [4 x i8] c"set\00"
@5 = private constant [2 x i8] c"N\00"
@6 = private constant [13 x i8] c"CONVEXCORNER\00"
@7 = private constant [1 x i8] zeroinitializer
@LEFTEDGECORNER = external global <3 x double>
@RIGHTEDGECORNER = external global <3 x double>
@ptnum = external global i64
@group_CONVEXCORNER = external global i64
@N = external global <3 x double>
@P = external global <3 x double>
@RIGHTCORNER = external global i8*
@8 = private constant [15 x i8] c"LEFTEDGECORNER\00"
@9 = private constant [16 x i8] c"RIGHTEDGECORNER\00"
@10 = private constant [6 x i8] c"ptnum\00"
@11 = private constant [19 x i8] c"group_CONVEXCORNER\00"
@12 = private constant [2 x i8] c"P\00"
@13 = private constant [12 x i8] c"RIGHTCORNER\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVIIVVS"(<3 x double>* %_bound_LEFTEDGECORNER, <3 x double>* %_bound_RIGHTEDGECORNER, i64* %_bound_ptnum, i64* %_bound_group_CONVEXCORNER, <3 x double>* %_bound_N, <3 x double>* %_bound_P, i8** %_bound_RIGHTCORNER) #0 {
__llvm_entry:
  %_bound_LEFTEDGECORNER1 = load <3 x double>, <3 x double>* %_bound_LEFTEDGECORNER
  %_bound_RIGHTEDGECORNER2 = load <3 x double>, <3 x double>* %_bound_RIGHTEDGECORNER
  %output = call <3 x double> @"add@VV"(<3 x double> %_bound_LEFTEDGECORNER1, <3 x double> %_bound_RIGHTEDGECORNER2)
  %return = call double @"length@FV"(<3 x double> %output)
  %return3 = fcmp ole double %return, 1.000000e-01
  br i1 %return3, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_bound_ptnum5 = load i64, i64* %_bound_ptnum
  %return6 = call i64 @"removepoint@III"(i64 0, i64 %_bound_ptnum5)
  br label %end

false:                                            ; preds = %__llvm_entry
  %_bound_group_CONVEXCORNER7 = load i64, i64* %_bound_group_CONVEXCORNER
  %return8 = call i64 @"eq@III"(i64 %_bound_group_CONVEXCORNER7, i64 0)
  %0 = icmp ne i64 %return8, 0
  br i1 %0, label %true9, label %false10

end:                                              ; preds = %true9, %false10, %true
  ret void

true9:                                            ; preds = %false
  %_bound_RIGHTEDGECORNER12 = load <3 x double>, <3 x double>* %_bound_RIGHTEDGECORNER
  %return13 = call <3 x double> @"neg@VV"(<3 x double> %_bound_RIGHTEDGECORNER12)
  store <3 x double> %return13, <3 x double>* %_bound_N
  %_bound_P14 = load <3 x double>, <3 x double>* %_bound_P
  %return15 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %_bound_P14)
  %_bound_RIGHTCORNER16 = load i8*, i8** %_bound_RIGHTCORNER
  %return17 = call i64 @"findattribval@IISSSI"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), i8* %_bound_RIGHTCORNER16, i64 0)
  %return19 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0), i64 %return17)
  %_bound_RIGHTCORNER21 = load i8*, i8** %_bound_RIGHTCORNER
  %return22 = call i64 @"setpointattrib@IISISS"(i64 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @3, i64 0, i64 0), i64 %return15, i8* %_bound_RIGHTCORNER21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  %_bound_LEFTEDGECORNER24 = load <3 x double>, <3 x double>* %_bound_LEFTEDGECORNER
  %return25 = call i64 @"setpointattrib@IISIVS"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), i64 %return15, <3 x double> %_bound_LEFTEDGECORNER24, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  %_bound_group_CONVEXCORNER27 = load i64, i64* %_bound_group_CONVEXCORNER
  %return28 = call i64 @"setpointgroup@IISIIS"(i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @6, i64 0, i64 0), i64 %return15, i64 %_bound_group_CONVEXCORNER27, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  br label %end

false10:                                          ; preds = %false
  %_bound_LEFTEDGECORNER29 = load <3 x double>, <3 x double>* %_bound_LEFTEDGECORNER
  %return30 = call <3 x double> @"neg@VV"(<3 x double> %_bound_LEFTEDGECORNER29)
  store <3 x double> %return30, <3 x double>* %_bound_N
  %_bound_P32 = load <3 x double>, <3 x double>* %_bound_P
  %return33 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %_bound_P32)
  %_bound_RIGHTCORNER35 = load i8*, i8** %_bound_RIGHTCORNER
  %return36 = call i64 @"findattribval@IISSSI"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), i8* %_bound_RIGHTCORNER35, i64 0)
  %return39 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0), i64 %return36)
  %_bound_RIGHTCORNER41 = load i8*, i8** %_bound_RIGHTCORNER
  %return42 = call i64 @"setpointattrib@IISISS"(i64 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @3, i64 0, i64 0), i64 %return33, i8* %_bound_RIGHTCORNER41, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  %_bound_RIGHTEDGECORNER44 = load <3 x double>, <3 x double>* %_bound_RIGHTEDGECORNER
  %return45 = call i64 @"setpointattrib@IISIVS"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), i64 %return33, <3 x double> %_bound_RIGHTEDGECORNER44, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  %_bound_group_CONVEXCORNER47 = load i64, i64* %_bound_group_CONVEXCORNER
  %return48 = call i64 @"setpointgroup@IISIIS"(i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @6, i64 0, i64 0), i64 %return33, i64 %_bound_group_CONVEXCORNER47, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  br label %end
}

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind
declare i64 @"removepoint@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"findattribval@IISSSI"(i64, i8*, i8*, i8*, i64) #2

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISISS"(i64, i8*, i64, i8*, i8*) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIVS"(i64, i8*, i64, <3 x double>, i8*) #2

; Function Attrs: nounwind
declare i64 @"setpointgroup@IISIIS"(i64, i8*, i64, i64, i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %LEFTEDGECORNER, <3 x double> %RIGHTEDGECORNER, i64 %ptnum, i64 %group_CONVEXCORNER, <3 x double> %N, <3 x double> %P, i8* %RIGHTCORNER) #2 {
__llvm_entry:
  %"<N>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca <3 x double>
  %5 = alloca i8*
  store <3 x double> %N, <3 x double>* %"<N>"
  store <3 x double> %LEFTEDGECORNER, <3 x double>* %0
  store <3 x double> %RIGHTEDGECORNER, <3 x double>* %1
  store i64 %ptnum, i64* %2
  store i64 %group_CONVEXCORNER, i64* %3
  store <3 x double> %P, <3 x double>* %4
  store i8* %RIGHTCORNER, i8** %5
  call void @"__vex_snippet_snippet@VVIIVVS"(<3 x double>* %0, <3 x double>* %1, i64* %2, i64* %3, <3 x double>* %"<N>", <3 x double>* %4, i8** %5)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @8, i64 0, i64 0), <3 x double> %LEFTEDGECORNER) #3
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @9, i64 0, i64 0), <3 x double> %RIGHTEDGECORNER) #3
  %gvalue10 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @10, i64 0, i64 0), i64 %ptnum) #3
  %gvalue12 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @11, i64 0, i64 0), i64 %group_CONVEXCORNER) #3
  %evalue13 = load <3 x double>, <3 x double>* %"<N>"
  %gvalue14 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), <3 x double> %evalue13) #3
  %gvalue16 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i64 0, i64 0), <3 x double> %P) #3
  %gvalue18 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @13, i64 0, i64 0), i8* %RIGHTCORNER) #3
  store <3 x double> %gvalue, <3 x double>* @LEFTEDGECORNER
  store <3 x double> %gvalue8, <3 x double>* @RIGHTEDGECORNER
  store i64 %gvalue10, i64* @ptnum
  store i64 %gvalue12, i64* @group_CONVEXCORNER
  store <3 x double> %gvalue14, <3 x double>* @N
  store <3 x double> %gvalue16, <3 x double>* @P
  store i8* %gvalue18, i8** @RIGHTCORNER
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, i64 0, i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @7, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

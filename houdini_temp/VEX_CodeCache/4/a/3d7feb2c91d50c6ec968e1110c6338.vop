;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [8 x i8] c"segment\00"
@1 = private constant [12 x i8] c"maxSegments\00"
@2 = private constant [17 x i8] c"maxFloorSegments\00"
@3 = private constant [9 x i8] c"polyline\00"
@segment = external global i64
@ptnum = external global i64
@segmentTest = external global i64
@4 = private constant [6 x i8] c"ptnum\00"
@5 = private constant [12 x i8] c"segmentTest\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@III"(i64* %_bound_segment, i64* %_bound_ptnum, i64* %_bound_segmentTest) #0 {
__llvm_entry:
  %_bound_segment1 = load i64, i64* %_bound_segment
  %_bound_ptnum2 = load i64, i64* %_bound_ptnum
  %output = sub i64 %_bound_ptnum2, 1
  %return = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0), i64 %output)
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i64 0, i64 0))
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @2, i64 0, i64 0))
  %return6 = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0), i64 %return4)
  %output9 = sub i64 %_bound_segment1, 1
  %return10 = call i64 @"eq@III"(i64 %return, i64 %output9)
  %0 = icmp ne i64 %return10, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_ptnum11 = load i64, i64* %_bound_ptnum
  %output13 = sub i64 %_bound_ptnum11, 1
  %return14 = call i64 @"addprim@IISII"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0), i64 %_bound_ptnum11, i64 %output13)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %_bound_segment15 = load i64, i64* %_bound_segment
  %return16 = call i64 @"eq@III"(i64 %_bound_segment15, i64 0)
  %return19 = call i64 @"eq@III"(i64 %return6, i64 %return3)
  %return20 = call i64 @"and@III"(i64 %return16, i64 %return19)
  %1 = icmp ne i64 %return20, 0
  br i1 %1, label %true21, label %end22

true21:                                           ; preds = %end
  %_bound_ptnum23 = load i64, i64* %_bound_ptnum
  %return25 = call i64 @"addprim@IISII"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0), i64 %_bound_ptnum23, i64 %return4)
  br label %end22

end22:                                            ; preds = %true21, %end
  store i64 %return6, i64* %_bound_segmentTest
  ret void
}

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"addprim@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %segment, i64 %ptnum, i64 %segmentTest) #1 {
__llvm_entry:
  %"<segmentTest>" = alloca i64
  %0 = alloca i64
  %1 = alloca i64
  store i64 %segmentTest, i64* %"<segmentTest>"
  store i64 %segment, i64* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@III"(i64* %0, i64* %1, i64* %"<segmentTest>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0), i64 %segment) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #3
  %evalue5 = load i64, i64* %"<segmentTest>"
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i64 0, i64 0), i64 %evalue5) #3
  store i64 %gvalue, i64* @segment
  store i64 %gvalue4, i64* @ptnum
  store i64 %gvalue6, i64* @segmentTest
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [9 x i8] c"TopCurve\00"
@1 = private constant [14 x i8] c"ScaleTopCurve\00"
@curveu = external global double
@uy = external global double
@P = external global <3 x double>
@2 = private constant [7 x i8] c"curveu\00"
@3 = private constant [3 x i8] c"uy\00"
@4 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FFV"(double* %_bound_curveu, double* %_bound_uy, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_uy1 = load double, double* %_bound_uy
  %output = fsub double 1.000000e+00, %_bound_uy1
  %return = call double @"chramp@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0), double %output)
  store double %return, double* %_bound_curveu
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %return3 = call double @"getcomp@FVI"(<3 x double> %_bound_P2, i64 1)
  %return5 = call double @"neg@FF"(double %return)
  %return6 = call double @"chf@FS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1, i64 0, i64 0))
  %output7 = fmul double %return5, %return6
  %output8 = fsub double %return3, %output7
  %return9 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %_bound_P2, double %output8, i64 1)
  %output11 = extractvalue { double, <3 x double> } %return9, 1
  store <3 x double> %output11, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chramp@FSF"(i8*, double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 1)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %curveu, double %uy, <3 x double> %P) #3 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca double
  %"<curveu>" = alloca double
  store double %curveu, double* %"<curveu>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store double %uy, double* %0
  call void @"__vex_snippet_snippet@FFV"(double* %"<curveu>", double* %0, <3 x double>* %"<P>")
  %evalue = load double, double* %"<curveu>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), double %evalue) #4
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), double %uy) #4
  %evalue4 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), <3 x double> %evalue4) #4
  store double %gvalue, double* @curveu
  store double %gvalue3, double* @uy
  store <3 x double> %gvalue5, <3 x double>* @P
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

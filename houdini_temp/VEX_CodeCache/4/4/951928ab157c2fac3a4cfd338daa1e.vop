;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [13 x i8] c"global_scale\00"
@pscale = external global double
@1 = private constant [7 x i8] c"pscale\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FFF"(double* %_bound_scale, double* %_bound_seed, double* %_bound_pscale) #0 {
__llvm_entry:
  %_bound_seed1 = load double, double* %_bound_seed
  %output = fadd double %_bound_seed1, 6.553600e+04
  %return = call double @"rand@FF"(double %output)
  %_bound_scale3 = load double, double* %_bound_scale
  %output4 = fmul double %return, %_bound_scale3
  %return5 = call double @"chf@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0))
  %output6 = fmul double %output4, %return5
  store double %output6, double* %_bound_pscale
  ret void
}

; Function Attrs: nounwind
declare double @"rand@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(double %scale, double %seed, double %pscale) #1 {
__llvm_entry:
  %"<pscale>" = alloca double
  %0 = alloca double
  %1 = alloca double
  store double %pscale, double* %"<pscale>"
  store double %scale, double* %0
  store double %seed, double* %1
  call void @"__vex_snippet_snippet@FFF"(double* %0, double* %1, double* %"<pscale>")
  %evalue = load double, double* %"<pscale>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), double %evalue) #3
  store double %gvalue, double* @pscale
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 1.000000e+00, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

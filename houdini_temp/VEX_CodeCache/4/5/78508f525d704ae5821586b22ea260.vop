;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [11 x i8] c"first_pass\00"
@1 = private constant [18 x i8] c"second_pass_width\00"
@2 = private constant [12 x i8] c"pad_pow_two\00"
@__second_pass_width = external global i64
@__second_pass_height = external global i64
@__accum_numpt = external global i64
@__second_pass_active_x = external global double
@__second_pass_active_y = external global double
@3 = private constant [20 x i8] c"__second_pass_width\00"
@4 = private constant [21 x i8] c"__second_pass_height\00"
@5 = private constant [14 x i8] c"__accum_numpt\00"
@6 = private constant [23 x i8] c"__second_pass_active_x\00"
@7 = private constant [23 x i8] c"__second_pass_active_y\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIIFF"(i64* %_bound___second_pass_width, i64* %_bound___second_pass_height, i64* %_bound___accum_numpt, double* %_bound___second_pass_active_x, double* %_bound___second_pass_active_y) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1, i64 0, i64 0))
  store i64 %return1, i64* %_bound___second_pass_width
  %_bound___accum_numpt2 = load i64, i64* %_bound___accum_numpt
  %cast = sitofp i64 %_bound___accum_numpt2 to double
  %cast4 = sitofp i64 %return1 to double
  %output = call double @"div@FF"(double %cast, double %cast4)
  %return5 = call double @"ceil@FF"(double %output)
  %cast6 = fptosi double %return5 to i64
  store i64 %cast6, i64* %_bound___second_pass_height
  %_bound___second_pass_width7 = load i64, i64* %_bound___second_pass_width
  %cast8 = sitofp i64 %_bound___second_pass_width7 to double
  %return9 = call double @"log@FF"(double %cast8)
  %return10 = call double @"log@FF"(double 2.000000e+00)
  %output11 = call double @"div@FF"(double %return9, double %return10)
  %return12 = call double @"ceil@FF"(double %output11)
  %return13 = call double @"pow@FFF"(double 2.000000e+00, double %return12)
  %cast15 = sitofp i64 %cast6 to double
  %return16 = call double @"log@FF"(double %cast15)
  %output18 = call double @"div@FF"(double %return16, double %return10)
  %return19 = call double @"ceil@FF"(double %output18)
  %return20 = call double @"pow@FFF"(double 2.000000e+00, double %return19)
  %return21 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i64 0, i64 0))
  %1 = icmp ne i64 %return21, 0
  br i1 %1, label %true22, label %false

end:                                              ; preds = %true22, %false, %__llvm_entry
  ret void

true22:                                           ; preds = %true
  %output27 = call double @"div@FF"(double %cast8, double %return13)
  store double %output27, double* %_bound___second_pass_active_x
  %_bound___second_pass_height28 = load i64, i64* %_bound___second_pass_height
  %cast30 = sitofp i64 %_bound___second_pass_height28 to double
  %output31 = call double @"div@FF"(double %cast30, double %return20)
  store double %output31, double* %_bound___second_pass_active_y
  br label %end

false:                                            ; preds = %true
  store double 1.000000e+00, double* %_bound___second_pass_active_x
  store double 1.000000e+00, double* %_bound___second_pass_active_y
  br label %end
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"ceil@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"log@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"pow@FFF"(double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %__second_pass_width, i64 %__second_pass_height, i64 %__accum_numpt, double %__second_pass_active_x, double %__second_pass_active_y) #2 {
__llvm_entry:
  %"<__second_pass_height>" = alloca i64
  %"<__second_pass_active_x>" = alloca double
  %"<__second_pass_active_y>" = alloca double
  %0 = alloca i64
  %"<__second_pass_width>" = alloca i64
  store i64 %__second_pass_width, i64* %"<__second_pass_width>"
  store i64 %__second_pass_height, i64* %"<__second_pass_height>"
  store double %__second_pass_active_x, double* %"<__second_pass_active_x>"
  store double %__second_pass_active_y, double* %"<__second_pass_active_y>"
  store i64 %__accum_numpt, i64* %0
  call void @"__vex_snippet_snippet@IIIFF"(i64* %"<__second_pass_width>", i64* %"<__second_pass_height>", i64* %0, double* %"<__second_pass_active_x>", double* %"<__second_pass_active_y>")
  %evalue = load i64, i64* %"<__second_pass_width>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @3, i64 0, i64 0), i64 %evalue) #3
  %evalue2 = load i64, i64* %"<__second_pass_height>"
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @4, i64 0, i64 0), i64 %evalue2) #3
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @5, i64 0, i64 0), i64 %__accum_numpt) #3
  %evalue6 = load double, double* %"<__second_pass_active_x>"
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @6, i64 0, i64 0), double %evalue6) #3
  %evalue8 = load double, double* %"<__second_pass_active_y>"
  %gvalue9 = call double @"_export@FSF"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @7, i64 0, i64 0), double %evalue8) #3
  store i64 %gvalue, i64* @__second_pass_width
  store i64 %gvalue3, i64* @__second_pass_height
  store i64 %gvalue5, i64* @__accum_numpt
  store double %gvalue7, double* @__second_pass_active_x
  store double %gvalue9, double* @__second_pass_active_y
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

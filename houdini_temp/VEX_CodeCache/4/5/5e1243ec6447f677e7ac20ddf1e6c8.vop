;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"b\00"
@1 = private constant [11 x i8] c"attributes\00"
@2 = private constant [2 x i8] c" \00"
@3 = private constant [2 x i8] c"a\00"
@limitprimuv = external global <3 x double>
@limitprim = external global i64
@primnum = external global i64
@vtxnum = external global i64
@4 = private constant [12 x i8] c"limitprimuv\00"
@5 = private constant [10 x i8] c"limitprim\00"
@6 = private constant [8 x i8] c"primnum\00"
@7 = private constant [7 x i8] c"vtxnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VIII"(<3 x double>* %_bound_limitprimuv, i64* %_bound_limitprim, i64* %_bound_primnum, i64* %_bound_vtxnum) #0 {
__llvm_entry:
  %_bound_limitprimuv1 = load <3 x double>, <3 x double>* %_bound_limitprimuv
  %_bound_limitprim2 = load i64, i64* %_bound_limitprim
  %return = call double @"getcomp@FVI"(<3 x double> %_bound_limitprimuv1, i64 0)
  %return5 = call double @"getcomp@FVI"(<3 x double> %_bound_limitprimuv1, i64 1)
  %return6 = call { i64, i64, double, double } @"osd_lookuppatch@IIIFFIFF"(i64 1, i64 %_bound_limitprim2, double %return, double %return5)
  %output = extractvalue { i64, i64, double, double } %return6, 1
  %output8 = extractvalue { i64, i64, double, double } %return6, 2
  %output9 = extractvalue { i64, i64, double, double } %return6, 3
  %return10 = call i64 @"geoself@I"()
  %_bound_primnum11 = load i64, i64* %_bound_primnum
  %_bound_vtxnum12 = load i64, i64* %_bound_vtxnum
  %return14 = call i64 @"setvertexattrib@IISIII"(i64 %return10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %_bound_primnum11, i64 %_bound_vtxnum12, i64 %_bound_primnum11)
  %return15 = call i8* @"chs@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0))
  %return16 = call i8** @"split@[SSS"(i8* %return15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0))
  %return18 = call i64 @"len@I[S"(i8** %return16)
  br label %cond

cond:                                             ; preds = %end37, %__llvm_entry
  %__impl_foreach_index_1.0 = phi i64 [ 0, %__llvm_entry ], [ %output45, %end37 ]
  %return21 = call i64 @"lt@III"(i64 %__impl_foreach_index_1.0, i64 %return18)
  %0 = icmp ne i64 %return21, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return24 = call i8* @"getcomp@S[SI"(i8** %return16, i64 %__impl_foreach_index_1.0)
  %return25 = call i64 @"geoself@I"()
  %_bound_primnum26 = load i64, i64* %_bound_primnum
  %_bound_vtxnum27 = load i64, i64* %_bound_vtxnum
  %return29 = call i64 @"setvertexattrib@IISIII"(i64 %return25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), i64 %_bound_primnum26, i64 %_bound_vtxnum27, i64 %_bound_vtxnum27)
  %return34 = call { i64, double* } @"osd_limitsurfacevertex@IISIFF[F"(i64 1, i8* %return24, i64 %output, double %output8, double %output9)
  %return35 = extractvalue { i64, double* } %return34, 0
  %output36 = extractvalue { i64, double* } %return34, 1
  %1 = icmp ne i64 %return35, 0
  br i1 %1, label %true, label %end37

end:                                              ; preds = %cond
  ret void

true:                                             ; preds = %body
  %return38 = call i64 @"geoself@I"()
  %_bound_vtxnum40 = load i64, i64* %_bound_vtxnum
  %return41 = call i64 @"neg@II"(i64 1)
  %return43 = call i64 @"setvertexattrib@IISII[F"(i64 %return38, i8* %return24, i64 %_bound_vtxnum40, i64 %return41, double* %output36)
  br label %end37

end37:                                            ; preds = %true, %body
  %output45 = add i64 %__impl_foreach_index_1.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
declare { i64, i64, double, double } @"osd_lookuppatch@IIIFFIFF"(i64, i64, double, double) #2

; Function Attrs: nounwind
declare i64 @"geoself@I"() #2

; Function Attrs: nounwind
declare i64 @"setvertexattrib@IISIII"(i64, i8*, i64, i64, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8** @"split@[SSS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #1

; Function Attrs: nounwind
declare { i64, double* } @"osd_limitsurfacevertex@IISIFF[F"(i64, i8*, i64, double, double) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind
declare i64 @"setvertexattrib@IISII[F"(i64, i8*, i64, i64, double*) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %limitprimuv, i64 %limitprim, i64 %primnum, i64 %vtxnum) #2 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca i64
  store <3 x double> %limitprimuv, <3 x double>* %0
  store i64 %limitprim, i64* %1
  store i64 %primnum, i64* %2
  store i64 %vtxnum, i64* %3
  call void @"__vex_snippet_snippet@VIII"(<3 x double>* %0, i64* %1, i64* %2, i64* %3)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i64 0, i64 0), <3 x double> %limitprimuv) #3
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i64 0, i64 0), i64 %limitprim) #3
  %gvalue8 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @6, i64 0, i64 0), i64 %primnum) #3
  %gvalue10 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), i64 %vtxnum) #3
  store <3 x double> %gvalue, <3 x double>* @limitprimuv
  store i64 %gvalue6, i64* @limitprim
  store i64 %gvalue8, i64* @primnum
  store i64 %gvalue10, i64* @vtxnum
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0, i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

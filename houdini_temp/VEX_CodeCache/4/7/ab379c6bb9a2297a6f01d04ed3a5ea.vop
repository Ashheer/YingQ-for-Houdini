;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"tile\00"
@1 = private constant [1 x i8] zeroinitializer
@unreal_split_attr = external global i8*
@2 = private constant [18 x i8] c"unreal_split_attr\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@S"(i8** %_bound_unreal_split_attr) #0 {
__llvm_entry:
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0), i8** %_bound_unreal_split_attr
  ret void
}

; Function Attrs: nounwind
define void @__vex_snippet(i8* %unreal_split_attr) #1 {
__llvm_entry:
  %"<unreal_split_attr>" = alloca i8*
  store i8* %unreal_split_attr, i8** %"<unreal_split_attr>"
  call void @"__vex_snippet_snippet@S"(i8** %"<unreal_split_attr>")
  %evalue = load i8*, i8** %"<unreal_split_attr>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @2, i64 0, i64 0), i8* %evalue) #2
  store i8* %gvalue, i8** @unreal_split_attr
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

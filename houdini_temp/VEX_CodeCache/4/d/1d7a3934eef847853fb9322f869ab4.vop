;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [9 x i8] c"../scale\00"
@1 = private constant [13 x i8] c"../axisscale\00"
@2 = private constant [8 x i8] c"../seed\00"
@attrib0 = external global <3 x double>
@elemnum = external global i64
@3 = private constant [8 x i8] c"attrib0\00"
@4 = private constant [8 x i8] c"elemnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VI"(<3 x double>* %_bound_attrib0, i64* %_bound_elemnum) #0 {
__llvm_entry:
  %_bound_attrib01 = load <3 x double>, <3 x double>* %_bound_attrib0
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0))
  %return2 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0))
  %cast = call <3 x double> @"set@VF"(double %return)
  %output = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %return2)
  %_bound_elemnum3 = load i64, i64* %_bound_elemnum
  %cast4 = sitofp i64 %_bound_elemnum3 to double
  %return5 = call double @"chf@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  %return6 = call <3 x double> @"rand@VFF"(double %cast4, double %return5)
  %output7 = call <3 x double> @"mul@VV"(<3 x double> %output, <3 x double> %return6)
  %output8 = call <3 x double> @"add@VV"(<3 x double> %_bound_attrib01, <3 x double> %output7)
  store <3 x double> %output8, <3 x double>* %_bound_attrib0
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"rand@VFF"(double, double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %attrib0, i64 %elemnum) #2 {
__llvm_entry:
  %0 = alloca i64
  %"<attrib0>" = alloca <3 x double>
  store <3 x double> %attrib0, <3 x double>* %"<attrib0>"
  store i64 %elemnum, i64* %0
  call void @"__vex_snippet_snippet@VI"(<3 x double>* %"<attrib0>", i64* %0)
  %evalue = load <3 x double>, <3 x double>* %"<attrib0>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), i64 %elemnum) #3
  store <3 x double> %gvalue, <3 x double>* @attrib0
  store i64 %gvalue3, i64* @elemnum
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

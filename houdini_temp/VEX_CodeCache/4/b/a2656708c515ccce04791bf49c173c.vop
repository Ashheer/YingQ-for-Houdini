;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@ptnum = external global i64
@1 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_ptnum) #0 {
__llvm_entry:
  %return = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 0)
  %return1 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return, double 0.000000e+00, i64 1)
  %output = extractvalue { double, <3 x double> } %return1, 1
  %return3 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 1)
  %return5 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return3, double 0.000000e+00, i64 1)
  %output7 = extractvalue { double, <3 x double> } %return5, 1
  %return10 = call double @"distance@FVV"(<3 x double> %output, <3 x double> %output7)
  %return11 = call <3 x double> @"getpointbbox_size@VI"(i64 0)
  %return13 = call double @"getcomp@FVI"(<3 x double> %return11, i64 0)
  %output15 = fadd double %return13, %return10
  %return17 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return11, double %output15, i64 0)
  %output19 = extractvalue { double, <3 x double> } %return17, 1
  %return21 = call double @"getcomp@FVI"(<3 x double> %output19, i64 2)
  %output23 = fadd double %return21, %return10
  %return25 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output19, double %output23, i64 2)
  %output27 = extractvalue { double, <3 x double> } %return25, 1
  %return29 = call double @"getcomp@FVI"(<3 x double> %output27, i64 0)
  %output31 = call double @"div@FF"(double %return29, double %return10)
  %cast = fptosi double %output31 to i64
  %return33 = call double @"getcomp@FVI"(<3 x double> %output27, i64 2)
  %output35 = call double @"div@FF"(double %return33, double %return10)
  %cast36 = fptosi double %output35 to i64
  %_bound_ptnum39 = load i64, i64* %_bound_ptnum
  %return41 = call i64 @"lt@III"(i64 %_bound_ptnum39, i64 %cast)
  %output45 = mul i64 %cast, %cast36
  %output47 = sub i64 %output45, %cast
  %output48 = sub i64 %output47, 1
  %return49 = call i64 @"gt@III"(i64 %_bound_ptnum39, i64 %output48)
  %return50 = call i64 @"or@III"(i64 %return41, i64 %return49)
  %0 = icmp ne i64 %return50, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %ingroup.0 = phi i64 [ 1, %true ], [ 0, %__llvm_entry ]
  %_bound_ptnum51 = load i64, i64* %_bound_ptnum
  %return53 = call i64 @"mod@III"(i64 %_bound_ptnum51, i64 %cast)
  %return54 = call i64 @"eq@III"(i64 %return53, i64 0)
  %output59 = sub i64 %cast, 1
  %return60 = call i64 @"eq@III"(i64 %return53, i64 %output59)
  %return61 = call i64 @"or@III"(i64 %return54, i64 %return60)
  %1 = icmp ne i64 %return61, 0
  br i1 %1, label %true62, label %end63

true62:                                           ; preds = %end
  br label %end63

end63:                                            ; preds = %true62, %end
  %ingroup.1 = phi i64 [ 1, %true62 ], [ %ingroup.0, %end ]
  %return65 = call i64 @"eq@III"(i64 %ingroup.1, i64 1)
  %2 = icmp ne i64 %return65, 0
  br i1 %2, label %true66, label %end67

true66:                                           ; preds = %end63
  %_bound_ptnum68 = load i64, i64* %_bound_ptnum
  %return69 = call i64 @"removepoint@III"(i64 0, i64 %_bound_ptnum68)
  br label %end67

end67:                                            ; preds = %true66, %end63
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #3

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"getpointbbox_size@VI"(i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #3

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #3

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #3

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #3

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #3

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #3

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #3

; Function Attrs: nounwind
declare i64 @"removepoint@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum) #1 {
__llvm_entry:
  %0 = alloca i64
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i64 %ptnum) #4
  store i64 %gvalue, i64* @ptnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

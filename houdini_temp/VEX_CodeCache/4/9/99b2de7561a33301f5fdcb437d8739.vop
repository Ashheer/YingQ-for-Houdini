;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"rows\00"
@1 = private constant [5 x i8] c"cols\00"
@2 = private constant [8 x i8] c"channel\00"
@3 = private constant [3 x i8] c"Cd\00"
@4 = private constant [1 x i8] zeroinitializer
@ptnum = external global i64
@Cd = external global <3 x double>
@name = external global i8*
@5 = private constant [6 x i8] c"ptnum\00"
@6 = private constant [5 x i8] c"name\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVS"(i64* %_bound_ptnum, <3 x double>* %_bound_Cd, i8** %_bound_name) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  %_bound_ptnum3 = load i64, i64* %_bound_ptnum
  %return5 = call i64 @"mod@III"(i64 %_bound_ptnum3, i64 %return)
  %output = sub i64 %return, 1
  %return7 = call i64 @"eq@III"(i64 %return5, i64 %output)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return8 = call i64 @"neg@II"(i64 1)
  br label %end

false:                                            ; preds = %__llvm_entry
  %output10 = add i64 %_bound_ptnum3, 1
  br label %end

end:                                              ; preds = %false, %true
  %phi = phi i64 [ %return8, %true ], [ %output10, %false ]
  %_bound_ptnum11 = load i64, i64* %_bound_ptnum
  %return13 = call i64 @"mod@III"(i64 %_bound_ptnum11, i64 %return)
  %return14 = call i64 @"eq@III"(i64 %return13, i64 0)
  %1 = icmp ne i64 %return14, 0
  br i1 %1, label %true15, label %false16

true15:                                           ; preds = %end
  %return18 = call i64 @"neg@II"(i64 1)
  br label %end17

false16:                                          ; preds = %end
  %output20 = sub i64 %_bound_ptnum11, 1
  br label %end17

end17:                                            ; preds = %false16, %true15
  %phi21 = phi i64 [ %return18, %true15 ], [ %output20, %false16 ]
  %_bound_ptnum22 = load i64, i64* %_bound_ptnum
  %return24 = call i64 @"lt@III"(i64 %_bound_ptnum22, i64 %return)
  %2 = icmp ne i64 %return24, 0
  br i1 %2, label %true25, label %false26

true25:                                           ; preds = %end17
  %return28 = call i64 @"neg@II"(i64 1)
  br label %end27

false26:                                          ; preds = %end17
  %output31 = sub i64 %_bound_ptnum22, %return
  br label %end27

end27:                                            ; preds = %false26, %true25
  %phi32 = phi i64 [ %return28, %true25 ], [ %output31, %false26 ]
  %_bound_ptnum33 = load i64, i64* %_bound_ptnum
  %output36 = mul i64 %return, %return1
  %output38 = sub i64 %output36, %return
  %output39 = sub i64 %output38, 1
  %return40 = call i64 @"gt@III"(i64 %_bound_ptnum33, i64 %output39)
  %3 = icmp ne i64 %return40, 0
  br i1 %3, label %true41, label %false42

true41:                                           ; preds = %end27
  %return44 = call i64 @"neg@II"(i64 1)
  br label %end43

false42:                                          ; preds = %end27
  %output47 = add i64 %_bound_ptnum33, %return
  br label %end43

end43:                                            ; preds = %false42, %true41
  %phi48 = phi i64 [ %return44, %true41 ], [ %output47, %false42 ]
  %return50 = call i64 @"neg@II"(i64 1)
  %return51 = call i64 @"eq@III"(i64 %phi, i64 %return50)
  %4 = icmp ne i64 %return51, 0
  br i1 %4, label %end54, label %false53

false53:                                          ; preds = %end43
  %return56 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), i64 %phi)
  %return58 = call double @"getcomp@FVI"(<3 x double> %return56, i64 %return2)
  %return59 = call double @"rint@FF"(double %return58)
  %cast = fptosi double %return59 to i64
  %output60 = sub i64 1, %cast
  br label %end54

end54:                                            ; preds = %end43, %false53
  %phi61 = phi i64 [ %output60, %false53 ], [ 0, %end43 ]
  %return64 = call i64 @"eq@III"(i64 %phi21, i64 %return50)
  %5 = icmp ne i64 %return64, 0
  br i1 %5, label %end67, label %false66

false66:                                          ; preds = %end54
  %return69 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), i64 %phi21)
  %return71 = call double @"getcomp@FVI"(<3 x double> %return69, i64 %return2)
  %return72 = call double @"rint@FF"(double %return71)
  %cast73 = fptosi double %return72 to i64
  %output74 = sub i64 1, %cast73
  br label %end67

end67:                                            ; preds = %end54, %false66
  %phi75 = phi i64 [ %output74, %false66 ], [ 0, %end54 ]
  %return78 = call i64 @"eq@III"(i64 %phi48, i64 %return50)
  %6 = icmp ne i64 %return78, 0
  br i1 %6, label %end81, label %false80

false80:                                          ; preds = %end67
  %return83 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), i64 %phi48)
  %return85 = call double @"getcomp@FVI"(<3 x double> %return83, i64 %return2)
  %return86 = call double @"rint@FF"(double %return85)
  %cast87 = fptosi double %return86 to i64
  %output88 = sub i64 1, %cast87
  br label %end81

end81:                                            ; preds = %end67, %false80
  %phi89 = phi i64 [ %output88, %false80 ], [ 0, %end67 ]
  %return92 = call i64 @"eq@III"(i64 %phi32, i64 %return50)
  %7 = icmp ne i64 %return92, 0
  br i1 %7, label %end95, label %false94

false94:                                          ; preds = %end81
  %return97 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), i64 %phi32)
  %return99 = call double @"getcomp@FVI"(<3 x double> %return97, i64 %return2)
  %return100 = call double @"rint@FF"(double %return99)
  %cast101 = fptosi double %return100 to i64
  %output102 = sub i64 1, %cast101
  br label %end95

end95:                                            ; preds = %end81, %false94
  %phi103 = phi i64 [ %output102, %false94 ], [ 0, %end81 ]
  %return105 = call i64 @"eq@III"(i64 %phi103, i64 1)
  %8 = icmp ne i64 %return105, 0
  %.phi103 = select i1 %8, i64 1, i64 %phi103
  %return109 = call i64 @"eq@III"(i64 %phi61, i64 1)
  %9 = icmp ne i64 %return109, 0
  br i1 %9, label %true110, label %end111

true110:                                          ; preds = %end95
  br label %end111

end111:                                           ; preds = %true110, %end95
  %east.0 = phi i64 [ 2, %true110 ], [ %phi61, %end95 ]
  %return113 = call i64 @"eq@III"(i64 %phi75, i64 1)
  %10 = icmp ne i64 %return113, 0
  br i1 %10, label %true114, label %end115

true114:                                          ; preds = %end111
  br label %end115

end115:                                           ; preds = %true114, %end111
  %west.0 = phi i64 [ 8, %true114 ], [ %phi75, %end111 ]
  %return117 = call i64 @"eq@III"(i64 %phi89, i64 1)
  %11 = icmp ne i64 %return117, 0
  br i1 %11, label %true118, label %end119

true118:                                          ; preds = %end115
  br label %end119

end119:                                           ; preds = %true118, %end115
  %south.0 = phi i64 [ 4, %true118 ], [ %phi89, %end115 ]
  %output122 = add i64 %.phi103, %east.0
  %output124 = add i64 %output122, %south.0
  %output126 = add i64 %output124, %west.0
  %_bound_Cd127 = load <3 x double>, <3 x double>* %_bound_Cd
  %return129 = call double @"getcomp@FVI"(<3 x double> %_bound_Cd127, i64 %return2)
  %return130 = call double @"rint@FF"(double %return129)
  %return131 = fcmp oeq double %return130, 1.000000e+00
  %.output126 = select i1 %return131, i64 0, i64 %output126
  %return136 = call i8* @"itoa@SI"(i64 %.output126)
  store i8* %return136, i8** %_bound_name
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare double @"rint@FF"(double) #1

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %Cd, i8* %name) #2 {
__llvm_entry:
  %"<name>" = alloca i8*
  %0 = alloca i64
  %1 = alloca <3 x double>
  store i8* %name, i8** %"<name>"
  store i64 %ptnum, i64* %0
  store <3 x double> %Cd, <3 x double>* %1
  call void @"__vex_snippet_snippet@IVS"(i64* %0, <3 x double>* %1, i8** %"<name>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i64 0, i64 0), i64 %ptnum) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), <3 x double> %Cd) #3
  %evalue5 = load i8*, i8** %"<name>"
  %gvalue6 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i64 0, i64 0), i8* %evalue5) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue4, <3 x double>* @Cd
  store i8* %gvalue6, i8** @name
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @4, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

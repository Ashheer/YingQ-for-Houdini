;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [3 x i8] c"%s\00"
@2 = private constant [1 x i8] zeroinitializer
@pointList = external global i8*
@primnum = external global i64
@3 = private constant [10 x i8] c"pointList\00"
@4 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SI"(i8** %_bound_pointList, i64* %_bound_primnum) #0 {
__llvm_entry:
  %0 = alloca i64
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  store i64 %_bound_primnum1, i64* %0
  %serializePointIndices = call i8* @"serializePointIndices@SI"(i64* %0)
  store i8* %serializePointIndices, i8** %_bound_pointList
  ret void
}

; Function Attrs: alwaysinline nounwind
define private i8* @"serializePointIndices@SI"(i64* %primIndex) #0 {
__llvm_entry:
  %primIndex1 = load i64, i64* %primIndex
  %return = call i64 @"primvertexcount@III"(i64 0, i64 %primIndex1)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output14, %body ]
  %indices.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %__llvm_entry ], [ %output, %body ]
  %return4 = call i64 @"lt@III"(i64 %i.0, i64 %return)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return5 = call i64 @"geoself@I"()
  %return6 = call i64 @"geoself@I"()
  %primIndex7 = load i64, i64* %primIndex
  %return9 = call i64 @"vertexindex@IIII"(i64 %return6, i64 %primIndex7, i64 %i.0)
  %return10 = call i64 @"vertexpoint@III"(i64 %return5, i64 %return9)
  %output = call i64* @"push@[II"(i64* %indices.0, i64 %return10)
  %output14 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %return16 = call i64* @"sort@[I[I"(i64* %indices.0)
  %return18 = call i8* @"sprintf@SS:[I"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0), i64* %return16)
  ret i8* %return18
}

; Function Attrs: nounwind
declare i64 @"primvertexcount@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"geoself@I"() #1

; Function Attrs: nounwind
declare i64 @"vertexindex@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"vertexpoint@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64* @"push@[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64* @"sort@[I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i8* @"sprintf@SS:[I"(i8*, i64*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i8* %pointList, i64 %primnum) #1 {
__llvm_entry:
  %0 = alloca i64
  %"<pointList>" = alloca i8*
  store i8* %pointList, i8** %"<pointList>"
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@SI"(i8** %"<pointList>", i64* %0)
  %evalue = load i8*, i8** %"<pointList>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), i8* %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), i64 %primnum) #3
  store i8* %gvalue, i8** @pointList
  store i64 %gvalue3, i64* @primnum
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

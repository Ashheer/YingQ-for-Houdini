;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [3 x i8] c"id\00"
@2 = private constant [18 x i8] c"custom_data_in_pa\00"
@__occupied = external global i64
@id = external global i64
@pscale = external global double
@P_texture = external global <3 x double>
@3 = private constant [11 x i8] c"__occupied\00"
@4 = private constant [7 x i8] c"pscale\00"
@5 = private constant [10 x i8] c"P_texture\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIFV"(i64* %_bound___occupied, i64* %_bound_id, double* %_bound_pscale, <3 x double>* %_bound_P_texture) #0 {
__llvm_entry:
  store i64 1, i64* %_bound___occupied
  %_bound_id1 = load i64, i64* %_bound_id
  %return = call i64 @"findattribval@IISSII"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0), i64 %_bound_id1, i64 0)
  %return2 = call i64 @"neg@II"(i64 1)
  %return3 = call i64 @"eq@III"(i64 %return, i64 %return2)
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store i64 0, i64* %_bound___occupied
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @2, i64 0, i64 0))
  %return5 = call i64 @"eq@III"(i64 %return4, i64 0)
  %1 = icmp ne i64 %return5, 0
  br i1 %1, label %true6, label %false

end:                                              ; preds = %true6, %false, %__llvm_entry
  ret void

true6:                                            ; preds = %true
  store double 0.000000e+00, double* %_bound_pscale
  br label %end

false:                                            ; preds = %true
  store <3 x double> zeroinitializer, <3 x double>* %_bound_P_texture
  br label %end
}

; Function Attrs: nounwind
declare i64 @"findattribval@IISSII"(i64, i8*, i8*, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %__occupied, i64 %id, double %pscale, <3 x double> %P_texture) #1 {
__llvm_entry:
  %"<pscale>" = alloca double
  %"<P_texture>" = alloca <3 x double>
  %0 = alloca i64
  %"<__occupied>" = alloca i64
  store i64 %__occupied, i64* %"<__occupied>"
  store double %pscale, double* %"<pscale>"
  store <3 x double> %P_texture, <3 x double>* %"<P_texture>"
  store i64 %id, i64* %0
  call void @"__vex_snippet_snippet@IIFV"(i64* %"<__occupied>", i64* %0, double* %"<pscale>", <3 x double>* %"<P_texture>")
  %evalue = load i64, i64* %"<__occupied>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0), i64 %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0), i64 %id) #3
  %evalue4 = load double, double* %"<pscale>"
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0), double %evalue4) #3
  %evalue6 = load <3 x double>, <3 x double>* %"<P_texture>"
  %gvalue7 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i64 0, i64 0), <3 x double> %evalue6) #3
  store i64 %gvalue, i64* @__occupied
  store i64 %gvalue3, i64* @id
  store double %gvalue5, double* @pscale
  store <3 x double> %gvalue7, <3 x double>* @P_texture
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 -1, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

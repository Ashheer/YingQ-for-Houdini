;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@asd = external global double
@numpt = external global i64
@0 = private constant [4 x i8] c"asd\00"
@1 = private constant [6 x i8] c"numpt\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FI"(double* %_bound_asd, i64* %_bound_numpt) #0 {
__llvm_entry:
  %_bound_numpt1 = load i64, i64* %_bound_numpt
  %cast = sitofp i64 %_bound_numpt1 to double
  store double %cast, double* %_bound_asd
  ret void
}

; Function Attrs: nounwind
define void @__vex_snippet(double %asd, i64 %numpt) #1 {
__llvm_entry:
  %0 = alloca i64
  %"<asd>" = alloca double
  store double %asd, double* %"<asd>"
  store i64 %numpt, i64* %0
  call void @"__vex_snippet_snippet@FI"(double* %"<asd>", i64* %0)
  %evalue = load double, double* %"<asd>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i64 0, i64 0), double %evalue) #2
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i64 %numpt) #2
  store double %gvalue, double* @asd
  store i64 %gvalue3, i64* @numpt
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"N\00"
@1 = private constant [13 x i8] c"../eavewidth\00"
@2 = private constant [19 x i8] c"../flyrafter_ratio\00"
@ptnum = external global i64
@N = external global <3 x double>
@P = external global <3 x double>
@3 = private constant [6 x i8] c"ptnum\00"
@4 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVV"(i64* %_bound_ptnum, <3 x double>* %_bound_N, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64* @"pointprims@[III"(i64 0, i64 %_bound_ptnum1)
  %return2 = call i64 @"getcomp@I[II"(i64* %return, i64 0)
  %return4 = call <3 x double> @"prim@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return2)
  %return5 = call <3 x double> @"normalize@VV"(<3 x double> %return4)
  %_bound_N6 = load <3 x double>, <3 x double>* %_bound_N
  %return7 = call <3 x double> @"normalize@VV"(<3 x double> %_bound_N6)
  %return10 = call double @"dot@FVV"(<3 x double> %return7, <3 x double> %return5)
  %_bound_P11 = load <3 x double>, <3 x double>* %_bound_P
  %return12 = call double @"chf@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0))
  %return13 = call double @"chf@FS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @2, i64 0, i64 0))
  %output = fmul double %return12, %return13
  %cast = call <3 x double> @"set@VF"(double %output)
  %output15 = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %return7)
  %output18 = fmul double %return10, %return10
  %cast19 = call <3 x double> @"set@VF"(double %output18)
  %output20 = call <3 x double> @"div@VV"(<3 x double> %output15, <3 x double> %cast19)
  %output21 = call <3 x double> @"add@VV"(<3 x double> %_bound_P11, <3 x double> %output20)
  store <3 x double> %output21, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind
declare i64* @"pointprims@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"prim@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %N, <3 x double> %P) #1 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  store <3 x double> %N, <3 x double>* %1
  call void @"__vex_snippet_snippet@IVV"(i64* %0, <3 x double>* %1, <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %N) #3
  %evalue5 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), <3 x double> %evalue5) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue4, <3 x double>* @N
  store <3 x double> %gvalue6, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

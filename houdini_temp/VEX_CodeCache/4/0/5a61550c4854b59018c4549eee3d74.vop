;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [8 x i8] c"islegal\00"
@2 = private constant [4 x <2 x double>] [<2 x double> <double 0.000000e+00, double -1.000000e+00>, <2 x double> <double 1.000000e+00, double 0.000000e+00>, <2 x double> <double 0.000000e+00, double 1.000000e+00>, <2 x double> <double -1.000000e+00, double 0.000000e+00>]
@3 = private constant [6 x i8] c"legal\00"
@4 = private constant [5 x i8] c"tile\00"
@5 = private constant [6 x i8] c"badpt\00"
@6 = private constant [3 x i8] c"Cd\00"
@giveup = external global i64
@numpt = external global i64
@cols = external global i64
@rows = external global i64
@ntiles = external global i64
@7 = private constant [7 x i8] c"giveup\00"
@8 = private constant [6 x i8] c"numpt\00"
@9 = private constant [5 x i8] c"cols\00"
@10 = private constant [5 x i8] c"rows\00"
@11 = private constant [7 x i8] c"ntiles\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIIII"(i64* %_bound_giveup, i64* %_bound_numpt, i64* %_bound_cols, i64* %_bound_rows, i64* %_bound_ntiles) #0 {
__llvm_entry:
  %_bound_giveup1 = load i64, i64* %_bound_giveup
  %return = call i64 @"not@II"(i64 %_bound_giveup1)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return3 = call i64 @"npoints@II"(i64 1)
  %output = call i64* @"resize@[II"(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), i64 %return3)
  br label %cond

end:                                              ; preds = %end22, %true171, %__llvm_entry
  ret void

cond:                                             ; preds = %body, %true
  %i.0 = phi i64 [ 0, %true ], [ %output15, %body ]
  %rules.0 = phi i64* [ %output, %true ], [ %output13, %body ]
  %return5 = call i64 @"npoints@II"(i64 1)
  %return6 = call i64 @"lt@III"(i64 %i.0, i64 %return5)
  %1 = icmp ne i64 %return6, 0
  br i1 %1, label %body, label %end7

body:                                             ; preds = %cond
  %return10 = call i64 @"point@IISI"(i64 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i64 %i.0)
  %return11 = call { i64, i64* } @"setcomp@I[III"(i64* %rules.0, i64 %return10, i64 %i.0)
  %output13 = extractvalue { i64, i64* } %return11, 1
  %output15 = add i64 %i.0, 1
  br label %cond

end7:                                             ; preds = %cond
  br label %cond17

cond17:                                           ; preds = %end57, %end7
  %ncollapsed.0 = phi i64 [ 0, %end7 ], [ %ncollapsed.1, %end57 ]
  %i16.0 = phi i64 [ 0, %end7 ], [ %output167, %end57 ]
  %_bound_numpt20 = load i64, i64* %_bound_numpt
  %return21 = call i64 @"lt@III"(i64 %i16.0, i64 %_bound_numpt20)
  %2 = icmp ne i64 %return21, 0
  br i1 %2, label %body18, label %end22

body18:                                           ; preds = %cond17
  %_bound_cols25 = load i64, i64* %_bound_cols
  %output26 = call i64 @"div@II"(i64 %i16.0, i64 %_bound_cols25)
  %return29 = call i64 @"mod@III"(i64 %i16.0, i64 %_bound_cols25)
  %return31 = call i64* @"point@[IISI"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %i16.0)
  %return33 = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0), i64 %i16.0)
  %return35 = call i64 @"len@I[I"(i64* %return31)
  %return36 = call i64 @"eq@III"(i64 %return35, i64 0)
  %return38 = call i64 @"neg@II"(i64 1)
  %return39 = call i64 @"eq@III"(i64 %return33, i64 %return38)
  %return40 = call i64 @"and@III"(i64 %return36, i64 %return39)
  %3 = icmp ne i64 %return40, 0
  br i1 %3, label %true41, label %false

end22:                                            ; preds = %true41, %cond17
  %return169 = call i64 @"npoints@II"(i64 0)
  %return170 = call i64 @"eq@III"(i64 %ncollapsed.0, i64 %return169)
  %4 = icmp ne i64 %return170, 0
  br i1 %4, label %true171, label %end

true41:                                           ; preds = %body18
  store i64 1, i64* %_bound_giveup
  %return44 = call i64 @"setpointgroup@IISII"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i64 0, i64 0), i64 %i16.0, i64 1)
  %return46 = call i64 @"setpointattrib@IISIV"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @6, i64 0, i64 0), i64 %i16.0, <3 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>)
  br label %end22

false:                                            ; preds = %body18
  %return48 = call i64 @"ge@III"(i64 %return33, i64 0)
  %5 = icmp ne i64 %return48, 0
  br i1 %5, label %true49, label %end50

true49:                                           ; preds = %false
  %output52 = add i64 %ncollapsed.0, 1
  br label %end50

end50:                                            ; preds = %true49, %false
  %ncollapsed.1 = phi i64 [ %output52, %true49 ], [ %ncollapsed.0, %false ]
  br label %cond53

cond53:                                           ; preds = %iter58, %end50
  %ptlegal.0 = phi i64* [ %return31, %end50 ], [ %ptlegal.1, %iter58 ]
  %didx.0 = phi i64 [ 0, %end50 ], [ %output162, %iter58 ]
  %return56 = call i64 @"lt@III"(i64 %didx.0, i64 4)
  %6 = icmp ne i64 %return56, 0
  br i1 %6, label %body54, label %end57

body54:                                           ; preds = %cond53
  %return61 = call <2 x double> @"getcomp@U[UI"(<2 x double>* getelementptr inbounds ([4 x <2 x double>], [4 x <2 x double>]* @2, i64 0, i64 0), i64 %didx.0)
  %return62 = call double @"getcomp@FUI"(<2 x double> %return61, i64 0)
  %cast = fptosi double %return62 to i64
  %return66 = call double @"getcomp@FUI"(<2 x double> %return61, i64 1)
  %cast67 = fptosi double %return66 to i64
  %output70 = add i64 %output26, %cast67
  %return71 = call i64 @"lt@III"(i64 %output70, i64 0)
  %_bound_rows75 = load i64, i64* %_bound_rows
  %return76 = call i64 @"ge@III"(i64 %output70, i64 %_bound_rows75)
  %return77 = call i64 @"or@III"(i64 %return71, i64 %return76)
  %7 = icmp ne i64 %return77, 0
  br i1 %7, label %iter58, label %end79

end57:                                            ; preds = %cond53
  %return165 = call i64 @"setpointattrib@IISI[I"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %i16.0, i64* %ptlegal.0)
  %output167 = add i64 %i16.0, 1
  br label %cond17

iter58:                                           ; preds = %cond144, %end91, %end79, %body54
  %ptlegal.1 = phi i64* [ %ptlegal.0, %body54 ], [ %ptlegal.0, %end79 ], [ %ptlegal.2, %cond144 ], [ %ptlegal.0, %end91 ]
  %output162 = add i64 %didx.0, 1
  br label %cond53

end79:                                            ; preds = %body54
  %output82 = add i64 %return29, %cast
  %return83 = call i64 @"lt@III"(i64 %output82, i64 0)
  %_bound_cols87 = load i64, i64* %_bound_cols
  %return88 = call i64 @"ge@III"(i64 %output82, i64 %_bound_cols87)
  %return89 = call i64 @"or@III"(i64 %return83, i64 %return88)
  %8 = icmp ne i64 %return89, 0
  br i1 %8, label %iter58, label %end91

end91:                                            ; preds = %end79
  %output95 = mul i64 %_bound_cols87, %cast67
  %output96 = add i64 %i16.0, %output95
  %output98 = add i64 %output96, %cast
  %return100 = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0), i64 %output98)
  %return102 = call i64 @"ge@III"(i64 %return100, i64 0)
  %9 = icmp ne i64 %return102, 0
  br i1 %9, label %true103, label %iter58

true103:                                          ; preds = %end91
  %return106 = call i64 @"len@I[I"(i64* %ptlegal.0)
  br label %cond107

cond107:                                          ; preds = %end130, %true103
  %impossible.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %true103 ], [ %impossible.1, %end130 ]
  %__impl_foreach_index_4.0 = phi i64 [ 0, %true103 ], [ %output141, %end130 ]
  %return111 = call i64 @"lt@III"(i64 %__impl_foreach_index_4.0, i64 %return106)
  %10 = icmp ne i64 %return111, 0
  br i1 %10, label %body108, label %end112

body108:                                          ; preds = %cond107
  %return116 = call i64 @"getcomp@I[II"(i64* %ptlegal.0, i64 %__impl_foreach_index_4.0)
  %_bound_ntiles119 = load i64, i64* %_bound_ntiles
  %output120 = mul i64 %return116, %_bound_ntiles119
  %output121 = mul i64 %output120, 4
  %output123 = mul i64 %return100, 4
  %output124 = add i64 %output121, %output123
  %output126 = add i64 %output124, %didx.0
  %return127 = call i64 @"getcomp@I[II"(i64* %rules.0, i64 %output126)
  %return128 = call i64 @"eq@III"(i64 %return127, i64 0)
  %11 = icmp ne i64 %return128, 0
  br i1 %11, label %true129, label %end130

end112:                                           ; preds = %cond107
  %return143 = call i64 @"len@I[I"(i64* %impossible.0)
  br label %cond144

true129:                                          ; preds = %body108
  %return133 = call i64 @"find@I[II"(i64* %impossible.0, i64 %return116)
  %return134 = call i64 @"lt@III"(i64 %return133, i64 0)
  %12 = icmp ne i64 %return134, 0
  br i1 %12, label %true135, label %end130

end130:                                           ; preds = %true129, %true135, %body108
  %impossible.1 = phi i64* [ %output139, %true135 ], [ %impossible.0, %true129 ], [ %impossible.0, %body108 ]
  %output141 = add i64 %__impl_foreach_index_4.0, 1
  br label %cond107

true135:                                          ; preds = %true129
  %output139 = call i64* @"append@[II"(i64* %impossible.0, i64 %return116)
  br label %end130

cond144:                                          ; preds = %body145, %end112
  %ptlegal.2 = phi i64* [ %ptlegal.0, %end112 ], [ %output158, %body145 ]
  %__impl_foreach_index_5.0 = phi i64 [ 0, %end112 ], [ %output160, %body145 ]
  %return148 = call i64 @"lt@III"(i64 %__impl_foreach_index_5.0, i64 %return143)
  %13 = icmp ne i64 %return148, 0
  br i1 %13, label %body145, label %iter58

body145:                                          ; preds = %cond144
  %return153 = call i64 @"getcomp@I[II"(i64* %impossible.0, i64 %__impl_foreach_index_5.0)
  %return156 = call { i64, i64* } @"removevalue@I[II"(i64* %ptlegal.2, i64 %return153)
  %output158 = extractvalue { i64, i64* } %return156, 1
  %output160 = add i64 %__impl_foreach_index_5.0, 1
  br label %cond144

true171:                                          ; preds = %end22
  store i64 1, i64* %_bound_giveup
  br label %end
}

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64* @"resize@[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"div@II"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64* @"point@[IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"setpointgroup@IISII"(i64, i8*, i64, i64) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIV"(i64, i8*, i64, <3 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"getcomp@U[UI"(<2 x double>*, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64 @"find@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #2

; Function Attrs: nounwind
declare { i64, i64* } @"removevalue@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISI[I"(i64, i8*, i64, i64*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %giveup, i64 %numpt, i64 %cols, i64 %rows, i64 %ntiles) #2 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca i64
  %"<giveup>" = alloca i64
  store i64 %giveup, i64* %"<giveup>"
  store i64 %numpt, i64* %0
  store i64 %cols, i64* %1
  store i64 %rows, i64* %2
  store i64 %ntiles, i64* %3
  call void @"__vex_snippet_snippet@IIIII"(i64* %"<giveup>", i64* %0, i64* %1, i64* %2, i64* %3)
  %evalue = load i64, i64* %"<giveup>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), i64 %evalue) #3
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @8, i64 0, i64 0), i64 %numpt) #3
  %gvalue8 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i64 0, i64 0), i64 %cols) #3
  %gvalue10 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i64 0, i64 0), i64 %rows) #3
  %gvalue12 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @11, i64 0, i64 0), i64 %ntiles) #3
  store i64 %gvalue, i64* @giveup
  store i64 %gvalue6, i64* @numpt
  store i64 %gvalue8, i64* @cols
  store i64 %gvalue10, i64* @rows
  store i64 %gvalue12, i64* @ntiles
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, i64 0, i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

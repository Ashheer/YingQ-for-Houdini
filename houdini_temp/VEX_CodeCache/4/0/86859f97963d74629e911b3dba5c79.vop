;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [19 x i8] c"vex_selectiongroup\00"
@1 = private constant [17 x i8] c"dstpt_attribname\00"
@2 = private constant [7 x i8] c"closed\00"
@3 = private constant [2 x i8] c"P\00"
@4 = private constant [23 x i8] c"../normal3D_attribName\00"
@5 = private constant [14 x i8] c"../attribname\00"
@6 = private constant [4 x i8] c"add\00"
@opinput1_dstpt = external global i64
@ptnum = external global i64
@vtxnum = external global i64
@primnum = external global i64
@P = external global <3 x double>
@7 = private constant [15 x i8] c"opinput1_dstpt\00"
@8 = private constant [6 x i8] c"ptnum\00"
@9 = private constant [7 x i8] c"vtxnum\00"
@10 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIIIV"(i64* %_bound_opinput1_dstpt, i64* %_bound_ptnum, i64* %_bound_vtxnum, i64* %_bound_primnum, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_opinput1_dstpt1 = load i64, i64* %_bound_opinput1_dstpt
  %return = call i64 @"neg@II"(i64 1)
  %return2 = call i64 @"eq@III"(i64 %_bound_opinput1_dstpt1, i64 %return)
  %0 = icmp ne i64 %return2, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %end20, %end, %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %return3 = call i8* @"chs@SS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @0, i64 0, i64 0))
  %_bound_ptnum4 = load i64, i64* %_bound_ptnum
  %return6 = call i64 @"inedgegroup@IISII"(i64 0, i8* %return3, i64 %_bound_ptnum4, i64 %_bound_opinput1_dstpt1)
  %return7 = call i64 @"not@II"(i64 %return6)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %true, label %end9

end9:                                             ; preds = %end
  %_bound_ptnum10 = load i64, i64* %_bound_ptnum
  %return11 = call i64 @"pointvertex@III"(i64 0, i64 %_bound_ptnum10)
  br label %cond

cond:                                             ; preds = %iter, %end9
  %vertexnext.0 = phi i64 [ %return11, %end9 ], [ %return30, %iter ]
  %return14 = call i64 @"ne@III"(i64 %vertexnext.0, i64 %return)
  %2 = icmp ne i64 %return14, 0
  br i1 %2, label %body, label %end15

body:                                             ; preds = %cond
  %_bound_vtxnum17 = load i64, i64* %_bound_vtxnum
  %return18 = call i64 @"ge@III"(i64 %vertexnext.0, i64 %_bound_vtxnum17)
  %3 = icmp ne i64 %return18, 0
  br i1 %3, label %iter, label %end20

end15:                                            ; preds = %cond
  %_bound_vtxnum31 = load i64, i64* %_bound_vtxnum
  %return32 = call i64 @"vertexprimindex@III"(i64 0, i64 %_bound_vtxnum31)
  %_bound_primnum33 = load i64, i64* %_bound_primnum
  %return34 = call i64 @"primintrinsic@IISI"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), i64 %_bound_primnum33)
  %_bound_opinput1_dstpt35 = load i64, i64* %_bound_opinput1_dstpt
  %return36 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), i64 %_bound_opinput1_dstpt35)
  %_bound_P38 = load <3 x double>, <3 x double>* %_bound_P
  %output = call <3 x double> @"sub@VV"(<3 x double> %return36, <3 x double> %_bound_P38)
  %return39 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %return40 = call i8* @"chs@SS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @4, i64 0, i64 0))
  %_bound_ptnum41 = load i64, i64* %_bound_ptnum
  %return42 = call <3 x double> @"point@VISI"(i64 1, i8* %return40, i64 %_bound_ptnum41)
  %return45 = call <3 x double> @"cross@VVV"(<3 x double> %return42, <3 x double> %return39)
  %return46 = call <3 x double> @"normalize@VV"(<3 x double> %return45)
  %_bound_primnum47 = load i64, i64* %_bound_primnum
  %return48 = call i64 @"primvertexcount@III"(i64 0, i64 %_bound_primnum47)
  %return49 = call i8* @"chs@SS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @5, i64 0, i64 0))
  %_bound_ptnum50 = load i64, i64* %_bound_ptnum
  %return52 = call i64 @"eq@III"(i64 %return32, i64 0)
  %4 = icmp ne i64 %return52, 0
  br i1 %4, label %true53, label %end54

iter:                                             ; preds = %end20, %body
  %return30 = call i64 @"vertexnext@III"(i64 0, i64 %vertexnext.0)
  br label %cond

end20:                                            ; preds = %body
  %return21 = call i8* @"chs@SS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1, i64 0, i64 0))
  %return23 = call i64 @"vertex@IISI"(i64 1, i8* %return21, i64 %vertexnext.0)
  %_bound_opinput1_dstpt25 = load i64, i64* %_bound_opinput1_dstpt
  %return26 = call i64 @"eq@III"(i64 %return23, i64 %_bound_opinput1_dstpt25)
  %5 = icmp ne i64 %return26, 0
  br i1 %5, label %true, label %iter

true53:                                           ; preds = %end15
  %cast = call <3 x double> @"set@VI"(i64 2)
  %output56 = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %return46)
  br label %end54

end54:                                            ; preds = %end15, %true53
  %phi = phi <3 x double> [ %output56, %true53 ], [ %return46, %end15 ]
  %return58 = call i64 @"setpointattrib@IISIVS"(i64 0, i8* %return49, i64 %_bound_ptnum50, <3 x double> %phi, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @6, i64 0, i64 0))
  %_bound_opinput1_dstpt60 = load i64, i64* %_bound_opinput1_dstpt
  %output63 = sub i64 %return48, 2
  %output65 = add i64 %output63, %return34
  %return66 = call i64 @"eq@III"(i64 %return32, i64 %output65)
  %6 = icmp ne i64 %return66, 0
  br i1 %6, label %true67, label %end69

true67:                                           ; preds = %end54
  %cast71 = call <3 x double> @"set@VI"(i64 2)
  %output72 = call <3 x double> @"mul@VV"(<3 x double> %cast71, <3 x double> %return46)
  br label %end69

end69:                                            ; preds = %end54, %true67
  %phi74 = phi <3 x double> [ %output72, %true67 ], [ %return46, %end54 ]
  %return75 = call i64 @"setpointattrib@IISIVS"(i64 0, i8* %return49, i64 %_bound_opinput1_dstpt60, <3 x double> %phi74, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @6, i64 0, i64 0))
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end69, %true
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"inedgegroup@IISII"(i64, i8*, i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind
declare i64 @"pointvertex@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"vertex@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"vertexnext@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"vertexprimindex@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"primintrinsic@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"primvertexcount@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIVS"(i64, i8*, i64, <3 x double>, i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %opinput1_dstpt, i64 %ptnum, i64 %vtxnum, i64 %primnum, <3 x double> %P) #2 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca <3 x double>
  store i64 %opinput1_dstpt, i64* %0
  store i64 %ptnum, i64* %1
  store i64 %vtxnum, i64* %2
  store i64 %primnum, i64* %3
  store <3 x double> %P, <3 x double>* %4
  call void @"__vex_snippet_snippet@IIIIV"(i64* %0, i64* %1, i64* %2, i64* %3, <3 x double>* %4)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @7, i64 0, i64 0), i64 %opinput1_dstpt) #3
  %gvalue7 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @8, i64 0, i64 0), i64 %ptnum) #3
  %gvalue9 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @9, i64 0, i64 0), i64 %vtxnum) #3
  %gvalue11 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @10, i64 0, i64 0), i64 %primnum) #3
  %gvalue13 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %P) #3
  store i64 %gvalue, i64* @opinput1_dstpt
  store i64 %gvalue7, i64* @ptnum
  store i64 %gvalue9, i64* @vtxnum
  store i64 %gvalue11, i64* @primnum
  store <3 x double> %gvalue13, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, i64 0, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

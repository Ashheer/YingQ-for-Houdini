;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [10 x i8] c"long_edge\00"
@primnum = external global i64
@2 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_primnum) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64 @"primvertexcount@III"(i64 0, i64 %_bound_primnum1)
  %return3 = call i64 @"eq@III"(i64 %return, i64 3)
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %cond

end:                                              ; preds = %cond, %__llvm_entry
  ret void

cond:                                             ; preds = %end74, %true
  %i.0 = phi i64 [ 0, %true ], [ %output, %end74 ]
  %return6 = call i64 @"lt@III"(i64 %i.0, i64 %return)
  %1 = icmp ne i64 %return6, 0
  br i1 %1, label %body, label %end

body:                                             ; preds = %cond
  %_bound_primnum8 = load i64, i64* %_bound_primnum
  %return10 = call i64 @"vertexindex@IIII"(i64 0, i64 %_bound_primnum8, i64 %i.0)
  %return11 = call i64 @"vertexpoint@III"(i64 0, i64 %return10)
  %_bound_primnum12 = load i64, i64* %_bound_primnum
  %output = add i64 %i.0, 1
  %return15 = call i64 @"mod@III"(i64 %output, i64 %return)
  %return16 = call i64 @"vertexindex@IIII"(i64 0, i64 %_bound_primnum12, i64 %return15)
  %return17 = call i64 @"vertexpoint@III"(i64 0, i64 %return16)
  %_bound_primnum18 = load i64, i64* %_bound_primnum
  %output20 = sub i64 %i.0, 1
  %return22 = call i64 @"mod@III"(i64 %output20, i64 %return)
  %return23 = call i64 @"vertexindex@IIII"(i64 0, i64 %_bound_primnum18, i64 %return22)
  %return24 = call i64 @"vertexpoint@III"(i64 0, i64 %return23)
  %return26 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return24)
  %return28 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return11)
  %output29 = call <3 x double> @"sub@VV"(<3 x double> %return26, <3 x double> %return28)
  %return30 = call double @"length@FV"(<3 x double> %output29)
  %return32 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return17)
  %return34 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return11)
  %output35 = call <3 x double> @"sub@VV"(<3 x double> %return32, <3 x double> %return34)
  %return36 = call double @"length@FV"(<3 x double> %output35)
  %return38 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return17)
  %return40 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return24)
  %output41 = call <3 x double> @"sub@VV"(<3 x double> %return38, <3 x double> %return40)
  %return42 = call double @"length@FV"(<3 x double> %output41)
  %return45 = call double @"max@FFF"(double %return30, double %return36)
  %return47 = call double @"max@FFF"(double %return45, double %return42)
  %output49 = fadd double %return30, 1.000000e-05
  %return51 = fcmp oge double %output49, %return47
  br i1 %return51, label %true53, label %end54

true53:                                           ; preds = %body
  %return57 = call i64 @"setedgegroup@IISIII"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), i64 %return24, i64 %return11, i64 1)
  br label %end54

end54:                                            ; preds = %true53, %body
  %output59 = fadd double %return36, 1.000000e-05
  %return61 = fcmp oge double %output59, %return47
  br i1 %return61, label %true63, label %end64

true63:                                           ; preds = %end54
  %return67 = call i64 @"setedgegroup@IISIII"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), i64 %return17, i64 %return11, i64 1)
  br label %end64

end64:                                            ; preds = %true63, %end54
  %output69 = fadd double %return42, 1.000000e-05
  %return71 = fcmp oge double %output69, %return47
  br i1 %return71, label %true73, label %end74

true73:                                           ; preds = %end64
  %return77 = call i64 @"setedgegroup@IISIII"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), i64 %return17, i64 %return24, i64 1)
  br label %end74

end74:                                            ; preds = %true73, %end64
  br label %cond
}

; Function Attrs: nounwind
declare i64 @"primvertexcount@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"vertexindex@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"vertexpoint@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #2

; Function Attrs: nounwind
declare i64 @"setedgegroup@IISIII"(i64, i8*, i64, i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum) #1 {
__llvm_entry:
  %0 = alloca i64
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i64 %primnum) #3
  store i64 %gvalue, i64* @primnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

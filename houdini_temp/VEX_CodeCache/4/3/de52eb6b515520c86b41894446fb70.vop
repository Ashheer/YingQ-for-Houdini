;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [8 x i8] c"maxdist\00"
@ptlist = external global i64*
@P = external global <3 x double>
@3 = private constant [7 x i8] c"ptlist\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[IV"(i64** %_bound_ptlist, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_ptlist1 = load i64*, i64** %_bound_ptlist
  %cast = call <3 x double> @"set@VI"(i64 0)
  %return = call i64 @"len@I[I"(i64* %_bound_ptlist1)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %__impl_foreach_index_c.0 = phi i64 [ 0, %__llvm_entry ], [ %output14, %body ]
  %center.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %output, %body ]
  %return5 = call i64 @"lt@III"(i64 %__impl_foreach_index_c.0, i64 %return)
  %0 = icmp ne i64 %return5, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return8 = call i64 @"getcomp@I[II"(i64* %_bound_ptlist1, i64 %__impl_foreach_index_c.0)
  %return10 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return8)
  %output = call <3 x double> @"add@VV"(<3 x double> %center.0, <3 x double> %return10)
  %output14 = add i64 %__impl_foreach_index_c.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast18 = call <3 x double> @"set@VI"(i64 %return)
  %output19 = call <3 x double> @"div@VV"(<3 x double> %center.0, <3 x double> %cast18)
  %return23 = call double @"ch@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  %return24 = call { double, i64, <3 x double> } @"xyzdist@FIVIVF"(i64 1, <3 x double> %output19, double %return23)
  %output26 = extractvalue { double, i64, <3 x double> } %return24, 1
  %output27 = extractvalue { double, i64, <3 x double> } %return24, 2
  %return30 = call <3 x double> @"primuv@VISIV"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %output26, <3 x double> %output27)
  store <3 x double> %return30, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare { double, i64, <3 x double> } @"xyzdist@FIVIVF"(i64, <3 x double>, double) #2

; Function Attrs: nounwind
declare <3 x double> @"primuv@VISIV"(i64, i8*, i64, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64* %ptlist, <3 x double> %P) #2 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i64*
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64* %ptlist, i64** %0
  call void @"__vex_snippet_snippet@[IV"(i64** %0, <3 x double>* %"<P>")
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), i64* %ptlist) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue2) #3
  store i64* %gvalue, i64** @ptlist
  store <3 x double> %gvalue3, <3 x double>* @P
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

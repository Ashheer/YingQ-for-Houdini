;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"pointList\00"
@1 = private constant [10 x i8] c"primitive\00"
@primnum = external global i64
@coun = external global i64
@2 = private constant [8 x i8] c"primnum\00"
@3 = private constant [5 x i8] c"coun\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound_primnum, i64* %_bound_coun) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i8* @"prim@SISI"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), i64 %_bound_primnum1)
  %return3 = call i64 @"findattribvalcount@IISSS"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), i8* %return)
  ret void
}

; Function Attrs: nounwind
declare i8* @"prim@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"findattribvalcount@IISSS"(i64, i8*, i8*, i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, i64 %coun) #1 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  store i64 %primnum, i64* %0
  store i64 %coun, i64* %1
  call void @"__vex_snippet_snippet@II"(i64* %0, i64* %1)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i64 %primnum) #2
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), i64 %coun) #2
  store i64 %gvalue, i64* @primnum
  store i64 %gvalue4, i64* @coun
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

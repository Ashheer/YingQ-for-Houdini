;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [13 x i8] c"Min_Distance\00"
@1 = private constant [13 x i8] c"Max_Distance\00"
@2 = private constant [2 x i8] c"P\00"
@3 = private constant [3 x i8] c"uv\00"
@4 = private constant [15 x i8] c"Remap_Distance\00"
@P = external global <3 x double>
@d = external global double
@5 = private constant [2 x i8] c"d\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VF"(<3 x double>* %_bound_P, double* %_bound_d) #0 {
__llvm_entry:
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0))
  %return1 = call double @"chf@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0))
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %return3 = call <3 x double> @"uvsample@VISSV"(i64 2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), <3 x double> %_bound_P2)
  %return5 = call i64 @"nearpoint@IIV"(i64 1, <3 x double> %return3)
  %return7 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), i64 %return5)
  %return10 = call double @"distance@FVV"(<3 x double> %return7, <3 x double> %return3)
  %return14 = call double @"fit@FFFFFF"(double %return10, double %return, double %return1, double 0.000000e+00, double 1.000000e+00)
  %return16 = call double @"chramp@FSF"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @4, i64 0, i64 0), double %return14)
  store double %return16, double* %_bound_d
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"uvsample@VISSV"(i64, i8*, i8*, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"nearpoint@IIV"(i64, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #2

; Function Attrs: nounwind readnone
declare double @"chramp@FSF"(i8*, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, double %d) #2 {
__llvm_entry:
  %"<d>" = alloca double
  %0 = alloca <3 x double>
  store double %d, double* %"<d>"
  store <3 x double> %P, <3 x double>* %0
  call void @"__vex_snippet_snippet@VF"(<3 x double>* %0, double* %"<d>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %P) #3
  %evalue2 = load double, double* %"<d>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), double %evalue2) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store double %gvalue3, double* @d
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

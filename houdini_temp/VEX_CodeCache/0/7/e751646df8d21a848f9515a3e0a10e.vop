;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"order\00"
@1 = private constant [11 x i8] c"outputtype\00"
@2 = private constant [6 x i8] c"nurbs\00"
@3 = private constant [7 x i8] c"closed\00"
@4 = private constant [2 x i8] c"P\00"
@5 = private constant [125 x i8] c"Output contains NURBs Curves with repeated end-points. These end-points may have been duplicated due to underdefined curves.\00"
@primnum = external global i64
@6 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_primnum) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0))
  %return1 = call i8* @"chs@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0))
  %_bound_primnum2 = load i64, i64* %_bound_primnum
  %return3 = call i64 @"primvertexcount@III"(i64 0, i64 %_bound_primnum2)
  %return5 = call i64 @"eq@ISS"(i8* %return1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0))
  %0 = icmp ne i64 %return5, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_primnum6 = load i64, i64* %_bound_primnum
  %return7 = call i64 @"primintrinsic@IISI"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), i64 %_bound_primnum6)
  %1 = icmp ne i64 %return7, 0
  %_bound_primnum11 = load i64, i64* %_bound_primnum
  br i1 %1, label %true9, label %false

end:                                              ; preds = %end10, %true87, %__llvm_entry
  ret void

true9:                                            ; preds = %true
  %return12 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum11, i64 0)
  %return14 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), i64 %return12)
  %output = sub i64 %return3, 1
  br label %cond

false:                                            ; preds = %true
  %output42 = sub i64 %return3, 1
  %return43 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum11, i64 %output42)
  %return45 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), i64 %return43)
  %output48 = sub i64 %return3, 2
  br label %cond49

end10:                                            ; preds = %body50, %cond49, %body, %cond
  %dups.0 = phi i64 [ %dups.1, %body ], [ %dups.1, %cond ], [ %dups.2, %body50 ], [ %dups.2, %cond49 ]
  %return79 = call i64 @"gt@III"(i64 %dups.0, i64 0)
  %return81 = call i64 @"gt@III"(i64 %return3, i64 0)
  %return84 = call i64 @"lt@III"(i64 %return3, i64 %return)
  %return85 = call i64 @"and@III"(i64 %return81, i64 %return84)
  %return86 = call i64 @"or@III"(i64 %return79, i64 %return85)
  %2 = icmp ne i64 %return86, 0
  br i1 %2, label %true87, label %end

cond:                                             ; preds = %true33, %true9
  %i.0 = phi i64 [ %output, %true9 ], [ %output39, %true33 ]
  %dups.1 = phi i64 [ 0, %true9 ], [ %output37, %true33 ]
  %return17 = call i64 @"ge@III"(i64 %i.0, i64 0)
  %3 = icmp ne i64 %return17, 0
  br i1 %3, label %body, label %end10

body:                                             ; preds = %cond
  %_bound_primnum19 = load i64, i64* %_bound_primnum
  %return21 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum19, i64 %i.0)
  %return23 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), i64 %return21)
  %output26 = call <3 x double> @"sub@VV"(<3 x double> %return14, <3 x double> %return23)
  %return27 = call double @"length2@FV"(<3 x double> %output26)
  %return31 = fcmp ole double %return27, 0x3DDB7CDFD9D7BDBC
  br i1 %return31, label %true33, label %end10

true33:                                           ; preds = %body
  %output37 = add i64 %dups.1, 1
  %output39 = sub i64 %i.0, 1
  br label %cond

cond49:                                           ; preds = %true71, %false
  %i46.0 = phi i64 [ %output48, %false ], [ %output77, %true71 ]
  %dups.2 = phi i64 [ 0, %false ], [ %output75, %true71 ]
  %return52 = call i64 @"ge@III"(i64 %i46.0, i64 0)
  %4 = icmp ne i64 %return52, 0
  br i1 %4, label %body50, label %end10

body50:                                           ; preds = %cond49
  %_bound_primnum56 = load i64, i64* %_bound_primnum
  %return58 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum56, i64 %i46.0)
  %return61 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), i64 %return58)
  %output64 = call <3 x double> @"sub@VV"(<3 x double> %return45, <3 x double> %return61)
  %return65 = call double @"length2@FV"(<3 x double> %output64)
  %return69 = fcmp ole double %return65, 0x3DDB7CDFD9D7BDBC
  br i1 %return69, label %true71, label %end10

true71:                                           ; preds = %body50
  %output75 = add i64 %dups.2, 1
  %output77 = sub i64 %i46.0, 1
  br label %cond49

true87:                                           ; preds = %end10
  call void @"warning@S"(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @5, i64 0, i64 0))
  br label %end
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"primvertexcount@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i64 @"primintrinsic@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"primpoint@IIII"(i64, i64, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"length2@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind
declare void @"warning@S"(i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum) #2 {
__llvm_entry:
  %0 = alloca i64
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @6, i64 0, i64 0), i64 %primnum) #3
  store i64 %gvalue, i64* @primnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

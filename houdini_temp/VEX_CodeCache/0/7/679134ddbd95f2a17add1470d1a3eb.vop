;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@N = external global <3 x double>
@opinput1_N = external global <3 x double>
@P = external global <3 x double>
@up = external global <3 x double>
@0 = private constant [2 x i8] c"N\00"
@1 = private constant [11 x i8] c"opinput1_N\00"
@2 = private constant [2 x i8] c"P\00"
@3 = private constant [3 x i8] c"up\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVVV"(<3 x double>* %_bound_N, <3 x double>* %_bound_opinput1_N, <3 x double>* %_bound_P, <3 x double>* %_bound_up) #0 {
__llvm_entry:
  %_bound_N1 = load <3 x double>, <3 x double>* %_bound_N
  %_bound_opinput1_N3 = load <3 x double>, <3 x double>* %_bound_opinput1_N
  %return = call double @"dot@FVV"(<3 x double> %_bound_N1, <3 x double> %_bound_opinput1_N3)
  %return4 = fcmp ogt double %return, 0.000000e+00
  %return6 = call i64 @"neg@II"(i64 1)
  %return7 = select i1 %return4, i64 %return6, i64 1
  %cast = call <3 x double> @"set@VI"(i64 %return7)
  %output = call <3 x double> @"mul@VV"(<3 x double> %_bound_N1, <3 x double> %cast)
  store <3 x double> %output, <3 x double>* %_bound_N
  %_bound_P8 = load <3 x double>, <3 x double>* %_bound_P
  %return10 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %cast11 = call <3 x double> @"set@VF"(double 1.000000e-02)
  %output12 = call <3 x double> @"mul@VV"(<3 x double> %cast11, <3 x double> %return10)
  %_bound_up13 = load <3 x double>, <3 x double>* %_bound_up
  %return14 = call <3 x double> @"normalize@VV"(<3 x double> %_bound_up13)
  %cast15 = call <3 x double> @"set@VI"(i64 10)
  %output16 = call <3 x double> @"mul@VV"(<3 x double> %cast15, <3 x double> %return14)
  %output17 = call <3 x double> @"add@VV"(<3 x double> %output12, <3 x double> %output16)
  %output18 = call <3 x double> @"add@VV"(<3 x double> %_bound_P8, <3 x double> %output17)
  store <3 x double> %output18, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %N, <3 x double> %opinput1_N, <3 x double> %P, <3 x double> %up) #1 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %"<N>" = alloca <3 x double>
  store <3 x double> %N, <3 x double>* %"<N>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %opinput1_N, <3 x double>* %0
  store <3 x double> %up, <3 x double>* %1
  call void @"__vex_snippet_snippet@VVVV"(<3 x double>* %"<N>", <3 x double>* %0, <3 x double>* %"<P>", <3 x double>* %1)
  %evalue = load <3 x double>, <3 x double>* %"<N>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0), <3 x double> %opinput1_N) #3
  %evalue5 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %evalue5) #3
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), <3 x double> %up) #3
  store <3 x double> %gvalue, <3 x double>* @N
  store <3 x double> %gvalue4, <3 x double>* @opinput1_N
  store <3 x double> %gvalue6, <3 x double>* @P
  store <3 x double> %gvalue8, <3 x double>* @up
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [9 x i8] c"../dopts\00"
@1 = private constant [10 x i8] c"../maxpts\00"
@2 = private constant [14 x i8] c"../coverinput\00"
@3 = private constant [32 x i8] c"not support neighbour count > 2\00"
@4 = private constant [35 x i8] c"\E6\9A\82\E4\B8\8D\E6\94\AF\E6\8C\81\E5\A4\A7\E4\BA\8E2\E6\95\B0\E9\87\8F\E7\9A\84\E9\82\BB\E5\B1\85\00"
@5 = private constant [2 x i8] c"P\00"
@ptnum = external global i64
@pointprim = external global i64
@ndot = external global double
@ndir = external global <3 x double>
@P = external global <3 x double>
@6 = private constant [6 x i8] c"ptnum\00"
@7 = private constant [10 x i8] c"pointprim\00"
@8 = private constant [5 x i8] c"ndot\00"
@9 = private constant [5 x i8] c"ndir\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIFVV"(i64* %_bound_ptnum, i64* %_bound_pointprim, double* %_bound_ndot, <3 x double>* %_bound_ndir, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64 @"pointvertex@III"(i64 0, i64 %_bound_ptnum1)
  %return3 = call i64 @"vertexprim@III"(i64 0, i64 %return)
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return6 = call i64 @"primvertexcount@III"(i64 0, i64 %return3)
  %return7 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0))
  %return8 = call i64 @"le@III"(i64 %return6, i64 %return7)
  %1 = icmp ne i64 %return8, 0
  br i1 %1, label %true9, label %end

end:                                              ; preds = %true, %__llvm_entry
  %return11 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @2, i64 0, i64 0))
  %2 = icmp ne i64 %return11, 0
  br i1 %2, label %true12, label %end13

true9:                                            ; preds = %false, %true40, %true36, %true
  br label %UnifiedReturnBlock

true12:                                           ; preds = %end
  store i64 %return3, i64* %_bound_pointprim
  br label %end13

end13:                                            ; preds = %true12, %end
  %_bound_ptnum15 = load i64, i64* %_bound_ptnum
  %return16 = call i64* @"neighbours@[III"(i64 0, i64 %_bound_ptnum15)
  %return18 = call i64 @"len@I[I"(i64* %return16)
  %return20 = call i64 @"gt@III"(i64 %return18, i64 2)
  %3 = icmp ne i64 %return20, 0
  br i1 %3, label %true21, label %end22

true21:                                           ; preds = %end13
  call void @"error@S"(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @3, i64 0, i64 0))
  call void @"error@S"(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @4, i64 0, i64 0))
  br label %UnifiedReturnBlock

end22:                                            ; preds = %end13
  %return24 = call i64 @"eq@III"(i64 %return18, i64 0)
  %4 = icmp ne i64 %return24, 0
  br i1 %4, label %true25, label %end26

true25:                                           ; preds = %end22
  store double 0.000000e+00, double* %_bound_ndot
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %_bound_ndir
  br label %UnifiedReturnBlock

end26:                                            ; preds = %end22
  %return28 = call i64 @"getcomp@I[II"(i64* %return16, i64 0)
  %return29 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), i64 %return28)
  %_bound_P31 = load <3 x double>, <3 x double>* %_bound_P
  %output = call <3 x double> @"sub@VV"(<3 x double> %return29, <3 x double> %_bound_P31)
  %return32 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  store <3 x double> %return32, <3 x double>* %_bound_ndir
  %return35 = call i64 @"eq@III"(i64 %return18, i64 1)
  %5 = icmp ne i64 %return35, 0
  br i1 %5, label %true36, label %false

true36:                                           ; preds = %end26
  store double 2.000000e+00, double* %_bound_ndot
  br label %true9

false:                                            ; preds = %end26
  %return39 = call i64 @"eq@III"(i64 %return18, i64 2)
  %6 = icmp ne i64 %return39, 0
  br i1 %6, label %true40, label %true9

true40:                                           ; preds = %false
  %return43 = call i64 @"getcomp@I[II"(i64* %return16, i64 1)
  %return44 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), i64 %return43)
  %_bound_P46 = load <3 x double>, <3 x double>* %_bound_P
  %output47 = call <3 x double> @"sub@VV"(<3 x double> %return44, <3 x double> %_bound_P46)
  %return48 = call <3 x double> @"normalize@VV"(<3 x double> %output47)
  %return51 = call double @"dot@FVV"(<3 x double> %return32, <3 x double> %return48)
  store double %return51, double* %_bound_ndot
  br label %true9

UnifiedReturnBlock:                               ; preds = %true25, %true21, %true9
  ret void
}

; Function Attrs: nounwind
declare i64 @"pointvertex@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"vertexprim@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind
declare i64 @"primvertexcount@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"le@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #2

; Function Attrs: nounwind
declare void @"error@S"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64 %pointprim, double %ndot, <3 x double> %ndir, <3 x double> %P) #1 {
__llvm_entry:
  %"<pointprim>" = alloca i64
  %"<ndot>" = alloca double
  %"<ndir>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca <3 x double>
  store i64 %pointprim, i64* %"<pointprim>"
  store double %ndot, double* %"<ndot>"
  store <3 x double> %ndir, <3 x double>* %"<ndir>"
  store i64 %ptnum, i64* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@IIFVV"(i64* %0, i64* %"<pointprim>", double* %"<ndot>", <3 x double>* %"<ndir>", <3 x double>* %1)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i64 0, i64 0), i64 %ptnum) #3
  %evalue3 = load i64, i64* %"<pointprim>"
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @7, i64 0, i64 0), i64 %evalue3) #3
  %evalue5 = load double, double* %"<ndot>"
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0), double %evalue5) #3
  %evalue7 = load <3 x double>, <3 x double>* %"<ndir>"
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i64 0, i64 0), <3 x double> %evalue7) #3
  %gvalue10 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), <3 x double> %P) #3
  store i64 %gvalue, i64* @ptnum
  store i64 %gvalue4, i64* @pointprim
  store double %gvalue6, double* @ndot
  store <3 x double> %gvalue8, <3 x double>* @ndir
  store <3 x double> %gvalue10, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, double 0.000000e+00, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

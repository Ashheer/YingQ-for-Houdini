;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [8 x i8] c"PROFILE\00"
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [5 x i8] c"prim\00"
@3 = private constant [2 x i8] c"N\00"
@PROFILE = external global i64
@P = external global <3 x double>
@N = external global <3 x double>

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVV"(i64* %_bound_PROFILE, <3 x double>* %_bound_P, <3 x double>* %_bound_N) #0 {
__llvm_entry:
  %return = call i64 @"prim@IISI"(i64 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0), i64 0)
  store i64 %return, i64* %_bound_PROFILE
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return2 = call { double, i64, <3 x double> } @"xyzdist@FIVIV"(i64 1, <3 x double> %_bound_P1)
  %output = extractvalue { double, i64, <3 x double> } %return2, 1
  %output4 = extractvalue { double, i64, <3 x double> } %return2, 2
  %return7 = call <3 x double> @"primuv@VISIV"(i64 2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %output, <3 x double> %output4)
  store <3 x double> %return7, <3 x double>* %_bound_P
  %_bound_PROFILE8 = load i64, i64* %_bound_PROFILE
  %return9 = call i64 @"findattribval@IISSII"(i64 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0), i64 %_bound_PROFILE8, i64 0)
  %return11 = call i64* @"primpoints@[III"(i64 3, i64 %return9)
  %return13 = call i64 @"getcomp@I[II"(i64* %return11, i64 0)
  %return14 = call <3 x double> @"point@VISI"(i64 3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), i64 %return13)
  %return15 = call <3 x double> @"neg@VV"(<3 x double> %return14)
  store <3 x double> %return15, <3 x double>* %_bound_N
  ret void
}

; Function Attrs: nounwind
declare i64 @"prim@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare { double, i64, <3 x double> } @"xyzdist@FIVIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"primuv@VISIV"(i64, i8*, i64, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"findattribval@IISSII"(i64, i8*, i8*, i64, i64) #1

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %PROFILE, <3 x double> %P, <3 x double> %N) #1 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %"<N>" = alloca <3 x double>
  %"<PROFILE>" = alloca i64
  store i64 %PROFILE, i64* %"<PROFILE>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %N, <3 x double>* %"<N>"
  call void @"__vex_snippet_snippet@IVV"(i64* %"<PROFILE>", <3 x double>* %"<P>", <3 x double>* %"<N>")
  %evalue = load i64, i64* %"<PROFILE>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0), i64 %evalue) #3
  %evalue1 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue2 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue1) #3
  %evalue3 = load <3 x double>, <3 x double>* %"<N>"
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %evalue3) #3
  store i64 %gvalue, i64* @PROFILE
  store <3 x double> %gvalue2, <3 x double>* @P
  store <3 x double> %gvalue4, <3 x double>* @N
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"N\00"
@tangentu = external global <3 x double>
@tangentv = external global <3 x double>
@ptnum = external global i64
@N = external global <3 x double>
@Cd = external global <3 x double>
@1 = private constant [9 x i8] c"tangentu\00"
@2 = private constant [9 x i8] c"tangentv\00"
@3 = private constant [6 x i8] c"ptnum\00"
@4 = private constant [3 x i8] c"Cd\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVIVV"(<3 x double>* %_bound_tangentu, <3 x double>* %_bound_tangentv, i64* %_bound_ptnum, <3 x double>* %_bound_N, <3 x double>* %_bound_Cd) #0 {
__llvm_entry:
  %_bound_tangentu1 = load <3 x double>, <3 x double>* %_bound_tangentu
  %_bound_tangentv2 = load <3 x double>, <3 x double>* %_bound_tangentv
  %return = call <3 x double> @"cross@VVV"(<3 x double> %_bound_tangentu1, <3 x double> %_bound_tangentv2)
  %_bound_ptnum4 = load i64, i64* %_bound_ptnum
  %return5 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %_bound_ptnum4)
  %_bound_tangentu7 = load <3 x double>, <3 x double>* %_bound_tangentu
  %return8 = call double @"dot@FVV"(<3 x double> %return5, <3 x double> %_bound_tangentu7)
  %_bound_tangentv10 = load <3 x double>, <3 x double>* %_bound_tangentv
  %return11 = call double @"dot@FVV"(<3 x double> %return5, <3 x double> %_bound_tangentv10)
  %_bound_N13 = load <3 x double>, <3 x double>* %_bound_N
  %return14 = call double @"dot@FVV"(<3 x double> %return5, <3 x double> %_bound_N13)
  %return15 = call <3 x double> @"set@VFFF"(double %return8, double %return11, double %return14)
  %return16 = call <3 x double> @"normalize@VV"(<3 x double> %return15)
  %cast = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output = call <3 x double> @"mul@VV"(<3 x double> %return16, <3 x double> %cast)
  %output19 = call <3 x double> @"add@VV"(<3 x double> %output, <3 x double> %cast)
  store <3 x double> %output19, <3 x double>* %_bound_Cd
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %tangentu, <3 x double> %tangentv, i64 %ptnum, <3 x double> %N, <3 x double> %Cd) #1 {
__llvm_entry:
  %"<Cd>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca i64
  %3 = alloca <3 x double>
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store <3 x double> %tangentu, <3 x double>* %0
  store <3 x double> %tangentv, <3 x double>* %1
  store i64 %ptnum, i64* %2
  store <3 x double> %N, <3 x double>* %3
  call void @"__vex_snippet_snippet@VVIVV"(<3 x double>* %0, <3 x double>* %1, i64* %2, <3 x double>* %3, <3 x double>* %"<Cd>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0), <3 x double> %tangentu) #3
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), <3 x double> %tangentv) #3
  %gvalue8 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  %gvalue10 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %N) #3
  %evalue11 = load <3 x double>, <3 x double>* %"<Cd>"
  %gvalue12 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), <3 x double> %evalue11) #3
  store <3 x double> %gvalue, <3 x double>* @tangentu
  store <3 x double> %gvalue6, <3 x double>* @tangentv
  store i64 %gvalue8, i64* @ptnum
  store <3 x double> %gvalue10, <3 x double>* @N
  store <3 x double> %gvalue12, <3 x double>* @Cd
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, i64 0, <3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [23 x i8] c"../f2ModuleDimensions1\00"
@1 = private constant [12 x i8] c"../folder01\00"
@warning = external global i64
@2 = private constant [8 x i8] c"warning\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_warning) #0 {
__llvm_entry:
  %return = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @0, i64 0, i64 0))
  %return1 = call double @"length@FV"(<3 x double> %return)
  %cast = call <3 x double> @"set@VF"(double %return1)
  %return3 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  %return4 = call double @"distance@FVV"(<3 x double> %cast, <3 x double> %return3)
  %return5 = fcmp ole double %return4, 1.000000e-11
  %return6 = zext i1 %return5 to i64
  %return7 = call double @"ch@FS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i64 0, i64 0))
  %return8 = fcmp oeq double %return7, 0.000000e+00
  %return9 = zext i1 %return8 to i64
  %return10 = call i64 @"and@III"(i64 %return6, i64 %return9)
  %0 = icmp ne i64 %return10, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store i64 1, i64* %_bound_warning
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %warning) #2 {
__llvm_entry:
  %"<warning>" = alloca i64
  store i64 %warning, i64* %"<warning>"
  call void @"__vex_snippet_snippet@I"(i64* %"<warning>")
  %evalue = load i64, i64* %"<warning>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i64 %evalue) #3
  store i64 %gvalue, i64* @warning
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

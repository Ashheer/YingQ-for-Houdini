;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [18 x i8] c"user_scale_attrib\00"
@ptnum = external global i64
@userscale = external global double
@userscale2 = external global double
@coolscale = external global double
@1 = private constant [6 x i8] c"ptnum\00"
@2 = private constant [10 x i8] c"userscale\00"
@3 = private constant [11 x i8] c"userscale2\00"
@4 = private constant [10 x i8] c"coolscale\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IFFF"(i64* %_bound_ptnum, double* %_bound_userscale, double* %_bound_userscale2, double* %_bound_coolscale) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @0, i64 0, i64 0))
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return2 = call double @"point@FISI"(i64 0, i8* %return, i64 %_bound_ptnum1)
  %output = fmul double %return2, 2.000000e+00
  store double %output, double* %_bound_userscale
  %_bound_coolscale4 = load double, double* %_bound_coolscale
  %output5 = fmul double %_bound_coolscale4, 2.000000e+00
  store double %output5, double* %_bound_userscale2
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, double %userscale, double %userscale2, double %coolscale) #2 {
__llvm_entry:
  %"<userscale>" = alloca double
  %"<userscale2>" = alloca double
  %0 = alloca i64
  %1 = alloca double
  store double %userscale, double* %"<userscale>"
  store double %userscale2, double* %"<userscale2>"
  store i64 %ptnum, i64* %0
  store double %coolscale, double* %1
  call void @"__vex_snippet_snippet@IFFF"(i64* %0, double* %"<userscale>", double* %"<userscale2>", double* %1)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i64 %ptnum) #3
  %evalue3 = load double, double* %"<userscale>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0), double %evalue3) #3
  %evalue5 = load double, double* %"<userscale2>"
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0), double %evalue5) #3
  %gvalue8 = call double @"_export@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @4, i64 0, i64 0), double %coolscale) #3
  store i64 %gvalue, i64* @ptnum
  store double %gvalue4, double* @userscale
  store double %gvalue6, double* @userscale2
  store double %gvalue8, double* @coolscale
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"name\00"
@1 = private constant [1 x i8] zeroinitializer
@2 = private constant [5 x i8] c"rank\00"
@3 = private constant [8 x i8] c"pattern\00"
@4 = private constant [16 x i8] c"attribute_class\00"
@5 = private constant [7 x i8] c"detail\00"
@6 = private constant [17 x i8] c"globalattributes\00"
@7 = private constant [5 x i8] c"prim\00"
@8 = private constant [20 x i8] c"primitiveattributes\00"
@9 = private constant [6 x i8] c"point\00"
@10 = private constant [16 x i8] c"pointattributes\00"
@11 = private constant [17 x i8] c"vertexattributes\00"

; Function Attrs: alwaysinline nounwind
define private void @__vex_snippet_snippet() #0 {
__llvm_entry:
  %return = call i64 @"addpointattrib@IISS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0))
  %return1 = call i64 @"addpointattrib@IISI"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), i64 0)
  %return2 = call i8* @"chs@SS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0))
  %return3 = call i8* @"chs@SS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @4, i64 0, i64 0))
  %return5 = call i64 @"eq@ISS"(i8* %return3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0))
  %0 = icmp ne i64 %return5, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return6 = call i8** @"detailintrinsic@[SIS"(i64 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @6, i64 0, i64 0))
  br label %end

false:                                            ; preds = %__llvm_entry
  %return8 = call i64 @"eq@ISS"(i8* %return3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i64 0, i64 0))
  %1 = icmp ne i64 %return8, 0
  br i1 %1, label %true9, label %false10

end:                                              ; preds = %true15, %false16, %true9, %true
  %attributes.0 = phi i8** [ %return6, %true ], [ %return12, %true9 ], [ %return18, %true15 ], [ %return19, %false16 ]
  %return21 = call i64 @"len@I[S"(i8** %attributes.0)
  br label %cond

true9:                                            ; preds = %false
  %return12 = call i8** @"detailintrinsic@[SIS"(i64 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @8, i64 0, i64 0))
  br label %end

false10:                                          ; preds = %false
  %return14 = call i64 @"eq@ISS"(i8* %return3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @9, i64 0, i64 0))
  %2 = icmp ne i64 %return14, 0
  br i1 %2, label %true15, label %false16

true15:                                           ; preds = %false10
  %return18 = call i8** @"detailintrinsic@[SIS"(i64 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @10, i64 0, i64 0))
  br label %end

false16:                                          ; preds = %false10
  %return19 = call i8** @"detailintrinsic@[SIS"(i64 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @11, i64 0, i64 0))
  br label %end

cond:                                             ; preds = %end34, %end
  %i.0 = phi i64 [ 0, %end ], [ %output, %end34 ]
  %return24 = call i64 @"lt@III"(i64 %i.0, i64 %return21)
  %3 = icmp ne i64 %return24, 0
  br i1 %3, label %body, label %end25

body:                                             ; preds = %cond
  %return28 = call i8* @"getcomp@S[SI"(i8** %attributes.0, i64 %i.0)
  %return31 = call i64 @"attribtype@IISS"(i64 1, i8* %return3, i8* %return28)
  %return32 = call i64 @"eq@III"(i64 %return31, i64 1)
  %4 = icmp ne i64 %return32, 0
  br i1 %4, label %true33, label %end34

end25:                                            ; preds = %cond
  ret void

true33:                                           ; preds = %body
  %return37 = call i64 @"attribsize@IISS"(i64 1, i8* %return3, i8* %return28)
  %return40 = call i64 @"match@ISS"(i8* %return2, i8* %return28)
  %return42 = call i64 @"eq@III"(i64 %return37, i64 1)
  %return44 = call i64 @"eq@III"(i64 %return37, i64 3)
  %return45 = call i64 @"or@III"(i64 %return42, i64 %return44)
  %return46 = call i64 @"and@III"(i64 %return40, i64 %return45)
  %5 = icmp ne i64 %return46, 0
  br i1 %5, label %true47, label %end34

end34:                                            ; preds = %true56, %false57, %true33, %body
  %output = add i64 %i.0, 1
  br label %cond

true47:                                           ; preds = %true33
  %return49 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  %return50 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return49)
  %return53 = call i64 @"setpointattrib@IISIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0), i64 %return50, i8* %return28)
  %6 = icmp ne i64 %return42, 0
  br i1 %6, label %true56, label %false57

true56:                                           ; preds = %true47
  %return60 = call i64 @"setpointattrib@IISII"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), i64 %return50, i64 0)
  br label %end34

false57:                                          ; preds = %true47
  %return62 = call i64 @"setpointattrib@IISII"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), i64 %return50, i64 3)
  br label %end34
}

; Function Attrs: nounwind
declare i64 @"addpointattrib@IISS"(i64, i8*, i8*) #1

; Function Attrs: nounwind
declare i64 @"addpointattrib@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #2

; Function Attrs: nounwind
declare i8** @"detailintrinsic@[SIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #2

; Function Attrs: nounwind
declare i64 @"attribtype@IISS"(i64, i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"attribsize@IISS"(i64, i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"match@ISS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIS"(i64, i8*, i64, i8*) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet() #1 {
__llvm_entry:
  call void @__vex_snippet_snippet()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [9 x i8] c"typename\00"
@1 = private constant [5 x i8] c"Poly\00"
@2 = private constant [7 x i8] c"closed\00"
@3 = private constant [6 x i8] c"order\00"
@4 = private constant [11 x i8] c"outputtype\00"
@5 = private constant [7 x i8] c"bezier\00"
@6 = private constant [2 x i8] c"P\00"
@primnum = external global i64
@7 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_primnum) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i8* @"primintrinsic@SISI"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0), i64 %_bound_primnum1)
  %return3 = call i64 @"ne@ISS"(i8* %return, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0))
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %cond, %end, %__llvm_entry
  ret void

end:                                              ; preds = %__llvm_entry
  %_bound_primnum4 = load i64, i64* %_bound_primnum
  %return5 = call i64 @"primvertexcount@III"(i64 0, i64 %_bound_primnum4)
  %_bound_primnum6 = load i64, i64* %_bound_primnum
  %return7 = call i64 @"primintrinsic@IISI"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), i64 %_bound_primnum6)
  %return8 = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0))
  %return9 = call i8* @"chs@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0))
  %output = sub i64 %return5, 1
  %output12 = sub i64 %return8, 1
  %return13 = call i64 @"mod@III"(i64 %output, i64 %output12)
  %return15 = call i64 @"eq@ISS"(i8* %return9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0))
  %return17 = call i64 @"ne@III"(i64 %return13, i64 0)
  %return19 = call i64 @"or@III"(i64 %return17, i64 %return7)
  %return20 = call i64 @"and@III"(i64 %return15, i64 %return19)
  %return22 = call i64 @"gt@III"(i64 %return5, i64 0)
  %return23 = call i64 @"and@III"(i64 %return20, i64 %return22)
  %return25 = call i64 @"ge@III"(i64 %return8, i64 3)
  %return26 = call i64 @"and@III"(i64 %return23, i64 %return25)
  %1 = icmp ne i64 %return26, 0
  br i1 %1, label %true27, label %true

true27:                                           ; preds = %end
  %output32 = sub i64 %output12, %return13
  %2 = icmp ne i64 %return7, 0
  br i1 %2, label %true34, label %end35

true34:                                           ; preds = %true27
  %output37 = sub i64 %output32, 1
  %return38 = call i64 @"max@III"(i64 0, i64 %output37)
  br label %end35

end35:                                            ; preds = %true34, %true27
  %extras.0 = phi i64 [ %return38, %true34 ], [ %output32, %true27 ]
  %_bound_primnum39 = load i64, i64* %_bound_primnum
  %return42 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum39, i64 %output)
  %return44 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i64 0, i64 0), i64 %return42)
  br label %cond

cond:                                             ; preds = %body, %end35
  %i.0 = phi i64 [ 0, %end35 ], [ %output54, %body ]
  %return47 = call i64 @"lt@III"(i64 %i.0, i64 %extras.0)
  %3 = icmp ne i64 %return47, 0
  br i1 %3, label %body, label %true

body:                                             ; preds = %cond
  %_bound_primnum49 = load i64, i64* %_bound_primnum
  %return51 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return44)
  %return52 = call i64 @"addvertex@IIII"(i64 0, i64 %_bound_primnum49, i64 %return51)
  %output54 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind
declare i8* @"primintrinsic@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #2

; Function Attrs: nounwind
declare i64 @"primvertexcount@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"primintrinsic@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"max@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"primpoint@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"addvertex@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum) #1 {
__llvm_entry:
  %0 = alloca i64
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @7, i64 0, i64 0), i64 %primnum) #3
  store i64 %gvalue, i64* @primnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

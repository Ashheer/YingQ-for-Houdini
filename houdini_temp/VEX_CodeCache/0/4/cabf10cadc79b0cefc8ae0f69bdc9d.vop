;_name	/obj/rope/dopnet1/popgrains1/update_v1
; ModuleID = 'obj_rope_dopnet1_popgrains1_update_v1'
source_filename = "obj_rope_dopnet1_popgrains1_update_v1"

@v = external global <3 x double>
@0 = private constant [2 x i8] c"v\00"

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"collisionResponse@VVVVF"(<3 x double>* %v, <3 x double>* %hitv, <3 x double>* %hitnml, double* %friction) #0 {
__llvm_entry:
  %v1 = load <3 x double>, <3 x double>* %v
  %hitv2 = load <3 x double>, <3 x double>* %hitv
  %output = call <3 x double> @"sub@VV"(<3 x double> %v1, <3 x double> %hitv2)
  %hitnml4 = load <3 x double>, <3 x double>* %hitnml
  %return = call double @"dot@FVV"(<3 x double> %output, <3 x double> %hitnml4)
  %hitnml5 = load <3 x double>, <3 x double>* %hitnml
  %cast = call <3 x double> @"set@VF"(double %return)
  %output6 = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %hitnml5)
  %output9 = call <3 x double> @"sub@VV"(<3 x double> %output, <3 x double> %output6)
  %hitv10 = load <3 x double>, <3 x double>* %hitv
  %return12 = call double @"dot@FVV"(<3 x double> %hitv10, <3 x double> %hitnml5)
  %friction16 = load double, double* %friction
  %return17 = call double @"neg@FF"(double %friction16)
  %cast19 = call <3 x double> @"set@VF"(double %return17)
  %output20 = call <3 x double> @"mul@VV"(<3 x double> %cast19, <3 x double> %output9)
  ret <3 x double> %output20
}

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private void @"_obj_rope_dopnet1_popgrains1_update_v1_snippet1@FFIFFFVVVIVV"(double* %friction, double* %vblend, i64* %usemaxaccel, double* %maxaccel, double* %_bound_TimeInc, double* %_bound_age, <3 x double>* %_bound_P, <3 x double>* %_bound_pprevious, <3 x double>* %_bound_v, i64* %_bound_hitnum, <3 x double>* %_bound_hitv, <3 x double>* %_bound_hitnml) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  %3 = alloca double
  %_bound_TimeInc1 = load double, double* %_bound_TimeInc
  %_bound_age2 = load double, double* %_bound_age
  %return = fcmp olt double %_bound_age2, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %output = fadd double %_bound_TimeInc1, %_bound_age2
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %timeinc.0 = phi double [ %output, %true ], [ %_bound_TimeInc1, %__llvm_entry ]
  %_bound_P6 = load <3 x double>, <3 x double>* %_bound_P
  %_bound_pprevious7 = load <3 x double>, <3 x double>* %_bound_pprevious
  %output8 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P6, <3 x double> %_bound_pprevious7)
  %cast = call <3 x double> @"set@VF"(double %timeinc.0)
  %output10 = call <3 x double> @"div@VV"(<3 x double> %output8, <3 x double> %cast)
  %_bound_v11 = load <3 x double>, <3 x double>* %_bound_v
  %vblend14 = load double, double* %vblend
  %return15 = call <3 x double> @"lerp@VVVF"(<3 x double> %_bound_v11, <3 x double> %output10, double %vblend14)
  store <3 x double> %return15, <3 x double>* %_bound_v
  %usemaxaccel16 = load i64, i64* %usemaxaccel
  %4 = icmp ne i64 %usemaxaccel16, 0
  br i1 %4, label %true17, label %end18

true17:                                           ; preds = %end
  %output21 = call <3 x double> @"sub@VV"(<3 x double> %return15, <3 x double> %_bound_v11)
  %return23 = call double @"length@FV"(<3 x double> %output21)
  %maxaccel24 = load double, double* %maxaccel
  %_bound_TimeInc25 = load double, double* %_bound_TimeInc
  %output26 = fmul double %maxaccel24, %_bound_TimeInc25
  store double %output26, double* %maxaccel
  %output30 = call double @"div@FF"(double %output26, double %return23)
  %cast31 = call <3 x double> @"set@VF"(double %output30)
  %output32 = call <3 x double> @"mul@VV"(<3 x double> %output21, <3 x double> %cast31)
  %return35 = fcmp ogt double %return23, %output26
  %output39 = call <3 x double> @"add@VV"(<3 x double> %_bound_v11, <3 x double> %output32)
  %_bound_v40 = load <3 x double>, <3 x double>* %_bound_v
  %return41 = select i1 %return35, <3 x double> %output39, <3 x double> %_bound_v40
  store <3 x double> %return41, <3 x double>* %_bound_v
  br label %end18

end18:                                            ; preds = %true17, %end
  %_bound_hitnum42 = load i64, i64* %_bound_hitnum
  %return43 = call i64 @"gt@III"(i64 %_bound_hitnum42, i64 0)
  %5 = icmp ne i64 %return43, 0
  br i1 %5, label %true44, label %end45

true44:                                           ; preds = %end18
  %_bound_v46 = load <3 x double>, <3 x double>* %_bound_v
  store <3 x double> %_bound_v46, <3 x double>* %0
  %_bound_hitv48 = load <3 x double>, <3 x double>* %_bound_hitv
  store <3 x double> %_bound_hitv48, <3 x double>* %1
  %_bound_hitnml49 = load <3 x double>, <3 x double>* %_bound_hitnml
  store <3 x double> %_bound_hitnml49, <3 x double>* %2
  %friction50 = load double, double* %friction
  store double %friction50, double* %3
  %collisionResponse = call <3 x double> @"collisionResponse@VVVVF"(<3 x double>* %0, <3 x double>* %1, <3 x double>* %2, double* %3)
  %output51 = call <3 x double> @"add@VV"(<3 x double> %_bound_v46, <3 x double> %collisionResponse)
  store <3 x double> %output51, <3 x double>* %_bound_v
  br label %end45

end45:                                            ; preds = %true44, %end18
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"lerp@VVVF"(<3 x double>, <3 x double>, double) #2

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind
define void @obj_rope_dopnet1_popgrains1_update_v1(double %parm_friction, double %parm_vblend, i64 %parm_usemaxaccel, double %parm_maxaccel, double %friction, double %TimeInc, double %age, <3 x double> %P, <3 x double> %pprevious, <3 x double> %v, i64 %hitnum, <3 x double> %hitv, <3 x double> %hitnml) #2 {
__llvm_entry:
  %"<v>" = alloca <3 x double>
  %outmaxaccel = alloca double
  %0 = alloca double
  %1 = alloca double
  %2 = alloca i64
  %3 = alloca double
  %4 = alloca double
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca i64
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  store <3 x double> %v, <3 x double>* %"<v>"
  %output = fmul double %parm_friction, %friction
  store double %parm_maxaccel, double* %outmaxaccel
  store double %output, double* %0
  store double %parm_vblend, double* %1
  store i64 %parm_usemaxaccel, i64* %2
  store double %TimeInc, double* %3
  store double %age, double* %4
  store <3 x double> %P, <3 x double>* %5
  store <3 x double> %pprevious, <3 x double>* %6
  store i64 %hitnum, i64* %7
  store <3 x double> %hitv, <3 x double>* %8
  store <3 x double> %hitnml, <3 x double>* %9
  call void @"_obj_rope_dopnet1_popgrains1_update_v1_snippet1@FFIFFFVVVIVV"(double* %0, double* %1, i64* %2, double* %outmaxaccel, double* %3, double* %4, <3 x double>* %5, <3 x double>* %6, <3 x double>* %"<v>", i64* %7, <3 x double>* %8, <3 x double>* %9)
  %evalue = load <3 x double>, <3 x double>* %"<v>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %evalue) #3
  store <3 x double> %gvalue, <3 x double>* @v
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_rope_dopnet1_popgrains1_update_v1(double 0.000000e+00, double 0.000000e+00, i64 0, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

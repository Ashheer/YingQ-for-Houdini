;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [8 x i8] c"gridnum\00"
@1 = private constant [7 x i8] c"switch\00"
@2 = private constant [7 x i8] c"thresh\00"
@P = external global <3 x double>
@density = external global double
@3 = private constant [2 x i8] c"P\00"
@4 = private constant [8 x i8] c"density\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VF"(<3 x double>* %_bound_P, double* %_bound_density) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %cast = call <3 x double> @"set@VF"(double 0x400921FB54442D18)
  %output = call <3 x double> @"mul@VV"(<3 x double> %_bound_P2, <3 x double> %cast)
  %cast3 = call <3 x double> @"set@VI"(i64 2)
  %output4 = call <3 x double> @"mul@VV"(<3 x double> %output, <3 x double> %cast3)
  %cast6 = call <3 x double> @"set@VI"(i64 %return)
  %output7 = call <3 x double> @"mul@VV"(<3 x double> %output4, <3 x double> %cast6)
  %return9 = call i64 @"mod@III"(i64 %return, i64 2)
  %cast10 = sitofp i64 %return9 to double
  %output11 = fsub double %cast10, 5.000000e-01
  %output12 = fmul double %output11, 2.000000e+00
  %cast13 = fptosi double %output12 to i64
  %return15 = call i64 @"eq@III"(i64 %return1, i64 0)
  %0 = icmp ne i64 %return15, 0
  %return17 = call double @"getcomp@FVI"(<3 x double> %output7, i64 0)
  %return18 = call double @"cos@FF"(double %return17)
  %return20 = call double @"getcomp@FVI"(<3 x double> %output7, i64 1)
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return21 = call double @"cos@FF"(double %return20)
  %output22 = fadd double %return18, %return21
  %return24 = call double @"getcomp@FVI"(<3 x double> %output7, i64 2)
  %return25 = call double @"cos@FF"(double %return24)
  %output26 = fadd double %output22, %return25
  %return27 = call i64 @"neg@II"(i64 3)
  %output29 = mul i64 %return27, %cast13
  %cast30 = sitofp i64 %output29 to double
  %output32 = mul i64 3, %cast13
  %cast33 = sitofp i64 %output32 to double
  %return34 = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0))
  %return35 = call double @"fit@FFFFFF"(double %output26, double %cast30, double %cast33, double 0.000000e+00, double %return34)
  store double %return35, double* %_bound_density
  br label %end

false:                                            ; preds = %__llvm_entry
  %return41 = call double @"sin@FF"(double %return20)
  %output42 = fmul double %return18, %return41
  %return45 = call double @"cos@FF"(double %return20)
  %return47 = call double @"getcomp@FVI"(<3 x double> %output7, i64 2)
  %return48 = call double @"sin@FF"(double %return47)
  %output49 = fmul double %return45, %return48
  %output50 = fadd double %output42, %output49
  %return53 = call double @"cos@FF"(double %return47)
  %return56 = call double @"sin@FF"(double %return17)
  %output57 = fmul double %return53, %return56
  %output58 = fadd double %output50, %output57
  %return59 = call i64 @"neg@II"(i64 3)
  %output61 = mul i64 %return59, %cast13
  %cast62 = sitofp i64 %output61 to double
  %output64 = mul i64 3, %cast13
  %cast65 = sitofp i64 %output64 to double
  %return66 = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0))
  %return67 = call double @"fit@FFFFFF"(double %output58, double %cast62, double %cast65, double 0.000000e+00, double %return66)
  store double %return67, double* %_bound_density
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #2

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, double %density) #2 {
__llvm_entry:
  %"<density>" = alloca double
  %0 = alloca <3 x double>
  store double %density, double* %"<density>"
  store <3 x double> %P, <3 x double>* %0
  call void @"__vex_snippet_snippet@VF"(<3 x double>* %0, double* %"<density>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %P) #3
  %evalue2 = load double, double* %"<density>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), double %evalue2) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store double %gvalue3, double* @density
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@transform = external global <16 x double>
@opinput1_N = external global <3 x double>
@N = external global <3 x double>
@0 = private constant [10 x i8] c"transform\00"
@1 = private constant [11 x i8] c"opinput1_N\00"
@2 = private constant [2 x i8] c"N\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@4VV"(<16 x double>* %_bound_transform, <3 x double>* %_bound_opinput1_N, <3 x double>* %_bound_N) #0 {
__llvm_entry:
  %cast = call <3 x double> @"set@VI"(i64 0)
  %_bound_opinput1_N2 = load <3 x double>, <3 x double>* %_bound_opinput1_N
  %return = call <3 x double> @"normalize@VV"(<3 x double> %_bound_opinput1_N2)
  %_bound_N3 = load <3 x double>, <3 x double>* %_bound_N
  %return4 = call double @"dot@FVV"(<3 x double> %return, <3 x double> %_bound_N3)
  %output = call double @"div@FF"(double 1.000000e+00, double %return4)
  %return5 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double %output, double 1.000000e+00)
  %return9 = call <16 x double> @"maketransform@4IIVVVVVV"(i64 5, i64 0, <3 x double> %cast, <3 x double> %cast, <3 x double> %return5, <3 x double> %cast, <3 x double> %cast, <3 x double> %cast)
  store <16 x double> %return9, <16 x double>* %_bound_transform
  %_bound_N11 = load <3 x double>, <3 x double>* %_bound_N
  %return12 = call <9 x double> @"maketransform@3VV"(<3 x double> %_bound_N11, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>)
  %cast13 = call <16 x double> @"set@43"(<9 x double> %return12)
  %output14 = call <16 x double> @"mul@44"(<16 x double> %return9, <16 x double> %cast13)
  store <16 x double> %output14, <16 x double>* %_bound_transform
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <16 x double> @"maketransform@4IIVVVVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <9 x double> @"maketransform@3VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <16 x double> @"set@43"(<9 x double>) #2

; Function Attrs: nounwind
declare <16 x double> @"mul@44"(<16 x double>, <16 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<16 x double> %transform, <3 x double> %opinput1_N, <3 x double> %N) #2 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %"<transform>" = alloca <16 x double>
  store <16 x double> %transform, <16 x double>* %"<transform>"
  store <3 x double> %opinput1_N, <3 x double>* %0
  store <3 x double> %N, <3 x double>* %1
  call void @"__vex_snippet_snippet@4VV"(<16 x double>* %"<transform>", <3 x double>* %0, <3 x double>* %1)
  %evalue = load <16 x double>, <16 x double>* %"<transform>"
  %gvalue = call <16 x double> @"_export@4S4"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), <16 x double> %evalue) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0), <3 x double> %opinput1_N) #3
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %N) #3
  store <16 x double> %gvalue, <16 x double>* @transform
  store <3 x double> %gvalue4, <3 x double>* @opinput1_N
  store <3 x double> %gvalue6, <3 x double>* @N
  ret void
}

declare <16 x double> @"_export@4S4"(i8*, <16 x double>)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<16 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

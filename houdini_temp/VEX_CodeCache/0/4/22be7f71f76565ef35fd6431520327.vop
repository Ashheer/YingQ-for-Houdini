;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"seed\00"
@P = external global <3 x double>
@primnum = external global i64
@Cd = external global <3 x double>
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [8 x i8] c"primnum\00"
@3 = private constant [3 x i8] c"Cd\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VIV"(<3 x double>* %_bound_P, i64* %_bound_primnum, <3 x double>* %_bound_Cd) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call <3 x double> @"relbbox@VIV"(i64 0, <3 x double> %_bound_P1)
  %return2 = call double @"getcomp@FVI"(<3 x double> %return, i64 1)
  %_bound_primnum3 = load i64, i64* %_bound_primnum
  %output = add i64 %_bound_primnum3, 8675309
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  %output5 = add i64 %output, %return4
  %cast = sitofp i64 %output5 to double
  %return6 = call double @"rand@FF"(double %cast)
  %output10 = fsub double 1.000000e+00, %return2
  %return11 = call double @"pow@FFF"(double %output10, double 3.000000e+00)
  %return12 = call double @"lerp@FFFF"(double %return2, double %return6, double %return11)
  %return13 = call <3 x double> @"set@VFFF"(double %return12, double 1.000000e+00, double 1.000000e+00)
  %return14 = call <3 x double> @"hsvtorgb@VV"(<3 x double> %return13)
  store <3 x double> %return14, <3 x double>* %_bound_Cd
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"relbbox@VIV"(i64, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind
declare double @"rand@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"pow@FFF"(double, double) #2

; Function Attrs: nounwind
declare double @"lerp@FFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"hsvtorgb@VV"(<3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, i64 %primnum, <3 x double> %Cd) #1 {
__llvm_entry:
  %"<Cd>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca i64
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store <3 x double> %P, <3 x double>* %0
  store i64 %primnum, i64* %1
  call void @"__vex_snippet_snippet@VIV"(<3 x double>* %0, i64* %1, <3 x double>* %"<Cd>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %P) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i64 %primnum) #3
  %evalue5 = load <3 x double>, <3 x double>* %"<Cd>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), <3 x double> %evalue5) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store i64 %gvalue4, i64* @primnum
  store <3 x double> %gvalue6, <3 x double>* @Cd
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

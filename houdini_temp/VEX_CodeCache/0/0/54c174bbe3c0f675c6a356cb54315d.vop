;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [11 x i8] c"FloorIndex\00"
@2 = private constant [13 x i8] c"profile_type\00"
@3 = private constant [13 x i8] c"CONVEXCORNER\00"
@4 = private constant [30 x i8] c"LedgeBConcaveCornerIDLAtIndex\00"
@5 = private constant [30 x i8] c"LedgeBConcaveCornerIDRAtIndex\00"
@6 = private constant [30 x i8] c"LedgeTConcaveCornerIDLAtIndex\00"
@7 = private constant [30 x i8] c"LedgeTConcaveCornerIDRAtIndex\00"
@8 = private constant [24 x i8] c"ConcaveCornerIDLAtIndex\00"
@9 = private constant [24 x i8] c"ConcaveCornerIDRAtIndex\00"
@10 = private constant [29 x i8] c"LedgeBConvexCornerIDLAtIndex\00"
@11 = private constant [29 x i8] c"LedgeBConvexCornerIDRAtIndex\00"
@12 = private constant [29 x i8] c"LedgeTConvexCornerIDLAtIndex\00"
@13 = private constant [29 x i8] c"LedgeTConvexCornerIDRAtIndex\00"
@14 = private constant [23 x i8] c"ConvexCornerIDLAtIndex\00"
@15 = private constant [23 x i8] c"ConvexCornerIDRAtIndex\00"
@16 = private constant [1 x i8] zeroinitializer
@ptnum = external global i64
@MODULE_INSTANCE = external global i8*
@RIGHTCORNER = external global i8*
@17 = private constant [6 x i8] c"ptnum\00"
@18 = private constant [16 x i8] c"MODULE_INSTANCE\00"
@19 = private constant [12 x i8] c"RIGHTCORNER\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@ISS"(i64* %_bound_ptnum, i8** %_bound_MODULE_INSTANCE, i8** %_bound_RIGHTCORNER) #0 {
__llvm_entry:
  %return = call i64 @"prim@IISI"(i64 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0), i64 0)
  %return1 = call i64 @"findattribval@IISSII"(i64 2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0), i64 %return, i64 0)
  %_bound_ptnum2 = load i64, i64* %_bound_ptnum
  %return3 = call i64* @"pointprims@[III"(i64 0, i64 %_bound_ptnum2)
  %return4 = call i64 @"getcomp@I[II"(i64* %return3, i64 0)
  %return5 = call i64 @"prim@IISI"(i64 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0), i64 %return4)
  %_bound_ptnum6 = load i64, i64* %_bound_ptnum
  %return7 = call i64 @"inpointgroup@IISI"(i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @3, i64 0, i64 0), i64 %_bound_ptnum6)
  %return8 = call i64 @"not@II"(i64 %return7)
  %0 = icmp ne i64 %return8, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return10 = call i64 @"eq@III"(i64 %return5, i64 1)
  %1 = icmp ne i64 %return10, 0
  br i1 %1, label %true11, label %false12

false:                                            ; preds = %__llvm_entry
  %return32 = call i8* @"point@SISI"(i64 2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @8, i64 0, i64 0), i64 %return1)
  store i8* %return32, i8** %_bound_MODULE_INSTANCE
  %return34 = call i8* @"point@SISI"(i64 2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @9, i64 0, i64 0), i64 %return1)
  store i8* %return34, i8** %_bound_RIGHTCORNER
  %return36 = call i64 @"eq@III"(i64 %return5, i64 1)
  %2 = icmp ne i64 %return36, 0
  br i1 %2, label %true37, label %false38

end:                                              ; preds = %true46, %false47, %true37, %true20, %false21, %true11
  ret void

true11:                                           ; preds = %true
  %return15 = call i8* @"point@SISI"(i64 2, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @4, i64 0, i64 0), i64 %return1)
  store i8* %return15, i8** %_bound_MODULE_INSTANCE
  %return17 = call i8* @"point@SISI"(i64 2, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @5, i64 0, i64 0), i64 %return1)
  store i8* %return17, i8** %_bound_RIGHTCORNER
  br label %end

false12:                                          ; preds = %true
  %return19 = call i64 @"eq@III"(i64 %return5, i64 2)
  %3 = icmp ne i64 %return19, 0
  br i1 %3, label %true20, label %false21

true20:                                           ; preds = %false12
  %return24 = call i8* @"point@SISI"(i64 2, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @6, i64 0, i64 0), i64 %return1)
  store i8* %return24, i8** %_bound_MODULE_INSTANCE
  %return26 = call i8* @"point@SISI"(i64 2, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @7, i64 0, i64 0), i64 %return1)
  store i8* %return26, i8** %_bound_RIGHTCORNER
  br label %end

false21:                                          ; preds = %false12
  %return28 = call i8* @"point@SISI"(i64 2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @8, i64 0, i64 0), i64 %return1)
  store i8* %return28, i8** %_bound_MODULE_INSTANCE
  %return30 = call i8* @"point@SISI"(i64 2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @9, i64 0, i64 0), i64 %return1)
  store i8* %return30, i8** %_bound_RIGHTCORNER
  br label %end

true37:                                           ; preds = %false
  %return41 = call i8* @"point@SISI"(i64 2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @10, i64 0, i64 0), i64 %return1)
  store i8* %return41, i8** %_bound_MODULE_INSTANCE
  %return43 = call i8* @"point@SISI"(i64 2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @11, i64 0, i64 0), i64 %return1)
  store i8* %return43, i8** %_bound_RIGHTCORNER
  br label %end

false38:                                          ; preds = %false
  %return45 = call i64 @"eq@III"(i64 %return5, i64 2)
  %4 = icmp ne i64 %return45, 0
  br i1 %4, label %true46, label %false47

true46:                                           ; preds = %false38
  %return50 = call i8* @"point@SISI"(i64 2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @12, i64 0, i64 0), i64 %return1)
  store i8* %return50, i8** %_bound_MODULE_INSTANCE
  %return52 = call i8* @"point@SISI"(i64 2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @13, i64 0, i64 0), i64 %return1)
  store i8* %return52, i8** %_bound_RIGHTCORNER
  br label %end

false47:                                          ; preds = %false38
  %return54 = call i8* @"point@SISI"(i64 2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @14, i64 0, i64 0), i64 %return1)
  store i8* %return54, i8** %_bound_MODULE_INSTANCE
  %return56 = call i8* @"point@SISI"(i64 2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @15, i64 0, i64 0), i64 %return1)
  store i8* %return56, i8** %_bound_RIGHTCORNER
  br label %end
}

; Function Attrs: nounwind
declare i64 @"prim@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"findattribval@IISSII"(i64, i8*, i8*, i64, i64) #1

; Function Attrs: nounwind
declare i64* @"pointprims@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"inpointgroup@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i8* %MODULE_INSTANCE, i8* %RIGHTCORNER) #1 {
__llvm_entry:
  %"<MODULE_INSTANCE>" = alloca i8*
  %"<RIGHTCORNER>" = alloca i8*
  %0 = alloca i64
  store i8* %MODULE_INSTANCE, i8** %"<MODULE_INSTANCE>"
  store i8* %RIGHTCORNER, i8** %"<RIGHTCORNER>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@ISS"(i64* %0, i8** %"<MODULE_INSTANCE>", i8** %"<RIGHTCORNER>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @17, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load i8*, i8** %"<MODULE_INSTANCE>"
  %gvalue3 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @18, i64 0, i64 0), i8* %evalue2) #3
  %evalue4 = load i8*, i8** %"<RIGHTCORNER>"
  %gvalue5 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @19, i64 0, i64 0), i8* %evalue4) #3
  store i64 %gvalue, i64* @ptnum
  store i8* %gvalue3, i8** @MODULE_INSTANCE
  store i8* %gvalue5, i8** @RIGHTCORNER
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @16, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @16, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [17 x i8] c"pointcountmethod\00"
@1 = private constant [7 x i8] c"numpts\00"
@2 = private constant [5 x i8] c"npts\00"
@3 = private constant [8 x i8] c"density\00"
@4 = private constant [9 x i8] c"coverage\00"
@5 = private constant [5 x i8] c"size\00"
@6 = private constant [10 x i8] c"minradius\00"
@7 = private constant [10 x i8] c"maxradius\00"
@8 = private constant [13 x i8] c"uniformscale\00"
@__numpts = external global i64
@__area = external global double
@9 = private constant [9 x i8] c"__numpts\00"
@10 = private constant [7 x i8] c"__area\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IF"(i64* %_bound___numpts, double* %_bound___area) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @0, i64 0, i64 0))
  %return2 = call i64 @"eq@ISS"(i8* %return, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %0 = icmp ne i64 %return2, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0))
  store i64 %return3, i64* %_bound___numpts
  br label %end

false:                                            ; preds = %__llvm_entry
  %return5 = call i64 @"ne@ISS"(i8* %return, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0))
  %1 = icmp ne i64 %return5, 0
  br i1 %1, label %true6, label %end

end:                                              ; preds = %true13, %false14, %false, %true
  ret void

true6:                                            ; preds = %false
  %_bound___area8 = load double, double* %_bound___area
  %output = fmul double %_bound___area8, 0x3FD279A74590331C
  %return9 = call double @"ch@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0))
  %output10 = fmul double %output, %return9
  %return12 = call i64 @"eq@ISS"(i8* %return, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i64 0, i64 0))
  %2 = icmp ne i64 %return12, 0
  br i1 %2, label %true13, label %false14

true13:                                           ; preds = %true6
  %return16 = call double @"ch@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @6, i64 0, i64 0))
  %return17 = call double @"ch@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @7, i64 0, i64 0))
  %return18 = call double @"ch@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @8, i64 0, i64 0))
  %output21 = fmul double %return16, %return18
  %output24 = fmul double %return17, %return18
  %output28 = fmul double %output21, %output24
  %output29 = call double @"div@FF"(double %output10, double %output28)
  %cast = fptosi double %output29 to i64
  store i64 %cast, i64* %_bound___numpts
  br label %end

false14:                                          ; preds = %true6
  %output31 = fmul double %output10, 4.000000e+00
  %cast32 = fptosi double %output31 to i64
  store i64 %cast32, i64* %_bound___numpts
  br label %end
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %__numpts, double %__area) #2 {
__llvm_entry:
  %0 = alloca double
  %"<__numpts>" = alloca i64
  store i64 %__numpts, i64* %"<__numpts>"
  store double %__area, double* %0
  call void @"__vex_snippet_snippet@IF"(i64* %"<__numpts>", double* %0)
  %evalue = load i64, i64* %"<__numpts>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @9, i64 0, i64 0), i64 %evalue) #3
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @10, i64 0, i64 0), double %__area) #3
  store i64 %gvalue, i64* @__numpts
  store double %gvalue3, double* @__area
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

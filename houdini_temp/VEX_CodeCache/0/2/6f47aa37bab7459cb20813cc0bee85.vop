;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [16 x i8] c"op:../resample3\00"
@curveu = external global double
@1 = private constant [7 x i8] c"curveu\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@F"(double* %_bound_curveu) #0 {
__llvm_entry:
  %_bound_curveu1 = load double, double* %_bound_curveu
  %return = call <2 x double> @"set@UFF"(double %_bound_curveu1, double 0.000000e+00)
  %return2 = call <2 x double> @"primuvconvert@USUII"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i64 0, i64 0), <2 x double> %return, i64 0, i64 4)
  %return3 = call double @"getcomp@FUI"(<2 x double> %return2, i64 0)
  store double %return3, double* %_bound_curveu
  ret void
}

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"primuvconvert@USUII"(i8*, <2 x double>, i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %curveu) #2 {
__llvm_entry:
  %"<curveu>" = alloca double
  store double %curveu, double* %"<curveu>"
  call void @"__vex_snippet_snippet@F"(double* %"<curveu>")
  %evalue = load double, double* %"<curveu>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), double %evalue) #3
  store double %gvalue, double* @curveu
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

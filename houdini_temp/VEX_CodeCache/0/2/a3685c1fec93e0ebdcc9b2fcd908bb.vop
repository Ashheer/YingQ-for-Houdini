;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x double] zeroinitializer
@1 = private constant [15 x i8] c"../xnthreshold\00"
@2 = private constant [15 x i8] c"../xpthreshold\00"
@3 = private constant [15 x i8] c"../ynthreshold\00"
@4 = private constant [15 x i8] c"../ypthreshold\00"
@5 = private constant [15 x i8] c"../znthreshold\00"
@6 = private constant [15 x i8] c"../zpthreshold\00"
@bounds = external global double*
@7 = private constant [7 x i8] c"bounds\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[F"(double** %_bound_bounds) #0 {
__llvm_entry:
  %return = call <3 x double> @"getbbox_min@VI"(i64 1)
  %return1 = call <3 x double> @"getbbox_max@VI"(i64 1)
  %return3 = call double @"getcomp@FVI"(<3 x double> %return, i64 0)
  %return5 = call double @"getcomp@FVI"(<3 x double> %return1, i64 0)
  %return7 = call double @"getcomp@FVI"(<3 x double> %return, i64 1)
  %return9 = call double @"getcomp@FVI"(<3 x double> %return1, i64 1)
  %return11 = call double @"getcomp@FVI"(<3 x double> %return, i64 2)
  %return13 = call double @"getcomp@FVI"(<3 x double> %return1, i64 2)
  %return14 = call double* @"array@[F:FFFFFF"(double %return3, double %return5, double %return7, double %return9, double %return11, double %return13)
  %return16 = call double @"getcomp@F[FI"(double* %return14, i64 0)
  %return17 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1, i64 0, i64 0))
  %output = fadd double %return16, %return17
  %return18 = call { double, double* } @"setcomp@F[FFI"(double* %return14, double %output, i64 0)
  %output20 = extractvalue { double, double* } %return18, 1
  %return22 = call double @"getcomp@F[FI"(double* %output20, i64 1)
  %return23 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i64 0, i64 0))
  %output24 = fsub double %return22, %return23
  %return26 = call { double, double* } @"setcomp@F[FFI"(double* %output20, double %output24, i64 1)
  %output28 = extractvalue { double, double* } %return26, 1
  %return30 = call double @"getcomp@F[FI"(double* %output28, i64 2)
  %return31 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @3, i64 0, i64 0))
  %output32 = fadd double %return30, %return31
  %return34 = call { double, double* } @"setcomp@F[FFI"(double* %output28, double %output32, i64 2)
  %output36 = extractvalue { double, double* } %return34, 1
  %return38 = call double @"getcomp@F[FI"(double* %output36, i64 3)
  %return39 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @4, i64 0, i64 0))
  %output40 = fsub double %return38, %return39
  %return42 = call { double, double* } @"setcomp@F[FFI"(double* %output36, double %output40, i64 3)
  %output44 = extractvalue { double, double* } %return42, 1
  %return46 = call double @"getcomp@F[FI"(double* %output44, i64 4)
  %return47 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @5, i64 0, i64 0))
  %output48 = fadd double %return46, %return47
  %return50 = call { double, double* } @"setcomp@F[FFI"(double* %output44, double %output48, i64 4)
  %output52 = extractvalue { double, double* } %return50, 1
  %return54 = call double @"getcomp@F[FI"(double* %output52, i64 5)
  %return55 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @6, i64 0, i64 0))
  %output56 = fsub double %return54, %return55
  %return58 = call { double, double* } @"setcomp@F[FFI"(double* %output52, double %output56, i64 5)
  %output60 = extractvalue { double, double* } %return58, 1
  store double* %output60, double** %_bound_bounds
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"getbbox_min@VI"(i64) #1

; Function Attrs: nounwind
declare <3 x double> @"getbbox_max@VI"(i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #2

; Function Attrs: nounwind readnone
declare double* @"array@[F:FFFFFF"(double, double, double, double, double, double) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind readnone
declare { double, double* } @"setcomp@F[FFI"(double*, double, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(double* %bounds) #1 {
__llvm_entry:
  %"<bounds>" = alloca double*
  store double* %bounds, double** %"<bounds>"
  call void @"__vex_snippet_snippet@[F"(double** %"<bounds>")
  %evalue = load double*, double** %"<bounds>"
  %gvalue = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), double* %evalue) #3
  store double* %gvalue, double** @bounds
  ret void
}

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double* getelementptr inbounds ([0 x double], [0 x double]* @0, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

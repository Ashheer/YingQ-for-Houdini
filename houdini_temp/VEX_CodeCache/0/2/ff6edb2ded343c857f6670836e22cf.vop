;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [32 x i8] c"../polyexpand2d1/edgedistattrib\00"
@1 = private constant [19 x i8] c"vex_selectiongroup\00"
@elemnum = external global i64
@vtxnum = external global i64
@2 = private constant [8 x i8] c"elemnum\00"
@3 = private constant [7 x i8] c"vtxnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound_elemnum, i64* %_bound_vtxnum) #0 {
__llvm_entry:
  %_bound_elemnum1 = load i64, i64* %_bound_elemnum
  %return = call i64 @"hedge_nextequiv@III"(i64 0, i64 %_bound_elemnum1)
  %_bound_elemnum2 = load i64, i64* %_bound_elemnum
  %return4 = call i64 @"le@III"(i64 %_bound_elemnum2, i64 %return)
  %return6 = call i64 @"neg@II"(i64 1)
  %return7 = call i64 @"eq@III"(i64 %return, i64 %return6)
  %return8 = call i64 @"or@III"(i64 %return4, i64 %return7)
  %0 = icmp ne i64 %return8, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %end, %true24, %__llvm_entry
  ret void

end:                                              ; preds = %__llvm_entry
  %_bound_vtxnum9 = load i64, i64* %_bound_vtxnum
  %return10 = call i64 @"hedge_srcpoint@III"(i64 0, i64 %_bound_vtxnum9)
  %_bound_vtxnum11 = load i64, i64* %_bound_vtxnum
  %return12 = call i64 @"hedge_dstpoint@III"(i64 0, i64 %_bound_vtxnum11)
  %return13 = call i8* @"chs@SS"(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @0, i64 0, i64 0))
  %return15 = call double @"point@FISI"(i64 0, i8* %return13, i64 %return10)
  %return18 = call double @"point@FISI"(i64 0, i8* %return13, i64 %return12)
  %output = fsub double %return18, %return15
  %return21 = call double @"abs@FF"(double %output)
  %return22 = fcmp ogt double %return21, 1.000000e-05
  br i1 %return22, label %true24, label %true

true24:                                           ; preds = %end
  %return26 = call i8* @"chs@SS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1, i64 0, i64 0))
  %return29 = call i64 @"setedgegroup@IISIII"(i64 0, i8* %return26, i64 %return10, i64 %return12, i64 1)
  br label %true
}

; Function Attrs: nounwind
declare i64 @"hedge_nextequiv@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"le@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"hedge_srcpoint@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"hedge_dstpoint@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind
declare i64 @"setedgegroup@IISIII"(i64, i8*, i64, i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %elemnum, i64 %vtxnum) #1 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  store i64 %elemnum, i64* %0
  store i64 %vtxnum, i64* %1
  call void @"__vex_snippet_snippet@II"(i64* %0, i64* %1)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i64 %elemnum) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), i64 %vtxnum) #3
  store i64 %gvalue, i64* @elemnum
  store i64 %gvalue4, i64* @vtxnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

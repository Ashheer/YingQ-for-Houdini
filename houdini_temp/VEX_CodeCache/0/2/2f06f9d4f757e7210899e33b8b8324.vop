;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [22 x i8] c"../rafter_qiqiao_ramp\00"
@1 = private constant [22 x i8] c"../rafter_qiqiao_dist\00"
@P = external global <3 x double>
@height = external global double
@up = external global <3 x double>
@2 = private constant [2 x i8] c"P\00"
@3 = private constant [7 x i8] c"height\00"
@4 = private constant [3 x i8] c"up\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VFV"(<3 x double>* %_bound_P, double* %_bound_height, <3 x double>* %_bound_up) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %_bound_height2 = load double, double* %_bound_height
  %return = call double @"chramp@FSF"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @0, i64 0, i64 0), double %_bound_height2)
  %return3 = call double @"chf@FS"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @1, i64 0, i64 0))
  %output4 = fmul double %return, %return3
  %_bound_up5 = load <3 x double>, <3 x double>* %_bound_up
  %cast = call <3 x double> @"set@VF"(double %output4)
  %output6 = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %_bound_up5)
  %output7 = call <3 x double> @"add@VV"(<3 x double> %_bound_P1, <3 x double> %output6)
  store <3 x double> %output7, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chramp@FSF"(i8*, double) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, double %height, <3 x double> %up) #2 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca <3 x double>
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store double %height, double* %0
  store <3 x double> %up, <3 x double>* %1
  call void @"__vex_snippet_snippet@VFV"(<3 x double>* %"<P>", double* %0, <3 x double>* %1)
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), double %height) #3
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), <3 x double> %up) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store double %gvalue4, double* @height
  store <3 x double> %gvalue6, <3 x double>* @up
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [13 x i8] c"measuredarea\00"
@__area_world = external global double
@elemnum = external global i64
@1 = private constant [13 x i8] c"__area_world\00"
@2 = private constant [8 x i8] c"elemnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FI"(double* %_bound___area_world, i64* %_bound_elemnum) #0 {
__llvm_entry:
  %_bound_elemnum1 = load i64, i64* %_bound_elemnum
  %return = call double @"primintrinsic@FISI"(i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0), i64 %_bound_elemnum1)
  store double %return, double* %_bound___area_world
  ret void
}

; Function Attrs: nounwind
declare double @"primintrinsic@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %__area_world, i64 %elemnum) #1 {
__llvm_entry:
  %0 = alloca i64
  %"<__area_world>" = alloca double
  store double %__area_world, double* %"<__area_world>"
  store i64 %elemnum, i64* %0
  call void @"__vex_snippet_snippet@FI"(double* %"<__area_world>", i64* %0)
  %evalue = load double, double* %"<__area_world>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0), double %evalue) #2
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i64 %elemnum) #2
  store double %gvalue, double* @__area_world
  store i64 %gvalue3, i64* @elemnum
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@overlap_self = external global double
@overlap_external = external global double
@0 = private constant [13 x i8] c"overlap_self\00"
@1 = private constant [17 x i8] c"overlap_external\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FF"(double* %_bound_overlap_self, double* %_bound_overlap_external) #0 {
__llvm_entry:
  store double 1.000000e+04, double* %_bound_overlap_self
  store double 1.000000e+04, double* %_bound_overlap_external
  ret void
}

; Function Attrs: nounwind
define void @__vex_snippet(double %overlap_self, double %overlap_external) #1 {
__llvm_entry:
  %"<overlap_external>" = alloca double
  %"<overlap_self>" = alloca double
  store double %overlap_self, double* %"<overlap_self>"
  store double %overlap_external, double* %"<overlap_external>"
  call void @"__vex_snippet_snippet@FF"(double* %"<overlap_self>", double* %"<overlap_external>")
  %evalue = load double, double* %"<overlap_self>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0), double %evalue) #2
  %evalue1 = load double, double* %"<overlap_external>"
  %gvalue2 = call double @"_export@FSF"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1, i64 0, i64 0), double %evalue1) #2
  store double %gvalue, double* @overlap_self
  store double %gvalue2, double* @overlap_external
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 1.000000e+04, double 1.000000e+04)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

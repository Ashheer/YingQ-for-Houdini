;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [5 x i8] c"name\00"
@2 = private constant [8 x i8] c"oldname\00"
@3 = private constant [2 x i8] c"P\00"
@4 = private constant [1 x i8] zeroinitializer
@name = external global i8*
@group___delete = external global i64
@P = external global <3 x double>
@5 = private constant [15 x i8] c"group___delete\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SIV"(i8** %_bound_name, i64* %_bound_group___delete, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_name1 = load i8*, i8** %_bound_name
  %return = call i64 @"findattribval@IISSS"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* %_bound_name1)
  %return3 = call i64 @"neg@II"(i64 1)
  %return4 = call i64 @"eq@III"(i64 %return, i64 %return3)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  store i64 1, i64* %_bound_group___delete
  %_bound_name5 = load i8*, i8** %_bound_name
  %return6 = call i64 @"findattribval@IISSS"(i64 2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i8* %_bound_name5)
  %return8 = call i8* @"point@SISI"(i64 2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %return6)
  store i8* %return8, i8** %_bound_name
  %return10 = call <3 x double> @"point@VISI"(i64 2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), i64 %return6)
  store <3 x double> %return10, <3 x double>* %_bound_P
  br label %end

false:                                            ; preds = %__llvm_entry
  %return12 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), i64 %return)
  store <3 x double> %return12, <3 x double>* %_bound_P
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: nounwind
declare i64 @"findattribval@IISSS"(i64, i8*, i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %name, i64 %group___delete, <3 x double> %P) #1 {
__llvm_entry:
  %"<group___delete>" = alloca i64
  %"<P>" = alloca <3 x double>
  %"<name>" = alloca i8*
  store i8* %name, i8** %"<name>"
  store i64 %group___delete, i64* %"<group___delete>"
  store <3 x double> %P, <3 x double>* %"<P>"
  call void @"__vex_snippet_snippet@SIV"(i8** %"<name>", i64* %"<group___delete>", <3 x double>* %"<P>")
  %evalue = load i8*, i8** %"<name>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* %evalue) #3
  %evalue1 = load i64, i64* %"<group___delete>"
  %gvalue2 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @5, i64 0, i64 0), i64 %evalue1) #3
  %evalue3 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %evalue3) #3
  store i8* %gvalue, i8** @name
  store i64 %gvalue2, i64* @group___delete
  store <3 x double> %gvalue4, <3 x double>* @P
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @4, i64 0, i64 0), i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

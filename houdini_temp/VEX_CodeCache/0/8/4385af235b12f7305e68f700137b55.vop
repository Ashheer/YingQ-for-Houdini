;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [7 x i8] c"closed\00"
@ptnum = external global i64
@isclosed = external global i64
@1 = private constant [6 x i8] c"ptnum\00"
@2 = private constant [9 x i8] c"isclosed\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound_ptnum, i64* %_bound_isclosed) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64* @"pointprims@[III"(i64 0, i64 %_bound_ptnum1)
  %return3 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %end14, %__llvm_entry
  %__impl_foreach_index_6.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %end14 ]
  %isclosed.0 = phi i64 [ 1, %__llvm_entry ], [ %return11, %end14 ]
  %return6 = call i64 @"lt@III"(i64 %__impl_foreach_index_6.0, i64 %return3)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return9 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_6.0)
  %return11 = call i64 @"primintrinsic@IISI"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0), i64 %return9)
  %return13 = call i64 @"not@II"(i64 %return11)
  %1 = icmp ne i64 %return13, 0
  br i1 %1, label %end, label %end14

end:                                              ; preds = %body, %cond
  %isclosed.1 = phi i64 [ %return11, %body ], [ %isclosed.0, %cond ]
  store i64 %isclosed.1, i64* %_bound_isclosed
  ret void

end14:                                            ; preds = %body
  %output = add i64 %__impl_foreach_index_6.0, 1
  br label %cond
}

; Function Attrs: nounwind
declare i64* @"pointprims@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"primintrinsic@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64 %isclosed) #1 {
__llvm_entry:
  %"<isclosed>" = alloca i64
  %0 = alloca i64
  store i64 %isclosed, i64* %"<isclosed>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@II"(i64* %0, i64* %"<isclosed>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load i64, i64* %"<isclosed>"
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), i64 %evalue2) #3
  store i64 %gvalue, i64* @ptnum
  store i64 %gvalue3, i64* @isclosed
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

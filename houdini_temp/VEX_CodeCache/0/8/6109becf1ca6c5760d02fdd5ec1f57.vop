;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@group_tip = external global i64
@ptnum = external global i64
@0 = private constant [10 x i8] c"group_tip\00"
@1 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound_group_tip, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64 @"neighbourcount@III"(i64 0, i64 %_bound_ptnum1)
  %return2 = call i64 @"eq@III"(i64 %return, i64 1)
  %0 = icmp ne i64 %return2, 0
  %. = select i1 %0, i64 1, i64 0
  store i64 %., i64* %_bound_group_tip
  ret void
}

; Function Attrs: nounwind
declare i64 @"neighbourcount@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %group_tip, i64 %ptnum) #1 {
__llvm_entry:
  %0 = alloca i64
  %"<group_tip>" = alloca i64
  store i64 %group_tip, i64* %"<group_tip>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@II"(i64* %"<group_tip>", i64* %0)
  %evalue = load i64, i64* %"<group_tip>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), i64 %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i64 %ptnum) #3
  store i64 %gvalue, i64* @group_tip
  store i64 %gvalue3, i64* @ptnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

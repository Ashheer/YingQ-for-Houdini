;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [7 x i8] c"length\00"
@1 = private constant [2 x i8] c"P\00"
@pos1 = external global <3 x double>
@v = external global double
@h = external global double
@y = external global double
@c1 = external global double
@a = external global double
@c2 = external global double
@P = external global <3 x double>
@2 = private constant [5 x i8] c"pos1\00"
@3 = private constant [2 x i8] c"v\00"
@4 = private constant [2 x i8] c"h\00"
@5 = private constant [2 x i8] c"y\00"
@6 = private constant [3 x i8] c"c1\00"
@7 = private constant [2 x i8] c"a\00"
@8 = private constant [3 x i8] c"c2\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VFFFFFFV"(<3 x double>* %_bound_pos1, double* %_bound_v, double* %_bound_h, double* %_bound_y, double* %_bound_c1, double* %_bound_a, double* %_bound_c2, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0))
  %return1 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 0)
  %return2 = call i64 @"neg@II"(i64 1)
  %return3 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return2)
  store <3 x double> %return3, <3 x double>* %_bound_pos1
  %return6 = call double @"getcomp@FVI"(<3 x double> %return1, i64 1)
  %return8 = call double @"getcomp@FVI"(<3 x double> %return3, i64 1)
  %output = fsub double %return6, %return8
  %return9 = call double @"abs@FF"(double %output)
  %return11 = call double @"getcomp@FVI"(<3 x double> %return1, i64 0)
  %return13 = call double @"getcomp@FVI"(<3 x double> %return3, i64 0)
  %output14 = fsub double %return11, %return13
  %return15 = call double @"abs@FF"(double %output14)
  store double %return9, double* %_bound_v
  store double %return15, double* %_bound_h
  %output20 = fmul double %return, %return
  %output23 = fmul double %return9, %return9
  %output24 = fsub double %output20, %output23
  %return25 = call double @"sqrt@FF"(double %output24)
  %output27 = call double @"div@FF"(double %return25, double %return15)
  store double %output27, double* %_bound_y
  br label %cond

cond:                                             ; preds = %end41, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output49, %end41 ]
  %a.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %a.1, %end41 ]
  %return30 = call i64 @"npoints@II"(i64 1)
  %return31 = call i64 @"lt@III"(i64 %i.0, i64 %return30)
  %0 = icmp ne i64 %return31, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return33 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %i.0)
  %return35 = call double @"getcomp@FVI"(<3 x double> %return33, i64 1)
  %output37 = fsub double %return35, %output27
  %return38 = call double @"abs@FF"(double %output37)
  %return39 = fcmp olt double %return38, 1.000000e-02
  br i1 %return39, label %true, label %end41

end:                                              ; preds = %cond
  %output52 = call double @"div@FF"(double %return15, double %a.0)
  %output55 = call double @"div@FF"(double %return9, double %a.0)
  %return58 = call double @"neg@FF"(double %return11)
  %output61 = fmul double 2.000000e+00, %output55
  %output63 = fmul double 4.000000e+00, %output55
  %output65 = fmul double %output63, %output55
  %return67 = call double @"exp@FF"(double %output52)
  %output68 = fsub double 1.000000e+00, %return67
  %output69 = fmul double 4.000000e+00, %output68
  %return71 = call double @"neg@FF"(double %output52)
  %return72 = call double @"exp@FF"(double %return71)
  %output73 = fsub double 1.000000e+00, %return72
  %output74 = fmul double %output69, %output73
  %output75 = fsub double %output65, %output74
  %return76 = call double @"sqrt@FF"(double %output75)
  %output77 = fsub double %output61, %return76
  %output80 = fmul double 2.000000e+00, %return67
  %output81 = fsub double 2.000000e+00, %output80
  %output82 = call double @"div@FF"(double %output77, double %output81)
  %return83 = call double @"log@FF"(double %output82)
  %output84 = fmul double %a.0, %return83
  %output85 = fadd double %return58, %output84
  %output92 = fadd double %return11, %output85
  %output94 = call double @"div@FF"(double %output92, double %a.0)
  %return95 = call double @"cosh@FF"(double %output94)
  %output96 = fmul double %a.0, %return95
  %output97 = fsub double %return6, %output96
  store double %output85, double* %_bound_c1
  store double %a.0, double* %_bound_a
  store double %output97, double* %_bound_c2
  %_bound_P102 = load <3 x double>, <3 x double>* %_bound_P
  %return103 = call double @"getcomp@FVI"(<3 x double> %_bound_P102, i64 0)
  %output105 = fadd double %return103, %output85
  %output107 = call double @"div@FF"(double %output105, double %a.0)
  %return108 = call double @"cosh@FF"(double %output107)
  %output109 = fmul double %a.0, %return108
  %output111 = fadd double %output109, %output97
  %return112 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %_bound_P102, double %output111, i64 1)
  %output114 = extractvalue { double, <3 x double> } %return112, 1
  store <3 x double> %output114, <3 x double>* %_bound_P
  ret void

true:                                             ; preds = %body
  %return43 = call double @"getcomp@FVI"(<3 x double> %return33, i64 0)
  %output44 = fmul double 2.000000e+00, %return43
  %output46 = call double @"div@FF"(double %output44, double %return15)
  br label %end41

end41:                                            ; preds = %true, %body
  %a.1 = phi double [ %output46, %true ], [ %a.0, %body ]
  %output49 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
declare double @"abs@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"exp@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"log@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"cosh@FF"(double) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 1)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %pos1, double %v, double %h, double %y, double %c1, double %a, double %c2, <3 x double> %P) #2 {
__llvm_entry:
  %"<v>" = alloca double
  %"<h>" = alloca double
  %"<y>" = alloca double
  %"<c1>" = alloca double
  %"<a>" = alloca double
  %"<c2>" = alloca double
  %"<P>" = alloca <3 x double>
  %"<pos1>" = alloca <3 x double>
  store <3 x double> %pos1, <3 x double>* %"<pos1>"
  store double %v, double* %"<v>"
  store double %h, double* %"<h>"
  store double %y, double* %"<y>"
  store double %c1, double* %"<c1>"
  store double %a, double* %"<a>"
  store double %c2, double* %"<c2>"
  store <3 x double> %P, <3 x double>* %"<P>"
  call void @"__vex_snippet_snippet@VFFFFFFV"(<3 x double>* %"<pos1>", double* %"<v>", double* %"<h>", double* %"<y>", double* %"<c1>", double* %"<a>", double* %"<c2>", <3 x double>* %"<P>")
  %evalue = load <3 x double>, <3 x double>* %"<pos1>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), <3 x double> %evalue) #4
  %evalue1 = load double, double* %"<v>"
  %gvalue2 = call double @"_export@FSF"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), double %evalue1) #4
  %evalue3 = load double, double* %"<h>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), double %evalue3) #4
  %evalue5 = load double, double* %"<y>"
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), double %evalue5) #4
  %evalue7 = load double, double* %"<c1>"
  %gvalue8 = call double @"_export@FSF"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @6, i64 0, i64 0), double %evalue7) #4
  %evalue9 = load double, double* %"<a>"
  %gvalue10 = call double @"_export@FSF"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0), double %evalue9) #4
  %evalue11 = load double, double* %"<c2>"
  %gvalue12 = call double @"_export@FSF"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @8, i64 0, i64 0), double %evalue11) #4
  %evalue13 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue14 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue13) #4
  store <3 x double> %gvalue, <3 x double>* @pos1
  store double %gvalue2, double* @v
  store double %gvalue4, double* @h
  store double %gvalue6, double* @y
  store double %gvalue8, double* @c1
  store double %gvalue10, double* @a
  store double %gvalue12, double* @c2
  store <3 x double> %gvalue14, <3 x double>* @P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

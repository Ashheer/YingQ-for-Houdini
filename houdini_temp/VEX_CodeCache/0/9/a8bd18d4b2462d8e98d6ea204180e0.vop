;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [11 x i8] c"FloorIndex\00"
@2 = private constant [13 x i8] c"profile_type\00"
@3 = private constant [13 x i8] c"CONVEXCORNER\00"
@4 = private constant [30 x i8] c"LedgeBConcaveCornerIDLAtIndex\00"
@5 = private constant [25 x i8] c"BottomLedgeCornerAtIndex\00"
@6 = private constant [30 x i8] c"LedgeTConcaveCornerIDLAtIndex\00"
@7 = private constant [22 x i8] c"TopLedgeCornerAtIndex\00"
@8 = private constant [24 x i8] c"ConcaveCornerIDLAtIndex\00"
@9 = private constant [20 x i8] c"FacadeCornerAtIndex\00"
@10 = private constant [29 x i8] c"LedgeBConvexCornerIDLAtIndex\00"
@11 = private constant [29 x i8] c"LedgeTConvexCornerIDLAtIndex\00"
@12 = private constant [23 x i8] c"ConvexCornerIDLAtIndex\00"
@13 = private constant [10 x i8] c"MODULE_ID\00"
@14 = private constant [13 x i8] c"MODULE_WIDTH\00"
@ptnum = external global i64
@EdgeColumnWidth = external global double
@15 = private constant [6 x i8] c"ptnum\00"
@16 = private constant [16 x i8] c"EdgeColumnWidth\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IF"(i64* %_bound_ptnum, double* %_bound_EdgeColumnWidth) #0 {
__llvm_entry:
  %return = call i64 @"prim@IISI"(i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0), i64 0)
  %return1 = call i64 @"findattribval@IISSII"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0), i64 %return, i64 0)
  %_bound_ptnum2 = load i64, i64* %_bound_ptnum
  %return3 = call i64* @"pointprims@[III"(i64 0, i64 %_bound_ptnum2)
  %return4 = call i64 @"getcomp@I[II"(i64* %return3, i64 0)
  %return5 = call i64 @"prim@IISI"(i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0), i64 %return4)
  %_bound_ptnum6 = load i64, i64* %_bound_ptnum
  %return7 = call i64 @"inpointgroup@IISI"(i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @3, i64 0, i64 0), i64 %_bound_ptnum6)
  %return8 = call i64 @"not@II"(i64 %return7)
  %0 = icmp ne i64 %return8, 0
  %return10 = call i64 @"eq@III"(i64 %return5, i64 1)
  %1 = icmp ne i64 %return10, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  br i1 %1, label %true11, label %false12

false:                                            ; preds = %__llvm_entry
  br i1 %1, label %true33, label %false34

end:                                              ; preds = %true42, %false43, %true33, %true20, %false21, %true11
  %scalar.0 = phi double [ %return17, %true11 ], [ %return26, %true20 ], [ %return30, %false21 ], [ %return39, %true33 ], [ %return48, %true42 ], [ %return52, %false43 ]
  %CornerID.0 = phi i8* [ %return15, %true11 ], [ %return24, %true20 ], [ %return28, %false21 ], [ %return37, %true33 ], [ %return46, %true42 ], [ %return50, %false43 ]
  %return54 = call i64 @"findattribval@IISSSI"(i64 2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @13, i64 0, i64 0), i8* %CornerID.0, i64 0)
  %return56 = call double @"point@FISI"(i64 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @14, i64 0, i64 0), i64 %return54)
  %output = fmul double %return56, %scalar.0
  store double %output, double* %_bound_EdgeColumnWidth
  ret void

true11:                                           ; preds = %true
  %return15 = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @4, i64 0, i64 0), i64 %return1)
  %return17 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @5, i64 0, i64 0), i64 %return1)
  br label %end

false12:                                          ; preds = %true
  %return19 = call i64 @"eq@III"(i64 %return5, i64 2)
  %2 = icmp ne i64 %return19, 0
  br i1 %2, label %true20, label %false21

true20:                                           ; preds = %false12
  %return24 = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @6, i64 0, i64 0), i64 %return1)
  %return26 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @7, i64 0, i64 0), i64 %return1)
  br label %end

false21:                                          ; preds = %false12
  %return28 = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @8, i64 0, i64 0), i64 %return1)
  %return30 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @9, i64 0, i64 0), i64 %return1)
  br label %end

true33:                                           ; preds = %false
  %return37 = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @10, i64 0, i64 0), i64 %return1)
  %return39 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @5, i64 0, i64 0), i64 %return1)
  br label %end

false34:                                          ; preds = %false
  %return41 = call i64 @"eq@III"(i64 %return5, i64 2)
  %3 = icmp ne i64 %return41, 0
  br i1 %3, label %true42, label %false43

true42:                                           ; preds = %false34
  %return46 = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @11, i64 0, i64 0), i64 %return1)
  %return48 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @7, i64 0, i64 0), i64 %return1)
  br label %end

false43:                                          ; preds = %false34
  %return50 = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @12, i64 0, i64 0), i64 %return1)
  %return52 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @9, i64 0, i64 0), i64 %return1)
  br label %end
}

; Function Attrs: nounwind
declare i64 @"prim@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"findattribval@IISSII"(i64, i8*, i8*, i64, i64) #1

; Function Attrs: nounwind
declare i64* @"pointprims@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"inpointgroup@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"findattribval@IISSSI"(i64, i8*, i8*, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, double %EdgeColumnWidth) #1 {
__llvm_entry:
  %"<EdgeColumnWidth>" = alloca double
  %0 = alloca i64
  store double %EdgeColumnWidth, double* %"<EdgeColumnWidth>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@IF"(i64* %0, double* %"<EdgeColumnWidth>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @15, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load double, double* %"<EdgeColumnWidth>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @16, i64 0, i64 0), double %evalue2) #3
  store i64 %gvalue, i64* @ptnum
  store double %gvalue3, double* @EdgeColumnWidth
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

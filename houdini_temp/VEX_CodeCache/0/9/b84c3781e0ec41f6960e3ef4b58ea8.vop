;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [16 x i8] c"../uv_attribute\00"
@1 = private constant [21 x i8] c"boder_fuse_tolerance\00"
@vtxnum = external global i64
@2 = private constant [7 x i8] c"vtxnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_vtxnum) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i64 0, i64 0))
  %_bound_vtxnum1 = load i64, i64* %_bound_vtxnum
  %return2 = call <3 x double> @"vertex@VISI"(i64 1, i8* %return, i64 %_bound_vtxnum1)
  %_bound_vtxnum4 = load i64, i64* %_bound_vtxnum
  %return5 = call <3 x double> @"vertex@VISI"(i64 0, i8* %return, i64 %_bound_vtxnum4)
  %output = call <3 x double> @"sub@VV"(<3 x double> %return5, <3 x double> %return2)
  %return8 = call double @"length@FV"(<3 x double> %output)
  %return10 = call double @"ch@FS"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @1, i64 0, i64 0))
  %return11 = fcmp olt double %return8, %return10
  br i1 %return11, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_vtxnum14 = load i64, i64* %_bound_vtxnum
  %return15 = call i64 @"neg@II"(i64 1)
  %return17 = call i64 @"setvertexattrib@IISIIV"(i64 0, i8* %return, i64 %_bound_vtxnum14, i64 %return15, <3 x double> %return2)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"vertex@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind
declare i64 @"setvertexattrib@IISIIV"(i64, i8*, i64, i64, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %vtxnum) #2 {
__llvm_entry:
  %0 = alloca i64
  store i64 %vtxnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), i64 %vtxnum) #3
  store i64 %gvalue, i64* @vtxnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

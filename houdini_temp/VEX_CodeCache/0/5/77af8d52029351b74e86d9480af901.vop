;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [12 x i8] c"edgeToCurve\00"
@1 = private constant [0 x i64] zeroinitializer
@exp = external global i64*
@2 = private constant [4 x i8] c"exp\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[I"(i64** %_bound_exp) #0 {
__llvm_entry:
  %return = call i64* @"expandedgegroup@[IIS"(i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i64 0, i64 0))
  store i64* %return, i64** %_bound_exp
  ret void
}

; Function Attrs: nounwind
declare i64* @"expandedgegroup@[IIS"(i64, i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64* %exp) #1 {
__llvm_entry:
  %"<exp>" = alloca i64*
  store i64* %exp, i64** %"<exp>"
  call void @"__vex_snippet_snippet@[I"(i64** %"<exp>")
  %evalue = load i64*, i64** %"<exp>"
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i64 0, i64 0), i64* %evalue) #2
  store i64* %gvalue, i64** @exp
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

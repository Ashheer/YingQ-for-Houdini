;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@parms = external global i62
@0 = private constant [6 x i8] c"parms\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@D"(i62* %_bound_parms) #0 {
__llvm_entry:
  ret void
}

; Function Attrs: nounwind
define void @__vex_snippet(i62 %parms) #1 {
__llvm_entry:
  %0 = alloca i62
  store i62 %parms, i62* %0
  call void @"__vex_snippet_snippet@D"(i62* %0)
  %gvalue = call i62 @"_export@DSD"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i62 %parms) #2
  store i62 %gvalue, i62* @parms
  ret void
}

declare i62 @"_export@DSD"(i8*, i62)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i62 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

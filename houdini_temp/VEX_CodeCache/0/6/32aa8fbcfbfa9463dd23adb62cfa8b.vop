;_name	/obj/geo1/tutorial_cable1/mountain1/unified_noise_vector1
; ModuleID = 'obj_geo1_tutorial_cable1_mountain1_unified_noise_vector1'
source_filename = "obj_geo1_tutorial_cable1_mountain1_unified_noise_vector1"

%nsdata = type { i8*, double, double, double, i64 }
%nndata = type { double, double }

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [8 x i8] c"simplex\00"
@2 = private constant [10 x i8] c"opinput:1\00"
@3 = private constant [5 x i8] c"file\00"
@4 = private constant [4 x i8] c"all\00"
@5 = private constant [5 x i8] c"none\00"
@6 = private constant [2 x i8] c"1\00"
@7 = private constant [0 x <2 x double>] zeroinitializer
@8 = private constant [10 x i8] c"remapramp\00"
@__noise = external global <3 x double>
@9 = private constant [8 x i8] c"__noise\00"
@10 = private constant [12 x i8] c"defgeo.bgeo\00"
@11 = private constant [8 x i8] c"buckets\00"
@12 = private constant [12 x i8] c"DESIRED_CDF\00"
@13 = private constant [15 x i8] c"NOISE_TYPE_CDF\00"

; Function Attrs: alwaysinline nounwind
define private void @"_obj_geo1_tutorial_cable1_mountain1_unified_noise_vector1_snippet1@VVV"(<3 x double>* %pos, <3 x double>* %elementsize, <3 x double>* %offset) #0 {
__llvm_entry:
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare i64* @"array@[I"() #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"min@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64* @"resize@[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"max@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #1

; Function Attrs: nounwind readnone
declare double* @"array@[F"() #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[F"(double*) #1

; Function Attrs: nounwind readnone
declare double* @"resize@[FI"(double*, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #1

; Function Attrs: nounwind readnone
declare { double, double* } @"setcomp@F[FFI"(double*, double, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double>* @"array@[V"() #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[V"(<3 x double>*) #1

; Function Attrs: nounwind readnone
declare <3 x double>* @"resize@[VI"(<3 x double>*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"max@VVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>*, <3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <4 x double>* @"array@[P"() #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[P"(<4 x double>*) #1

; Function Attrs: nounwind readnone
declare <4 x double>* @"resize@[PI"(<4 x double>*, i64) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"getcomp@P[PI"(<4 x double>*, i64) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"max@PPP"(<4 x double>, <4 x double>) #1

; Function Attrs: nounwind readnone
declare { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>*, <4 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PF"(double) #1

; Function Attrs: nounwind readnone
declare double @"min@FFF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FPI"(<4 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PFFFF"(double, double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"min@VVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"min@PPP"(<4 x double>, <4 x double>) #1

; Function Attrs: nounwind readnone
declare double @"pow@FFF"(double, double) #1

; Function Attrs: nounwind readnone
declare i64 @"le@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"pow@VVF"(<3 x double>, double) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"pow@PPF"(<4 x double>, double) #1

; Function Attrs: nounwind readnone
declare double @"log@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"log@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"log@PP"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"div@PP"(<4 x double>, <4 x double>) #1

; Function Attrs: alwaysinline nounwind
define private double @"bias@FFF"(double* %x, double* %b) #0 {
__llvm_entry:
  %b1 = load double, double* %b
  %return = fcmp oeq double %b1, 5.000000e-01
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %x3 = load double, double* %x
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %return5 = call double @"clamp@FFFF"(double %b1, double 1.000000e-06, double 9.999990e-01)
  %x6 = load double, double* %x
  %return8 = call double @"log@FF"(double %return5)
  %return9 = call double @"neg@FF"(double %return8)
  %output = call double @"div@FF"(double %return9, double 0x3FE62E42FEFA39EF)
  %return10 = call double @"pow@FFF"(double %x6, double %output)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end, %true
  %UnifiedRetVal = phi double [ %x3, %true ], [ %return10, %end ]
  ret double %UnifiedRetVal
}

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"bias@VVV"(<3 x double>* %x, <3 x double>* %b) #0 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  %b1 = load <3 x double>, <3 x double>* %b
  %cast = call <3 x double> @"set@VF"(double 5.000000e-01)
  %return = call i64 @"eq@IVV"(<3 x double> %b1, <3 x double> %cast)
  %6 = icmp ne i64 %return, 0
  br i1 %6, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %x2 = load <3 x double>, <3 x double>* %x
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %x3 = load <3 x double>, <3 x double>* %x
  %return4 = call double @"getcomp@FVI"(<3 x double> %x3, i64 0)
  store double %return4, double* %0
  %b5 = load <3 x double>, <3 x double>* %b
  %return6 = call double @"getcomp@FVI"(<3 x double> %b5, i64 0)
  store double %return6, double* %1
  %bias = call double @"bias@FFF"(double* %0, double* %1)
  %x7 = load <3 x double>, <3 x double>* %x
  %return8 = call double @"getcomp@FVI"(<3 x double> %x7, i64 1)
  store double %return8, double* %2
  %b9 = load <3 x double>, <3 x double>* %b
  %return10 = call double @"getcomp@FVI"(<3 x double> %b9, i64 1)
  store double %return10, double* %3
  %bias11 = call double @"bias@FFF"(double* %2, double* %3)
  %x12 = load <3 x double>, <3 x double>* %x
  %return13 = call double @"getcomp@FVI"(<3 x double> %x12, i64 2)
  store double %return13, double* %4
  %b14 = load <3 x double>, <3 x double>* %b
  %return15 = call double @"getcomp@FVI"(<3 x double> %b14, i64 2)
  store double %return15, double* %5
  %bias16 = call double @"bias@FFF"(double* %4, double* %5)
  %return17 = call <3 x double> @"set@VFFF"(double %bias, double %bias11, double %bias16)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end, %true
  %UnifiedRetVal = phi <3 x double> [ %x2, %true ], [ %return17, %end ]
  ret <3 x double> %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare i64 @"eq@IVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"gain@VVV"(<3 x double>* %x, <3 x double>* %g) #0 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %g1 = load <3 x double>, <3 x double>* %g
  %cast = call <3 x double> @"set@VF"(double 5.000000e-01)
  %return = call i64 @"eq@IVV"(<3 x double> %g1, <3 x double> %cast)
  %9 = icmp ne i64 %return, 0
  br i1 %9, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %x2 = load <3 x double>, <3 x double>* %x
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %output = call <3 x double> @"sub@VV"(<3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> %g1)
  %x5 = load <3 x double>, <3 x double>* %x
  %cast6 = call <3 x double> @"set@VI"(i64 2)
  %output7 = call <3 x double> @"mul@VV"(<3 x double> %x5, <3 x double> %cast6)
  %return9 = call double @"getcomp@FVI"(<3 x double> %x5, i64 0)
  %return10 = fcmp olt double %return9, 5.000000e-01
  %return15 = call double @"getcomp@FVI"(<3 x double> %output7, i64 0)
  br i1 %return10, label %true12, label %false

true12:                                           ; preds = %end
  store double %return15, double* %0
  %return17 = call double @"getcomp@FVI"(<3 x double> %output, i64 0)
  store double %return17, double* %1
  %bias = call double @"bias@FFF"(double* %0, double* %1)
  %output18 = fmul double %bias, 5.000000e-01
  br label %end13

false:                                            ; preds = %end
  %output21 = fsub double 2.000000e+00, %return15
  store double %output21, double* %0
  %return23 = call double @"getcomp@FVI"(<3 x double> %output, i64 0)
  store double %return23, double* %2
  %bias24 = call double @"bias@FFF"(double* %0, double* %2)
  %output25 = fmul double %bias24, 5.000000e-01
  %output26 = fsub double 1.000000e+00, %output25
  br label %end13

end13:                                            ; preds = %false, %true12
  %phi = phi double [ %output18, %true12 ], [ %output26, %false ]
  %x27 = load <3 x double>, <3 x double>* %x
  %return28 = call double @"getcomp@FVI"(<3 x double> %x27, i64 1)
  %return29 = fcmp olt double %return28, 5.000000e-01
  %return35 = call double @"getcomp@FVI"(<3 x double> %output7, i64 1)
  br i1 %return29, label %true31, label %false32

true31:                                           ; preds = %end13
  store double %return35, double* %3
  %return37 = call double @"getcomp@FVI"(<3 x double> %output, i64 1)
  store double %return37, double* %4
  %bias38 = call double @"bias@FFF"(double* %3, double* %4)
  %output39 = fmul double %bias38, 5.000000e-01
  br label %end33

false32:                                          ; preds = %end13
  %output42 = fsub double 2.000000e+00, %return35
  store double %output42, double* %3
  %return44 = call double @"getcomp@FVI"(<3 x double> %output, i64 1)
  store double %return44, double* %5
  %bias45 = call double @"bias@FFF"(double* %3, double* %5)
  %output46 = fmul double %bias45, 5.000000e-01
  %output47 = fsub double 1.000000e+00, %output46
  br label %end33

end33:                                            ; preds = %false32, %true31
  %phi48 = phi double [ %output39, %true31 ], [ %output47, %false32 ]
  %x49 = load <3 x double>, <3 x double>* %x
  %return50 = call double @"getcomp@FVI"(<3 x double> %x49, i64 2)
  %return51 = fcmp olt double %return50, 5.000000e-01
  %return57 = call double @"getcomp@FVI"(<3 x double> %output7, i64 2)
  br i1 %return51, label %true53, label %false54

true53:                                           ; preds = %end33
  store double %return57, double* %6
  %return59 = call double @"getcomp@FVI"(<3 x double> %output, i64 2)
  store double %return59, double* %7
  %bias60 = call double @"bias@FFF"(double* %6, double* %7)
  %output61 = fmul double %bias60, 5.000000e-01
  br label %end55

false54:                                          ; preds = %end33
  %output64 = fsub double 2.000000e+00, %return57
  store double %output64, double* %6
  %return66 = call double @"getcomp@FVI"(<3 x double> %output, i64 2)
  store double %return66, double* %8
  %bias67 = call double @"bias@FFF"(double* %6, double* %8)
  %output68 = fmul double %bias67, 5.000000e-01
  %output69 = fsub double 1.000000e+00, %output68
  br label %end55

end55:                                            ; preds = %false54, %true53
  %phi70 = phi double [ %output61, %true53 ], [ %output69, %false54 ]
  %return71 = call <3 x double> @"set@VFFF"(double %phi, double %phi48, double %phi70)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end55, %true
  %UnifiedRetVal = phi <3 x double> [ %x2, %true ], [ %return71, %end55 ]
  ret <3 x double> %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private double @"pyro_vopfw_VOP_CTXT@FV"(<3 x double>* %p) #0 {
__llvm_entry:
  ret double undef
}

; Function Attrs: alwaysinline nounwind
define private double @"pyro_vopfw_VOP_CTXT@FP"(<4 x double>* %p) #0 {
__llvm_entry:
  ret double undef
}

; Function Attrs: alwaysinline nounwind
define private %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %name, double* %min, double* %max, double* %avg, i64* %symmetric) #0 {
__llvm_entry:
  %name1 = load i8*, i8** %name
  %0 = insertvalue %nsdata undef, i8* %name1, 0
  %min2 = load double, double* %min
  %1 = insertvalue %nsdata %0, double %min2, 1
  %max4 = load double, double* %max
  %2 = insertvalue %nsdata %1, double %max4, 2
  %avg6 = load double, double* %avg
  %3 = insertvalue %nsdata %2, double %avg6, 3
  %symmetric8 = load i64, i64* %symmetric
  %4 = insertvalue %nsdata %3, i64 %symmetric8, 4
  ret %nsdata %4
}

; Function Attrs: alwaysinline nounwind
define private %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"() #0 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca i64
  %4 = alloca i8*
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8** %4
  store double 0.000000e+00, double* %0
  store double 0.000000e+00, double* %1
  store double 0.000000e+00, double* %2
  store i64 0, i64* %3
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %4, double* %0, double* %1, double* %2, i64* %3)
  ret %nsdata %nsdata
}

; Function Attrs: alwaysinline nounwind
define private double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %stats) #0 {
__llvm_entry:
  %stats1 = load %nsdata, %nsdata* %stats
  %avg = extractvalue %nsdata %stats1, 3
  ret double %avg
}

; Function Attrs: nounwind readnone
declare double @"xnoise@FF"(double) #1

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #1

; Function Attrs: nounwind readnone
declare double @"xnoise@FFF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"xnoise@FV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"xnoise@FP"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VF"(double) #1

; Function Attrs: nounwind
declare <3 x double> @"fit@VVVVVV"(<3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VFF"(double, double) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"nwrap_simplex@VVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #0 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %return = call <3 x double> @"xnoise@VV"(<3 x double> %p1)
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i8** %0
  store double 4.349330e-02, double* %1
  store double 9.701210e-01, double* %2
  store double 3.151760e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  %cast = call <3 x double> @"set@VF"(double %min)
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i8** %5
  store double 4.349330e-02, double* %6
  store double 9.701210e-01, double* %7
  store double 3.151760e-01, double* %8
  store i64 1, i64* %9
  %nsdata2 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata2, 2
  %cast3 = call <3 x double> @"set@VF"(double %max)
  %return4 = call <3 x double> @"fit@VVVVVV"(<3 x double> %return, <3 x double> %cast, <3 x double> %cast3, <3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  ret <3 x double> %return4
}

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VV"(<3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"nwrap_simplex@VPPF"(<4 x double>* %p, <4 x double>* %per, double* %flow) #0 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <4 x double>, <4 x double>* %p
  %return = call <3 x double> @"xnoise@VP"(<4 x double> %p1)
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i8** %0
  store double 1.360200e-01, double* %1
  store double 8.486790e-01, double* %2
  store double 5.103550e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  %cast = call <3 x double> @"set@VF"(double %min)
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i8** %5
  store double 1.360200e-01, double* %6
  store double 8.486790e-01, double* %7
  store double 5.103550e-01, double* %8
  store i64 1, i64* %9
  %nsdata2 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata2, 2
  %cast3 = call <3 x double> @"set@VF"(double %max)
  %return4 = call <3 x double> @"fit@VVVVVV"(<3 x double> %return, <3 x double> %cast, <3 x double> %cast3, <3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  ret <3 x double> %return4
}

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VP"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare { double, double } @"xnoised@FFF"(double) #1

; Function Attrs: nounwind readnone
declare { double, double, double } @"xnoised@FFFFF"(double, double) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #1

; Function Attrs: nounwind readnone
declare { double, double, double, double } @"xnoised@VFFFF"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare { double, double, double, double, double } @"xnoised@PFFFFF"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double> } @"xnoised@FVV"(double) #1

; Function Attrs: nounwind
declare double @"avg@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>, <3 x double> } @"xnoised@FFVVV"(double, double) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"vngrad_simplex@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #0 {
__llvm_entry:
  %p1 = load <3 x double>, <3 x double>* %p
  %output = call { <3 x double>, <3 x double>, <3 x double>, <3 x double> } @"xnoised@VVVVV"(<3 x double> %p1)
  %output3 = extractvalue { <3 x double>, <3 x double>, <3 x double>, <3 x double> } %output, 1
  %output4 = extractvalue { <3 x double>, <3 x double>, <3 x double>, <3 x double> } %output, 2
  %output5 = extractvalue { <3 x double>, <3 x double>, <3 x double>, <3 x double> } %output, 3
  %return = call double @"avg@FV"(<3 x double> %output3)
  %return8 = call double @"avg@FV"(<3 x double> %output4)
  %return10 = call double @"avg@FV"(<3 x double> %output5)
  %return11 = call <3 x double> @"set@VFFF"(double %return, double %return8, double %return10)
  ret <3 x double> %return11
}

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>, <3 x double>, <3 x double> } @"xnoised@VVVVV"(<3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private <4 x double> @"vngrad_simplex@PPPFF"(<4 x double>* %p, <4 x double>* %per, double* %flow, double* %delta) #0 {
__llvm_entry:
  %p1 = load <4 x double>, <4 x double>* %p
  %output = call { <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double> } @"xnoised@PVVVVV"(<4 x double> %p1)
  %output3 = extractvalue { <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double> } %output, 1
  %output4 = extractvalue { <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double> } %output, 2
  %output5 = extractvalue { <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double> } %output, 3
  %output6 = extractvalue { <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double> } %output, 4
  %return = call double @"avg@FV"(<3 x double> %output3)
  %return9 = call double @"avg@FV"(<3 x double> %output4)
  %return11 = call double @"avg@FV"(<3 x double> %output5)
  %return13 = call double @"avg@FV"(<3 x double> %output6)
  %return14 = call <4 x double> @"set@PFFFF"(double %return, double %return9, double %return11, double %return13)
  ret <4 x double> %return14
}

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double> } @"xnoised@PVVVVV"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind
declare double @"abs@FF"(double) #2

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"noise_correct@VVZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(<3 x double>* %val, %nsdata* %stats, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <4 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow) #0 {
__llvm_entry:
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %cast = call <3 x double> @"set@VI"(i64 1)
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = load %nsdata, %nsdata* %stats
  %avg = extractvalue %nsdata %stats3, 3
  %val4 = load <3 x double>, <3 x double>* %val
  %fold5 = load i64, i64* %fold
  %symmetric = extractvalue %nsdata %stats3, 4
  %return7 = call i64 @"and@III"(i64 %fold5, i64 %symmetric)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %true8, label %end9

true8:                                            ; preds = %end
  %cast12 = call <3 x double> @"set@VF"(double %avg)
  %output = call <3 x double> @"sub@VV"(<3 x double> %val4, <3 x double> %cast12)
  %return13 = call <3 x double> @"abs@VV"(<3 x double> %output)
  %output16 = fsub double 1.000000e+00, %avg
  %return17 = call double @"max@FFF"(double %avg, double %output16)
  %cast18 = call <3 x double> @"set@VF"(double %return17)
  %output19 = call <3 x double> @"div@VV"(<3 x double> %return13, <3 x double> %cast18)
  br label %end9

end9:                                             ; preds = %true8, %end
  %out.0 = phi <3 x double> [ %output19, %true8 ], [ %val4, %end ]
  %inv20 = load i64, i64* %inv
  %1 = icmp ne i64 %inv20, 0
  br i1 %1, label %true21, label %end22

true21:                                           ; preds = %end9
  %output24 = call <3 x double> @"sub@VV"(<3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> %out.0)
  br label %end22

end22:                                            ; preds = %true21, %end9
  %out.1 = phi <3 x double> [ %output24, %true21 ], [ %out.0, %end9 ]
  %expon25 = load double, double* %expon
  %return26 = fcmp one double %expon25, 1.000000e+00
  br i1 %return26, label %true28, label %end29

true28:                                           ; preds = %end22
  %return32 = call <3 x double> @"pow@VVF"(<3 x double> %out.1, double %expon25)
  br label %end29

end29:                                            ; preds = %true28, %end22
  %out.2 = phi <3 x double> [ %return32, %true28 ], [ %out.1, %end22 ]
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end29, %true
  %UnifiedRetVal = phi <3 x double> [ %cast, %true ], [ %out.2, %end29 ]
  ret <3 x double> %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare <3 x double> @"abs@VV"(<3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %stats, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <4 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow) #0 {
__llvm_entry:
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = load %nsdata, %nsdata* %stats
  %avg = extractvalue %nsdata %stats3, 3
  %fold4 = load i64, i64* %fold
  %symmetric = extractvalue %nsdata %stats3, 4
  %return6 = call i64 @"and@III"(i64 %fold4, i64 %symmetric)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %true7, label %end8

true7:                                            ; preds = %end
  %output = fmul double %avg, %avg
  br label %end8

end8:                                             ; preds = %true7, %end
  %navg.0 = phi double [ %output, %true7 ], [ %avg, %end ]
  %inv11 = load i64, i64* %inv
  %1 = icmp ne i64 %inv11, 0
  br i1 %1, label %true12, label %end13

true12:                                           ; preds = %end8
  %output15 = fsub double 1.000000e+00, %navg.0
  br label %end13

end13:                                            ; preds = %true12, %end8
  %navg.1 = phi double [ %output15, %true12 ], [ %navg.0, %end8 ]
  %expon16 = load double, double* %expon
  %return17 = fcmp one double %expon16, 1.000000e+00
  br i1 %return17, label %true19, label %end20

true19:                                           ; preds = %end13
  %return23 = call double @"pow@FFF"(double %navg.1, double %expon16)
  br label %end20

end20:                                            ; preds = %true19, %end13
  %navg.2 = phi double [ %return23, %true19 ], [ %navg.1, %end13 ]
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end20, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %navg.2, %end20 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %tgt, %nsdata* %stats, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <4 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow) #0 {
__llvm_entry:
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %tgt3 = load double, double* %tgt
  %fold4 = load i64, i64* %fold
  %stats5 = load %nsdata, %nsdata* %stats
  %symmetric = extractvalue %nsdata %stats5, 4
  %return6 = call i64 @"and@III"(i64 %fold4, i64 %symmetric)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %true7, label %end8

true7:                                            ; preds = %end
  %output = fmul double %tgt3, %tgt3
  br label %end8

end8:                                             ; preds = %true7, %end
  %navg.0 = phi double [ %output, %true7 ], [ %tgt3, %end ]
  %inv11 = load i64, i64* %inv
  %1 = icmp ne i64 %inv11, 0
  br i1 %1, label %true12, label %end13

true12:                                           ; preds = %end8
  %output15 = fsub double 1.000000e+00, %navg.0
  br label %end13

end13:                                            ; preds = %true12, %end8
  %navg.1 = phi double [ %output15, %true12 ], [ %navg.0, %end8 ]
  %expon16 = load double, double* %expon
  %return17 = fcmp one double %expon16, 1.000000e+00
  br i1 %return17, label %true19, label %end20

true19:                                           ; preds = %end13
  %return23 = call double @"pow@FFF"(double %navg.1, double %expon16)
  br label %end20

end20:                                            ; preds = %true19, %end13
  %navg.2 = phi double [ %return23, %true19 ], [ %navg.1, %end13 ]
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end20, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %navg.2, %end20 ]
  ret double %UnifiedRetVal
}

; Function Attrs: nounwind
declare double @"set@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"smooth@FFFF"(double, double, double) #1

; Function Attrs: nounwind
declare double @"lerp@FFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UI"(i64) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UF"(double) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"add@UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"mul@UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VU"(<2 x double>) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PI"(i64) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"add@PP"(<4 x double>, <4 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"mul@PP"(<4 x double>, <4 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"set@VP"(<4 x double>) #2

; Function Attrs: nounwind
declare <4 x double> @"set@PV"(<3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"lerp@VVVF"(<3 x double>, <3 x double>, double) #2

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"noise_simplex@VVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #0 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca <3 x double>
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  %cast3 = call <3 x double> @"set@VI"(i64 1)
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats4 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i8** %0
  store double 4.349330e-02, double* %1
  store double 9.701210e-01, double* %2
  store double 3.151760e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast5 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast5, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp7 = load <3 x double>, <3 x double>* %pp
  %disp10 = load double, double* %disp
  %dolw11 = load i64, i64* %dolw
  %cast12 = sitofp i64 %dolw11 to double
  %output = fmul double %disp10, %cast12
  %return13 = fcmp one double %output, 0.000000e+00
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  %cast18 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output19 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %cast18)
  %dfreq20 = load double, double* %dfreq
  %cast21 = call <3 x double> @"set@VF"(double %dfreq20)
  %output22 = call <3 x double> @"mul@VV"(<3 x double> %output19, <3 x double> %cast21)
  store <3 x double> %output22, <3 x double>* %5
  %nwrap_simplex = call <3 x double> @"nwrap_simplex@VVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp24 = load double, double* %disp
  %cast27 = call <3 x double> @"set@VF"(double %nsdata.fca.3.extract)
  %output28 = call <3 x double> @"sub@VV"(<3 x double> %nwrap_simplex, <3 x double> %cast27)
  %cast29 = call <3 x double> @"set@VF"(double %disp24)
  %output30 = call <3 x double> @"mul@VV"(<3 x double> %cast29, <3 x double> %output28)
  %output33 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return34 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output33)
  %cast35 = call <3 x double> @"set@VF"(double %return34)
  %output36 = call <3 x double> @"div@VV"(<3 x double> %output30, <3 x double> %cast35)
  br label %end16

end16:                                            ; preds = %true15, %end
  %dpl.0 = phi <3 x double> [ %output36, %true15 ], [ %cast5, %end ]
  %gflow37 = load double, double* %gflow
  %dogw38 = load i64, i64* %dogw
  %cast39 = sitofp i64 %dogw38 to double
  %output40 = fmul double %gflow37, %cast39
  %return41 = fcmp one double %output40, 0.000000e+00
  br i1 %return41, label %true43, label %end44

true43:                                           ; preds = %end16
  %pp46 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp46, <3 x double>* %8
  %vngrad_simplex = call <3 x double> @"vngrad_simplex@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast47 = call <3 x double> @"set@VF"(double %gflow37)
  %output48 = call <3 x double> @"mul@VV"(<3 x double> %cast47, <3 x double> %vngrad_simplex)
  br label %end44

end44:                                            ; preds = %true43, %end16
  %dpg.0 = phi <3 x double> [ %output48, %true43 ], [ %cast5, %end16 ]
  %pp49 = load <3 x double>, <3 x double>* %pp
  %accl50 = load i64, i64* %accl
  %cast52 = call <3 x double> @"set@VI"(i64 %accl50)
  %output53 = call <3 x double> @"mul@VV"(<3 x double> %cast52, <3 x double> %dpl.0)
  %accg54 = load i64, i64* %accg
  %cast56 = call <3 x double> @"set@VI"(i64 %accg54)
  %output57 = call <3 x double> @"mul@VV"(<3 x double> %cast56, <3 x double> %dpg.0)
  %output58 = call <3 x double> @"add@VV"(<3 x double> %output53, <3 x double> %output57)
  %output59 = call <3 x double> @"add@VV"(<3 x double> %pp49, <3 x double> %output58)
  store <3 x double> %output59, <3 x double>* %pp
  %output62 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output62, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off65 = load <3 x double>, <3 x double>* %x_off
  %output66 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %x_off65)
  store <3 x double> %output66, <3 x double>* %12
  %nwrap_simplex68 = call <3 x double> @"nwrap_simplex@VVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store <3 x double> %nwrap_simplex68, <3 x double>* %15
  %stats70.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats70.fca.0.gep
  %stats70.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats70.fca.1.gep
  %stats70.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats70.fca.2.gep
  %stats70.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats70.fca.3.gep
  %stats70.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats70.fca.4.gep
  %inv71 = load i64, i64* %inv
  store i64 %inv71, i64* %17
  %fold72 = load i64, i64* %fold
  store i64 %fold72, i64* %18
  %expon73 = load double, double* %expon
  store double %expon73, double* %22
  %noise_correct = call <3 x double> @"noise_correct@VVZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(<3 x double>* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats74.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats74.fca.0.gep
  %stats74.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats74.fca.1.gep
  %stats74.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats74.fca.2.gep
  %stats74.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats74.fca.3.gep
  %stats74.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats74.fca.4.gep
  %inv75 = load i64, i64* %inv
  store i64 %inv75, i64* %31
  %fold76 = load i64, i64* %fold
  store i64 %fold76, i64* %32
  %expon77 = load double, double* %expon
  store double %expon77, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw78 = load double, double* %fw
  %disp79 = load double, double* %disp
  %dfreq80 = load double, double* %dfreq
  %output81 = fmul double %disp79, %dfreq80
  %return82 = call double @"abs@FF"(double %output81)
  %output83 = fadd double %return82, 1.000000e+00
  %output84 = fmul double %fw78, %output83
  %x_avg86 = load double, double* %x_avg
  %cast87 = call <3 x double> @"set@VF"(double %x_avg86)
  %return89 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output84)
  %return90 = call <3 x double> @"lerp@VVVF"(<3 x double> %noise_correct, <3 x double> %cast87, double %return89)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end44, %true
  %UnifiedRetVal = phi <3 x double> [ %cast3, %true ], [ %return90, %end44 ]
  ret <3 x double> %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"noise_simplex@VPIIIIFFPIIFFFFFV"(<4 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <4 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #0 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <4 x double>
  %6 = alloca <4 x double>
  %7 = alloca double
  %8 = alloca <4 x double>
  %9 = alloca <4 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <4 x double>
  %13 = alloca <4 x double>
  %14 = alloca double
  %15 = alloca <3 x double>
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  %cast3 = call <3 x double> @"set@VI"(i64 1)
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats4 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i8** %0
  store double 1.360200e-01, double* %1
  store double 8.486790e-01, double* %2
  store double 5.103550e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast5 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast5, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp7 = load <4 x double>, <4 x double>* %pp
  %cast8 = call <4 x double> @"set@PI"(i64 0)
  %disp10 = load double, double* %disp
  %dolw11 = load i64, i64* %dolw
  %cast12 = sitofp i64 %dolw11 to double
  %output = fmul double %disp10, %cast12
  %return13 = fcmp one double %output, 0.000000e+00
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  %cast18 = call <4 x double> @"set@PF"(double 1.234560e+02)
  %output19 = call <4 x double> @"add@PP"(<4 x double> %pp7, <4 x double> %cast18)
  %dfreq20 = load double, double* %dfreq
  %cast21 = call <4 x double> @"set@PF"(double %dfreq20)
  %output22 = call <4 x double> @"mul@PP"(<4 x double> %output19, <4 x double> %cast21)
  store <4 x double> %output22, <4 x double>* %5
  %nwrap_simplex = call <3 x double> @"nwrap_simplex@VPPF"(<4 x double>* %5, <4 x double>* %6, double* %7)
  %disp24 = load double, double* %disp
  %cast27 = call <3 x double> @"set@VF"(double %nsdata.fca.3.extract)
  %output28 = call <3 x double> @"sub@VV"(<3 x double> %nwrap_simplex, <3 x double> %cast27)
  %cast29 = call <3 x double> @"set@VF"(double %disp24)
  %output30 = call <3 x double> @"mul@VV"(<3 x double> %cast29, <3 x double> %output28)
  %output33 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return34 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output33)
  %cast35 = call <3 x double> @"set@VF"(double %return34)
  %output36 = call <3 x double> @"div@VV"(<3 x double> %output30, <3 x double> %cast35)
  %cast37 = call <4 x double> @"set@PV"(<3 x double> %output36)
  br label %end16

end16:                                            ; preds = %true15, %end
  %dpl.0 = phi <4 x double> [ %cast37, %true15 ], [ %cast8, %end ]
  %gflow38 = load double, double* %gflow
  %dogw39 = load i64, i64* %dogw
  %cast40 = sitofp i64 %dogw39 to double
  %output41 = fmul double %gflow38, %cast40
  %return42 = fcmp one double %output41, 0.000000e+00
  br i1 %return42, label %true44, label %end45

true44:                                           ; preds = %end16
  %pp47 = load <4 x double>, <4 x double>* %pp
  store <4 x double> %pp47, <4 x double>* %8
  %vngrad_simplex = call <4 x double> @"vngrad_simplex@PPPFF"(<4 x double>* %8, <4 x double>* %9, double* %10, double* %11)
  %cast48 = call <4 x double> @"set@PF"(double %gflow38)
  %output49 = call <4 x double> @"mul@PP"(<4 x double> %cast48, <4 x double> %vngrad_simplex)
  br label %end45

end45:                                            ; preds = %true44, %end16
  %dpg.0 = phi <4 x double> [ %output49, %true44 ], [ %cast8, %end16 ]
  %pp50 = load <4 x double>, <4 x double>* %pp
  %accl51 = load i64, i64* %accl
  %cast53 = call <4 x double> @"set@PI"(i64 %accl51)
  %output54 = call <4 x double> @"mul@PP"(<4 x double> %cast53, <4 x double> %dpl.0)
  %accg55 = load i64, i64* %accg
  %cast57 = call <4 x double> @"set@PI"(i64 %accg55)
  %output58 = call <4 x double> @"mul@PP"(<4 x double> %cast57, <4 x double> %dpg.0)
  %output59 = call <4 x double> @"add@PP"(<4 x double> %output54, <4 x double> %output58)
  %output60 = call <4 x double> @"add@PP"(<4 x double> %pp50, <4 x double> %output59)
  store <4 x double> %output60, <4 x double>* %pp
  %output63 = call <4 x double> @"add@PP"(<4 x double> %dpl.0, <4 x double> %dpg.0)
  %cast64 = call <3 x double> @"set@VP"(<4 x double> %output63)
  store <3 x double> %cast64, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off67 = load <3 x double>, <3 x double>* %x_off
  %cast68 = call <4 x double> @"set@PV"(<3 x double> %x_off67)
  %output69 = call <4 x double> @"add@PP"(<4 x double> %pp7, <4 x double> %cast68)
  store <4 x double> %output69, <4 x double>* %12
  %nwrap_simplex71 = call <3 x double> @"nwrap_simplex@VPPF"(<4 x double>* %12, <4 x double>* %13, double* %14)
  store <3 x double> %nwrap_simplex71, <3 x double>* %15
  %stats73.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats73.fca.0.gep
  %stats73.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats73.fca.1.gep
  %stats73.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats73.fca.2.gep
  %stats73.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats73.fca.3.gep
  %stats73.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats73.fca.4.gep
  %inv74 = load i64, i64* %inv
  store i64 %inv74, i64* %17
  %fold75 = load i64, i64* %fold
  store i64 %fold75, i64* %18
  %expon76 = load double, double* %expon
  store double %expon76, double* %22
  %noise_correct = call <3 x double> @"noise_correct@VVZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(<3 x double>* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats77.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats77.fca.0.gep
  %stats77.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats77.fca.1.gep
  %stats77.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats77.fca.2.gep
  %stats77.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats77.fca.3.gep
  %stats77.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats77.fca.4.gep
  %inv78 = load i64, i64* %inv
  store i64 %inv78, i64* %31
  %fold79 = load i64, i64* %fold
  store i64 %fold79, i64* %32
  %expon80 = load double, double* %expon
  store double %expon80, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw81 = load double, double* %fw
  %disp82 = load double, double* %disp
  %dfreq83 = load double, double* %dfreq
  %output84 = fmul double %disp82, %dfreq83
  %return85 = call double @"abs@FF"(double %output84)
  %output86 = fadd double %return85, 1.000000e+00
  %output87 = fmul double %fw81, %output86
  %x_avg89 = load double, double* %x_avg
  %cast90 = call <3 x double> @"set@VF"(double %x_avg89)
  %return92 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output87)
  %return93 = call <3 x double> @"lerp@VVVF"(<3 x double> %noise_correct, <3 x double> %cast90, double %return92)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end45, %true
  %UnifiedRetVal = phi <3 x double> [ %cast3, %true ], [ %return93, %end45 ]
  ret <3 x double> %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %scale, double* %blend) #0 {
__llvm_entry:
  %scale1 = load double, double* %scale
  %0 = insertvalue %nndata undef, double %scale1, 0
  %blend2 = load double, double* %blend
  %1 = insertvalue %nndata %0, double %blend2, 1
  ret %nndata %1
}

; Function Attrs: alwaysinline nounwind
define private %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"() #0 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  store double 0.000000e+00, double* %1
  store double 0.000000e+00, double* %0
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %1, double* %0)
  ret %nndata %nndata
}

; Function Attrs: alwaysinline nounwind
define private double @"nattencomp@FFFF"(double* %x, double* %k, double* %e) #0 {
__llvm_entry:
  %x1 = load double, double* %x
  %output = fmul double %x1, %x1
  %output3 = fsub double 1.000000e+00, %output
  %e4 = load double, double* %e
  %output5 = fmul double %e4, 5.000000e-01
  %return = call double @"pow@FFF"(double %output3, double %output5)
  %k6 = load double, double* %k
  %output7 = fsub double 1.000000e+00, %k6
  %output8 = fmul double %return, %output7
  %output10 = fadd double %output8, %k6
  ret double %output10
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"natten@VVFF"(<3 x double>* %n, double* %k, double* %e) #0 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %n1 = load <3 x double>, <3 x double>* %n
  %cast = call <3 x double> @"set@VI"(i64 2)
  %output = call <3 x double> @"mul@VV"(<3 x double> %n1, <3 x double> %cast)
  %cast2 = call <3 x double> @"set@VI"(i64 1)
  %output3 = call <3 x double> @"sub@VV"(<3 x double> %output, <3 x double> %cast2)
  %return = call double @"getcomp@FVI"(<3 x double> %output3, i64 0)
  store double %return, double* %0
  %k5 = load double, double* %k
  store double %k5, double* %1
  %e6 = load double, double* %e
  store double %e6, double* %2
  %nattencomp = call double @"nattencomp@FFFF"(double* %0, double* %1, double* %2)
  %return8 = call double @"getcomp@FVI"(<3 x double> %output3, i64 1)
  store double %return8, double* %3
  %k9 = load double, double* %k
  store double %k9, double* %4
  %e10 = load double, double* %e
  store double %e10, double* %5
  %nattencomp11 = call double @"nattencomp@FFFF"(double* %3, double* %4, double* %5)
  %return13 = call double @"getcomp@FVI"(<3 x double> %output3, i64 2)
  store double %return13, double* %6
  %k14 = load double, double* %k
  store double %k14, double* %7
  %e15 = load double, double* %e
  store double %e15, double* %8
  %nattencomp16 = call double @"nattencomp@FFFF"(double* %6, double* %7, double* %8)
  %return17 = call <3 x double> @"set@VFFF"(double %nattencomp, double %nattencomp11, double %nattencomp16)
  ret <3 x double> %return17
}

; Function Attrs: nounwind readnone
declare <4 x double> @"sub@PP"(<4 x double>, <4 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"frac@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@IVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sqrt@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"clamp@VVVV"(<3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"hmfT_simplex@VVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #0 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca <3 x double>
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i8** %0
  store double 4.349330e-02, double* %1
  store double 9.701210e-01, double* %2
  store double 3.151760e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_simplex = call <3 x double> @"noise_simplex@VVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return = fcmp oge double %fsize26, 1.000000e+00
  %return27 = zext i1 %return to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p41, <3 x double>* %pp
  %cast = call <3 x double> @"set@VF"(double %navg_correct14)
  %output44 = call <3 x double> @"sub@VV"(<3 x double> %noise_simplex, <3 x double> %cast)
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return48 = call double @"abs@FF"(double %gain47)
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output51 = fmul double %return48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast55 = sitofp i64 %output54 to double
  %output56 = fmul double %fsize52, %cast55
  %cast58 = call <3 x double> @"set@VI"(i64 1)
  %cast60 = call <3 x double> @"set@VI"(i64 2)
  %output61 = call <3 x double> @"mul@VV"(<3 x double> %noise_simplex, <3 x double> %cast60)
  %output64 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output64, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return70 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return71 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return70)
  %cast72 = call <3 x double> @"set@VF"(double %return71)
  br label %body

body:                                             ; preds = %end112, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end112 ]
  %fw.0 = phi double [ %output56, %end ], [ %output107, %end112 ]
  %out.0 = phi <3 x double> [ %output44, %end ], [ %output147, %end112 ]
  %wsum.0 = phi <3 x double> [ %cast58, %end ], [ %output154, %end112 ]
  %w.0 = phi <3 x double> [ %output61, %end ], [ %output162, %end112 ]
  %cast84 = call <3 x double> @"set@VF"(double %output51)
  %output85 = call <3 x double> @"mul@VV"(<3 x double> %w.0, <3 x double> %cast84)
  %output87 = fadd double %oct.0, 1.000000e+00
  %maxoctaves89 = load double, double* %maxoctaves
  %return90 = fcmp ogt double %output87, %maxoctaves89
  br i1 %return90, label %true92, label %end93

end81:                                            ; preds = %end112
  store double %oct.2, double* %x_oct
  %cast165 = call <3 x double> @"set@VI"(i64 0)
  %return166 = call i64 @"ne@IVV"(<3 x double> %output154, <3 x double> %cast165)
  %70 = icmp ne i64 %return166, 0
  br i1 %70, label %true167, label %end168

true92:                                           ; preds = %body
  %return97 = call double @"frac@FF"(double %maxoctaves89)
  store double %return97, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %cast98 = call <3 x double> @"set@VF"(double %bias)
  %output99 = call <3 x double> @"mul@VV"(<3 x double> %output85, <3 x double> %cast98)
  br label %end93

end93:                                            ; preds = %true92, %body
  %oct.1 = phi double [ %maxoctaves89, %true92 ], [ %output87, %body ]
  %w.1 = phi <3 x double> [ %output99, %true92 ], [ %output85, %body ]
  %pp101 = load <3 x double>, <3 x double>* %pp
  %cast103 = call <3 x double> @"set@VF"(double %return46)
  %output104 = call <3 x double> @"mul@VV"(<3 x double> %pp101, <3 x double> %cast103)
  store <3 x double> %output104, <3 x double>* %pp
  %output107 = fmul double %fw.0, %return46
  %return109 = fcmp ogt double %output107, 1.000000e+00
  br i1 %return109, label %true111, label %end112

true111:                                          ; preds = %end93
  %output114 = fsub double 1.000000e+00, %fw.0
  %output117 = fsub double %output107, %fw.0
  %output118 = call double @"div@FF"(double %output114, double %output117)
  %output121 = fsub double 1.000000e+00, %output118
  %output122 = fsub double %oct.1, %output121
  %cast125 = call <3 x double> @"set@VF"(double %output118)
  %output126 = call <3 x double> @"mul@VV"(<3 x double> %w.1, <3 x double> %cast125)
  br label %end112

end112:                                           ; preds = %true111, %end93
  %oct.2 = phi double [ %output122, %true111 ], [ %oct.1, %end93 ]
  %w.2 = phi <3 x double> [ %output126, %true111 ], [ %w.1, %end93 ]
  %inv127 = load i64, i64* %inv
  store i64 %inv127, i64* %52
  %fold128 = load i64, i64* %fold
  store i64 %fold128, i64* %53
  %accl129 = load i64, i64* %accl
  store i64 %accl129, i64* %54
  %accg130 = load i64, i64* %accg
  store i64 %accg130, i64* %55
  %fsize131 = load double, double* %fsize
  store double %fsize131, double* %56
  %expon132 = load double, double* %expon
  store double %expon132, double* %57
  %dolw133 = load i64, i64* %dolw
  store i64 %dolw133, i64* %59
  %dogw134 = load i64, i64* %dogw
  store i64 %dogw134, i64* %60
  %disp135 = load double, double* %disp
  store double %disp135, double* %61
  %dfreq136 = load double, double* %dfreq
  store double %dfreq136, double* %62
  %gflow137 = load double, double* %gflow
  store double %gflow137, double* %63
  %noise_simplex138 = call <3 x double> @"noise_simplex@VVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output142 = call <3 x double> @"sub@VV"(<3 x double> %noise_simplex138, <3 x double> %cast)
  %output146 = call <3 x double> @"mul@VV"(<3 x double> %w.2, <3 x double> %output142)
  %output147 = call <3 x double> @"add@VV"(<3 x double> %out.0, <3 x double> %output146)
  %output151 = call <3 x double> @"mul@VV"(<3 x double> %cast72, <3 x double> %w.2)
  %output153 = call <3 x double> @"mul@VV"(<3 x double> %output151, <3 x double> %w.2)
  %output154 = call <3 x double> @"add@VV"(<3 x double> %wsum.0, <3 x double> %output153)
  %output159 = call <3 x double> @"add@VV"(<3 x double> %output142, <3 x double> %cast)
  %output161 = call <3 x double> @"mul@VV"(<3 x double> %cast60, <3 x double> %output159)
  %output162 = call <3 x double> @"mul@VV"(<3 x double> %w.2, <3 x double> %output161)
  %maxoctaves74 = load double, double* %maxoctaves
  %return75 = fcmp olt double %oct.2, %maxoctaves74
  %return76 = zext i1 %return75 to i64
  %return78 = fcmp olt double %output107, 1.000000e+00
  %return79 = zext i1 %return78 to i64
  %return80 = call i64 @"and@III"(i64 %return76, i64 %return79)
  %71 = icmp ne i64 %return80, 0
  br i1 %71, label %body, label %end81

true167:                                          ; preds = %end81
  %return171 = call <3 x double> @"sqrt@VV"(<3 x double> %output154)
  %output172 = call <3 x double> @"div@VV"(<3 x double> %output147, <3 x double> %return171)
  br label %end168

end168:                                           ; preds = %true167, %end81
  %out.1 = phi <3 x double> [ %output172, %true167 ], [ %output147, %end81 ]
  %cast177 = call <3 x double> @"set@VF"(double 1.000000e-01)
  %output182 = call <3 x double> @"add@VV"(<3 x double> %out.1, <3 x double> %cast)
  store <3 x double> %output182, <3 x double>* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call <3 x double> @"natten@VVFF"(<3 x double>* %65, double* %66, double* %67)
  %return183 = call <3 x double> @"fit@VVVVVV"(<3 x double> %cast84, <3 x double> %cast165, <3 x double> %cast177, <3 x double> %cast58, <3 x double> %natten)
  %output184 = call <3 x double> @"mul@VV"(<3 x double> %out.1, <3 x double> %return183)
  %output187 = call <3 x double> @"add@VV"(<3 x double> %output184, <3 x double> %cast)
  %return191 = call <3 x double> @"clamp@VVVV"(<3 x double> %output187, <3 x double> %cast165, <3 x double> %cast58)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end168, %true
  %UnifiedRetVal = phi <3 x double> [ %noise_simplex, %true ], [ %return191, %end168 ]
  ret <3 x double> %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"hmfT_simplex@VPIIIIFFPIIFFFFFVFFFF"(<4 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <4 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #0 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <4 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <4 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <4 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca <3 x double>
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i8** %0
  store double 1.360200e-01, double* %1
  store double 8.486790e-01, double* %2
  store double 5.103550e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_simplex = call <3 x double> @"noise_simplex@VPIIIIFFPIIFFFFFV"(<4 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <4 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return = fcmp oge double %fsize26, 1.000000e+00
  %return27 = zext i1 %return to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <4 x double>, <4 x double>* %p
  store <4 x double> %p41, <4 x double>* %pp
  %cast = call <3 x double> @"set@VF"(double %navg_correct14)
  %output44 = call <3 x double> @"sub@VV"(<3 x double> %noise_simplex, <3 x double> %cast)
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return48 = call double @"abs@FF"(double %gain47)
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output51 = fmul double %return48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast55 = sitofp i64 %output54 to double
  %output56 = fmul double %fsize52, %cast55
  %cast58 = call <3 x double> @"set@VI"(i64 1)
  %cast60 = call <3 x double> @"set@VI"(i64 2)
  %output61 = call <3 x double> @"mul@VV"(<3 x double> %noise_simplex, <3 x double> %cast60)
  %output64 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output64, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return70 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return71 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return70)
  %cast72 = call <3 x double> @"set@VF"(double %return71)
  br label %body

body:                                             ; preds = %end112, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end112 ]
  %fw.0 = phi double [ %output56, %end ], [ %output107, %end112 ]
  %out.0 = phi <3 x double> [ %output44, %end ], [ %output147, %end112 ]
  %wsum.0 = phi <3 x double> [ %cast58, %end ], [ %output154, %end112 ]
  %w.0 = phi <3 x double> [ %output61, %end ], [ %output162, %end112 ]
  %cast84 = call <3 x double> @"set@VF"(double %output51)
  %output85 = call <3 x double> @"mul@VV"(<3 x double> %w.0, <3 x double> %cast84)
  %output87 = fadd double %oct.0, 1.000000e+00
  %maxoctaves89 = load double, double* %maxoctaves
  %return90 = fcmp ogt double %output87, %maxoctaves89
  br i1 %return90, label %true92, label %end93

end81:                                            ; preds = %end112
  store double %oct.2, double* %x_oct
  %cast165 = call <3 x double> @"set@VI"(i64 0)
  %return166 = call i64 @"ne@IVV"(<3 x double> %output154, <3 x double> %cast165)
  %70 = icmp ne i64 %return166, 0
  br i1 %70, label %true167, label %end168

true92:                                           ; preds = %body
  %return97 = call double @"frac@FF"(double %maxoctaves89)
  store double %return97, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %cast98 = call <3 x double> @"set@VF"(double %bias)
  %output99 = call <3 x double> @"mul@VV"(<3 x double> %output85, <3 x double> %cast98)
  br label %end93

end93:                                            ; preds = %true92, %body
  %oct.1 = phi double [ %maxoctaves89, %true92 ], [ %output87, %body ]
  %w.1 = phi <3 x double> [ %output99, %true92 ], [ %output85, %body ]
  %pp101 = load <4 x double>, <4 x double>* %pp
  %cast103 = call <4 x double> @"set@PF"(double %return46)
  %output104 = call <4 x double> @"mul@PP"(<4 x double> %pp101, <4 x double> %cast103)
  store <4 x double> %output104, <4 x double>* %pp
  %output107 = fmul double %fw.0, %return46
  %return109 = fcmp ogt double %output107, 1.000000e+00
  br i1 %return109, label %true111, label %end112

true111:                                          ; preds = %end93
  %output114 = fsub double 1.000000e+00, %fw.0
  %output117 = fsub double %output107, %fw.0
  %output118 = call double @"div@FF"(double %output114, double %output117)
  %output121 = fsub double 1.000000e+00, %output118
  %output122 = fsub double %oct.1, %output121
  %cast125 = call <3 x double> @"set@VF"(double %output118)
  %output126 = call <3 x double> @"mul@VV"(<3 x double> %w.1, <3 x double> %cast125)
  br label %end112

end112:                                           ; preds = %true111, %end93
  %oct.2 = phi double [ %output122, %true111 ], [ %oct.1, %end93 ]
  %w.2 = phi <3 x double> [ %output126, %true111 ], [ %w.1, %end93 ]
  %inv127 = load i64, i64* %inv
  store i64 %inv127, i64* %52
  %fold128 = load i64, i64* %fold
  store i64 %fold128, i64* %53
  %accl129 = load i64, i64* %accl
  store i64 %accl129, i64* %54
  %accg130 = load i64, i64* %accg
  store i64 %accg130, i64* %55
  %fsize131 = load double, double* %fsize
  store double %fsize131, double* %56
  %expon132 = load double, double* %expon
  store double %expon132, double* %57
  %dolw133 = load i64, i64* %dolw
  store i64 %dolw133, i64* %59
  %dogw134 = load i64, i64* %dogw
  store i64 %dogw134, i64* %60
  %disp135 = load double, double* %disp
  store double %disp135, double* %61
  %dfreq136 = load double, double* %dfreq
  store double %dfreq136, double* %62
  %gflow137 = load double, double* %gflow
  store double %gflow137, double* %63
  %noise_simplex138 = call <3 x double> @"noise_simplex@VPIIIIFFPIIFFFFFV"(<4 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <4 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output142 = call <3 x double> @"sub@VV"(<3 x double> %noise_simplex138, <3 x double> %cast)
  %output146 = call <3 x double> @"mul@VV"(<3 x double> %w.2, <3 x double> %output142)
  %output147 = call <3 x double> @"add@VV"(<3 x double> %out.0, <3 x double> %output146)
  %output151 = call <3 x double> @"mul@VV"(<3 x double> %cast72, <3 x double> %w.2)
  %output153 = call <3 x double> @"mul@VV"(<3 x double> %output151, <3 x double> %w.2)
  %output154 = call <3 x double> @"add@VV"(<3 x double> %wsum.0, <3 x double> %output153)
  %output159 = call <3 x double> @"add@VV"(<3 x double> %output142, <3 x double> %cast)
  %output161 = call <3 x double> @"mul@VV"(<3 x double> %cast60, <3 x double> %output159)
  %output162 = call <3 x double> @"mul@VV"(<3 x double> %w.2, <3 x double> %output161)
  %maxoctaves74 = load double, double* %maxoctaves
  %return75 = fcmp olt double %oct.2, %maxoctaves74
  %return76 = zext i1 %return75 to i64
  %return78 = fcmp olt double %output107, 1.000000e+00
  %return79 = zext i1 %return78 to i64
  %return80 = call i64 @"and@III"(i64 %return76, i64 %return79)
  %71 = icmp ne i64 %return80, 0
  br i1 %71, label %body, label %end81

true167:                                          ; preds = %end81
  %return171 = call <3 x double> @"sqrt@VV"(<3 x double> %output154)
  %output172 = call <3 x double> @"div@VV"(<3 x double> %output147, <3 x double> %return171)
  br label %end168

end168:                                           ; preds = %true167, %end81
  %out.1 = phi <3 x double> [ %output172, %true167 ], [ %output147, %end81 ]
  %cast177 = call <3 x double> @"set@VF"(double 1.000000e-01)
  %output182 = call <3 x double> @"add@VV"(<3 x double> %out.1, <3 x double> %cast)
  store <3 x double> %output182, <3 x double>* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call <3 x double> @"natten@VVFF"(<3 x double>* %65, double* %66, double* %67)
  %return183 = call <3 x double> @"fit@VVVVVV"(<3 x double> %cast84, <3 x double> %cast165, <3 x double> %cast177, <3 x double> %cast58, <3 x double> %natten)
  %output184 = call <3 x double> @"mul@VV"(<3 x double> %out.1, <3 x double> %return183)
  %output187 = call <3 x double> @"add@VV"(<3 x double> %output184, <3 x double> %cast)
  %return191 = call <3 x double> @"clamp@VVVV"(<3 x double> %output187, <3 x double> %cast165, <3 x double> %cast58)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end168, %true
  %UnifiedRetVal = phi <3 x double> [ %noise_simplex, %true ], [ %return191, %end168 ]
  ret <3 x double> %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"noise_cc@VVIIVIVIVVV"(<3 x double>* %chaos, i64* %inv, i64* %dobias, <3 x double>* %ccbias, i64* %dogain, <3 x double>* %ccgain, i64* %dorng, <3 x double>* %rnglo, <3 x double>* %rnghi, <3 x double>* %amp) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  %3 = alloca <3 x double>
  %chaos1 = load <3 x double>, <3 x double>* %chaos
  %dobias2 = load i64, i64* %dobias
  %4 = icmp ne i64 %dobias2, 0
  br i1 %4, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store <3 x double> %chaos1, <3 x double>* %0
  %ccbias4 = load <3 x double>, <3 x double>* %ccbias
  %cast = call <3 x double> @"set@VF"(double 1.000000e-05)
  %cast5 = call <3 x double> @"set@VI"(i64 1)
  %output = call <3 x double> @"sub@VV"(<3 x double> %cast5, <3 x double> %cast)
  %return = call <3 x double> @"clamp@VVVV"(<3 x double> %ccbias4, <3 x double> %cast, <3 x double> %output)
  store <3 x double> %return, <3 x double>* %1
  %bias = call <3 x double> @"bias@VVV"(<3 x double>* %0, <3 x double>* %1)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %out.0 = phi <3 x double> [ %bias, %true ], [ %chaos1, %__llvm_entry ]
  %dogain7 = load i64, i64* %dogain
  %5 = icmp ne i64 %dogain7, 0
  br i1 %5, label %true8, label %end9

true8:                                            ; preds = %end
  store <3 x double> %out.0, <3 x double>* %2
  %ccgain11 = load <3 x double>, <3 x double>* %ccgain
  %cast12 = call <3 x double> @"set@VF"(double 1.000000e-05)
  %cast13 = call <3 x double> @"set@VI"(i64 1)
  %output15 = call <3 x double> @"sub@VV"(<3 x double> %cast13, <3 x double> %cast12)
  %return16 = call <3 x double> @"clamp@VVVV"(<3 x double> %ccgain11, <3 x double> %cast12, <3 x double> %output15)
  store <3 x double> %return16, <3 x double>* %3
  %gain = call <3 x double> @"gain@VVV"(<3 x double>* %2, <3 x double>* %3)
  br label %end9

end9:                                             ; preds = %true8, %end
  %out.1 = phi <3 x double> [ %gain, %true8 ], [ %out.0, %end ]
  %inv17 = load i64, i64* %inv
  %6 = icmp ne i64 %inv17, 0
  br i1 %6, label %true18, label %end19

true18:                                           ; preds = %end9
  %output21 = call <3 x double> @"sub@VV"(<3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> %out.1)
  br label %end19

end19:                                            ; preds = %true18, %end9
  %out.2 = phi <3 x double> [ %output21, %true18 ], [ %out.1, %end9 ]
  %dorng22 = load i64, i64* %dorng
  %7 = icmp ne i64 %dorng22, 0
  br i1 %7, label %true23, label %end24

true23:                                           ; preds = %end19
  %rnglo26 = load <3 x double>, <3 x double>* %rnglo
  %rnghi27 = load <3 x double>, <3 x double>* %rnghi
  %return28 = call <3 x double> @"fit@VVVVVV"(<3 x double> %out.2, <3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> %rnglo26, <3 x double> %rnghi27)
  br label %end24

end24:                                            ; preds = %true23, %end19
  %out.3 = phi <3 x double> [ %return28, %true23 ], [ %out.2, %end19 ]
  %amp30 = load <3 x double>, <3 x double>* %amp
  %output31 = call <3 x double> @"mul@VV"(<3 x double> %out.3, <3 x double> %amp30)
  ret <3 x double> %output31
}

; Function Attrs: alwaysinline nounwind
define private void @"_obj_geo1_tutorial_cable1_mountain1_unified_noise_vector1_importdetail1_snippet1@ISSII"(i64* %result, i8** %file, i8** %aname, i64* %defvalue, i64* %success) #0 {
__llvm_entry:
  %return = call i64 @"eq@ISS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %file2 = load i8*, i8** %file
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %sourcefile.0 = phi i8* [ %file2, %true ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0), %__llvm_entry ]
  %aname4 = load i8*, i8** %aname
  %return5 = call { i64, i64 } @"detailattrib@ISSII"(i8* %sourcefile.0, i8* %aname4, i64 0)
  %return6 = extractvalue { i64, i64 } %return5, 0
  %output = extractvalue { i64, i64 } %return5, 1
  store i64 %output, i64* %success
  store i64 %return6, i64* %result
  %success7 = load i64, i64* %success
  %return8 = call i64 @"not@II"(i64 %success7)
  %1 = icmp ne i64 %return8, 0
  br i1 %1, label %true9, label %end10

true9:                                            ; preds = %end
  %defvalue11 = load i64, i64* %defvalue
  store i64 %defvalue11, i64* %result
  br label %end10

end10:                                            ; preds = %true9, %end
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare { i64, i64 } @"detailattrib@ISSII"(i8*, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: alwaysinline nounwind
define private void @"_obj_geo1_tutorial_cable1_mountain1_unified_noise_vector1_importdetail4_snippet1@[USS[UI"(<2 x double>** %result, i8** %file, i8** %aname, <2 x double>** %defvalue, i64* %success) #0 {
__llvm_entry:
  %return = call i64 @"eq@ISS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %file2 = load i8*, i8** %file
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %sourcefile.0 = phi i8* [ %file2, %true ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0), %__llvm_entry ]
  %aname4 = load i8*, i8** %aname
  %return5 = call { <2 x double>*, i64 } @"detailattrib@[USSII"(i8* %sourcefile.0, i8* %aname4, i64 0)
  %return6 = extractvalue { <2 x double>*, i64 } %return5, 0
  %output = extractvalue { <2 x double>*, i64 } %return5, 1
  store i64 %output, i64* %success
  store <2 x double>* %return6, <2 x double>** %result
  %success7 = load i64, i64* %success
  %return8 = call i64 @"not@II"(i64 %success7)
  %1 = icmp ne i64 %return8, 0
  br i1 %1, label %true9, label %end10

true9:                                            ; preds = %end
  %defvalue11 = load <2 x double>*, <2 x double>** %defvalue
  store <2 x double>* %defvalue11, <2 x double>** %result
  br label %end10

end10:                                            ; preds = %true9, %end
  ret void
}

; Function Attrs: nounwind readnone
declare { <2 x double>*, i64 } @"detailattrib@[USSII"(i8*, i8*, i64) #1

; Function Attrs: alwaysinline nounwind
define private void @"_obj_geo1_tutorial_cable1_mountain1_unified_noise_vector1_importdetail5_snippet1@[USS[UI"(<2 x double>** %result, i8** %file, i8** %aname, <2 x double>** %defvalue, i64* %success) #0 {
__llvm_entry:
  %return = call i64 @"eq@ISS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %file2 = load i8*, i8** %file
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %sourcefile.0 = phi i8* [ %file2, %true ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0), %__llvm_entry ]
  %aname4 = load i8*, i8** %aname
  %return5 = call { <2 x double>*, i64 } @"detailattrib@[USSII"(i8* %sourcefile.0, i8* %aname4, i64 0)
  %return6 = extractvalue { <2 x double>*, i64 } %return5, 0
  %output = extractvalue { <2 x double>*, i64 } %return5, 1
  store i64 %output, i64* %success
  store <2 x double>* %return6, <2 x double>** %result
  %success7 = load i64, i64* %success
  %return8 = call i64 @"not@II"(i64 %success7)
  %1 = icmp ne i64 %return8, 0
  br i1 %1, label %true9, label %end10

true9:                                            ; preds = %end
  %defvalue11 = load <2 x double>*, <2 x double>** %defvalue
  store <2 x double>* %defvalue11, <2 x double>** %result
  br label %end10

end10:                                            ; preds = %true9, %end
  ret void
}

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"applyScope@VVVS"(<3 x double>* %original_value, <3 x double>* %new_value, i8** %scope) #0 {
__llvm_entry:
  %scope1 = load i8*, i8** %scope
  %return = call i64 @"eq@ISS"(i8* %scope1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %new_value2 = load <3 x double>, <3 x double>* %new_value
  br label %UnifiedReturnBlock

false:                                            ; preds = %__llvm_entry
  %return4 = call i64 @"eq@ISS"(i8* %scope1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i64 0, i64 0))
  %1 = icmp ne i64 %return4, 0
  br i1 %1, label %true5, label %false6

true5:                                            ; preds = %false
  %original_value8 = load <3 x double>, <3 x double>* %original_value
  br label %UnifiedReturnBlock

false6:                                           ; preds = %false
  %original_value9 = load <3 x double>, <3 x double>* %original_value
  %return11 = call i8* @"getcomp@SSI"(i8* %scope1, i64 0)
  %return12 = call i64 @"eq@ISS"(i8* %return11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i64 0, i64 0))
  %2 = icmp ne i64 %return12, 0
  br i1 %2, label %true13, label %end14

true13:                                           ; preds = %false6
  %new_value15 = load <3 x double>, <3 x double>* %new_value
  %return16 = call double @"getcomp@FVI"(<3 x double> %new_value15, i64 0)
  %return17 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %original_value9, double %return16, i64 0)
  %output = extractvalue { double, <3 x double> } %return17, 1
  br label %end14

end14:                                            ; preds = %true13, %false6
  %scoped.0 = phi <3 x double> [ %output, %true13 ], [ %original_value9, %false6 ]
  %scope19 = load i8*, i8** %scope
  %return20 = call i8* @"getcomp@SSI"(i8* %scope19, i64 1)
  %return21 = call i64 @"eq@ISS"(i8* %return20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i64 0, i64 0))
  %3 = icmp ne i64 %return21, 0
  br i1 %3, label %true22, label %end23

true22:                                           ; preds = %end14
  %new_value24 = load <3 x double>, <3 x double>* %new_value
  %return25 = call double @"getcomp@FVI"(<3 x double> %new_value24, i64 1)
  %return27 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %scoped.0, double %return25, i64 1)
  %output29 = extractvalue { double, <3 x double> } %return27, 1
  br label %end23

end23:                                            ; preds = %true22, %end14
  %scoped.1 = phi <3 x double> [ %output29, %true22 ], [ %scoped.0, %end14 ]
  %scope30 = load i8*, i8** %scope
  %return31 = call i8* @"getcomp@SSI"(i8* %scope30, i64 2)
  %return32 = call i64 @"eq@ISS"(i8* %return31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i64 0, i64 0))
  %4 = icmp ne i64 %return32, 0
  br i1 %4, label %true33, label %end34

true33:                                           ; preds = %end23
  %new_value35 = load <3 x double>, <3 x double>* %new_value
  %return36 = call double @"getcomp@FVI"(<3 x double> %new_value35, i64 2)
  %return38 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %scoped.1, double %return36, i64 2)
  %output40 = extractvalue { double, <3 x double> } %return38, 1
  br label %end34

end34:                                            ; preds = %true33, %end23
  %scoped.2 = phi <3 x double> [ %output40, %true33 ], [ %scoped.1, %end23 ]
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end34, %true5, %true
  %UnifiedRetVal = phi <3 x double> [ %new_value2, %true ], [ %original_value8, %true5 ], [ %scoped.2, %end34 ]
  ret <3 x double> %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare i8* @"getcomp@SSI"(i8*, i64) #1

; Function Attrs: alwaysinline nounwind
define private void @"_obj_geo1_tutorial_cable1_mountain1_unified_noise_vector1_snippet_noise_operation@VVIIIIII[U[UIFIFIVVSIFIF"(<3 x double>* %__unoise, <3 x double>* %attrib_value, i64* %bound_attrib, i64* %use_attriblist, i64* %operation, i64* %use_raw, i64* %do_remap, i64* %buckets, <2 x double>** %D_CDF, <2 x double>** %N_CDF, i64* %do_clampmin, double* %clamp_min, i64* %do_clampmax, double* %clamp_max, i64* %do_normalize, <3 x double>* %min, <3 x double>* %max, i8** %componentscope, i64* %blendmode, double* %blendweight, i64* %do_blend, double* %_bound_blendattrib) #0 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca i64
  %2 = alloca <2 x double>*
  %3 = alloca <2 x double>*
  %4 = alloca double
  %5 = alloca i64
  %6 = alloca <2 x double>*
  %7 = alloca <2 x double>*
  %8 = alloca double
  %9 = alloca i64
  %10 = alloca <2 x double>*
  %11 = alloca <2 x double>*
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca i8*
  %attrib_value1 = load <3 x double>, <3 x double>* %attrib_value
  %use_raw2 = load i64, i64* %use_raw
  %return = call i64 @"not@II"(i64 %use_raw2)
  %15 = icmp ne i64 %return, 0
  br i1 %15, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %__unoise3 = load <3 x double>, <3 x double>* %__unoise
  %return4 = call double @"getcomp@FVI"(<3 x double> %__unoise3, i64 0)
  store double %return4, double* %0
  store i64 50, i64* %1
  %D_CDF5 = load <2 x double>*, <2 x double>** %D_CDF
  store <2 x double>* %D_CDF5, <2 x double>** %2
  %N_CDF6 = load <2 x double>*, <2 x double>** %N_CDF
  store <2 x double>* %N_CDF6, <2 x double>** %3
  %remapCDF = call double @"remapCDF@FFI[U[U"(double* %0, i64* %1, <2 x double>** %2, <2 x double>** %3)
  %tmp = load <3 x double>, <3 x double>* %__unoise
  %return7 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %remapCDF, i64 0)
  %output = extractvalue { double, <3 x double> } %return7, 1
  store <3 x double> %output, <3 x double>* %__unoise
  %return10 = call double @"getcomp@FVI"(<3 x double> %output, i64 1)
  store double %return10, double* %4
  store i64 50, i64* %5
  %D_CDF11 = load <2 x double>*, <2 x double>** %D_CDF
  store <2 x double>* %D_CDF11, <2 x double>** %6
  %N_CDF12 = load <2 x double>*, <2 x double>** %N_CDF
  store <2 x double>* %N_CDF12, <2 x double>** %7
  %remapCDF13 = call double @"remapCDF@FFI[U[U"(double* %4, i64* %5, <2 x double>** %6, <2 x double>** %7)
  %tmp14 = load <3 x double>, <3 x double>* %__unoise
  %return15 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp14, double %remapCDF13, i64 1)
  %output17 = extractvalue { double, <3 x double> } %return15, 1
  store <3 x double> %output17, <3 x double>* %__unoise
  %return19 = call double @"getcomp@FVI"(<3 x double> %output17, i64 2)
  store double %return19, double* %8
  store i64 50, i64* %9
  %D_CDF20 = load <2 x double>*, <2 x double>** %D_CDF
  store <2 x double>* %D_CDF20, <2 x double>** %10
  %N_CDF21 = load <2 x double>*, <2 x double>** %N_CDF
  store <2 x double>* %N_CDF21, <2 x double>** %11
  %remapCDF22 = call double @"remapCDF@FFI[U[U"(double* %8, i64* %9, <2 x double>** %10, <2 x double>** %11)
  %tmp23 = load <3 x double>, <3 x double>* %__unoise
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp23, double %remapCDF22, i64 2)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %__unoise
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %do_remap27 = load i64, i64* %do_remap
  %16 = icmp ne i64 %do_remap27, 0
  br i1 %16, label %true28, label %end29

true28:                                           ; preds = %end
  %__unoise30 = load <3 x double>, <3 x double>* %__unoise
  %return31 = call double @"getcomp@FVI"(<3 x double> %__unoise30, i64 0)
  %return32 = call double @"chramp@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @8, i64 0, i64 0), double %return31)
  %return34 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %__unoise30, double %return32, i64 0)
  %output36 = extractvalue { double, <3 x double> } %return34, 1
  store <3 x double> %output36, <3 x double>* %__unoise
  %return38 = call double @"getcomp@FVI"(<3 x double> %output36, i64 1)
  %return39 = call double @"chramp@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @8, i64 0, i64 0), double %return38)
  %return41 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output36, double %return39, i64 1)
  %output43 = extractvalue { double, <3 x double> } %return41, 1
  store <3 x double> %output43, <3 x double>* %__unoise
  %return45 = call double @"getcomp@FVI"(<3 x double> %output43, i64 2)
  %return46 = call double @"chramp@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @8, i64 0, i64 0), double %return45)
  %return48 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output43, double %return46, i64 2)
  %output50 = extractvalue { double, <3 x double> } %return48, 1
  store <3 x double> %output50, <3 x double>* %__unoise
  br label %end29

end29:                                            ; preds = %true28, %end
  %__unoise51 = load <3 x double>, <3 x double>* %__unoise
  %min52 = load <3 x double>, <3 x double>* %min
  %max53 = load <3 x double>, <3 x double>* %max
  %return54 = call <3 x double> @"fit01@VVVV"(<3 x double> %__unoise51, <3 x double> %min52, <3 x double> %max53)
  store <3 x double> %return54, <3 x double>* %__unoise
  %do_blend55 = load i64, i64* %do_blend
  %17 = icmp ne i64 %do_blend55, 0
  br i1 %17, label %true56, label %end57

true56:                                           ; preds = %end29
  %blendweight58 = load double, double* %blendweight
  %blendmode59 = load i64, i64* %blendmode
  %return60 = call i64 @"eq@III"(i64 %blendmode59, i64 1)
  %18 = icmp ne i64 %return60, 0
  br i1 %18, label %true61, label %end62

end57:                                            ; preds = %end62, %end29
  %use_attriblist67 = load i64, i64* %use_attriblist
  %return68 = call i64 @"not@II"(i64 %use_attriblist67)
  %19 = icmp ne i64 %return68, 0
  br i1 %19, label %true69, label %end70

true61:                                           ; preds = %true56
  %_bound_blendattrib63 = load double, double* %_bound_blendattrib
  br label %end62

end62:                                            ; preds = %true61, %true56
  %blend.0 = phi double [ %_bound_blendattrib63, %true61 ], [ %blendweight58, %true56 ]
  %cast = call <3 x double> @"set@VI"(i64 0)
  %__unoise64 = load <3 x double>, <3 x double>* %__unoise
  %return66 = call <3 x double> @"lerp@VVVF"(<3 x double> %cast, <3 x double> %__unoise64, double %blend.0)
  store <3 x double> %return66, <3 x double>* %__unoise
  br label %end57

true69:                                           ; preds = %end57
  %bound_attrib71 = load i64, i64* %bound_attrib
  %20 = icmp ne i64 %bound_attrib71, 0
  br i1 %20, label %true72, label %false

end70:                                            ; preds = %end223, %end57
  ret void

true72:                                           ; preds = %true69
  %operation74 = load i64, i64* %operation
  %return75 = call i64 @"eq@III"(i64 %operation74, i64 0)
  %21 = icmp ne i64 %return75, 0
  br i1 %21, label %true76, label %false77

false:                                            ; preds = %true69
  %__unoise119 = load <3 x double>, <3 x double>* %__unoise
  store <3 x double> %__unoise119, <3 x double>* %attrib_value
  br label %end73

end73:                                            ; preds = %false107, %true114, %true106, %true98, %true90, %true82, %true76, %false
  %do_clampmin120 = load i64, i64* %do_clampmin
  %22 = icmp ne i64 %do_clampmin120, 0
  br i1 %22, label %true121, label %end122

true76:                                           ; preds = %true72
  %__unoise79 = load <3 x double>, <3 x double>* %__unoise
  store <3 x double> %__unoise79, <3 x double>* %attrib_value
  br label %end73

false77:                                          ; preds = %true72
  %return81 = call i64 @"eq@III"(i64 %operation74, i64 1)
  %23 = icmp ne i64 %return81, 0
  br i1 %23, label %true82, label %false83

true82:                                           ; preds = %false77
  %attrib_value85 = load <3 x double>, <3 x double>* %attrib_value
  %__unoise86 = load <3 x double>, <3 x double>* %__unoise
  %output87 = call <3 x double> @"add@VV"(<3 x double> %attrib_value85, <3 x double> %__unoise86)
  store <3 x double> %output87, <3 x double>* %attrib_value
  br label %end73

false83:                                          ; preds = %false77
  %return89 = call i64 @"eq@III"(i64 %operation74, i64 2)
  %24 = icmp ne i64 %return89, 0
  br i1 %24, label %true90, label %false91

true90:                                           ; preds = %false83
  %attrib_value93 = load <3 x double>, <3 x double>* %attrib_value
  %__unoise94 = load <3 x double>, <3 x double>* %__unoise
  %output95 = call <3 x double> @"sub@VV"(<3 x double> %attrib_value93, <3 x double> %__unoise94)
  store <3 x double> %output95, <3 x double>* %attrib_value
  br label %end73

false91:                                          ; preds = %false83
  %return97 = call i64 @"eq@III"(i64 %operation74, i64 3)
  %25 = icmp ne i64 %return97, 0
  br i1 %25, label %true98, label %false99

true98:                                           ; preds = %false91
  %attrib_value101 = load <3 x double>, <3 x double>* %attrib_value
  %__unoise102 = load <3 x double>, <3 x double>* %__unoise
  %output103 = call <3 x double> @"mul@VV"(<3 x double> %attrib_value101, <3 x double> %__unoise102)
  store <3 x double> %output103, <3 x double>* %attrib_value
  br label %end73

false99:                                          ; preds = %false91
  %return105 = call i64 @"eq@III"(i64 %operation74, i64 4)
  %26 = icmp ne i64 %return105, 0
  br i1 %26, label %true106, label %false107

true106:                                          ; preds = %false99
  %attrib_value109 = load <3 x double>, <3 x double>* %attrib_value
  %__unoise110 = load <3 x double>, <3 x double>* %__unoise
  %return111 = call <3 x double> @"min@VVV"(<3 x double> %attrib_value109, <3 x double> %__unoise110)
  store <3 x double> %return111, <3 x double>* %attrib_value
  br label %end73

false107:                                         ; preds = %false99
  %return113 = call i64 @"eq@III"(i64 %operation74, i64 5)
  %27 = icmp ne i64 %return113, 0
  br i1 %27, label %true114, label %end73

true114:                                          ; preds = %false107
  %attrib_value116 = load <3 x double>, <3 x double>* %attrib_value
  %__unoise117 = load <3 x double>, <3 x double>* %__unoise
  %return118 = call <3 x double> @"max@VVV"(<3 x double> %attrib_value116, <3 x double> %__unoise117)
  store <3 x double> %return118, <3 x double>* %attrib_value
  br label %end73

true121:                                          ; preds = %end73
  %attrib_value123 = load <3 x double>, <3 x double>* %attrib_value
  %return124 = call double @"getcomp@FVI"(<3 x double> %attrib_value123, i64 0)
  %clamp_min125 = load double, double* %clamp_min
  %return126 = fcmp olt double %return124, %clamp_min125
  br i1 %return126, label %true128, label %false129

end122:                                           ; preds = %end161, %end73
  %do_clampmax170 = load i64, i64* %do_clampmax
  %28 = icmp ne i64 %do_clampmax170, 0
  br i1 %28, label %true171, label %end172

true128:                                          ; preds = %true121
  br label %end130

false129:                                         ; preds = %true121
  br label %end130

end130:                                           ; preds = %false129, %true128
  %phi = phi double [ %clamp_min125, %true128 ], [ %return124, %false129 ]
  %tmp134 = load <3 x double>, <3 x double>* %attrib_value
  %return135 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp134, double %phi, i64 0)
  %output137 = extractvalue { double, <3 x double> } %return135, 1
  store <3 x double> %output137, <3 x double>* %attrib_value
  %return139 = call double @"getcomp@FVI"(<3 x double> %output137, i64 1)
  %clamp_min140 = load double, double* %clamp_min
  %return141 = fcmp olt double %return139, %clamp_min140
  br i1 %return141, label %true143, label %false144

true143:                                          ; preds = %end130
  br label %end145

false144:                                         ; preds = %end130
  br label %end145

end145:                                           ; preds = %false144, %true143
  %phi149 = phi double [ %clamp_min140, %true143 ], [ %return139, %false144 ]
  %tmp150 = load <3 x double>, <3 x double>* %attrib_value
  %return151 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp150, double %phi149, i64 1)
  %output153 = extractvalue { double, <3 x double> } %return151, 1
  store <3 x double> %output153, <3 x double>* %attrib_value
  %return155 = call double @"getcomp@FVI"(<3 x double> %output153, i64 2)
  %clamp_min156 = load double, double* %clamp_min
  %return157 = fcmp olt double %return155, %clamp_min156
  br i1 %return157, label %true159, label %false160

true159:                                          ; preds = %end145
  br label %end161

false160:                                         ; preds = %end145
  br label %end161

end161:                                           ; preds = %false160, %true159
  %phi165 = phi double [ %clamp_min156, %true159 ], [ %return155, %false160 ]
  %tmp166 = load <3 x double>, <3 x double>* %attrib_value
  %return167 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp166, double %phi165, i64 2)
  %output169 = extractvalue { double, <3 x double> } %return167, 1
  store <3 x double> %output169, <3 x double>* %attrib_value
  br label %end122

true171:                                          ; preds = %end122
  %attrib_value173 = load <3 x double>, <3 x double>* %attrib_value
  %return174 = call double @"getcomp@FVI"(<3 x double> %attrib_value173, i64 0)
  %clamp_max175 = load double, double* %clamp_max
  %return176 = fcmp ogt double %return174, %clamp_max175
  br i1 %return176, label %true178, label %false179

end172:                                           ; preds = %end212, %end122
  %do_normalize221 = load i64, i64* %do_normalize
  %29 = icmp ne i64 %do_normalize221, 0
  br i1 %29, label %true222, label %end223

true178:                                          ; preds = %true171
  br label %end180

false179:                                         ; preds = %true171
  br label %end180

end180:                                           ; preds = %false179, %true178
  %phi184 = phi double [ %clamp_max175, %true178 ], [ %return174, %false179 ]
  %tmp185 = load <3 x double>, <3 x double>* %attrib_value
  %return186 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp185, double %phi184, i64 0)
  %output188 = extractvalue { double, <3 x double> } %return186, 1
  store <3 x double> %output188, <3 x double>* %attrib_value
  %return190 = call double @"getcomp@FVI"(<3 x double> %output188, i64 1)
  %clamp_max191 = load double, double* %clamp_max
  %return192 = fcmp ogt double %return190, %clamp_max191
  br i1 %return192, label %true194, label %false195

true194:                                          ; preds = %end180
  br label %end196

false195:                                         ; preds = %end180
  br label %end196

end196:                                           ; preds = %false195, %true194
  %phi200 = phi double [ %clamp_max191, %true194 ], [ %return190, %false195 ]
  %tmp201 = load <3 x double>, <3 x double>* %attrib_value
  %return202 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp201, double %phi200, i64 1)
  %output204 = extractvalue { double, <3 x double> } %return202, 1
  store <3 x double> %output204, <3 x double>* %attrib_value
  %return206 = call double @"getcomp@FVI"(<3 x double> %output204, i64 2)
  %clamp_max207 = load double, double* %clamp_max
  %return208 = fcmp ogt double %return206, %clamp_max207
  br i1 %return208, label %true210, label %false211

true210:                                          ; preds = %end196
  br label %end212

false211:                                         ; preds = %end196
  br label %end212

end212:                                           ; preds = %false211, %true210
  %phi216 = phi double [ %clamp_max207, %true210 ], [ %return206, %false211 ]
  %tmp217 = load <3 x double>, <3 x double>* %attrib_value
  %return218 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp217, double %phi216, i64 2)
  %output220 = extractvalue { double, <3 x double> } %return218, 1
  store <3 x double> %output220, <3 x double>* %attrib_value
  br label %end172

true222:                                          ; preds = %end172
  %attrib_value224 = load <3 x double>, <3 x double>* %attrib_value
  %return225 = call <3 x double> @"normalize@VV"(<3 x double> %attrib_value224)
  store <3 x double> %return225, <3 x double>* %attrib_value
  br label %end223

end223:                                           ; preds = %true222, %end172
  store <3 x double> %attrib_value1, <3 x double>* %12
  %attrib_value227 = load <3 x double>, <3 x double>* %attrib_value
  store <3 x double> %attrib_value227, <3 x double>* %13
  %componentscope228 = load i8*, i8** %componentscope
  store i8* %componentscope228, i8** %14
  %applyScope = call <3 x double> @"applyScope@VVVS"(<3 x double>* %12, <3 x double>* %13, i8** %14)
  store <3 x double> %applyScope, <3 x double>* %__unoise
  br label %end70
}

; Function Attrs: alwaysinline nounwind
define private i64 @"binarySearch@IF[UI"(double* %val, <2 x double>** %arr, i64* %buckets) #0 {
__llvm_entry:
  %buckets1 = load i64, i64* %buckets
  br label %cond

cond:                                             ; preds = %true, %false, %__llvm_entry
  %u.0 = phi i64 [ %buckets1, %__llvm_entry ], [ %output7, %true ], [ %u.0, %false ]
  %l.0 = phi i64 [ 0, %__llvm_entry ], [ %l.0, %true ], [ %output7, %false ]
  %output = sub i64 %u.0, %l.0
  %return = call i64 @"gt@III"(i64 %output, i64 1)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %output6 = add i64 %u.0, %l.0
  %output7 = call i64 @"div@II"(i64 %output6, i64 2)
  %val8 = load double, double* %val
  %arr9 = load <2 x double>*, <2 x double>** %arr
  %return11 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %arr9, i64 %output7)
  %return12 = call double @"getcomp@FUI"(<2 x double> %return11, i64 1)
  %return13 = fcmp olt double %val8, %return12
  br i1 %return13, label %true, label %false

end:                                              ; preds = %cond
  ret i64 %l.0

true:                                             ; preds = %body
  br label %cond

false:                                            ; preds = %body
  br label %cond
}

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"div@II"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"getcomp@U[UI"(<2 x double>*, i64) #1

; Function Attrs: alwaysinline nounwind
define private double @"remapCDF@FFI[U[U"(double* %value, i64* %buckets, <2 x double>** %D_CDF, <2 x double>** %N_CDF) #0 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca <2 x double>*
  %2 = alloca i64
  %value1 = load double, double* %value
  %buckets2 = load i64, i64* %buckets
  %cast = sitofp i64 %buckets2 to double
  %output = fmul double %value1, %cast
  %return = call i64 @"floor@IF"(double %output)
  %buckets3 = load i64, i64* %buckets
  %output4 = sub i64 %buckets3, 1
  %return5 = call i64 @"clamp@IIII"(i64 %return, i64 0, i64 %output4)
  %value6 = load double, double* %value
  %N_CDF7 = load <2 x double>*, <2 x double>** %N_CDF
  %return9 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %N_CDF7, i64 %return5)
  %return10 = call double @"getcomp@FUI"(<2 x double> %return9, i64 0)
  %output13 = add i64 %return5, 1
  %return14 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %N_CDF7, i64 %output13)
  %return15 = call double @"getcomp@FUI"(<2 x double> %return14, i64 0)
  %return19 = call double @"getcomp@FUI"(<2 x double> %return9, i64 1)
  %return24 = call double @"getcomp@FUI"(<2 x double> %return14, i64 1)
  %return25 = call double @"fit@FFFFFF"(double %value6, double %return10, double %return15, double %return19, double %return24)
  %D_CDF26 = load <2 x double>*, <2 x double>** %D_CDF
  store double %return25, double* %0
  store <2 x double>* %D_CDF26, <2 x double>** %1
  %buckets29 = load i64, i64* %buckets
  store i64 %buckets29, i64* %2
  %binarySearch = call i64 @"binarySearch@IF[UI"(double* %0, <2 x double>** %1, i64* %2)
  %return33 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %D_CDF26, i64 %binarySearch)
  %return34 = call double @"getcomp@FUI"(<2 x double> %return33, i64 1)
  %output37 = add i64 %binarySearch, 1
  %return38 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %D_CDF26, i64 %output37)
  %return39 = call double @"getcomp@FUI"(<2 x double> %return38, i64 1)
  %return43 = call double @"getcomp@FUI"(<2 x double> %return33, i64 0)
  %return48 = call double @"getcomp@FUI"(<2 x double> %return38, i64 0)
  %return49 = call double @"fit@FFFFFF"(double %return25, double %return34, double %return39, double %return43, double %return48)
  ret double %return49
}

; Function Attrs: nounwind
declare i64 @"floor@IF"(double) #2

; Function Attrs: nounwind
declare i64 @"clamp@IIII"(i64, i64, i64) #2

; Function Attrs: nounwind readnone
declare double @"chramp@FSF"(i8*, double) #1

; Function Attrs: nounwind
declare <3 x double> @"fit01@VVVV"(<3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind
define void @obj_geo1_tutorial_cable1_mountain1_unified_noise_vector1(<3 x double> %offset, double %rough, i64 %animate_noise, double %time, i64 %dolwarp, i64 %accuml, double %disp, double %dispfreq, i64 %dogwarp, i64 %accumg, double %gflow, double %flowrot, double %oct, double %lac, i64 %enable_remap, <4 x double> %period, <3 x double> %P, <3 x double> %__noise, i64 %doclampmin, i64 %doclampmax, double %clampminvalue, double %clampmaxvalue, i64 %normalize, i64 %operation, i64 %use_attriblist, <3 x double> %elementsize, i64 %usenoiseexpression, double %timefreq, i64 %outputraw, <3 x double> %min, <3 x double> %max, i8* %componentscope, i64 %blendmode, double %blendweight, i64 %doblend, double %blendattrib) #2 {
__llvm_entry:
  %x_avg = alloca double
  %x_oct = alloca double
  %x_off = alloca <3 x double>
  %x_avg1 = alloca double
  %x_oct1 = alloca double
  %x_off1 = alloca <3 x double>
  %outresult = alloca i64
  %outsuccess = alloca i64
  %outresult1 = alloca <2 x double>*
  %outsuccess1 = alloca i64
  %outresult2 = alloca <2 x double>*
  %outsuccess2 = alloca i64
  %out__unoise = alloca <3 x double>
  %outattrib_value = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  %p1 = alloca <3 x double>
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca double
  %10 = alloca double
  %11 = alloca <3 x double>
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca double
  %15 = alloca double
  %16 = alloca double
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca <3 x double>
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca <3 x double>
  %25 = alloca i64
  %26 = alloca <3 x double>
  %27 = alloca i64
  %28 = alloca <3 x double>
  %29 = alloca <3 x double>
  %30 = alloca <3 x double>
  %p11 = alloca <4 x double>
  %31 = alloca <4 x double>
  %32 = alloca <4 x double>
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca i64
  %36 = alloca i64
  %37 = alloca double
  %38 = alloca double
  %39 = alloca <4 x double>
  %40 = alloca i64
  %41 = alloca i64
  %42 = alloca double
  %43 = alloca double
  %44 = alloca double
  %45 = alloca double
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca <3 x double>
  %50 = alloca i64
  %51 = alloca i64
  %52 = alloca <3 x double>
  %53 = alloca i64
  %54 = alloca <3 x double>
  %55 = alloca i64
  %56 = alloca <3 x double>
  %57 = alloca <3 x double>
  %58 = alloca <3 x double>
  %59 = alloca i8*
  %60 = alloca i8*
  %61 = alloca i64
  %62 = alloca i8*
  %63 = alloca i8*
  %64 = alloca <2 x double>*
  %65 = alloca i8*
  %66 = alloca i8*
  %67 = alloca <2 x double>*
  %68 = alloca i64
  %69 = alloca i64
  %70 = alloca i64
  %71 = alloca i64
  %72 = alloca i64
  %73 = alloca i64
  %74 = alloca <2 x double>*
  %75 = alloca <2 x double>*
  %76 = alloca i64
  %77 = alloca double
  %78 = alloca i64
  %79 = alloca double
  %80 = alloca i64
  %81 = alloca <3 x double>
  %82 = alloca <3 x double>
  %83 = alloca i8*
  %84 = alloca i64
  %85 = alloca double
  %86 = alloca i64
  %87 = alloca double
  store double 0.000000e+00, double* %x_avg, !vex-initializer-store !3
  store double 0.000000e+00, double* %x_oct, !vex-initializer-store !3
  store <3 x double> zeroinitializer, <3 x double>* %x_off, !vex-initializer-store !3
  store double 0.000000e+00, double* %x_avg1, !vex-initializer-store !3
  store double 0.000000e+00, double* %x_oct1, !vex-initializer-store !3
  store <3 x double> zeroinitializer, <3 x double>* %x_off1, !vex-initializer-store !3
  store i64 0, i64* %outresult, !vex-initializer-store !3
  store i64 0, i64* %outsuccess, !vex-initializer-store !3
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @7, i64 0, i64 0), <2 x double>** %outresult1, !vex-initializer-store !3
  store i64 0, i64* %outsuccess1, !vex-initializer-store !3
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @7, i64 0, i64 0), <2 x double>** %outresult2, !vex-initializer-store !3
  store i64 0, i64* %outsuccess2, !vex-initializer-store !3
  store <3 x double> zeroinitializer, <3 x double>* %out__unoise, !vex-initializer-store !3
  store <3 x double> zeroinitializer, <3 x double>* %outattrib_value, !vex-initializer-store !3
  %88 = icmp ne i64 %usenoiseexpression, 0
  br i1 %88, label %true, label %end

true:                                             ; preds = %__llvm_entry
  call void @"_obj_geo1_tutorial_cable1_mountain1_unified_noise_vector1_snippet1@VVV"(<3 x double>* %0, <3 x double>* %1, <3 x double>* %2)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %output = call <3 x double> @"div@VV"(<3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> %elementsize)
  %cast = call <4 x double> @"set@PV"(<3 x double> %output)
  %output17 = call <4 x double> @"setcomp@PFI"(<4 x double> %cast, double %timefreq, i64 3)
  %cast19 = call <4 x double> @"set@PV"(<3 x double> %offset)
  %output21 = call <4 x double> @"setcomp@PFI"(<4 x double> %cast19, double 0.000000e+00, i64 3)
  store double 0.000000e+00, double* %x_avg
  store double 0.000000e+00, double* %x_oct
  %cast23 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast23, <3 x double>* %x_off
  %cast34 = call <4 x double> @"set@PV"(<3 x double> %P)
  %output35 = call <4 x double> @"mul@PP"(<4 x double> %cast34, <4 x double> %output17)
  %output37 = call <4 x double> @"sub@PP"(<4 x double> %output35, <4 x double> %output21)
  %cast38 = call <3 x double> @"set@VP"(<4 x double> %output37)
  store <3 x double> %cast38, <3 x double>* %p1
  %cast41 = call <3 x double> @"set@VP"(<4 x double> %period)
  %pyro_vopfw_VOP_CTXT = call double @"pyro_vopfw_VOP_CTXT@FV"(<3 x double>* %3)
  br i1 false, label %true46, label %false

true46:                                           ; preds = %end
  %pyro_vopfw_VOP_CTXT48 = call double @"pyro_vopfw_VOP_CTXT@FV"(<3 x double>* %4)
  br label %end47

false:                                            ; preds = %end
  br label %end47

end47:                                            ; preds = %false, %true46
  %return = call double @"max@FP"(<4 x double> %output17)
  %output53 = fmul double %disp, %return
  %return59 = call double @"max@FFF"(double 0.000000e+00, double 1.000000e+00)
  br i1 true, label %true65, label %end66

true65:                                           ; preds = %end47
  store i64 0, i64* %5
  store i64 0, i64* %6
  store i64 %accuml, i64* %7
  store i64 %accumg, i64* %8
  store double 0.000000e+00, double* %9
  store double %return59, double* %10
  store i64 %dolwarp, i64* %12
  store i64 %dogwarp, i64* %13
  store double %output53, double* %14
  store double %dispfreq, double* %15
  store double %gflow, double* %16
  store double %oct, double* %18
  store double %lac, double* %19
  store double %rough, double* %20
  %hmfT_simplex = call <3 x double> @"hmfT_simplex@VVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p1, i64* %5, i64* %6, i64* %7, i64* %8, double* %9, double* %10, <3 x double>* %11, i64* %12, i64* %13, double* %14, double* %15, double* %16, double* %17, double* %x_avg, <3 x double>* %x_off, double* %18, double* %19, double* %20, double* %x_oct)
  br label %end66

end66:                                            ; preds = %true65, %end47
  %n1.0 = phi <3 x double> [ %hmfT_simplex, %true65 ], [ %cast23, %end47 ]
  %cast82 = call <3 x double> @"set@VF"(double 1.000000e+00)
  %output83 = call <3 x double> @"mul@VV"(<3 x double> %n1.0, <3 x double> %cast82)
  %cast86 = call <3 x double> @"set@VF"(double 0.000000e+00)
  %output87 = call <3 x double> @"mul@VV"(<3 x double> %cast23, <3 x double> %cast86)
  %output88 = call <3 x double> @"add@VV"(<3 x double> %output83, <3 x double> %output87)
  store <3 x double> %output88, <3 x double>* %21
  store i64 0, i64* %22
  store i64 0, i64* %23
  store <3 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <3 x double>* %24
  store i64 0, i64* %25
  store <3 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <3 x double>* %26
  store i64 0, i64* %27
  store <3 x double> zeroinitializer, <3 x double>* %28
  store <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double>* %29
  store <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double>* %30
  %noise_cc = call <3 x double> @"noise_cc@VVIIVIVIVVV"(<3 x double>* %21, i64* %22, i64* %23, <3 x double>* %24, i64* %25, <3 x double>* %26, i64* %27, <3 x double>* %28, <3 x double>* %29, <3 x double>* %30)
  %cast91 = call <4 x double> @"set@PV"(<3 x double> %P)
  %output94 = call <4 x double> @"setcomp@PFI"(<4 x double> %cast91, double %time, i64 3)
  store double 0.000000e+00, double* %x_avg1
  store double 0.000000e+00, double* %x_oct1
  store <3 x double> %cast23, <3 x double>* %x_off1
  %output107 = call <4 x double> @"mul@PP"(<4 x double> %output94, <4 x double> %output17)
  %output109 = call <4 x double> @"sub@PP"(<4 x double> %output107, <4 x double> %output21)
  store <4 x double> %output109, <4 x double>* %p11
  %pyro_vopfw_VOP_CTXT115 = call double @"pyro_vopfw_VOP_CTXT@FP"(<4 x double>* %31)
  br i1 false, label %true117, label %false118

true117:                                          ; preds = %end66
  %pyro_vopfw_VOP_CTXT120 = call double @"pyro_vopfw_VOP_CTXT@FP"(<4 x double>* %32)
  br label %end119

false118:                                         ; preds = %end66
  br label %end119

end119:                                           ; preds = %false118, %true117
  %return124 = call double @"max@FP"(<4 x double> %output17)
  %output127 = fmul double %disp, %return124
  br i1 true, label %true139, label %end140

true139:                                          ; preds = %end119
  store i64 0, i64* %33
  store i64 0, i64* %34
  store i64 %accuml, i64* %35
  store i64 %accumg, i64* %36
  store double 0.000000e+00, double* %37
  store double %return59, double* %38
  store i64 %dolwarp, i64* %40
  store i64 %dogwarp, i64* %41
  store double %output127, double* %42
  store double %dispfreq, double* %43
  store double %gflow, double* %44
  store double %oct, double* %46
  store double %lac, double* %47
  store double %rough, double* %48
  %hmfT_simplex154 = call <3 x double> @"hmfT_simplex@VPIIIIFFPIIFFFFFVFFFF"(<4 x double>* %p11, i64* %33, i64* %34, i64* %35, i64* %36, double* %37, double* %38, <4 x double>* %39, i64* %40, i64* %41, double* %42, double* %43, double* %44, double* %45, double* %x_avg1, <3 x double>* %x_off1, double* %46, double* %47, double* %48, double* %x_oct1)
  br label %end140

end140:                                           ; preds = %true139, %end119
  %n11.0 = phi <3 x double> [ %hmfT_simplex154, %true139 ], [ %cast23, %end119 ]
  %output158 = call <3 x double> @"mul@VV"(<3 x double> %n11.0, <3 x double> %cast82)
  %output163 = call <3 x double> @"add@VV"(<3 x double> %output158, <3 x double> %output87)
  store <3 x double> %output163, <3 x double>* %49
  store i64 0, i64* %50
  store i64 0, i64* %51
  store <3 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <3 x double>* %52
  store i64 0, i64* %53
  store <3 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <3 x double>* %54
  store i64 0, i64* %55
  store <3 x double> zeroinitializer, <3 x double>* %56
  store <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double>* %57
  store <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double>* %58
  %noise_cc165 = call <3 x double> @"noise_cc@VVIIVIVIVVV"(<3 x double>* %49, i64* %50, i64* %51, <3 x double>* %52, i64* %53, <3 x double>* %54, i64* %55, <3 x double>* %56, <3 x double>* %57, <3 x double>* %58)
  %return167 = call i64 @"eq@III"(i64 %animate_noise, i64 0)
  %89 = icmp ne i64 %return167, 0
  br i1 %89, label %true168, label %false169

true168:                                          ; preds = %end140
  br label %end170

false169:                                         ; preds = %end140
  br label %end170

end170:                                           ; preds = %false169, %true168
  %result.0 = phi <3 x double> [ %noise_cc, %true168 ], [ %noise_cc165, %false169 ]
  %return173 = call i64 @"isbound@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @9, i64 0, i64 0))
  store i64 0, i64* %outresult
  store i64 0, i64* %outsuccess
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i64 0, i64 0), i8** %59
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @11, i64 0, i64 0), i8** %60
  store i64 0, i64* %61
  call void @"_obj_geo1_tutorial_cable1_mountain1_unified_noise_vector1_importdetail1_snippet1@ISSII"(i64* %outresult, i8** %59, i8** %60, i64* %61, i64* %outsuccess)
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @7, i64 0, i64 0), <2 x double>** %outresult1
  store i64 0, i64* %outsuccess1
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i64 0, i64 0), i8** %62
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @12, i64 0, i64 0), i8** %63
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @7, i64 0, i64 0), <2 x double>** %64
  call void @"_obj_geo1_tutorial_cable1_mountain1_unified_noise_vector1_importdetail4_snippet1@[USS[UI"(<2 x double>** %outresult1, i8** %62, i8** %63, <2 x double>** %64, i64* %outsuccess1)
  %outresult1193 = load <2 x double>*, <2 x double>** %outresult1
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @7, i64 0, i64 0), <2 x double>** %outresult2
  store i64 0, i64* %outsuccess2
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i64 0, i64 0), i8** %65
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @13, i64 0, i64 0), i8** %66
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @7, i64 0, i64 0), <2 x double>** %67
  call void @"_obj_geo1_tutorial_cable1_mountain1_unified_noise_vector1_importdetail5_snippet1@[USS[UI"(<2 x double>** %outresult2, i8** %65, i8** %66, <2 x double>** %67, i64* %outsuccess2)
  %outresult2203 = load <2 x double>*, <2 x double>** %outresult2
  store <3 x double> %result.0, <3 x double>* %out__unoise
  store <3 x double> %__noise, <3 x double>* %outattrib_value
  store i64 %return173, i64* %68
  store i64 %use_attriblist, i64* %69
  store i64 %operation, i64* %70
  store i64 %outputraw, i64* %71
  store i64 %enable_remap, i64* %72
  store <2 x double>* %outresult1193, <2 x double>** %74
  store <2 x double>* %outresult2203, <2 x double>** %75
  store i64 %doclampmin, i64* %76
  store double %clampminvalue, double* %77
  store i64 %doclampmax, i64* %78
  store double %clampmaxvalue, double* %79
  store i64 %normalize, i64* %80
  store <3 x double> %min, <3 x double>* %81
  store <3 x double> %max, <3 x double>* %82
  store i8* %componentscope, i8** %83
  store i64 %blendmode, i64* %84
  store double %blendweight, double* %85
  store i64 %doblend, i64* %86
  store double %blendattrib, double* %87
  call void @"_obj_geo1_tutorial_cable1_mountain1_unified_noise_vector1_snippet_noise_operation@VVIIIIII[U[UIFIFIVVSIFIF"(<3 x double>* %out__unoise, <3 x double>* %outattrib_value, i64* %68, i64* %69, i64* %70, i64* %71, i64* %72, i64* %73, <2 x double>** %74, <2 x double>** %75, i64* %76, double* %77, i64* %78, double* %79, i64* %80, <3 x double>* %81, <3 x double>* %82, i8** %83, i64* %84, double* %85, i64* %86, double* %87)
  %out__unoise245 = load <3 x double>, <3 x double>* %out__unoise
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @9, i64 0, i64 0), <3 x double> %out__unoise245) #4
  store <3 x double> %gvalue, <3 x double>* @__noise
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x double> @"setcomp@PFI"(<4 x double>, double, i64) #1

; Function Attrs: nounwind
declare double @"max@FP"(<4 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"isbound@IS"(i8*) #1

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_geo1_tutorial_cable1_mountain1_unified_noise_vector1(<3 x double> zeroinitializer, double 5.000000e-01, i64 0, double 0.000000e+00, i64 0, i64 0, double 0.000000e+00, double 1.000000e+00, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00, double 2.012340e+00, i64 0, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> zeroinitializer, <3 x double> zeroinitializer, i64 0, i64 0, double 0.000000e+00, double 1.000000e+00, i64 0, i64 0, i64 0, <3 x double> zeroinitializer, i64 0, double 0.000000e+00, i64 1, <3 x double> zeroinitializer, <3 x double> zeroinitializer, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i64 0, double 1.000000e+00, i64 0, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end

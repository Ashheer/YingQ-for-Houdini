;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [24 x i8] c"../flyrafter_angle_ramp\00"
@1 = private constant [22 x i8] c"../flyrafter_anglemin\00"
@2 = private constant [19 x i8] c"../flyrafter_angle\00"
@N = external global <3 x double>
@origNlength = external global double
@opinput1_up = external global <3 x double>
@height = external global double
@3 = private constant [2 x i8] c"N\00"
@4 = private constant [12 x i8] c"origNlength\00"
@5 = private constant [12 x i8] c"opinput1_up\00"
@6 = private constant [7 x i8] c"height\00"

; Function Attrs: nounwind readnone
declare double @"rint@FF"(double) #0

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind readnone
declare i64 @"abs@II"(i64) #0

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"qmultiply@PPP"(<4 x double>, <4 x double>) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"qinvert@PP"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"slerp@PPPF"(<4 x double>, <4 x double>, double) #0

; Function Attrs: nounwind readnone
declare <9 x double> @"qconvert@3P"(<4 x double>) #0

; Function Attrs: nounwind
declare <9 x double> @"mul@33"(<9 x double>, <9 x double>) #1

; Function Attrs: nounwind
declare <16 x double> @"set@43"(<9 x double>) #1

; Function Attrs: nounwind
declare <16 x double> @"mul@44"(<16 x double>, <16 x double>) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"slerp@VVVF"(<3 x double>* %pos0, <3 x double>* %pos1, double* %bias) #2 {
__llvm_entry:
  %pos01 = load <3 x double>, <3 x double>* %pos0
  %pos12 = load <3 x double>, <3 x double>* %pos1
  %return = call <4 x double> @"dihedral@PVV"(<3 x double> %pos01, <3 x double> %pos12)
  %bias3 = load double, double* %bias
  %return4 = call <4 x double> @"slerp@PPPF"(<4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>, <4 x double> %return, double %bias3)
  %return6 = call <3 x double> @"qrotate@VPV"(<4 x double> %return4, <3 x double> %pos01)
  ret <3 x double> %return6
}

; Function Attrs: nounwind readnone
declare <4 x double> @"dihedral@PVV"(<3 x double>, <3 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"qrotate@VPV"(<4 x double>, <3 x double>) #0

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VFVF"(<3 x double>* %_bound_N, double* %_bound_origNlength, <3 x double>* %_bound_opinput1_up, double* %_bound_height) #2 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %_bound_origNlength1 = load double, double* %_bound_origNlength
  %_bound_N2 = load <3 x double>, <3 x double>* %_bound_N
  store <3 x double> %_bound_N2, <3 x double>* %0
  %_bound_opinput1_up3 = load <3 x double>, <3 x double>* %_bound_opinput1_up
  store <3 x double> %_bound_opinput1_up3, <3 x double>* %1
  %_bound_height4 = load double, double* %_bound_height
  %return = call double @"chramp@FSF"(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @0, i64 0, i64 0), double %_bound_height4)
  %return5 = call double @"chf@FS"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @1, i64 0, i64 0))
  %output = call double @"div@FF"(double %return5, double 9.000000e+01)
  %return6 = call double @"chf@FS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @2, i64 0, i64 0))
  %output7 = call double @"div@FF"(double %return6, double 9.000000e+01)
  %return8 = call double @"fit01@FFFF"(double %return, double %output, double %output7)
  store double %return8, double* %2
  %slerp = call <3 x double> @"slerp@VVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  %return9 = call <3 x double> @"normalize@VV"(<3 x double> %slerp)
  %cast = call <3 x double> @"set@VF"(double %_bound_origNlength1)
  %output10 = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %return9)
  store <3 x double> %output10, <3 x double>* %_bound_N
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chramp@FSF"(i8*, double) #0

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind
declare double @"fit01@FFFF"(double, double, double) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #0

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %N, double %origNlength, <3 x double> %opinput1_up, double %height) #1 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca <3 x double>
  %2 = alloca double
  %"<N>" = alloca <3 x double>
  store <3 x double> %N, <3 x double>* %"<N>"
  store double %origNlength, double* %0
  store <3 x double> %opinput1_up, <3 x double>* %1
  store double %height, double* %2
  call void @"__vex_snippet_snippet@VFVF"(<3 x double>* %"<N>", double* %0, <3 x double>* %1, double* %2)
  %evalue = load <3 x double>, <3 x double>* %"<N>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i64 0, i64 0), double %origNlength) #3
  %gvalue7 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i64 0, i64 0), <3 x double> %opinput1_up) #3
  %gvalue9 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0), double %height) #3
  store <3 x double> %gvalue, <3 x double>* @N
  store double %gvalue5, double* @origNlength
  store <3 x double> %gvalue7, <3 x double>* @opinput1_up
  store double %gvalue9, double* @height
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00, <3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

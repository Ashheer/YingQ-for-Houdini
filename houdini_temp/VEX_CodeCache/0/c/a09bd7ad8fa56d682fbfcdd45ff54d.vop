;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@ptnum = external global i64
@Cd = external global <3 x double>
@0 = private constant [6 x i8] c"ptnum\00"
@1 = private constant [3 x i8] c"Cd\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IV"(i64* %_bound_ptnum, <3 x double>* %_bound_Cd) #0 {
__llvm_entry:
  %_bound_ptnum2 = load i64, i64* %_bound_ptnum
  %return = call i64 @"mod@III"(i64 %_bound_ptnum2, i64 256)
  %cast = sitofp i64 %_bound_ptnum2 to double
  %output = call double @"div@FF"(double %cast, double 2.560000e+02)
  %return4 = call i64 @"floor@IF"(double %output)
  %return5 = call i64 @"mod@III"(i64 %return4, i64 256)
  %_bound_ptnum6 = load i64, i64* %_bound_ptnum
  %cast7 = sitofp i64 %_bound_ptnum6 to double
  %output8 = call double @"div@FF"(double %cast7, double 2.560000e+02)
  %return9 = call double @"floor@FF"(double %output8)
  %output10 = call double @"div@FF"(double %return9, double 2.560000e+02)
  %return11 = call i64 @"floor@IF"(double %output10)
  %cast13 = sitofp i64 %return to double
  %output14 = call double @"div@FF"(double %cast13, double 2.550000e+02)
  %cast16 = sitofp i64 %return5 to double
  %output17 = call double @"div@FF"(double %cast16, double 2.550000e+02)
  %cast19 = sitofp i64 %return11 to double
  %output20 = call double @"div@FF"(double %cast19, double 2.550000e+02)
  %return24 = call <3 x double> @"set@VFFF"(double %output14, double %output17, double %output20)
  store <3 x double> %return24, <3 x double>* %_bound_Cd
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
declare i64 @"floor@IF"(double) #2

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %Cd) #2 {
__llvm_entry:
  %"<Cd>" = alloca <3 x double>
  %0 = alloca i64
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@IV"(i64* %0, <3 x double>* %"<Cd>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<Cd>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0), <3 x double> %evalue2) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue3, <3 x double>* @Cd
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

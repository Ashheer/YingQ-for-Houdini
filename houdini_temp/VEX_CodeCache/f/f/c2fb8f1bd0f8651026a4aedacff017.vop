;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [27 x i8] c"../attribwrangle9/distance\00"
@1 = private constant [24 x i8] c"../polyexpand2d1/offset\00"
@P = external global <3 x double>
@N = external global <3 x double>
@edgedist = external global double
@2 = private constant [2 x i8] c"P\00"
@3 = private constant [2 x i8] c"N\00"
@4 = private constant [9 x i8] c"edgedist\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVF"(<3 x double>* %_bound_P, <3 x double>* %_bound_N, double* %_bound_edgedist) #0 {
__llvm_entry:
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @0, i64 0, i64 0))
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %_bound_N2 = load <3 x double>, <3 x double>* %_bound_N
  %_bound_edgedist3 = load double, double* %_bound_edgedist
  %return4 = call double @"ch@FS"(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @1, i64 0, i64 0))
  %output = call double @"div@FF"(double %_bound_edgedist3, double %return4)
  %cast = call <3 x double> @"set@VF"(double %output)
  %output5 = call <3 x double> @"mul@VV"(<3 x double> %_bound_N2, <3 x double> %cast)
  %cast7 = call <3 x double> @"set@VF"(double %return)
  %output8 = call <3 x double> @"mul@VV"(<3 x double> %output5, <3 x double> %cast7)
  %output9 = call <3 x double> @"add@VV"(<3 x double> %_bound_P1, <3 x double> %output8)
  store <3 x double> %output9, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, <3 x double> %N, double %edgedist) #2 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca double
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %N, <3 x double>* %0
  store double %edgedist, double* %1
  call void @"__vex_snippet_snippet@VVF"(<3 x double>* %"<P>", <3 x double>* %0, double* %1)
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %N) #3
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0), double %edgedist) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store <3 x double> %gvalue4, <3 x double>* @N
  store double %gvalue6, double* @edgedist
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

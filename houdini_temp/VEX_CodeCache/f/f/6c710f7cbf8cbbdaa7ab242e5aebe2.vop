;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [9 x i8] c"gridSize\00"
@1 = private constant [8 x i8] c"offsetX\00"
@2 = private constant [8 x i8] c"offsetZ\00"
@P = external global <3 x double>
@3 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@V"(<3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call double @"getcomp@FVI"(<3 x double> %_bound_P1, i64 0)
  %return2 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0))
  %output = call double @"div@FF"(double %return, double %return2)
  %return3 = call double @"rint@FF"(double %output)
  %output5 = fmul double %return3, %return2
  %return6 = call double @"chf@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0))
  %return8 = call double @"mod@FFF"(double %return6, double %return2)
  %output9 = fadd double %output5, %return8
  %return10 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %_bound_P1, double %output9, i64 0)
  %output12 = extractvalue { double, <3 x double> } %return10, 1
  store <3 x double> %output12, <3 x double>* %_bound_P
  %return14 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output12, double 0.000000e+00, i64 1)
  %output16 = extractvalue { double, <3 x double> } %return14, 1
  store <3 x double> %output16, <3 x double>* %_bound_P
  %return18 = call double @"getcomp@FVI"(<3 x double> %output16, i64 2)
  %output20 = call double @"div@FF"(double %return18, double %return2)
  %return21 = call double @"rint@FF"(double %output20)
  %output23 = fmul double %return21, %return2
  %return24 = call double @"chf@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  %return26 = call double @"mod@FFF"(double %return24, double %return2)
  %output27 = fadd double %output23, %return26
  %return29 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output16, double %output27, i64 2)
  %output31 = extractvalue { double, <3 x double> } %return29, 1
  store <3 x double> %output31, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"rint@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"mod@FFF"(double, double) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P) #3 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  call void @"__vex_snippet_snippet@V"(<3 x double>* %"<P>")
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %evalue) #4
  store <3 x double> %gvalue, <3 x double>* @P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [5 x i8] c"name\00"
@2 = private constant [20 x i8] c"../clusterattribute\00"
@3 = private constant [15 x i8] c"../clustertype\00"
@4 = private constant [1 x i8] zeroinitializer
@cluster = external global i64
@__newname = external global i8*
@5 = private constant [8 x i8] c"cluster\00"
@6 = private constant [10 x i8] c"__newname\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SIS"(i8** %_bound_name, i64* %_bound_cluster, i8** %_bound___newname) #0 {
__llvm_entry:
  %_bound_name1 = load i8*, i8** %_bound_name
  %return = call i64 @"findattribval@IISSS"(i64 2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* %_bound_name1)
  %return2 = call i8* @"chs@SS"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @2, i64 0, i64 0))
  %return4 = call i64 @"point@IISI"(i64 1, i8* %return2, i64 %return)
  store i64 %return4, i64* %_bound_cluster
  %return5 = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @3, i64 0, i64 0))
  %return6 = call i64 @"eq@III"(i64 %return5, i64 0)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return8 = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %return)
  store i8* %return8, i8** %_bound___newname
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind
declare i64 @"findattribval@IISSS"(i64, i8*, i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %name, i64 %cluster, i8* %__newname) #1 {
__llvm_entry:
  %"<cluster>" = alloca i64
  %"<__newname>" = alloca i8*
  %0 = alloca i8*
  store i64 %cluster, i64* %"<cluster>"
  store i8* %__newname, i8** %"<__newname>"
  store i8* %name, i8** %0
  call void @"__vex_snippet_snippet@SIS"(i8** %0, i64* %"<cluster>", i8** %"<__newname>")
  %evalue = load i64, i64* %"<cluster>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @5, i64 0, i64 0), i64 %evalue) #3
  %evalue2 = load i8*, i8** %"<__newname>"
  %gvalue3 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @6, i64 0, i64 0), i8* %evalue2) #3
  store i64 %gvalue, i64* @cluster
  store i8* %gvalue3, i8** @__newname
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @4, i64 0, i64 0), i64 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @4, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

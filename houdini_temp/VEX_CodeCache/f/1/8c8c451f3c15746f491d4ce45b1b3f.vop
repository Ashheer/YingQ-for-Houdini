;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"../period\00"
@1 = private constant [9 x i8] c"../framp\00"
@2 = private constant [11 x i8] c"../chframp\00"
@3 = private constant [14 x i8] c"../prereverse\00"
@4 = private constant [12 x i8] c"../rangemin\00"
@5 = private constant [12 x i8] c"../rangemax\00"
@ptnum = external global i64
@numpt = external global i64
@pscale = external global double
@N = external global <3 x double>
@P = external global <3 x double>
@6 = private constant [6 x i8] c"ptnum\00"
@7 = private constant [6 x i8] c"numpt\00"
@8 = private constant [7 x i8] c"pscale\00"
@9 = private constant [2 x i8] c"N\00"
@10 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIFVV"(i64* %_bound_ptnum, i64* %_bound_numpt, double* %_bound_pscale, <3 x double>* %_bound_N, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0))
  %output = call i64 @"div@II"(i64 %_bound_ptnum1, i64 %return)
  %_bound_numpt2 = load i64, i64* %_bound_numpt
  %output4 = sub i64 %_bound_numpt2, %return
  %cast = sitofp i64 %output4 to double
  %cast5 = sitofp i64 %output to double
  %output6 = call double @"div@FF"(double %cast5, double %cast)
  %cast8 = sitofp i64 %return to double
  %output9 = fmul double %output6, %cast8
  %return10 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0))
  %0 = icmp ne i64 %return10, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return12 = call double @"chramp@FSF"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0), double %output9)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %attrib.0 = phi double [ %return12, %true ], [ %output9, %__llvm_entry ]
  %return13 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @3, i64 0, i64 0))
  %1 = icmp ne i64 %return13, 0
  br i1 %1, label %true14, label %end15

true14:                                           ; preds = %end
  %output17 = fsub double 1.000000e+00, %attrib.0
  br label %end15

end15:                                            ; preds = %true14, %end
  %attrib.1 = phi double [ %output17, %true14 ], [ %attrib.0, %end ]
  %return19 = call double @"chf@FS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i64 0, i64 0))
  %return20 = call double @"chf@FS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i64 0, i64 0))
  %return21 = call double @"fit01@FFFF"(double %attrib.1, double %return19, double %return20)
  store double %return21, double* %_bound_pscale
  %_bound_P23 = load <3 x double>, <3 x double>* %_bound_P
  store <3 x double> %_bound_P23, <3 x double>* %_bound_N
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"div@II"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"chramp@FSF"(i8*, double) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"fit01@FFFF"(double, double, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64 %numpt, double %pscale, <3 x double> %N, <3 x double> %P) #2 {
__llvm_entry:
  %"<pscale>" = alloca double
  %"<N>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca <3 x double>
  store double %pscale, double* %"<pscale>"
  store <3 x double> %N, <3 x double>* %"<N>"
  store i64 %ptnum, i64* %0
  store i64 %numpt, i64* %1
  store <3 x double> %P, <3 x double>* %2
  call void @"__vex_snippet_snippet@IIFVV"(i64* %0, i64* %1, double* %"<pscale>", <3 x double>* %"<N>", <3 x double>* %2)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i64 0, i64 0), i64 %ptnum) #3
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @7, i64 0, i64 0), i64 %numpt) #3
  %evalue6 = load double, double* %"<pscale>"
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @8, i64 0, i64 0), double %evalue6) #3
  %evalue8 = load <3 x double>, <3 x double>* %"<N>"
  %gvalue9 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i64 0, i64 0), <3 x double> %evalue8) #3
  %gvalue11 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i64 0, i64 0), <3 x double> %P) #3
  store i64 %gvalue, i64* @ptnum
  store i64 %gvalue5, i64* @numpt
  store double %gvalue7, double* @pscale
  store <3 x double> %gvalue9, <3 x double>* @N
  store <3 x double> %gvalue11, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, double 0.000000e+00, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

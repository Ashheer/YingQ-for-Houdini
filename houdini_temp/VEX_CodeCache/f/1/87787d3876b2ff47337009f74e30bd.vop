;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [5 x i8] c"name\00"
@2 = private constant [6 x i8] c"piece\00"
@name = external global i8*

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SII"(i8** %_bound_name, i64* %_bound_primnum, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound_name1 = load i8*, i8** %_bound_name
  %return = call i64 @"ne@ISS"(i8* %_bound_name1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %end4, %true9, %__llvm_entry
  ret void

end:                                              ; preds = %__llvm_entry
  %return2 = call i64 @"hasprimattrib@IIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0))
  %1 = icmp ne i64 %return2, 0
  br i1 %1, label %true3, label %end4

true3:                                            ; preds = %end
  %_bound_primnum5 = load i64, i64* %_bound_primnum
  %return6 = call i8* @"prim@SISI"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %_bound_primnum5)
  store i8* %return6, i8** %_bound_name
  br label %end4

end4:                                             ; preds = %true3, %end
  %_bound_name7 = load i8*, i8** %_bound_name
  %return8 = call i64 @"eq@ISS"(i8* %_bound_name7, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0))
  %2 = icmp ne i64 %return8, 0
  br i1 %2, label %true9, label %true

true9:                                            ; preds = %end4
  %_bound_ptnum11 = load i64, i64* %_bound_ptnum
  %return12 = call i8* @"itoa@SI"(i64 %_bound_ptnum11)
  %output = call i8* @"add@SS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i8* %return12)
  store i8* %output, i8** %_bound_name
  br label %true
}

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i64 @"hasprimattrib@IIS"(i64, i8*) #2

; Function Attrs: nounwind
declare i8* @"prim@SISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #1

; Function Attrs: nounwind readnone
declare i8* @"add@SS"(i8*, i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %name, i64 %primnum, i64 %ptnum) #2 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %"<name>" = alloca i8*
  store i8* %name, i8** %"<name>"
  store i64 %primnum, i64* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@SII"(i8** %"<name>", i64* %0, i64* %1)
  %evalue = load i8*, i8** %"<name>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* %evalue) #3
  store i8* %gvalue, i8** @name
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

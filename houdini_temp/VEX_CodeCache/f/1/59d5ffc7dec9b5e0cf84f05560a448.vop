;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"seed\00"
@1 = private constant [6 x i8] c"scale\00"
@ptnum = external global i64
@P = external global <3 x double>
@TimeInc = external global double
@v = external global <3 x double>
@2 = private constant [6 x i8] c"ptnum\00"
@3 = private constant [2 x i8] c"P\00"
@4 = private constant [8 x i8] c"TimeInc\00"
@5 = private constant [2 x i8] c"v\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVFV"(i64* %_bound_ptnum, <3 x double>* %_bound_P, double* %_bound_TimeInc, <3 x double>* %_bound_v) #0 {
__llvm_entry:
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  %output = fmul double %return, 1.234700e+02
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %cast = sitofp i64 %_bound_ptnum1 to double
  %output2 = fadd double %output, %cast
  %return3 = call double @"rand@FF"(double %output2)
  %_bound_P4 = load <3 x double>, <3 x double>* %_bound_P
  %return5 = call double @"ch@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0))
  %output7 = fmul double %return5, %return3
  %_bound_TimeInc8 = load double, double* %_bound_TimeInc
  %output9 = fmul double %output7, %_bound_TimeInc8
  %_bound_v10 = load <3 x double>, <3 x double>* %_bound_v
  %cast11 = call <3 x double> @"set@VF"(double %output9)
  %output12 = call <3 x double> @"mul@VV"(<3 x double> %cast11, <3 x double> %_bound_v10)
  %output13 = call <3 x double> @"add@VV"(<3 x double> %_bound_P4, <3 x double> %output12)
  store <3 x double> %output13, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"rand@FF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %P, double %TimeInc, <3 x double> %v) #2 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca double
  %2 = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  store double %TimeInc, double* %1
  store <3 x double> %v, <3 x double>* %2
  call void @"__vex_snippet_snippet@IVFV"(i64* %0, <3 x double>* %"<P>", double* %1, <3 x double>* %2)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %ptnum) #3
  %evalue4 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %evalue4) #3
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), double %TimeInc) #3
  %gvalue9 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), <3 x double> %v) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue5, <3 x double>* @P
  store double %gvalue7, double* @TimeInc
  store <3 x double> %gvalue9, <3 x double>* @v
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [9 x i8] c"polyline\00"
@2 = private constant [13 x i8] c"trianglebend\00"
@3 = private constant [11 x i8] c"restlength\00"
@4 = private constant [5 x i8] c"type\00"
@5 = private constant [17 x i8] c"domaxbranchangle\00"
@6 = private constant [15 x i8] c"maxbranchangle\00"
@7 = private constant [6 x i8] c"angle\00"
@8 = private constant [16 x i8] c"__constraintsrc\00"
@9 = private constant [18 x i8] c"__bendconstraints\00"
@ptnum = external global i64
@10 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private double @"computeAngleRestLength@FIIII"(i64* %geo, i64* %pt0, i64* %pt1, i64* %pt2) #0 {
__llvm_entry:
  %geo1 = load i64, i64* %geo
  %pt02 = load i64, i64* %pt0
  %return = call <3 x double> @"point@VISI"(i64 %geo1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %pt02)
  %geo3 = load i64, i64* %geo
  %pt14 = load i64, i64* %pt1
  %return5 = call <3 x double> @"point@VISI"(i64 %geo3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %pt14)
  %geo6 = load i64, i64* %geo
  %pt27 = load i64, i64* %pt2
  %return8 = call <3 x double> @"point@VISI"(i64 %geo6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %pt27)
  %output = call <3 x double> @"sub@VV"(<3 x double> %return5, <3 x double> %return)
  %return11 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %output14 = call <3 x double> @"sub@VV"(<3 x double> %return8, <3 x double> %return5)
  %return15 = call <3 x double> @"normalize@VV"(<3 x double> %output14)
  %return18 = call double @"dot@FVV"(<3 x double> %return11, <3 x double> %return15)
  %return19 = call i64 @"neg@II"(i64 1)
  %cast = sitofp i64 %return19 to double
  %return20 = call double @"clamp@FFFF"(double %return18, double %cast, double 1.000000e+00)
  %return21 = call double @"acos@FF"(double %return20)
  %return22 = call double @"degrees@FF"(double %return21)
  ret double %return22
}

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"acos@FF"(double) #2

; Function Attrs: nounwind
declare double @"degrees@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private double @"computeVertexCentroidDistance@FVVV"(<3 x double>* %p0, <3 x double>* %p1, <3 x double>* %p2) #0 {
__llvm_entry:
  %p01 = load <3 x double>, <3 x double>* %p0
  %p12 = load <3 x double>, <3 x double>* %p1
  %output = call <3 x double> @"add@VV"(<3 x double> %p01, <3 x double> %p12)
  %p23 = load <3 x double>, <3 x double>* %p2
  %output4 = call <3 x double> @"add@VV"(<3 x double> %output, <3 x double> %p23)
  %cast = call <3 x double> @"set@VI"(i64 3)
  %output5 = call <3 x double> @"div@VV"(<3 x double> %output4, <3 x double> %cast)
  %output8 = call <3 x double> @"sub@VV"(<3 x double> %p12, <3 x double> %output5)
  %return = call double @"length@FV"(<3 x double> %output8)
  ret double %return
}

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private double @"computeTriangleBendRestLength@FIIII"(i64* %geo, i64* %pt0, i64* %pt1, i64* %pt2) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  %geo1 = load i64, i64* %geo
  %pt02 = load i64, i64* %pt0
  %return = call <3 x double> @"point@VISI"(i64 %geo1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %pt02)
  %geo3 = load i64, i64* %geo
  %pt14 = load i64, i64* %pt1
  %return5 = call <3 x double> @"point@VISI"(i64 %geo3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %pt14)
  %geo6 = load i64, i64* %geo
  %pt27 = load i64, i64* %pt2
  %return8 = call <3 x double> @"point@VISI"(i64 %geo6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %pt27)
  store <3 x double> %return, <3 x double>* %0
  store <3 x double> %return5, <3 x double>* %1
  store <3 x double> %return8, <3 x double>* %2
  %computeVertexCentroidDistance = call double @"computeVertexCentroidDistance@FVVV"(<3 x double>* %0, <3 x double>* %1, <3 x double>* %2)
  ret double %computeVertexCentroidDistance
}

; Function Attrs: alwaysinline nounwind
define private void @"createTriangleBendConstraints@IISSFIS"(i64* %geo, i64* %ptnum, i8** %type, i8** %srcgrp, double* %maxbranchangle, i64* %outgeo, i8** %outgrp) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %ptnum1 = load i64, i64* %ptnum
  %geo2 = load i64, i64* %geo
  %return = call i64* @"neighbours@[III"(i64 %geo2, i64 %ptnum1)
  %return5 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %end19, %__llvm_entry
  %__impl_foreach_index_ef.0 = phi i64 [ 0, %__llvm_entry ], [ %output76, %end19 ]
  %return8 = call i64 @"lt@III"(i64 %__impl_foreach_index_ef.0, i64 %return5)
  %8 = icmp ne i64 %return8, 0
  br i1 %8, label %body, label %end

body:                                             ; preds = %cond
  %return11 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_ef.0)
  br label %cond14

end:                                              ; preds = %cond
  ret void

cond14:                                           ; preds = %end37, %body
  %__impl_foreach_index_ee.0 = phi i64 [ 0, %body ], [ %output, %end37 ]
  %return18 = call i64 @"lt@III"(i64 %__impl_foreach_index_ee.0, i64 %return5)
  %9 = icmp ne i64 %return18, 0
  br i1 %9, label %body15, label %end19

body15:                                           ; preds = %cond14
  %return23 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_ee.0)
  %return26 = call i64 @"lt@III"(i64 %return11, i64 %return23)
  %geo27 = load i64, i64* %geo
  %srcgrp28 = load i8*, i8** %srcgrp
  %return30 = call i64 @"inpointgroup@IISI"(i64 %geo27, i8* %srcgrp28, i64 %return11)
  %return31 = call i64 @"and@III"(i64 %return26, i64 %return30)
  %geo32 = load i64, i64* %geo
  %srcgrp33 = load i8*, i8** %srcgrp
  %return35 = call i64 @"inpointgroup@IISI"(i64 %geo32, i8* %srcgrp33, i64 %return23)
  %return36 = call i64 @"and@III"(i64 %return31, i64 %return35)
  %10 = icmp ne i64 %return36, 0
  br i1 %10, label %true, label %end37

end19:                                            ; preds = %cond14
  %output76 = add i64 %__impl_foreach_index_ef.0, 1
  br label %cond

true:                                             ; preds = %body15
  %geo38 = load i64, i64* %geo
  store i64 %geo38, i64* %0
  store i64 %return11, i64* %1
  store i64 %ptnum1, i64* %2
  store i64 %return23, i64* %3
  %computeAngleRestLength = call double @"computeAngleRestLength@FIIII"(i64* %0, i64* %1, i64* %2, i64* %3)
  %maxbranchangle43 = load double, double* %maxbranchangle
  %return44 = fcmp ole double %computeAngleRestLength, %maxbranchangle43
  br i1 %return44, label %true46, label %end37

end37:                                            ; preds = %true, %end57, %body15
  %output = add i64 %__impl_foreach_index_ee.0, 1
  br label %cond14

true46:                                           ; preds = %true
  %outgeo48 = load i64, i64* %outgeo
  %return52 = call i64* @"array@[I:III"(i64 %return11, i64 %ptnum1, i64 %return23)
  %return53 = call i64 @"addprim@IIS[I"(i64 %outgeo48, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0), i64* %return52)
  %type54 = load i8*, i8** %type
  %return55 = call i64 @"eq@ISS"(i8* %type54, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0))
  %11 = icmp ne i64 %return55, 0
  br i1 %11, label %true56, label %end57

true56:                                           ; preds = %true46
  %geo58 = load i64, i64* %geo
  store i64 %geo58, i64* %4
  store i64 %return11, i64* %5
  store i64 %ptnum1, i64* %6
  store i64 %return23, i64* %7
  %computeTriangleBendRestLength = call double @"computeTriangleBendRestLength@FIIII"(i64* %4, i64* %5, i64* %6, i64* %7)
  br label %end57

end57:                                            ; preds = %true56, %true46
  %restlen.0 = phi double [ %computeTriangleBendRestLength, %true56 ], [ %computeAngleRestLength, %true46 ]
  %outgeo62 = load i64, i64* %outgeo
  %return65 = call i64 @"setprimattrib@IISIF"(i64 %outgeo62, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0), i64 %return53, double %restlen.0)
  %outgeo66 = load i64, i64* %outgeo
  %type68 = load i8*, i8** %type
  %return69 = call i64 @"setprimattrib@IISIS"(i64 %outgeo66, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0), i64 %return53, i8* %type68)
  %outgeo70 = load i64, i64* %outgeo
  %outgrp71 = load i8*, i8** %outgrp
  %return73 = call i64 @"setprimgroup@IISII"(i64 %outgeo70, i8* %outgrp71, i64 %return53, i64 1)
  br label %end37
}

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"inpointgroup@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64* @"array@[I:III"(i64, i64, i64) #2

; Function Attrs: nounwind
declare i64 @"addprim@IIS[I"(i64, i8*, i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #2

; Function Attrs: nounwind
declare i64 @"setprimattrib@IISIF"(i64, i8*, i64, double) #1

; Function Attrs: nounwind
declare i64 @"setprimattrib@IISIS"(i64, i8*, i64, i8*) #1

; Function Attrs: nounwind
declare i64 @"setprimgroup@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_ptnum) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i8*
  %3 = alloca i8*
  %4 = alloca double
  %5 = alloca i64
  %6 = alloca i8*
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @5, i64 0, i64 0))
  %7 = icmp ne i64 %return, 0
  br i1 %7, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return1 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @6, i64 0, i64 0))
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %maxbranchangle.0 = phi double [ %return1, %true ], [ 3.600000e+02, %__llvm_entry ]
  store i64 1, i64* %0
  %_bound_ptnum2 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum2, i64* %1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @7, i64 0, i64 0), i8** %2
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @8, i64 0, i64 0), i8** %3
  store double %maxbranchangle.0, double* %4
  %return4 = call i64 @"geoself@I"()
  store i64 %return4, i64* %5
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @9, i64 0, i64 0), i8** %6
  call void @"createTriangleBendConstraints@IISSFIS"(i64* %0, i64* %1, i8** %2, i8** %3, double* %4, i64* %5, i8** %6)
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind
declare i64 @"geoself@I"() #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum) #1 {
__llvm_entry:
  %0 = alloca i64
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @10, i64 0, i64 0), i64 %ptnum) #3
  store i64 %gvalue, i64* @ptnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

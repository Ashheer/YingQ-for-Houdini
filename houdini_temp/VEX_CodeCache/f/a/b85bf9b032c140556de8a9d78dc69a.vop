;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@m3 = external global <16 x double>
@0 = private constant [3 x i8] c"m3\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@4"(<16 x double>* %_bound_m3) #0 {
__llvm_entry:
  %return = call <9 x double> @"ident@3"()
  %cast = call <16 x double> @"set@43"(<9 x double> %return)
  store <16 x double> %cast, <16 x double>* %_bound_m3
  ret void
}

; Function Attrs: nounwind
declare <9 x double> @"ident@3"() #1

; Function Attrs: nounwind
declare <16 x double> @"set@43"(<9 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<16 x double> %m3) #1 {
__llvm_entry:
  %"<m3>" = alloca <16 x double>
  store <16 x double> %m3, <16 x double>* %"<m3>"
  call void @"__vex_snippet_snippet@4"(<16 x double>* %"<m3>")
  %evalue = load <16 x double>, <16 x double>* %"<m3>"
  %gvalue = call <16 x double> @"_export@4S4"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), <16 x double> %evalue) #2
  store <16 x double> %gvalue, <16 x double>* @m3
  ret void
}

declare <16 x double> @"_export@4S4"(i8*, <16 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<16 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [6 x i8] c"scale\00"
@2 = private constant [14 x i8] c"scalebyattrib\00"
@3 = private constant [12 x i8] c"scaleattrib\00"
@ptnum = external global i64
@P = external global <3 x double>
@pscale = external global double
@4 = private constant [6 x i8] c"ptnum\00"
@5 = private constant [7 x i8] c"pscale\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVF"(i64* %_bound_ptnum, <3 x double>* %_bound_P, double* %_bound_pscale) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64* @"neighbours@[III"(i64 0, i64 %_bound_ptnum1)
  %return3 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %__impl_foreach_index_c3.0 = phi i64 [ 0, %__llvm_entry ], [ %output17, %body ]
  %totedge.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %output, %body ]
  %return6 = call i64 @"lt@III"(i64 %__impl_foreach_index_c3.0, i64 %return3)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return9 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_c3.0)
  %return11 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return9)
  %_bound_P14 = load <3 x double>, <3 x double>* %_bound_P
  %return15 = call double @"distance@FVV"(<3 x double> %return11, <3 x double> %_bound_P14)
  %output = fadd double %totedge.0, %return15
  %output17 = add i64 %__impl_foreach_index_c3.0, 1
  br label %cond

end:                                              ; preds = %cond
  %return18 = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0))
  %return19 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @2, i64 0, i64 0))
  %return20 = call i8* @"chs@SS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i64 0, i64 0))
  %return23 = call i64 @"haspointattrib@IIS"(i64 0, i8* %return20)
  %return24 = call i64 @"and@III"(i64 %return19, i64 %return23)
  %1 = icmp ne i64 %return24, 0
  br i1 %1, label %true, label %end25

true:                                             ; preds = %end
  %_bound_ptnum28 = load i64, i64* %_bound_ptnum
  %return29 = call double @"point@FISI"(i64 0, i8* %return20, i64 %_bound_ptnum28)
  %output30 = fmul double %return18, %return29
  br label %end25

end25:                                            ; preds = %true, %end
  %scale.0 = phi double [ %output30, %true ], [ %return18, %end ]
  %output32 = fmul double %scale.0, 5.000000e-01
  %output34 = fmul double %output32, %totedge.0
  %cast = sitofp i64 %return3 to double
  %output37 = call double @"div@FF"(double %output34, double %cast)
  store double %output37, double* %_bound_pscale
  ret void
}

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind
declare i64 @"haspointattrib@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %P, double %pscale) #1 {
__llvm_entry:
  %"<pscale>" = alloca double
  %0 = alloca i64
  %1 = alloca <3 x double>
  store double %pscale, double* %"<pscale>"
  store i64 %ptnum, i64* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@IVF"(i64* %0, <3 x double>* %1, double* %"<pscale>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %P) #3
  %evalue5 = load double, double* %"<pscale>"
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0), double %evalue5) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue4, <3 x double>* @P
  store double %gvalue6, double* @pscale
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

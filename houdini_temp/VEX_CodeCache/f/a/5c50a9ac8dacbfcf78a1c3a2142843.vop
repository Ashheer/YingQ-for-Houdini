;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [8 x i8] c"useramp\00"
@1 = private constant [6 x i8] c"remap\00"
@2 = private constant [9 x i8] c"inputmin\00"
@3 = private constant [9 x i8] c"inputmax\00"
@4 = private constant [10 x i8] c"outputmin\00"
@5 = private constant [10 x i8] c"outputmax\00"
@6 = private constant [10 x i8] c"clamptype\00"
@input = external global double
@output = external global double
@7 = private constant [6 x i8] c"input\00"
@8 = private constant [7 x i8] c"output\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FF"(double* %_bound_input, double* %_bound_output) #0 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %val = alloca double
  %_bound_input1 = load double, double* %_bound_input
  store double %_bound_input1, double* %val
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0))
  %return2 = call double @"ch@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0))
  %return3 = call double @"ch@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @4, i64 0, i64 0))
  %return4 = call double @"ch@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i64 0, i64 0))
  %return5 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @6, i64 0, i64 0))
  %output = fsub double %return2, %return
  %return9 = fcmp oeq double %output, 0.000000e+00
  br i1 %return9, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return13 = fcmp olt double %_bound_input1, %return
  %. = select i1 %return13, i64 0, i64 1
  %cast = sitofp i64 %. to double
  store double %cast, double* %val
  br label %end

false:                                            ; preds = %__llvm_entry
  %return19 = call i64 @"eq@III"(i64 %return5, i64 0)
  %2 = icmp ne i64 %return19, 0
  br i1 %2, label %true20, label %false21

end:                                              ; preds = %true29, %false30, %true20, %true
  %return54 = call i64 @"ne@III"(i64 %return5, i64 1)
  %3 = icmp ne i64 %return54, 0
  br i1 %3, label %true55, label %end56

true20:                                           ; preds = %false
  %return26 = call double @"fit@FFFFFF"(double %_bound_input1, double %return, double %return2, double 0.000000e+00, double 1.000000e+00)
  store double %return26, double* %val
  br label %end

false21:                                          ; preds = %false
  %return28 = call i64 @"eq@III"(i64 %return5, i64 1)
  %4 = icmp ne i64 %return28, 0
  %output34 = fsub double %_bound_input1, %return
  br i1 %4, label %true29, label %false30

true29:                                           ; preds = %false21
  %output36 = call double @"div@FF"(double %output34, double %output)
  %output39 = fsub double %return4, %return3
  %output40 = fmul double %output36, %output39
  %output42 = fadd double %output40, %return3
  store double %output42, double* %val
  br label %end

false30:                                          ; preds = %false21
  %output48 = call double @"div@FF"(double %output34, double %output)
  %return51 = call double @"floor@FF"(double %output48)
  %output52 = fsub double %output48, %return51
  store double %output52, double* %val
  br label %end

true55:                                           ; preds = %end
  store double %return3, double* %0
  store double %return4, double* %1
  call void @"applyRamp@FFF"(double* %val, double* %0, double* %1)
  br label %end56

end56:                                            ; preds = %true55, %end
  %val59 = load double, double* %val
  store double %val59, double* %_bound_output
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"applyRamp@FFF"(double* %val, double* %outputmin, double* %outputmax) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %val1 = load double, double* %val
  %return2 = call double @"chramp@FSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), double %val1)
  store double %return2, double* %val
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %val3 = load double, double* %val
  %outputmin4 = load double, double* %outputmin
  %outputmax5 = load double, double* %outputmax
  %return6 = call double @"fit@FFFFFF"(double %val3, double 0.000000e+00, double 1.000000e+00, double %outputmin4, double %outputmax5)
  store double %return6, double* %val
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"chramp@FSF"(i8*, double) #1

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #2

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %input, double %output) #2 {
__llvm_entry:
  %"<output>" = alloca double
  %0 = alloca double
  store double %output, double* %"<output>"
  store double %input, double* %0
  call void @"__vex_snippet_snippet@FF"(double* %0, double* %"<output>")
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @7, i64 0, i64 0), double %input) #3
  %evalue2 = load double, double* %"<output>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @8, i64 0, i64 0), double %evalue2) #3
  store double %gvalue, double* @input
  store double %gvalue3, double* @output
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [23 x i8] c"../originalpieceattrib\00"
@2 = private constant [9 x i8] c"__remove\00"
@3 = private constant [10 x i8] c"__scatter\00"
@4 = private constant [1 x i8] zeroinitializer
@name = external global i8*
@ptnum = external global i64
@parentpiece = external global i8*
@5 = private constant [5 x i8] c"name\00"
@6 = private constant [6 x i8] c"ptnum\00"
@7 = private constant [12 x i8] c"parentpiece\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SIS"(i8** %_bound_name, i64* %_bound_ptnum, i8** %_bound_parentpiece) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @1, i64 0, i64 0))
  %_bound_name1 = load i8*, i8** %_bound_name
  %return2 = call i64 @"findattribval@IISSS"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* %return, i8* %_bound_name1)
  %return3 = call i64 @"neg@II"(i64 1)
  %return4 = call i64 @"ne@III"(i64 %return2, i64 %return3)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_bound_ptnum5 = load i64, i64* %_bound_ptnum
  %return6 = call i64* @"pointprims@[III"(i64 0, i64 %_bound_ptnum5)
  %_bound_ptnum7 = load i64, i64* %_bound_ptnum
  %return8 = call i64 @"setpointgroup@IISII"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), i64 %_bound_ptnum7, i64 1)
  %return10 = call i64 @"len@I[I"(i64* %return6)
  br label %cond

false:                                            ; preds = %__llvm_entry
  %_bound_name36 = load i8*, i8** %_bound_name
  store i8* %_bound_name36, i8** %_bound_parentpiece
  br label %end

end:                                              ; preds = %cond, %false
  ret void

cond:                                             ; preds = %end26, %true
  %__impl_foreach_index_12.0 = phi i64 [ 0, %true ], [ %output, %end26 ]
  %return13 = call i64 @"lt@III"(i64 %__impl_foreach_index_12.0, i64 %return10)
  %1 = icmp ne i64 %return13, 0
  br i1 %1, label %body, label %end

body:                                             ; preds = %cond
  %return17 = call i64 @"getcomp@I[II"(i64* %return6, i64 %__impl_foreach_index_12.0)
  %return19 = call i64* @"primpoints@[III"(i64 0, i64 %return17)
  %return21 = call i64 @"getcomp@I[II"(i64* %return19, i64 0)
  %_bound_ptnum22 = load i64, i64* %_bound_ptnum
  %return23 = call i64 @"eq@III"(i64 %return21, i64 %_bound_ptnum22)
  %2 = icmp ne i64 %return23, 0
  br i1 %2, label %true24, label %false25

true24:                                           ; preds = %body
  %return28 = call i64 @"getcomp@I[II"(i64* %return19, i64 1)
  br label %end26

false25:                                          ; preds = %body
  br label %end26

end26:                                            ; preds = %false25, %true24
  %phi = phi i64 [ %return28, %true24 ], [ %return21, %false25 ]
  %return32 = call i64 @"setpointattrib@IISII"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), i64 %phi, i64 1)
  %return34 = call i64 @"setprimgroup@IISII"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), i64 %return17, i64 1)
  %output = add i64 %__impl_foreach_index_12.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"findattribval@IISSS"(i64, i8*, i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64* @"pointprims@[III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"setpointgroup@IISII"(i64, i8*, i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISII"(i64, i8*, i64, i64) #2

; Function Attrs: nounwind
declare i64 @"setprimgroup@IISII"(i64, i8*, i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i8* %name, i64 %ptnum, i8* %parentpiece) #2 {
__llvm_entry:
  %"<parentpiece>" = alloca i8*
  %0 = alloca i8*
  %1 = alloca i64
  store i8* %parentpiece, i8** %"<parentpiece>"
  store i8* %name, i8** %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@SIS"(i8** %0, i64* %1, i8** %"<parentpiece>")
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i64 0, i64 0), i8* %name) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i64 0, i64 0), i64 %ptnum) #3
  %evalue5 = load i8*, i8** %"<parentpiece>"
  %gvalue6 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i64 0, i64 0), i8* %evalue5) #3
  store i8* %gvalue, i8** @name
  store i64 %gvalue4, i64* @ptnum
  store i8* %gvalue6, i8** @parentpiece
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @4, i64 0, i64 0), i64 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @4, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [9 x i8] c"polyline\00"
@2 = private constant [11 x i8] c"restlength\00"
@3 = private constant [16 x i8] c"__constraintsrc\00"
@4 = private constant [21 x i8] c"__stretchconstraints\00"
@ptnum = external global i64
@5 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private double @"computeDistanceRestLength@FIII"(i64* %geo, i64* %p0, i64* %p1) #0 {
__llvm_entry:
  %geo1 = load i64, i64* %geo
  %p02 = load i64, i64* %p0
  %return = call <3 x double> @"point@VISI"(i64 %geo1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %p02)
  %geo3 = load i64, i64* %geo
  %p14 = load i64, i64* %p1
  %return5 = call <3 x double> @"point@VISI"(i64 %geo3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %p14)
  %return6 = call double @"distance@FVV"(<3 x double> %return, <3 x double> %return5)
  ret double %return6
}

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private void @"createDistanceConstraint@IISIS"(i64* %geo, i64* %ptnum, i8** %srcgrp, i64* %outgeo, i8** %outgrp) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %geo1 = load i64, i64* %geo
  %ptnum2 = load i64, i64* %ptnum
  %return = call i64* @"neighbours@[III"(i64 %geo1, i64 %ptnum2)
  %return4 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %__impl_foreach_index_fe.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %iter ]
  %return7 = call i64 @"lt@III"(i64 %__impl_foreach_index_fe.0, i64 %return4)
  %3 = icmp ne i64 %return7, 0
  br i1 %3, label %body, label %end

body:                                             ; preds = %cond
  %return10 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_fe.0)
  %ptnum12 = load i64, i64* %ptnum
  %return13 = call i64 @"le@III"(i64 %return10, i64 %ptnum12)
  %geo14 = load i64, i64* %geo
  %srcgrp15 = load i8*, i8** %srcgrp
  %return17 = call i64 @"inpointgroup@IISI"(i64 %geo14, i8* %srcgrp15, i64 %return10)
  %return18 = call i64 @"not@II"(i64 %return17)
  %return19 = call i64 @"or@III"(i64 %return13, i64 %return18)
  %4 = icmp ne i64 %return19, 0
  br i1 %4, label %iter, label %end20

end:                                              ; preds = %cond
  ret void

iter:                                             ; preds = %body, %end20
  %output = add i64 %__impl_foreach_index_fe.0, 1
  br label %cond

end20:                                            ; preds = %body
  %outgeo21 = load i64, i64* %outgeo
  %ptnum22 = load i64, i64* %ptnum
  %return24 = call i64* @"array@[I:II"(i64 %ptnum22, i64 %return10)
  %return25 = call i64 @"addprim@IIS[I"(i64 %outgeo21, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0), i64* %return24)
  %outgeo26 = load i64, i64* %outgeo
  %outgrp27 = load i8*, i8** %outgrp
  %return29 = call i64 @"setprimgroup@IISII"(i64 %outgeo26, i8* %outgrp27, i64 %return25, i64 1)
  %outgeo30 = load i64, i64* %outgeo
  %geo32 = load i64, i64* %geo
  store i64 %geo32, i64* %0
  %ptnum33 = load i64, i64* %ptnum
  store i64 %ptnum33, i64* %1
  store i64 %return10, i64* %2
  %computeDistanceRestLength = call double @"computeDistanceRestLength@FIII"(i64* %0, i64* %1, i64* %2)
  %return35 = call i64 @"setprimattrib@IISIF"(i64 %outgeo30, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0), i64 %return25, double %computeDistanceRestLength)
  br label %iter
}

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"le@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"inpointgroup@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64* @"array@[I:II"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"addprim@IIS[I"(i64, i8*, i64*) #1

; Function Attrs: nounwind
declare i64 @"setprimgroup@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"setprimattrib@IISIF"(i64, i8*, i64, double) #1

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_ptnum) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i8*
  %2 = alloca i64
  %3 = alloca i8*
  %4 = alloca i64
  store i64 1, i64* %4
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum1, i64* %0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @3, i64 0, i64 0), i8** %1
  %return = call i64 @"geoself@I"()
  store i64 %return, i64* %2
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @4, i64 0, i64 0), i8** %3
  call void @"createDistanceConstraint@IISIS"(i64* %4, i64* %0, i8** %1, i64* %2, i8** %3)
  ret void
}

; Function Attrs: nounwind
declare i64 @"geoself@I"() #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum) #1 {
__llvm_entry:
  %0 = alloca i64
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i64 0, i64 0), i64 %ptnum) #3
  store i64 %gvalue, i64* @ptnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

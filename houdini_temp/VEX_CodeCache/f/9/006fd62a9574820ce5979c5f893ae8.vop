;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [16 x i8] c"enabledirection\00"
@1 = private constant [12 x i8] c"castshadows\00"
@2 = private constant [11 x i8] c"maxraydist\00"
@3 = private constant [9 x i8] c"maxangle\00"
@4 = private constant [8 x i8] c"samples\00"
@5 = private constant [9 x i8] c"randseed\00"
@6 = private constant [10 x i8] c"coneangle\00"
@7 = private constant [10 x i8] c"rayoffset\00"
@8 = private constant [14 x i8] c"directionfrom\00"
@9 = private constant [16 x i8] c"maxsearchpoints\00"
@10 = private constant [12 x i8] c"__src_group\00"
@11 = private constant [2 x i8] c"P\00"
@12 = private constant [14 x i8] c"falloffbydist\00"
@13 = private constant [7 x i8] c"maxrad\00"
@14 = private constant [7 x i8] c"pscale\00"
@15 = private constant [12 x i8] c"fallofframp\00"
@16 = private constant [19 x i8] c"clampdirectionmask\00"
@17 = private constant [10 x i8] c"direction\00"
@18 = private constant [9 x i8] c"enableao\00"
@19 = private constant [10 x i8] c"aosamples\00"
@20 = private constant [7 x i8] c"aobias\00"
@21 = private constant [7 x i8] c"aoseed\00"
@22 = private constant [13 x i8] c"aomaxraydist\00"
@23 = private constant [12 x i8] c"aoconeangle\00"
@24 = private constant [12 x i8] c"aorayoffset\00"
@ptnum = external global i64
@N = external global <3 x double>
@P = external global <3 x double>
@__ao = external global double
@__direction = external global double
@__shadow = external global double
@25 = private constant [6 x i8] c"ptnum\00"
@26 = private constant [2 x i8] c"N\00"
@27 = private constant [5 x i8] c"__ao\00"
@28 = private constant [12 x i8] c"__direction\00"
@29 = private constant [9 x i8] c"__shadow\00"

; Function Attrs: alwaysinline nounwind
define private double @"vop_bias@FFF"(double* %base, double* %bias) #0 {
__llvm_entry:
  %base1 = load double, double* %base
  %return = fcmp ole double %base1, 0.000000e+00
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  br label %end

false:                                            ; preds = %__llvm_entry
  %return4 = fcmp oge double %base1, 1.000000e+00
  br i1 %return4, label %true6, label %false7

end:                                              ; preds = %true6, %false7, %true
  %val.0 = phi double [ 0.000000e+00, %true ], [ 1.000000e+00, %true6 ], [ %output16, %false7 ]
  ret double %val.0

true6:                                            ; preds = %false
  br label %end

false7:                                           ; preds = %false
  %bias9 = load double, double* %bias
  %output = call double @"div@FF"(double 1.000000e+00, double %base1)
  %output11 = fsub double %output, 2.000000e+00
  %output13 = fsub double 1.000000e+00, %bias9
  %output14 = fmul double %output11, %output13
  %output15 = fadd double %output14, 1.000000e+00
  %output16 = call double @"div@FF"(double %bias9, double %output15)
  br label %end
}

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVVFFF"(i64* %_bound_ptnum, <3 x double>* %_bound_N, <3 x double>* %_bound_P, double* %_bound___ao, double* %_bound___direction, double* %_bound___shadow) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca double
  %7 = alloca <3 x double>
  %8 = alloca <3 x double>
  %9 = alloca double
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca double
  %14 = alloca double
  %15 = alloca <3 x double>
  %16 = alloca <3 x double>
  %17 = alloca double
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i64 0, i64 0))
  %return2 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0))
  %return3 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0))
  %return4 = call double @"radians@FF"(double %return3)
  %return5 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0))
  %return6 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i64 0, i64 0))
  %_bound_ptnum7 = load i64, i64* %_bound_ptnum
  %return8 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @6, i64 0, i64 0))
  %return9 = call double @"radians@FF"(double %return8)
  %_bound_N10 = load <3 x double>, <3 x double>* %_bound_N
  %return11 = call <3 x double> @"normalize@VV"(<3 x double> %_bound_N10)
  %_bound_P12 = load <3 x double>, <3 x double>* %_bound_P
  %return14 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @7, i64 0, i64 0))
  %cast = call <3 x double> @"set@VF"(double %return14)
  %output = call <3 x double> @"mul@VV"(<3 x double> %return11, <3 x double> %cast)
  %output15 = call <3 x double> @"add@VV"(<3 x double> %_bound_P12, <3 x double> %output)
  %_bound_ptnum17 = load i64, i64* %_bound_ptnum
  %output18 = add i64 %return6, %_bound_ptnum17
  %return19 = call i64 @"random_ihash@II"(i64 %output18)
  %return22 = call i64 @"or@III"(i64 %return, i64 %return1)
  %23 = icmp ne i64 %return22, 0
  br i1 %23, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return23 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @8, i64 0, i64 0))
  %24 = icmp ne i64 %return23, 0
  br i1 %24, label %true24, label %false

end:                                              ; preds = %end115, %true127, %end100, %true106, %__llvm_entry
  %directiontest.0 = phi double [ %return109, %true106 ], [ %directiontest.1, %end100 ], [ %output141, %true127 ], [ 0.000000e+00, %end115 ], [ 0.000000e+00, %__llvm_entry ]
  %shadowtest.0 = phi double [ %shadowtest.3, %true106 ], [ %shadowtest.3, %end100 ], [ %shadowtest.4, %true127 ], [ %shadowtest.4, %end115 ], [ 0.000000e+00, %__llvm_entry ]
  %return142 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @18, i64 0, i64 0))
  %25 = icmp ne i64 %return142, 0
  br i1 %25, label %true143, label %end144

true24:                                           ; preds = %true
  %return26 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @9, i64 0, i64 0))
  %return30 = call i64* @"pcfind@[IISSVFI"(i64 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i64 0, i64 0), <3 x double> %_bound_P12, double %return2, i64 %return26)
  %return32 = call i64 @"len@I[I"(i64* %return30)
  br label %cond

false:                                            ; preds = %true
  %return111 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @17, i64 0, i64 0))
  %return112 = call <3 x double> @"normalize@VV"(<3 x double> %return111)
  %26 = icmp ne i64 %return1, 0
  br i1 %26, label %true114, label %end115

cond:                                             ; preds = %end65, %true24
  %__impl_foreach_index.0 = phi i64 [ 0, %true24 ], [ %output94, %end65 ]
  %directiontest.1 = phi double [ 0.000000e+00, %true24 ], [ %directiontest.2, %end65 ]
  %shadowtest.1 = phi double [ 0.000000e+00, %true24 ], [ %shadowtest.2, %end65 ]
  %return35 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return32)
  %27 = icmp ne i64 %return35, 0
  br i1 %27, label %body, label %end36

body:                                             ; preds = %cond
  %return39 = call i64 @"getcomp@I[II"(i64* %return30, i64 %__impl_foreach_index.0)
  %return41 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i64 0, i64 0), i64 %return39)
  %_bound_P43 = load <3 x double>, <3 x double>* %_bound_P
  %output44 = call <3 x double> @"sub@VV"(<3 x double> %return41, <3 x double> %_bound_P43)
  %return46 = call double @"length@FV"(<3 x double> %output44)
  %cast49 = call <3 x double> @"set@VF"(double %return46)
  %output50 = call <3 x double> @"div@VV"(<3 x double> %output44, <3 x double> %cast49)
  %28 = icmp ne i64 %return1, 0
  br i1 %28, label %true52, label %end53

end36:                                            ; preds = %cond
  %return98 = call i64 @"gt@III"(i64 %return32, i64 0)
  %29 = icmp ne i64 %return98, 0
  br i1 %29, label %true99, label %end100

true52:                                           ; preds = %body
  store <3 x double> %output15, <3 x double>* %0
  store <3 x double> %output50, <3 x double>* %1
  store double %return46, double* %2
  store i64 %return5, i64* %3
  store i64 %return19, i64* %4
  store i64 %_bound_ptnum7, i64* %5
  store double %return9, double* %6
  %raytest = call double @"raytest@FVVFIIIF"(<3 x double>* %0, <3 x double>* %1, double* %2, i64* %3, i64* %4, i64* %5, double* %6)
  %output62 = fadd double %shadowtest.1, %raytest
  br label %end53

end53:                                            ; preds = %true52, %body
  %shadowtest.2 = phi double [ %output62, %true52 ], [ %shadowtest.1, %body ]
  %30 = icmp ne i64 %return, 0
  br i1 %30, label %true64, label %end65

true64:                                           ; preds = %end53
  %return68 = call double @"dot@FVV"(<3 x double> %return11, <3 x double> %output50)
  %return69 = call double @"acos@FF"(double %return68)
  %return70 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @12, i64 0, i64 0))
  %31 = icmp ne i64 %return70, 0
  br i1 %31, label %true71, label %end72

end65:                                            ; preds = %end72, %end53
  %directiontest.2 = phi double [ %output92, %end72 ], [ %directiontest.1, %end53 ]
  %output94 = add i64 %__impl_foreach_index.0, 1
  br label %cond

true71:                                           ; preds = %true64
  %return73 = call double @"ch@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i64 0, i64 0))
  %return76 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @14, i64 0, i64 0), i64 %return39)
  %output77 = fmul double %return73, %return76
  %output80 = call double @"div@FF"(double %return46, double %output77)
  %return81 = call double @"clamp@FFFF"(double %output80, double 0.000000e+00, double 1.000000e+00)
  %return82 = call double @"chramp@FSF"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @15, i64 0, i64 0), double %return81)
  br label %end72

end72:                                            ; preds = %true71, %true64
  %distweight.0 = phi double [ %return82, %true71 ], [ 1.000000e+00, %true64 ]
  %return87 = call double @"clamp@FFFF"(double %return69, double 0.000000e+00, double %return4)
  %output89 = call double @"div@FF"(double %return87, double %return4)
  %output90 = fsub double 1.000000e+00, %output89
  %output91 = fmul double %distweight.0, %output90
  %output92 = fadd double %directiontest.1, %output91
  br label %end65

true99:                                           ; preds = %end36
  %cast103 = sitofp i64 %return32 to double
  %output104 = call double @"div@FF"(double %shadowtest.1, double %cast103)
  br label %end100

end100:                                           ; preds = %true99, %end36
  %shadowtest.3 = phi double [ %output104, %true99 ], [ %shadowtest.1, %end36 ]
  %return105 = call i64 @"chi@IS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @16, i64 0, i64 0))
  %32 = icmp ne i64 %return105, 0
  br i1 %32, label %true106, label %end

true106:                                          ; preds = %end100
  %return109 = call double @"clamp@FFFF"(double %directiontest.1, double 0.000000e+00, double 1.000000e+00)
  br label %end

true114:                                          ; preds = %false
  store <3 x double> %output15, <3 x double>* %7
  store <3 x double> %return112, <3 x double>* %8
  store double %return2, double* %9
  store i64 %return5, i64* %10
  store i64 %return19, i64* %11
  store i64 %_bound_ptnum7, i64* %12
  store double %return9, double* %13
  %raytest124 = call double @"raytest@FVVFIIIF"(<3 x double>* %7, <3 x double>* %8, double* %9, i64* %10, i64* %11, i64* %12, double* %13)
  %output125 = fadd double 0.000000e+00, %raytest124
  br label %end115

end115:                                           ; preds = %true114, %false
  %shadowtest.4 = phi double [ %output125, %true114 ], [ 0.000000e+00, %false ]
  %33 = icmp ne i64 %return, 0
  br i1 %33, label %true127, label %end

true127:                                          ; preds = %end115
  %_bound_N130 = load <3 x double>, <3 x double>* %_bound_N
  %return132 = call double @"dot@FVV"(<3 x double> %_bound_N130, <3 x double> %return112)
  %return133 = call double @"acos@FF"(double %return132)
  %return137 = call double @"clamp@FFFF"(double %return133, double 0.000000e+00, double %return4)
  %output139 = call double @"div@FF"(double %return137, double %return4)
  %output140 = fsub double 1.000000e+00, %output139
  %output141 = fadd double 0.000000e+00, %output140
  br label %end

true143:                                          ; preds = %end
  %return145 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @19, i64 0, i64 0))
  %return146 = call double @"ch@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @20, i64 0, i64 0))
  %return147 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @21, i64 0, i64 0))
  %return148 = call double @"ch@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @22, i64 0, i64 0))
  %return149 = call double @"ch@FS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @23, i64 0, i64 0))
  %return150 = call double @"radians@FF"(double %return149)
  %return151 = call double @"ch@FS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @24, i64 0, i64 0))
  %_bound_P152 = load <3 x double>, <3 x double>* %_bound_P
  %cast155 = call <3 x double> @"set@VF"(double %return151)
  %output156 = call <3 x double> @"mul@VV"(<3 x double> %cast155, <3 x double> %return11)
  %output157 = call <3 x double> @"add@VV"(<3 x double> %_bound_P152, <3 x double> %output156)
  store <3 x double> %output157, <3 x double>* %15
  store <3 x double> %return11, <3 x double>* %16
  store double %return148, double* %17
  store i64 %return145, i64* %18
  store i64 %return147, i64* %19
  store i64 %_bound_ptnum7, i64* %20
  store double %return150, double* %21
  %raytest164 = call double @"raytest@FVVFIIIF"(<3 x double>* %15, <3 x double>* %16, double* %17, i64* %18, i64* %19, i64* %20, double* %21)
  store double %raytest164, double* %14
  store double %return146, double* %22
  %vop_bias = call double @"vop_bias@FFF"(double* %14, double* %22)
  br label %end144

end144:                                           ; preds = %true143, %end
  %ao.0 = phi double [ %vop_bias, %true143 ], [ 1.000000e+00, %end ]
  store double %ao.0, double* %_bound___ao
  store double %directiontest.0, double* %_bound___direction
  store double %shadowtest.0, double* %_bound___shadow
  ret void
}

; Function Attrs: alwaysinline nounwind
define private double @"raytest@FVVFIIIF"(<3 x double>* %startp, <3 x double>* %sourcedir, double* %maxraydist, i64* %samples, i64* %seed, i64* %pt_id, double* %coneangle) #0 {
__llvm_entry:
  %samples1 = load i64, i64* %samples
  %return = call i64 @"eq@III"(i64 %samples1, i64 0)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  br label %cond

cond:                                             ; preds = %end39, %end
  %i.0 = phi i64 [ 0, %end ], [ %output44, %end39 ]
  %count.0 = phi i64 [ 0, %end ], [ %count.1, %end39 ]
  %samples3 = load i64, i64* %samples
  %return4 = call i64 @"lt@III"(i64 %i.0, i64 %samples3)
  %1 = icmp ne i64 %return4, 0
  br i1 %1, label %body, label %end5

body:                                             ; preds = %cond
  %seed6 = load i64, i64* %seed
  %cast = sitofp i64 %seed6 to double
  %pt_id7 = load i64, i64* %pt_id
  %cast8 = sitofp i64 %pt_id7 to double
  %cast10 = sitofp i64 %i.0 to double
  %return11 = call <3 x double> @"set@VFFF"(double %cast, double %cast8, double %cast10)
  %return12 = call i64 @"random_fhash@IV"(<3 x double> %return11)
  %return14 = call <2 x double> @"random@UI"(i64 %return12)
  %maxraydist15 = load double, double* %maxraydist
  %sourcedir16 = load <3 x double>, <3 x double>* %sourcedir
  %coneangle17 = load double, double* %coneangle
  %return19 = call <3 x double> @"sample_direction_cone@VVFU"(<3 x double> %sourcedir16, double %coneangle17, <2 x double> %return14)
  %cast20 = call <3 x double> @"set@VF"(double %maxraydist15)
  %output = call <3 x double> @"mul@VV"(<3 x double> %cast20, <3 x double> %return19)
  %startp21 = load <3 x double>, <3 x double>* %startp
  %return23 = call { i64, <3 x double>, <3 x double> } @"intersect@IIVVVV"(i64 0, <3 x double> %startp21, <3 x double> %output)
  %return24 = extractvalue { i64, <3 x double>, <3 x double> } %return23, 0
  %return27 = call i64 @"neg@II"(i64 1)
  %return28 = call i64 @"eq@III"(i64 %return24, i64 %return27)
  %startp29 = load <3 x double>, <3 x double>* %startp
  %return31 = call { i64, <3 x double>, <3 x double> } @"intersect@IIVVVV"(i64 2, <3 x double> %startp29, <3 x double> %output)
  %return32 = extractvalue { i64, <3 x double>, <3 x double> } %return31, 0
  %return36 = call i64 @"eq@III"(i64 %return32, i64 %return27)
  %return37 = call i64 @"and@III"(i64 %return28, i64 %return36)
  %2 = icmp ne i64 %return37, 0
  br i1 %2, label %true38, label %end39

end5:                                             ; preds = %cond
  %cast46 = sitofp i64 %count.0 to double
  %cast48 = sitofp i64 %samples3 to double
  %output49 = call double @"div@FF"(double %cast46, double %cast48)
  br label %UnifiedReturnBlock

true38:                                           ; preds = %body
  %output41 = add i64 %count.0, 1
  br label %end39

end39:                                            ; preds = %true38, %body
  %count.1 = phi i64 [ %output41, %true38 ], [ %count.0, %body ]
  %output44 = add i64 %i.0, 1
  br label %cond

UnifiedReturnBlock:                               ; preds = %end5, %true
  %UnifiedRetVal = phi double [ 0.000000e+00, %true ], [ %output49, %end5 ]
  ret double %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare i64 @"random_fhash@IV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"random@UI"(i64) #1

; Function Attrs: nounwind
declare <3 x double> @"sample_direction_cone@VVFU"(<3 x double>, double, <2 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare { i64, <3 x double>, <3 x double> } @"intersect@IIVVVV"(i64, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"radians@FF"(double) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"random_ihash@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64* @"pcfind@[IISSVFI"(i64, i8*, i8*, <3 x double>, double, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"acos@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare double @"chramp@FSF"(i8*, double) #1

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %N, <3 x double> %P, double %__ao, double %__direction, double %__shadow) #2 {
__llvm_entry:
  %"<__ao>" = alloca double
  %"<__direction>" = alloca double
  %"<__shadow>" = alloca double
  %0 = alloca i64
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  store double %__ao, double* %"<__ao>"
  store double %__direction, double* %"<__direction>"
  store double %__shadow, double* %"<__shadow>"
  store i64 %ptnum, i64* %0
  store <3 x double> %N, <3 x double>* %1
  store <3 x double> %P, <3 x double>* %2
  call void @"__vex_snippet_snippet@IVVFFF"(i64* %0, <3 x double>* %1, <3 x double>* %2, double* %"<__ao>", double* %"<__direction>", double* %"<__shadow>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @25, i64 0, i64 0), i64 %ptnum) #3
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @26, i64 0, i64 0), <3 x double> %N) #3
  %gvalue7 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i64 0, i64 0), <3 x double> %P) #3
  %evalue8 = load double, double* %"<__ao>"
  %gvalue9 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @27, i64 0, i64 0), double %evalue8) #3
  %evalue10 = load double, double* %"<__direction>"
  %gvalue11 = call double @"_export@FSF"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @28, i64 0, i64 0), double %evalue10) #3
  %evalue12 = load double, double* %"<__shadow>"
  %gvalue13 = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @29, i64 0, i64 0), double %evalue12) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue5, <3 x double>* @N
  store <3 x double> %gvalue7, <3 x double>* @P
  store double %gvalue9, double* @__ao
  store double %gvalue11, double* @__direction
  store double %gvalue13, double* @__shadow
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

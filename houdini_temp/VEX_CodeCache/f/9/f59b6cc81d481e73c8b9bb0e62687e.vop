;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@__edgelen = external global double
@__edgenum = external global i64
@ptnum = external global i64
@P = external global <3 x double>
@1 = private constant [10 x i8] c"__edgelen\00"
@2 = private constant [10 x i8] c"__edgenum\00"
@3 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FIIV"(double* %_bound___edgelen, i64* %_bound___edgenum, i64* %_bound_ptnum, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64* @"neighbours@[III"(i64 0, i64 %_bound_ptnum1)
  %return3 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %__impl_foreach_index_b8.0 = phi i64 [ 0, %__llvm_entry ], [ %output23, %iter ]
  %return6 = call i64 @"lt@III"(i64 %__impl_foreach_index_b8.0, i64 %return3)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return9 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_b8.0)
  %_bound_ptnum11 = load i64, i64* %_bound_ptnum
  %return12 = call i64 @"lt@III"(i64 %return9, i64 %_bound_ptnum11)
  %1 = icmp ne i64 %return12, 0
  br i1 %1, label %iter, label %end13

end:                                              ; preds = %cond
  ret void

iter:                                             ; preds = %body, %end13
  %output23 = add i64 %__impl_foreach_index_b8.0, 1
  br label %cond

end13:                                            ; preds = %body
  %return15 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return9)
  %_bound___edgelen16 = load double, double* %_bound___edgelen
  %_bound_P18 = load <3 x double>, <3 x double>* %_bound_P
  %return19 = call double @"distance@FVV"(<3 x double> %return15, <3 x double> %_bound_P18)
  %output = fadd double %_bound___edgelen16, %return19
  store double %output, double* %_bound___edgelen
  %_bound___edgenum20 = load i64, i64* %_bound___edgenum
  %output21 = add i64 %_bound___edgenum20, 1
  store i64 %output21, i64* %_bound___edgenum
  br label %iter
}

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %__edgelen, i64 %__edgenum, i64 %ptnum, <3 x double> %P) #1 {
__llvm_entry:
  %"<__edgenum>" = alloca i64
  %0 = alloca i64
  %1 = alloca <3 x double>
  %"<__edgelen>" = alloca double
  store double %__edgelen, double* %"<__edgelen>"
  store i64 %__edgenum, i64* %"<__edgenum>"
  store i64 %ptnum, i64* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@FIIV"(double* %"<__edgelen>", i64* %"<__edgenum>", i64* %0, <3 x double>* %1)
  %evalue = load double, double* %"<__edgelen>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), double %evalue) #3
  %evalue3 = load i64, i64* %"<__edgenum>"
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0), i64 %evalue3) #3
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %P) #3
  store double %gvalue, double* @__edgelen
  store i64 %gvalue4, i64* @__edgenum
  store i64 %gvalue6, i64* @ptnum
  store <3 x double> %gvalue8, <3 x double>* @P
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, i64 0, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

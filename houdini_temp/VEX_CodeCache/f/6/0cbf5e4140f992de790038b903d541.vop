;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"op:%s\00"
@1 = private constant [11 x i8] c"targetpath\00"
@2 = private constant [1 x i8] zeroinitializer
@target_pt = external global i64
@target_path = external global i8*
@ptnum = external global i64
@3 = private constant [10 x i8] c"target_pt\00"
@4 = private constant [12 x i8] c"target_path\00"
@5 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@ISI"(i64* %_bound_target_pt, i8** %_bound_target_path, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0))
  %return1 = call i8* @"sprintf@SS:S"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* %return)
  store i8* %return1, i8** %_bound_target_path
  %_bound_ptnum2 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum2, i64* %_bound_target_pt
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"sprintf@SS:S"(i8*, i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %target_pt, i8* %target_path, i64 %ptnum) #2 {
__llvm_entry:
  %"<target_path>" = alloca i8*
  %0 = alloca i64
  %"<target_pt>" = alloca i64
  store i64 %target_pt, i64* %"<target_pt>"
  store i8* %target_path, i8** %"<target_path>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@ISI"(i64* %"<target_pt>", i8** %"<target_path>", i64* %0)
  %evalue = load i64, i64* %"<target_pt>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), i64 %evalue) #3
  %evalue2 = load i8*, i8** %"<target_path>"
  %gvalue3 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i64 0, i64 0), i8* %evalue2) #3
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i64 0, i64 0), i64 %ptnum) #3
  store i64 %gvalue, i64* @target_pt
  store i8* %gvalue3, i8** @target_path
  store i64 %gvalue5, i64* @ptnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

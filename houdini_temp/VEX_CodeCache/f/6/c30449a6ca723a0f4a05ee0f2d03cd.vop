;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [14 x i8] c"__refcentroid\00"
@1 = private constant [12 x i8] c"piece_class\00"
@2 = private constant [11 x i8] c"__centroid\00"
@3 = private constant [6 x i8] c"scale\00"
@P = external global <3 x double>
@4 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VIV"(<3 x double>* %_bound___centroid, i64* %_bound_primnum, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %return = call <3 x double> @"detail@VIS"(i64 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"eq@III"(i64 %return1, i64 1)
  %0 = icmp ne i64 %return2, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_bound___centroid3 = load <3 x double>, <3 x double>* %_bound___centroid
  br label %end

false:                                            ; preds = %__llvm_entry
  %_bound_primnum4 = load i64, i64* %_bound_primnum
  %return5 = call <3 x double> @"prim@VISI"(i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0), i64 %_bound_primnum4)
  br label %end

end:                                              ; preds = %false, %true
  %centroid.0 = phi <3 x double> [ %_bound___centroid3, %true ], [ %return5, %false ]
  %_bound_P6 = load <3 x double>, <3 x double>* %_bound_P
  %return7 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0))
  %output = call <3 x double> @"sub@VV"(<3 x double> %centroid.0, <3 x double> %return)
  %output10 = call <3 x double> @"mul@VV"(<3 x double> %return7, <3 x double> %output)
  %output11 = call <3 x double> @"add@VV"(<3 x double> %_bound_P6, <3 x double> %output10)
  store <3 x double> %output11, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"detail@VIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"prim@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %__centroid, i64 %primnum, <3 x double> %P) #1 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca i64
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %__centroid, <3 x double>* %0
  store i64 %primnum, i64* %1
  call void @"__vex_snippet_snippet@VIV"(<3 x double>* %0, i64* %1, <3 x double>* %"<P>")
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), <3 x double> %evalue) #3
  store <3 x double> %gvalue, <3 x double>* @P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

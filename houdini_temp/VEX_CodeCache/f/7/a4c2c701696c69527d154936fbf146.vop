;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"0\00"
@1 = private constant [1 x i8] zeroinitializer
@name = external global i8*
@Cd = external global <3 x double>
@2 = private constant [5 x i8] c"name\00"
@3 = private constant [3 x i8] c"Cd\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SV"(i8** %_bound_name, <3 x double>* %_bound_Cd) #0 {
__llvm_entry:
  %_bound_name1 = load i8*, i8** %_bound_name
  %return = call i64 @"eq@ISS"(i8* %_bound_name1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %cast = call <3 x double> @"set@VI"(i64 1)
  store <3 x double> %cast, <3 x double>* %_bound_Cd
  br label %end

false:                                            ; preds = %__llvm_entry
  %cast2 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast2, <3 x double>* %_bound_Cd
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %name, <3 x double> %Cd) #2 {
__llvm_entry:
  %"<Cd>" = alloca <3 x double>
  %0 = alloca i8*
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store i8* %name, i8** %0
  call void @"__vex_snippet_snippet@SV"(i8** %0, <3 x double>* %"<Cd>")
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), i8* %name) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<Cd>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), <3 x double> %evalue2) #3
  store i8* %gvalue, i8** @name
  store <3 x double> %gvalue3, <3 x double>* @Cd
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0), <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

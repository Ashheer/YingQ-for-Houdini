;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [15 x i8] c"WFC_Initialize\00"
@1 = private constant [6 x i8] c"0_0_0\00"
@2 = private constant [1 x i8] zeroinitializer
@3 = private constant [5 x i8] c"name\00"
@4 = private constant [4 x i8] c"127\00"
@5 = private constant [4 x i8] c"223\00"
@6 = private constant [4 x i8] c"113\00"
@7 = private constant [4 x i8] c"253\00"
@8 = private constant [4 x i8] c"247\00"
@9 = private constant [4 x i8] c"215\00"
@10 = private constant [4 x i8] c"125\00"
@11 = private constant [7 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @5, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @6, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @7, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @8, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @9, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @10, i64 0, i64 0)]
@name = external global i8*
@group_group10 = external global i64
@P = external global <3 x double>
@12 = private constant [14 x i8] c"group_group10\00"
@13 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SIV"(i8** %_bound_name, i64* %_bound_group_group10, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i64 0, i64 0), i8** %_bound_name
  %_bound_group_group101 = load i64, i64* %_bound_group_group10
  %return = call i64 @"eq@III"(i64 %_bound_group_group101, i64 0)
  %0 = icmp ne i64 %return, 0
  %. = select i1 %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i64 0, i64 0)
  store i8* %., i8** %_bound_name
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %return3 = call { double, i64, <3 x double> } @"xyzdist@FIVIVF"(i64 1, <3 x double> %_bound_P2, double 1.000000e+00)
  %output = extractvalue { double, i64, <3 x double> } %return3, 1
  %return7 = call i8* @"prim@SISI"(i64 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), i64 %output)
  %return9 = call i64 @"find@I[SS"(i8** getelementptr inbounds ([7 x i8*], [7 x i8*]* @11, i64 0, i64 0), i8* %return7)
  %return10 = call i64 @"ge@III"(i64 %return9, i64 0)
  %1 = icmp ne i64 %return10, 0
  br i1 %1, label %true11, label %end12

true11:                                           ; preds = %__llvm_entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i8** %_bound_name
  br label %end12

end12:                                            ; preds = %true11, %__llvm_entry
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare { double, i64, <3 x double> } @"xyzdist@FIVIVF"(i64, <3 x double>, double) #2

; Function Attrs: nounwind
declare i8* @"prim@SISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"find@I[SS"(i8**, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %name, i64 %group_group10, <3 x double> %P) #2 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca <3 x double>
  %"<name>" = alloca i8*
  store i8* %name, i8** %"<name>"
  store i64 %group_group10, i64* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@SIV"(i8** %"<name>", i64* %0, <3 x double>* %1)
  %evalue = load i8*, i8** %"<name>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), i8* %evalue) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @12, i64 0, i64 0), i64 %group_group10) #3
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i64 0, i64 0), <3 x double> %P) #3
  store i8* %gvalue, i8** @name
  store i64 %gvalue4, i64* @group_group10
  store <3 x double> %gvalue6, <3 x double>* @P
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [13 x i8] c"__stretchsrc\00"
@1 = private constant [13 x i8] c"useclosestpt\00"
@2 = private constant [2 x i8] c"P\00"
@3 = private constant [11 x i8] c"usemaxdist\00"
@4 = private constant [8 x i8] c"maxdist\00"
@5 = private constant [12 x i8] c"__targetsrc\00"
@6 = private constant [9 x i8] c"__srcidx\00"
@7 = private constant [5 x i8] c"weld\00"
@8 = private constant [3 x i8] c"id\00"
@weld = external global i64

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound_weld, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64 @"inpointgroup@IISI"(i64 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0), i64 %_bound_ptnum1)
  %return2 = call i64 @"not@II"(i64 %return)
  %0 = icmp ne i64 %return2, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %true57, %false58, %end6, %__llvm_entry
  ret void

end:                                              ; preds = %__llvm_entry
  %return3 = call i64 @"neg@II"(i64 1)
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0))
  %1 = icmp ne i64 %return4, 0
  br i1 %1, label %true5, label %false

true5:                                            ; preds = %end
  %_bound_ptnum7 = load i64, i64* %_bound_ptnum
  %return8 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), i64 %_bound_ptnum7)
  %return9 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0))
  %return10 = call double @"chf@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0))
  %2 = icmp ne i64 %return9, 0
  br i1 %2, label %true12, label %false13

false:                                            ; preds = %end
  %return20 = call i64* @"expandpointgroup@[IIS"(i64 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i64 0, i64 0))
  %_bound_ptnum21 = load i64, i64* %_bound_ptnum
  %return22 = call i64 @"point@IISI"(i64 2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @6, i64 0, i64 0), i64 %_bound_ptnum21)
  %return25 = call i64 @"len@I[I"(i64* %return20)
  %return26 = call i64 @"lt@III"(i64 %return22, i64 %return25)
  %3 = icmp ne i64 %return26, 0
  br i1 %3, label %true27, label %end6

end6:                                             ; preds = %false, %true27, %true12, %false13
  %tgt.0 = phi i64 [ %return17, %true12 ], [ %return19, %false13 ], [ %return31, %true27 ], [ %return3, %false ]
  %return33 = call i64 @"lt@III"(i64 %tgt.0, i64 0)
  %4 = icmp ne i64 %return33, 0
  br i1 %4, label %true, label %end35

true12:                                           ; preds = %true5
  %return17 = call i64 @"nearpoint@IISVF"(i64 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i64 0, i64 0), <3 x double> %return8, double %return10)
  br label %end6

false13:                                          ; preds = %true5
  %return19 = call i64 @"nearpoint@IISV"(i64 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i64 0, i64 0), <3 x double> %return8)
  br label %end6

true27:                                           ; preds = %false
  %return31 = call i64 @"getcomp@I[II"(i64* %return20, i64 %return22)
  br label %end6

end35:                                            ; preds = %end6
  %return36 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i64 0, i64 0))
  %5 = icmp ne i64 %return36, 0
  br i1 %5, label %true37, label %end38

true37:                                           ; preds = %end35
  %return40 = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i64 0, i64 0), i64 %tgt.0)
  %return42 = call i64 @"ge@III"(i64 %return40, i64 0)
  %6 = icmp ne i64 %return42, 0
  br i1 %6, label %true43, label %end38

end38:                                            ; preds = %true37, %true43, %end35
  %tgt.1 = phi i64 [ %return40, %true43 ], [ %tgt.0, %true37 ], [ %tgt.0, %end35 ]
  %in_id_space.0 = phi i64 [ 1, %true43 ], [ 0, %true37 ], [ 0, %end35 ]
  %return46 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @8, i64 0, i64 0))
  %return48 = call i64 @"not@II"(i64 %in_id_space.0)
  %return49 = call i64 @"and@III"(i64 %return46, i64 %return48)
  %7 = icmp ne i64 %return49, 0
  br i1 %7, label %true50, label %end51

true43:                                           ; preds = %true37
  br label %end38

true50:                                           ; preds = %end38
  %return53 = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @8, i64 0, i64 0), i64 %tgt.1)
  br label %end51

end51:                                            ; preds = %true50, %end38
  %tgt.2 = phi i64 [ %return53, %true50 ], [ %tgt.1, %end38 ]
  %_bound_weld54 = load i64, i64* %_bound_weld
  %return56 = call i64 @"ge@III"(i64 %_bound_weld54, i64 0)
  %8 = icmp ne i64 %return56, 0
  br i1 %8, label %true57, label %false58

true57:                                           ; preds = %end51
  %return60 = call i64 @"geoself@I"()
  %return62 = call i64 @"idtopoint@III"(i64 0, i64 %_bound_weld54)
  %return64 = call i64 @"setpointattrib@IISII"(i64 %return60, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i64 0, i64 0), i64 %return62, i64 %tgt.2)
  br label %true

false58:                                          ; preds = %end51
  store i64 %tgt.2, i64* %_bound_weld
  br label %true
}

; Function Attrs: nounwind
declare i64 @"inpointgroup@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind
declare i64 @"nearpoint@IISVF"(i64, i8*, <3 x double>, double) #1

; Function Attrs: nounwind
declare i64 @"nearpoint@IISV"(i64, i8*, <3 x double>) #1

; Function Attrs: nounwind
declare i64* @"expandpointgroup@[IIS"(i64, i8*) #1

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"haspointattrib@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"geoself@I"() #1

; Function Attrs: nounwind
declare i64 @"idtopoint@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %weld, i64 %ptnum) #1 {
__llvm_entry:
  %0 = alloca i64
  %"<weld>" = alloca i64
  store i64 %weld, i64* %"<weld>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@II"(i64* %"<weld>", i64* %0)
  %evalue = load i64, i64* %"<weld>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i64 0, i64 0), i64 %evalue) #3
  store i64 %gvalue, i64* @weld
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 -1, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

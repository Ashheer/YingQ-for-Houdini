;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [8 x i8] c"../%s%d\00"
@1 = private constant [20 x i8] c"concrete_fractureid\00"
@2 = private constant [28 x i8] c"../concrete_primarystrength\00"
@3 = private constant [20 x i8] c"strength_multiplier\00"
@4 = private constant [1 x i8] zeroinitializer
@iteration = external global i64
@constraintgrp = external global i8*
@strength = external global double
@5 = private constant [10 x i8] c"iteration\00"
@6 = private constant [14 x i8] c"constraintgrp\00"
@7 = private constant [9 x i8] c"strength\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@ISF"(i64* %_bound_iteration, i8** %_bound_constraintgrp, double* %_bound_strength) #0 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca i64
  %_bound_iteration1 = load i64, i64* %_bound_iteration
  %output = add i64 %_bound_iteration1, 1
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @1, i64 0, i64 0), i8** %0
  store i64 %output, i64* %1
  %parm = call i8* @"parm@SSI"(i8** %0, i64* %1)
  %return = call i8* @"chs@SS"(i8* %parm)
  store i8* %return, i8** %_bound_constraintgrp
  %return3 = call double @"chf@FS"(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @2, i64 0, i64 0))
  %return4 = call double @"chf@FS"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @3, i64 0, i64 0))
  %_bound_iteration7 = load i64, i64* %_bound_iteration
  %cast = sitofp i64 %_bound_iteration7 to double
  %return8 = call double @"pow@FFF"(double %return4, double %cast)
  %output9 = fmul double %return3, %return8
  store double %output9, double* %_bound_strength
  ret void
}

; Function Attrs: alwaysinline nounwind
define private i8* @"parm@SSI"(i8** %parmname, i64* %idx) #0 {
__llvm_entry:
  %parmname1 = load i8*, i8** %parmname
  %idx2 = load i64, i64* %idx
  %return = call i8* @"sprintf@SS:SI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0), i8* %parmname1, i64 %idx2)
  ret i8* %return
}

; Function Attrs: nounwind readnone
declare i8* @"sprintf@SS:SI"(i8*, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"pow@FFF"(double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %iteration, i8* %constraintgrp, double %strength) #2 {
__llvm_entry:
  %"<constraintgrp>" = alloca i8*
  %"<strength>" = alloca double
  %0 = alloca i64
  store i8* %constraintgrp, i8** %"<constraintgrp>"
  store double %strength, double* %"<strength>"
  store i64 %iteration, i64* %0
  call void @"__vex_snippet_snippet@ISF"(i64* %0, i8** %"<constraintgrp>", double* %"<strength>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i64 0, i64 0), i64 %iteration) #3
  %evalue2 = load i8*, i8** %"<constraintgrp>"
  %gvalue3 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @6, i64 0, i64 0), i8* %evalue2) #3
  %evalue4 = load double, double* %"<strength>"
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @7, i64 0, i64 0), double %evalue4) #3
  store i64 %gvalue, i64* @iteration
  store i8* %gvalue3, i8** @constraintgrp
  store double %gvalue5, double* @strength
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i8* @"_export@SSS"(i8*, i8*)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @4, i64 0, i64 0), double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

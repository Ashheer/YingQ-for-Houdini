;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@up = external global <3 x double>
@N = external global <3 x double>
@dir = external global <3 x double>
@transform = external global <16 x double>
@0 = private constant [3 x i8] c"up\00"
@1 = private constant [2 x i8] c"N\00"
@2 = private constant [4 x i8] c"dir\00"
@3 = private constant [10 x i8] c"transform\00"

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"projecttoplane@VVV"(<3 x double>* %dir, <3 x double>* %N) #0 {
__llvm_entry:
  %N1 = load <3 x double>, <3 x double>* %N
  %return = call <3 x double> @"normalize@VV"(<3 x double> %N1)
  %dir2 = load <3 x double>, <3 x double>* %dir
  %return6 = call double @"dot@FVV"(<3 x double> %dir2, <3 x double> %return)
  %cast = call <3 x double> @"set@VF"(double %return6)
  %output = call <3 x double> @"mul@VV"(<3 x double> %return, <3 x double> %cast)
  %output7 = call <3 x double> @"sub@VV"(<3 x double> %dir2, <3 x double> %output)
  ret <3 x double> %output7
}

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVV4"(<3 x double>* %_bound_up, <3 x double>* %_bound_N, <3 x double>* %_bound_dir, <16 x double>* %_bound_transform) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %_bound_up1 = load <3 x double>, <3 x double>* %_bound_up
  %_bound_N2 = load <3 x double>, <3 x double>* %_bound_N
  %return = call <3 x double> @"cross@VVV"(<3 x double> %_bound_up1, <3 x double> %_bound_N2)
  %_bound_dir3 = load <3 x double>, <3 x double>* %_bound_dir
  store <3 x double> %_bound_dir3, <3 x double>* %0
  %_bound_N4 = load <3 x double>, <3 x double>* %_bound_N
  store <3 x double> %_bound_N4, <3 x double>* %1
  %projecttoplane = call <3 x double> @"projecttoplane@VVV"(<3 x double>* %0, <3 x double>* %1)
  %return6 = call <3 x double> @"normalize@VV"(<3 x double> %return)
  %return8 = call <3 x double> @"normalize@VV"(<3 x double> %projecttoplane)
  %return11 = call double @"dot@FVV"(<3 x double> %return8, <3 x double> %return6)
  %return13 = fcmp olt double %return11, 0.000000e+00
  br i1 %return13, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return16 = call i64 @"neg@II"(i64 1)
  %cast = call <3 x double> @"set@VI"(i64 %return16)
  %output = call <3 x double> @"mul@VV"(<3 x double> %return6, <3 x double> %cast)
  %cast19 = sitofp i64 %return16 to double
  %output20 = fmul double %return11, %cast19
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %dot.0 = phi double [ %output20, %true ], [ %return11, %__llvm_entry ]
  %reverse.0 = phi i64 [ %return16, %true ], [ 1, %__llvm_entry ]
  %bitangt0.0 = phi <3 x double> [ %output, %true ], [ %return6, %__llvm_entry ]
  %cast24 = call <3 x double> @"set@VF"(double %dot.0)
  %output25 = call <3 x double> @"div@VV"(<3 x double> %return8, <3 x double> %cast24)
  %return27 = call double @"distance@FVV"(<3 x double> %output25, <3 x double> %bitangt0.0)
  %cast28 = call <3 x double> @"set@VI"(i64 0)
  %return29 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 9.000000e+01)
  %cast30 = call <3 x double> @"set@VI"(i64 1)
  %cast35 = sitofp i64 %reverse.0 to double
  %output36 = fmul double %cast35, %return27
  %return37 = call <3 x double> @"set@VFFF"(double %output36, double 0.000000e+00, double 0.000000e+00)
  %return38 = call <16 x double> @"maketransform@4IIVVVVVV"(i64 0, i64 0, <3 x double> %cast28, <3 x double> %return29, <3 x double> %cast30, <3 x double> %cast28, <3 x double> %cast28, <3 x double> %return37)
  store <16 x double> %return38, <16 x double>* %_bound_transform
  %_bound_N40 = load <3 x double>, <3 x double>* %_bound_N
  %_bound_up41 = load <3 x double>, <3 x double>* %_bound_up
  %return42 = call <9 x double> @"maketransform@3VV"(<3 x double> %_bound_N40, <3 x double> %_bound_up41)
  %cast43 = call <16 x double> @"set@43"(<9 x double> %return42)
  %output44 = call <16 x double> @"mul@44"(<16 x double> %return38, <16 x double> %cast43)
  store <16 x double> %output44, <16 x double>* %_bound_transform
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"maketransform@4IIVVVVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <9 x double> @"maketransform@3VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <16 x double> @"set@43"(<9 x double>) #1

; Function Attrs: nounwind
declare <16 x double> @"mul@44"(<16 x double>, <16 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %up, <3 x double> %N, <3 x double> %dir, <16 x double> %transform) #1 {
__llvm_entry:
  %"<transform>" = alloca <16 x double>
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  store <16 x double> %transform, <16 x double>* %"<transform>"
  store <3 x double> %up, <3 x double>* %0
  store <3 x double> %N, <3 x double>* %1
  store <3 x double> %dir, <3 x double>* %2
  call void @"__vex_snippet_snippet@VVV4"(<3 x double>* %0, <3 x double>* %1, <3 x double>* %2, <16 x double>* %"<transform>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), <3 x double> %up) #3
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %N) #3
  %gvalue7 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i64 0, i64 0), <3 x double> %dir) #3
  %evalue8 = load <16 x double>, <16 x double>* %"<transform>"
  %gvalue9 = call <16 x double> @"_export@4S4"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), <16 x double> %evalue8) #3
  store <3 x double> %gvalue, <3 x double>* @up
  store <3 x double> %gvalue5, <3 x double>* @N
  store <3 x double> %gvalue7, <3 x double>* @dir
  store <16 x double> %gvalue9, <16 x double>* @transform
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare <16 x double> @"_export@4S4"(i8*, <16 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <16 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

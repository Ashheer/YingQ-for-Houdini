;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@N = external global <3 x double>
@opinput1_dist = external global double
@0 = private constant [2 x i8] c"N\00"
@1 = private constant [14 x i8] c"opinput1_dist\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VF"(<3 x double>* %_bound_N, double* %_bound_opinput1_dist) #0 {
__llvm_entry:
  %_bound_opinput1_dist1 = load double, double* %_bound_opinput1_dist
  %_bound_N2 = load <3 x double>, <3 x double>* %_bound_N
  %return = call <3 x double> @"normalize@VV"(<3 x double> %_bound_N2)
  %cast = call <3 x double> @"set@VF"(double %_bound_opinput1_dist1)
  %output = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %return)
  store <3 x double> %output, <3 x double>* %_bound_N
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %N, double %opinput1_dist) #1 {
__llvm_entry:
  %0 = alloca double
  %"<N>" = alloca <3 x double>
  store <3 x double> %N, <3 x double>* %"<N>"
  store double %opinput1_dist, double* %0
  call void @"__vex_snippet_snippet@VF"(<3 x double>* %"<N>", double* %0)
  %evalue = load <3 x double>, <3 x double>* %"<N>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1, i64 0, i64 0), double %opinput1_dist) #3
  store <3 x double> %gvalue, <3 x double>* @N
  store double %gvalue3, double* @opinput1_dist
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [10 x i8] c"iteration\00"
@2 = private constant [5 x i8] c"seed\00"
@3 = private constant [2 x i8] c"w\00"
@4 = private constant [4 x i8] c"dia\00"
@5 = private constant [9 x i8] c"polyline\00"
@primnum = external global i64
@6 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_primnum) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum1)
  %return2 = call <3 x double>* @"array@[V"()
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output16, %body ]
  %positions.0 = phi <3 x double>* [ %return2, %__llvm_entry ], [ %output, %body ]
  %return5 = call i64 @"len@I[I"(i64* %return)
  %return6 = call i64 @"lt@III"(i64 %i.0, i64 %return5)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return9 = call i64 @"getcomp@I[II"(i64* %return, i64 %i.0)
  %return11 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return9)
  %output = call <3 x double>* @"append@[VV"(<3 x double>* %positions.0, <3 x double> %return11)
  %output16 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %return17 = call double* @"array@[F"()
  br label %cond19

cond19:                                           ; preds = %body20, %end
  %i18.0 = phi i64 [ 0, %end ], [ %output32, %body20 ]
  %lengths.0 = phi double* [ %return17, %end ], [ %output42, %body20 ]
  %return23 = call i64 @"len@I[V"(<3 x double>* %positions.0)
  %return24 = call i64 @"lt@III"(i64 %i18.0, i64 %return23)
  %1 = icmp ne i64 %return24, 0
  br i1 %1, label %body20, label %end25

body20:                                           ; preds = %cond19
  %return29 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %positions.0, i64 %i18.0)
  %output32 = add i64 %i18.0, 1
  %return35 = call i64 @"mod@III"(i64 %output32, i64 %return23)
  %return36 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %positions.0, i64 %return35)
  %return39 = call double @"distance@FVV"(<3 x double> %return29, <3 x double> %return36)
  %output42 = call double* @"append@[FF"(double* %lengths.0, double %return39)
  br label %cond19

end25:                                            ; preds = %cond19
  %return47 = call double @"getcomp@F[FI"(double* %lengths.0, i64 1)
  %return49 = call double @"getcomp@F[FI"(double* %lengths.0, i64 0)
  %return50 = fcmp ogt double %return47, %return49
  %. = select i1 %return50, i64 1, i64 0
  %return53 = call i64 @"detail@IIS"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0))
  %return54 = call i64 @"detail@IIS"(i64 2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0))
  %cast = sitofp i64 %return53 to double
  %output56 = fmul double %cast, 5.234000e+00
  %cast58 = sitofp i64 %return54 to double
  %output59 = fadd double %output56, %cast58
  %output60 = fadd double %output59, 6.230000e+00
  %return61 = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0))
  %output62 = fadd double %output60, %return61
  %return63 = call double @"rand@FF"(double %output62)
  %return65 = call double @"chf@FS"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0))
  %output67 = fsub double 1.000000e+00, %return65
  %return68 = call double @"fit@FFFFFF"(double %return63, double 0.000000e+00, double 1.000000e+00, double %return65, double %output67)
  %return70 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %.)
  %output72 = add i64 %., 1
  %return75 = call i64 @"mod@III"(i64 %output72, i64 %return5)
  %return76 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return75)
  %output80 = call <3 x double> @"sub@VV"(<3 x double> %return76, <3 x double> %return70)
  %cast82 = call <3 x double> @"set@VF"(double %return68)
  %output83 = call <3 x double> @"mul@VV"(<3 x double> %output80, <3 x double> %cast82)
  %output84 = call <3 x double> @"add@VV"(<3 x double> %return70, <3 x double> %output83)
  %return86 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %output84)
  %output88 = add i64 %., 3
  %return91 = call i64 @"mod@III"(i64 %output88, i64 %return5)
  %return92 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return91)
  %output94 = add i64 %., 2
  %return97 = call i64 @"mod@III"(i64 %output94, i64 %return5)
  %return98 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return97)
  %output100 = mul i64 %return53, 43
  %output103 = fmul double %cast58, 4.200000e+00
  %cast104 = sitofp i64 %output100 to double
  %output105 = fadd double %cast104, %output103
  %output107 = fadd double %output105, %return61
  %return108 = call double @"rand@FF"(double %output107)
  %return109 = call double @"chf@FS"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  %return110 = fcmp olt double %return108, %return109
  br i1 %return110, label %true112, label %end113

true112:                                          ; preds = %end25
  %output116 = fmul double %return65, 5.000000e-01
  %output117 = fadd double %return68, %output116
  br label %end113

end113:                                           ; preds = %true112, %end25
  %w.0 = phi double [ %output117, %true112 ], [ %return68, %end25 ]
  %output121 = call <3 x double> @"sub@VV"(<3 x double> %return98, <3 x double> %return92)
  %cast123 = call <3 x double> @"set@VF"(double %w.0)
  %output124 = call <3 x double> @"mul@VV"(<3 x double> %output121, <3 x double> %cast123)
  %output125 = call <3 x double> @"add@VV"(<3 x double> %return92, <3 x double> %output124)
  %return127 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %output125)
  %return130 = call i64 @"addprim@IISII"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i64 0, i64 0), i64 %return86, i64 %return127)
  %_bound_primnum131 = load i64, i64* %_bound_primnum
  %return132 = call i64 @"removeprim@IIII"(i64 0, i64 %_bound_primnum131, i64 1)
  ret void
}

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double>* @"array@[V"() #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare <3 x double>* @"append@[VV"(<3 x double>*, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double* @"array@[F"() #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[V"(<3 x double>*) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #2

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #2

; Function Attrs: nounwind
declare i64 @"detail@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind
declare double @"rand@FF"(double) #1

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"addprim@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"removeprim@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum) #1 {
__llvm_entry:
  %0 = alloca i64
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @6, i64 0, i64 0), i64 %primnum) #3
  store i64 %gvalue, i64* @primnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

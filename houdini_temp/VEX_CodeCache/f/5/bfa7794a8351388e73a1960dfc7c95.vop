;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@ptnum = external global i64
@dir = external global <3 x double>
@group_move = external global i64
@startpos = external global <3 x double>
@P = external global <3 x double>
@0 = private constant [6 x i8] c"ptnum\00"
@1 = private constant [4 x i8] c"dir\00"
@2 = private constant [11 x i8] c"group_move\00"
@3 = private constant [9 x i8] c"startpos\00"
@4 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVIVV"(i64* %_bound_ptnum, <3 x double>* %_bound_dir, i64* %_bound_group_move, <3 x double>* %_bound_startpos, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %output = add i64 %_bound_ptnum1, 123
  %cast = sitofp i64 %output to double
  %return = call double @"rand@FF"(double %cast)
  %output2 = fmul double %return, 4.000000e+00
  %return3 = call double @"rint@FF"(double %output2)
  %cast4 = fptosi double %return3 to i64
  %return6 = call i64 @"eq@III"(i64 %cast4, i64 0)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store <3 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>, <3 x double>* %_bound_dir
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %return8 = call i64 @"eq@III"(i64 %cast4, i64 1)
  %1 = icmp ne i64 %return8, 0
  br i1 %1, label %true9, label %end10

true9:                                            ; preds = %end
  store <3 x double> <double -1.000000e+00, double 0.000000e+00, double 0.000000e+00>, <3 x double>* %_bound_dir
  br label %end10

end10:                                            ; preds = %true9, %end
  %return12 = call i64 @"eq@III"(i64 %cast4, i64 2)
  %2 = icmp ne i64 %return12, 0
  br i1 %2, label %true13, label %end14

true13:                                           ; preds = %end10
  store <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>, <3 x double>* %_bound_dir
  br label %end14

end14:                                            ; preds = %true13, %end10
  %return16 = call i64 @"eq@III"(i64 %cast4, i64 3)
  %3 = icmp ne i64 %return16, 0
  br i1 %3, label %true17, label %end18

true17:                                           ; preds = %end14
  store <3 x double> <double 0.000000e+00, double -1.000000e+00, double 0.000000e+00>, <3 x double>* %_bound_dir
  br label %end18

end18:                                            ; preds = %true17, %end14
  %_bound_dir19 = load <3 x double>, <3 x double>* %_bound_dir
  %_bound_ptnum20 = load i64, i64* %_bound_ptnum
  %output21 = add i64 %_bound_ptnum20, 345
  %cast22 = sitofp i64 %output21 to double
  %return23 = call double @"rand@FF"(double %cast22)
  %cast24 = call <3 x double> @"set@VF"(double %return23)
  %output25 = call <3 x double> @"mul@VV"(<3 x double> %_bound_dir19, <3 x double> %cast24)
  store <3 x double> %output25, <3 x double>* %_bound_dir
  store i64 1, i64* %_bound_group_move
  %_bound_P26 = load <3 x double>, <3 x double>* %_bound_P
  store <3 x double> %_bound_P26, <3 x double>* %_bound_startpos
  ret void
}

; Function Attrs: nounwind
declare double @"rand@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"rint@FF"(double) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %dir, i64 %group_move, <3 x double> %startpos, <3 x double> %P) #1 {
__llvm_entry:
  %"<dir>" = alloca <3 x double>
  %"<group_move>" = alloca i64
  %"<startpos>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca <3 x double>
  store <3 x double> %dir, <3 x double>* %"<dir>"
  store i64 %group_move, i64* %"<group_move>"
  store <3 x double> %startpos, <3 x double>* %"<startpos>"
  store i64 %ptnum, i64* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@IVIVV"(i64* %0, <3 x double>* %"<dir>", i64* %"<group_move>", <3 x double>* %"<startpos>", <3 x double>* %1)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i64 %ptnum) #3
  %evalue3 = load <3 x double>, <3 x double>* %"<dir>"
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i64 0, i64 0), <3 x double> %evalue3) #3
  %evalue5 = load i64, i64* %"<group_move>"
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0), i64 %evalue5) #3
  %evalue7 = load <3 x double>, <3 x double>* %"<startpos>"
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0), <3 x double> %evalue7) #3
  %gvalue10 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), <3 x double> %P) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue4, <3 x double>* @dir
  store i64 %gvalue6, i64* @group_move
  store <3 x double> %gvalue8, <3 x double>* @startpos
  store <3 x double> %gvalue10, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [9 x i8] c"numwelds\00"
@numwelds = external global i64
@branchweld = external global i64
@mass = external global double
@1 = private constant [11 x i8] c"branchweld\00"
@2 = private constant [5 x i8] c"mass\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIF"(i64* %_bound_numwelds, i64* %_bound_branchweld, double* %_bound_mass) #0 {
__llvm_entry:
  %_bound_numwelds1 = load i64, i64* %_bound_numwelds
  %_bound_branchweld2 = load i64, i64* %_bound_branchweld
  %return = call i64 @"ge@III"(i64 %_bound_branchweld2, i64 0)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return4 = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0), i64 %_bound_branchweld2)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %nw.0 = phi i64 [ %return4, %true ], [ %_bound_numwelds1, %__llvm_entry ]
  %_bound_mass5 = load double, double* %_bound_mass
  %output = add i64 %nw.0, 1
  %cast = sitofp i64 %output to double
  %output7 = call double @"div@FF"(double %_bound_mass5, double %cast)
  store double %output7, double* %_bound_mass
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %numwelds, i64 %branchweld, double %mass) #2 {
__llvm_entry:
  %"<mass>" = alloca double
  %0 = alloca i64
  %1 = alloca i64
  store double %mass, double* %"<mass>"
  store i64 %numwelds, i64* %0
  store i64 %branchweld, i64* %1
  call void @"__vex_snippet_snippet@IIF"(i64* %0, i64* %1, double* %"<mass>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0), i64 %numwelds) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0), i64 %branchweld) #3
  %evalue5 = load double, double* %"<mass>"
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), double %evalue5) #3
  store i64 %gvalue, i64* @numwelds
  store i64 %gvalue4, i64* @branchweld
  store double %gvalue6, double* @mass
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

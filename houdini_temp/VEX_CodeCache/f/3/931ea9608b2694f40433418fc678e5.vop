;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"rows\00"
@1 = private constant [5 x i8] c"cols\00"
@2 = private constant [3 x i8] c"Cd\00"
@3 = private constant [1 x i8] zeroinitializer
@ptnum = external global i64
@Cd = external global <3 x double>
@name = external global i8*
@4 = private constant [6 x i8] c"ptnum\00"
@5 = private constant [5 x i8] c"name\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVS"(i64* %_bound_ptnum, <3 x double>* %_bound_Cd, i8** %_bound_name) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0))
  %_bound_ptnum2 = load i64, i64* %_bound_ptnum
  %return4 = call i64 @"mod@III"(i64 %_bound_ptnum2, i64 %return)
  %output = sub i64 %return, 1
  %return6 = call i64 @"eq@III"(i64 %return4, i64 %output)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return7 = call i64 @"neg@II"(i64 1)
  br label %end

false:                                            ; preds = %__llvm_entry
  %output9 = add i64 %_bound_ptnum2, 1
  br label %end

end:                                              ; preds = %false, %true
  %phi = phi i64 [ %return7, %true ], [ %output9, %false ]
  %_bound_ptnum10 = load i64, i64* %_bound_ptnum
  %return12 = call i64 @"mod@III"(i64 %_bound_ptnum10, i64 %return)
  %return13 = call i64 @"eq@III"(i64 %return12, i64 0)
  %1 = icmp ne i64 %return13, 0
  br i1 %1, label %true14, label %false15

true14:                                           ; preds = %end
  %return17 = call i64 @"neg@II"(i64 1)
  br label %end16

false15:                                          ; preds = %end
  %output19 = sub i64 %_bound_ptnum10, 1
  br label %end16

end16:                                            ; preds = %false15, %true14
  %phi20 = phi i64 [ %return17, %true14 ], [ %output19, %false15 ]
  %_bound_ptnum21 = load i64, i64* %_bound_ptnum
  %return23 = call i64 @"lt@III"(i64 %_bound_ptnum21, i64 %return)
  %2 = icmp ne i64 %return23, 0
  br i1 %2, label %true24, label %false25

true24:                                           ; preds = %end16
  %return27 = call i64 @"neg@II"(i64 1)
  br label %end26

false25:                                          ; preds = %end16
  %output30 = sub i64 %_bound_ptnum21, %return
  br label %end26

end26:                                            ; preds = %false25, %true24
  %phi31 = phi i64 [ %return27, %true24 ], [ %output30, %false25 ]
  %_bound_ptnum32 = load i64, i64* %_bound_ptnum
  %output35 = mul i64 %return, %return1
  %output37 = sub i64 %output35, %return
  %output38 = sub i64 %output37, 1
  %return39 = call i64 @"gt@III"(i64 %_bound_ptnum32, i64 %output38)
  %3 = icmp ne i64 %return39, 0
  br i1 %3, label %true40, label %false41

true40:                                           ; preds = %end26
  %return43 = call i64 @"neg@II"(i64 1)
  br label %end42

false41:                                          ; preds = %end26
  %output46 = add i64 %_bound_ptnum32, %return
  br label %end42

end42:                                            ; preds = %false41, %true40
  %phi47 = phi i64 [ %return43, %true40 ], [ %output46, %false41 ]
  %_bound_ptnum48 = load i64, i64* %_bound_ptnum
  %output49 = add i64 %_bound_ptnum48, 1
  %output51 = sub i64 %output49, %return
  %return52 = call i64 @"le@III"(i64 %output51, i64 0)
  %return55 = call i64 @"mod@III"(i64 %_bound_ptnum48, i64 %return)
  %return58 = call i64 @"eq@III"(i64 %return55, i64 %output)
  %return59 = call i64 @"or@III"(i64 %return52, i64 %return58)
  %4 = icmp ne i64 %return59, 0
  br i1 %4, label %true60, label %false61

true60:                                           ; preds = %end42
  %return63 = call i64 @"neg@II"(i64 1)
  br label %end62

false61:                                          ; preds = %end42
  br label %end62

end62:                                            ; preds = %false61, %true60
  %phi68 = phi i64 [ %return63, %true60 ], [ %output51, %false61 ]
  %_bound_ptnum69 = load i64, i64* %_bound_ptnum
  %output70 = sub i64 %_bound_ptnum69, 1
  %output72 = sub i64 %output70, %return
  %return73 = call i64 @"le@III"(i64 %output72, i64 0)
  %return76 = call i64 @"mod@III"(i64 %_bound_ptnum69, i64 %return)
  %return77 = call i64 @"eq@III"(i64 %return76, i64 0)
  %return78 = call i64 @"or@III"(i64 %return73, i64 %return77)
  %5 = icmp ne i64 %return78, 0
  br i1 %5, label %true79, label %false80

true79:                                           ; preds = %end62
  %return82 = call i64 @"neg@II"(i64 1)
  br label %end81

false80:                                          ; preds = %end62
  br label %end81

end81:                                            ; preds = %false80, %true79
  %phi87 = phi i64 [ %return82, %true79 ], [ %output72, %false80 ]
  %_bound_ptnum88 = load i64, i64* %_bound_ptnum
  %return95 = call i64 @"gt@III"(i64 %_bound_ptnum88, i64 %output38)
  %return98 = call i64 @"mod@III"(i64 %_bound_ptnum88, i64 %return)
  %return101 = call i64 @"eq@III"(i64 %return98, i64 %output)
  %return102 = call i64 @"or@III"(i64 %return95, i64 %return101)
  %6 = icmp ne i64 %return102, 0
  br i1 %6, label %true103, label %false104

true103:                                          ; preds = %end81
  %return106 = call i64 @"neg@II"(i64 1)
  br label %end105

false104:                                         ; preds = %end81
  %output108 = add i64 %_bound_ptnum88, 1
  %output110 = add i64 %output108, %return
  br label %end105

end105:                                           ; preds = %false104, %true103
  %phi111 = phi i64 [ %return106, %true103 ], [ %output110, %false104 ]
  %_bound_ptnum112 = load i64, i64* %_bound_ptnum
  %return119 = call i64 @"gt@III"(i64 %_bound_ptnum112, i64 %output38)
  %return122 = call i64 @"mod@III"(i64 %_bound_ptnum112, i64 %return)
  %return123 = call i64 @"eq@III"(i64 %return122, i64 0)
  %return124 = call i64 @"or@III"(i64 %return119, i64 %return123)
  %7 = icmp ne i64 %return124, 0
  br i1 %7, label %true125, label %false126

true125:                                          ; preds = %end105
  %return128 = call i64 @"neg@II"(i64 1)
  br label %end127

false126:                                         ; preds = %end105
  %output130 = sub i64 %_bound_ptnum112, 1
  %output132 = add i64 %output130, %return
  br label %end127

end127:                                           ; preds = %false126, %true125
  %phi133 = phi i64 [ %return128, %true125 ], [ %output132, %false126 ]
  %return135 = call i64 @"neg@II"(i64 1)
  %return136 = call i64 @"eq@III"(i64 %phi, i64 %return135)
  %8 = icmp ne i64 %return136, 0
  br i1 %8, label %end139, label %false138

false138:                                         ; preds = %end127
  %return141 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), i64 %phi)
  %return142 = call double @"rint@FF"(double %return141)
  %cast = fptosi double %return142 to i64
  %output143 = sub i64 1, %cast
  br label %end139

end139:                                           ; preds = %end127, %false138
  %phi144 = phi i64 [ %output143, %false138 ], [ 0, %end127 ]
  %return147 = call i64 @"eq@III"(i64 %phi20, i64 %return135)
  %9 = icmp ne i64 %return147, 0
  br i1 %9, label %end150, label %false149

false149:                                         ; preds = %end139
  %return152 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), i64 %phi20)
  %return153 = call double @"rint@FF"(double %return152)
  %cast154 = fptosi double %return153 to i64
  %output155 = sub i64 1, %cast154
  br label %end150

end150:                                           ; preds = %end139, %false149
  %phi156 = phi i64 [ %output155, %false149 ], [ 0, %end139 ]
  %return159 = call i64 @"eq@III"(i64 %phi47, i64 %return135)
  %10 = icmp ne i64 %return159, 0
  br i1 %10, label %end162, label %false161

false161:                                         ; preds = %end150
  %return164 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), i64 %phi47)
  %return165 = call double @"rint@FF"(double %return164)
  %cast166 = fptosi double %return165 to i64
  %output167 = sub i64 1, %cast166
  br label %end162

end162:                                           ; preds = %end150, %false161
  %phi168 = phi i64 [ %output167, %false161 ], [ 0, %end150 ]
  %return171 = call i64 @"eq@III"(i64 %phi31, i64 %return135)
  %11 = icmp ne i64 %return171, 0
  br i1 %11, label %end174, label %false173

false173:                                         ; preds = %end162
  %return176 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), i64 %phi31)
  %return177 = call double @"rint@FF"(double %return176)
  %cast178 = fptosi double %return177 to i64
  %output179 = sub i64 1, %cast178
  br label %end174

end174:                                           ; preds = %end162, %false173
  %phi180 = phi i64 [ %output179, %false173 ], [ 0, %end162 ]
  %return183 = call i64 @"eq@III"(i64 %phi68, i64 %return135)
  %12 = icmp ne i64 %return183, 0
  br i1 %12, label %end186, label %false185

false185:                                         ; preds = %end174
  %return188 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), i64 %phi68)
  %return189 = call double @"rint@FF"(double %return188)
  %cast190 = fptosi double %return189 to i64
  %output191 = sub i64 1, %cast190
  br label %end186

end186:                                           ; preds = %end174, %false185
  %phi192 = phi i64 [ %output191, %false185 ], [ 0, %end174 ]
  %return195 = call i64 @"eq@III"(i64 %phi87, i64 %return135)
  %13 = icmp ne i64 %return195, 0
  br i1 %13, label %end198, label %false197

false197:                                         ; preds = %end186
  %return200 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), i64 %phi87)
  %return201 = call double @"rint@FF"(double %return200)
  %cast202 = fptosi double %return201 to i64
  %output203 = sub i64 1, %cast202
  br label %end198

end198:                                           ; preds = %end186, %false197
  %phi204 = phi i64 [ %output203, %false197 ], [ 0, %end186 ]
  %return207 = call i64 @"eq@III"(i64 %phi111, i64 %return135)
  %14 = icmp ne i64 %return207, 0
  br i1 %14, label %end210, label %false209

false209:                                         ; preds = %end198
  %return212 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), i64 %phi111)
  %return213 = call double @"rint@FF"(double %return212)
  %cast214 = fptosi double %return213 to i64
  %output215 = sub i64 1, %cast214
  br label %end210

end210:                                           ; preds = %end198, %false209
  %phi216 = phi i64 [ %output215, %false209 ], [ 0, %end198 ]
  %return219 = call i64 @"eq@III"(i64 %phi133, i64 %return135)
  %15 = icmp ne i64 %return219, 0
  br i1 %15, label %end222, label %false221

false221:                                         ; preds = %end210
  %return224 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), i64 %phi133)
  %return225 = call double @"rint@FF"(double %return224)
  %cast226 = fptosi double %return225 to i64
  %output227 = sub i64 1, %cast226
  br label %end222

end222:                                           ; preds = %end210, %false221
  %phi228 = phi i64 [ %output227, %false221 ], [ 0, %end210 ]
  %return230 = call i64 @"eq@III"(i64 %phi180, i64 0)
  %16 = icmp ne i64 %return230, 0
  br i1 %16, label %true231, label %end232

true231:                                          ; preds = %end222
  br label %end232

end232:                                           ; preds = %true231, %end222
  %north_east.0 = phi i64 [ 0, %true231 ], [ %phi192, %end222 ]
  %north_west.0 = phi i64 [ 0, %true231 ], [ %phi204, %end222 ]
  %return234 = call i64 @"eq@III"(i64 %phi144, i64 0)
  %17 = icmp ne i64 %return234, 0
  br i1 %17, label %true235, label %end236

true235:                                          ; preds = %end232
  br label %end236

end236:                                           ; preds = %true235, %end232
  %north_east.1 = phi i64 [ 0, %true235 ], [ %north_east.0, %end232 ]
  %south_east.0 = phi i64 [ 0, %true235 ], [ %phi216, %end232 ]
  %return238 = call i64 @"eq@III"(i64 %phi156, i64 0)
  %18 = icmp ne i64 %return238, 0
  br i1 %18, label %true239, label %end240

true239:                                          ; preds = %end236
  br label %end240

end240:                                           ; preds = %true239, %end236
  %north_west.1 = phi i64 [ 0, %true239 ], [ %north_west.0, %end236 ]
  %south_west.0 = phi i64 [ 0, %true239 ], [ %phi228, %end236 ]
  %return242 = call i64 @"eq@III"(i64 %phi168, i64 0)
  %19 = icmp ne i64 %return242, 0
  br i1 %19, label %true243, label %end244

true243:                                          ; preds = %end240
  br label %end244

end244:                                           ; preds = %true243, %end240
  %south_east.1 = phi i64 [ 0, %true243 ], [ %south_east.0, %end240 ]
  %south_west.1 = phi i64 [ 0, %true243 ], [ %south_west.0, %end240 ]
  %output248 = mul i64 %north_east.1, 2
  %output249 = add i64 %phi180, %output248
  %output251 = mul i64 %phi144, 4
  %output252 = add i64 %output249, %output251
  %output254 = mul i64 %south_east.1, 8
  %output255 = add i64 %output252, %output254
  %output257 = mul i64 %phi168, 16
  %output258 = add i64 %output255, %output257
  %output260 = mul i64 %south_west.1, 32
  %output261 = add i64 %output258, %output260
  %output263 = mul i64 %phi156, 64
  %output264 = add i64 %output261, %output263
  %output266 = mul i64 %north_west.1, 128
  %output267 = add i64 %output264, %output266
  %_bound_Cd268 = load <3 x double>, <3 x double>* %_bound_Cd
  %return269 = call double @"getcomp@FVI"(<3 x double> %_bound_Cd268, i64 0)
  %return270 = call double @"rint@FF"(double %return269)
  %return271 = fcmp oeq double %return270, 1.000000e+00
  %.output267 = select i1 %return271, i64 0, i64 %output267
  %return276 = call i8* @"itoa@SI"(i64 %.output267)
  store i8* %return276, i8** %_bound_name
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"le@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare double @"rint@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %Cd, i8* %name) #2 {
__llvm_entry:
  %"<name>" = alloca i8*
  %0 = alloca i64
  %1 = alloca <3 x double>
  store i8* %name, i8** %"<name>"
  store i64 %ptnum, i64* %0
  store <3 x double> %Cd, <3 x double>* %1
  call void @"__vex_snippet_snippet@IVS"(i64* %0, <3 x double>* %1, i8** %"<name>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), <3 x double> %Cd) #3
  %evalue5 = load i8*, i8** %"<name>"
  %gvalue6 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i64 0, i64 0), i8* %evalue5) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue4, <3 x double>* @Cd
  store i8* %gvalue6, i8** @name
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @3, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

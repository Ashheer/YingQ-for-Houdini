;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@opinput1_P = external global <3 x double>
@P = external global <3 x double>
@opinput1_N = external global <3 x double>
@opinput2_P = external global <3 x double>
@N = external global <3 x double>
@0 = private constant [11 x i8] c"opinput1_P\00"
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [11 x i8] c"opinput1_N\00"
@3 = private constant [11 x i8] c"opinput2_P\00"
@4 = private constant [2 x i8] c"N\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVVVV"(<3 x double>* %_bound_opinput1_P, <3 x double>* %_bound_P, <3 x double>* %_bound_opinput1_N, <3 x double>* %_bound_opinput2_P, <3 x double>* %_bound_N) #0 {
__llvm_entry:
  %_bound_opinput1_P1 = load <3 x double>, <3 x double>* %_bound_opinput1_P
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %output = call <3 x double> @"sub@VV"(<3 x double> %_bound_opinput1_P1, <3 x double> %_bound_P2)
  %return = call double @"length@FV"(<3 x double> %output)
  %cast = call <3 x double> @"set@VF"(double %return)
  %output6 = call <3 x double> @"div@VV"(<3 x double> %output, <3 x double> %cast)
  %_bound_opinput1_N7 = load <3 x double>, <3 x double>* %_bound_opinput1_N
  %return8 = call <3 x double> @"normalize@VV"(<3 x double> %_bound_opinput1_N7)
  %_bound_opinput1_P9 = load <3 x double>, <3 x double>* %_bound_opinput1_P
  %_bound_opinput2_P10 = load <3 x double>, <3 x double>* %_bound_opinput2_P
  %output11 = call <3 x double> @"sub@VV"(<3 x double> %_bound_opinput1_P9, <3 x double> %_bound_opinput2_P10)
  %return12 = call <3 x double> @"normalize@VV"(<3 x double> %output11)
  %return15 = call double @"dot@FVV"(<3 x double> %output6, <3 x double> %return8)
  %return16 = call double @"abs@FF"(double %return15)
  %return17 = call double @"acos@FF"(double %return16)
  %return20 = call double @"dot@FVV"(<3 x double> %output6, <3 x double> %return12)
  %return21 = call double @"abs@FF"(double %return20)
  %return22 = call double @"acos@FF"(double %return21)
  %output24 = fsub double 0x400921FB4D12D84A, %return17
  %output26 = fsub double %output24, %return22
  %return28 = call double @"sin@FF"(double %return22)
  %output30 = fmul double %return28, %return
  %return32 = call double @"sin@FF"(double %output26)
  %output33 = call double @"div@FF"(double %output30, double %return32)
  %_bound_P34 = load <3 x double>, <3 x double>* %_bound_P
  %cast37 = call <3 x double> @"set@VF"(double %output33)
  %output38 = call <3 x double> @"mul@VV"(<3 x double> %cast37, <3 x double> %return8)
  %output39 = call <3 x double> @"add@VV"(<3 x double> %_bound_P34, <3 x double> %output38)
  store <3 x double> %output39, <3 x double>* %_bound_P
  store <3 x double> %return8, <3 x double>* %_bound_N
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"abs@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"acos@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %opinput1_P, <3 x double> %P, <3 x double> %opinput1_N, <3 x double> %opinput2_P, <3 x double> %N) #2 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %"<N>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %N, <3 x double>* %"<N>"
  store <3 x double> %opinput1_P, <3 x double>* %0
  store <3 x double> %opinput1_N, <3 x double>* %1
  store <3 x double> %opinput2_P, <3 x double>* %2
  call void @"__vex_snippet_snippet@VVVVV"(<3 x double>* %0, <3 x double>* %"<P>", <3 x double>* %1, <3 x double>* %2, <3 x double>* %"<N>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i64 0, i64 0), <3 x double> %opinput1_P) #3
  %evalue4 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue4) #3
  %gvalue7 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0), <3 x double> %opinput1_N) #3
  %gvalue9 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0), <3 x double> %opinput2_P) #3
  %evalue10 = load <3 x double>, <3 x double>* %"<N>"
  %gvalue11 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), <3 x double> %evalue10) #3
  store <3 x double> %gvalue, <3 x double>* @opinput1_P
  store <3 x double> %gvalue5, <3 x double>* @P
  store <3 x double> %gvalue7, <3 x double>* @opinput1_N
  store <3 x double> %gvalue9, <3 x double>* @opinput2_P
  store <3 x double> %gvalue11, <3 x double>* @N
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

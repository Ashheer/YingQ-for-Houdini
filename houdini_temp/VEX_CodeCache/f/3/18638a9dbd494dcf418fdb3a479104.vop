;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"blend\00"
@P = external global <3 x double>
@__uv = external global <3 x double>
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [5 x i8] c"__uv\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VV"(<3 x double>* %_bound_P, <3 x double>* %_bound___uv) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call double @"getcomp@FVI"(<3 x double> %_bound_P1, i64 0)
  %_bound___uv2 = load <3 x double>, <3 x double>* %_bound___uv
  %return3 = call double @"getcomp@FVI"(<3 x double> %_bound___uv2, i64 0)
  %output = fsub double %return3, 5.000000e-01
  %return4 = call double @"ch@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0))
  %return5 = call double @"lerp@FFFF"(double %return, double %output, double %return4)
  %tmp = load <3 x double>, <3 x double>* %_bound_P
  %return6 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %return5, i64 0)
  %output8 = extractvalue { double, <3 x double> } %return6, 1
  store <3 x double> %output8, <3 x double>* %_bound_P
  %return10 = call double @"getcomp@FVI"(<3 x double> %output8, i64 1)
  %_bound___uv11 = load <3 x double>, <3 x double>* %_bound___uv
  %return12 = call double @"getcomp@FVI"(<3 x double> %_bound___uv11, i64 1)
  %output13 = fsub double %return12, 5.000000e-01
  %return15 = call double @"lerp@FFFF"(double %return10, double %output13, double %return4)
  %tmp16 = load <3 x double>, <3 x double>* %_bound_P
  %return17 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp16, double %return15, i64 1)
  %output19 = extractvalue { double, <3 x double> } %return17, 1
  store <3 x double> %output19, <3 x double>* %_bound_P
  %return21 = call double @"getcomp@FVI"(<3 x double> %output19, i64 2)
  %return23 = call double @"lerp@FFFF"(double %return21, double 0.000000e+00, double %return4)
  %tmp24 = load <3 x double>, <3 x double>* %_bound_P
  %return25 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp24, double %return23, i64 2)
  %output27 = extractvalue { double, <3 x double> } %return25, 1
  store <3 x double> %output27, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"lerp@FFFF"(double, double, double) #2

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, <3 x double> %__uv) #2 {
__llvm_entry:
  %0 = alloca <3 x double>
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %__uv, <3 x double>* %0
  call void @"__vex_snippet_snippet@VV"(<3 x double>* %"<P>", <3 x double>* %0)
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #4
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), <3 x double> %__uv) #4
  store <3 x double> %gvalue, <3 x double>* @P
  store <3 x double> %gvalue3, <3 x double>* @__uv
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

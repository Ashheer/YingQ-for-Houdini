;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [15 x i8] c"output_frame_1\00"
@1 = private constant [15 x i8] c"output_frame_2\00"
@2 = private constant [12 x i8] c"start_frame\00"
@3 = private constant [9 x i8] c"timestep\00"
@4 = private constant [9 x i8] c"../speed\00"

; Function Attrs: alwaysinline nounwind
define private void @__vex_snippet_snippet() #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1, i64 0, i64 0))
  %return2 = call double @"ch@FS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i64 0, i64 0))
  %return3 = call double @"ch@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0))
  %output = fmul double %return3, 5.000000e-01
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %cumulative.0 = phi double [ %return2, %__llvm_entry ], [ %output26, %body ]
  %of1.0 = phi i64 [ %return, %__llvm_entry ], [ %output28, %body ]
  %return7 = call i64 @"le@III"(i64 %of1.0, i64 %return1)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %cast = sitofp i64 %of1.0 to double
  %return10 = call <3 x double> @"set@VFFF"(double %cast, double %cumulative.0, double 0.000000e+00)
  %return11 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return10)
  %output13 = sub i64 %of1.0, 1
  %cast15 = sitofp i64 %output13 to double
  %output16 = fmul double %cast15, %return3
  %return19 = call double @"ch@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0), double %output16)
  %output22 = fadd double %output16, %output
  %return23 = call double @"ch@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0), double %output22)
  %output24 = fadd double %return19, %return23
  %output25 = fmul double 5.000000e-01, %output24
  %output26 = fadd double %cumulative.0, %output25
  %output28 = add i64 %of1.0, 1
  br label %cond

end:                                              ; preds = %cond
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"le@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"ch@FSF"(i8*, double) #1

; Function Attrs: nounwind
define void @__vex_snippet() #2 {
__llvm_entry:
  call void @__vex_snippet_snippet()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

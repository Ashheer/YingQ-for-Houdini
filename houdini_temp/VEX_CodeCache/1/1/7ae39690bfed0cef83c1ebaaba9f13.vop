;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x double] zeroinitializer
@1 = private constant [2 x i8] c"P\00"
@ptnum = external global i64
@P = external global <3 x double>
@pscale = external global double
@2 = private constant [6 x i8] c"ptnum\00"
@3 = private constant [7 x i8] c"pscale\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVF"(i64* %_bound_ptnum, <3 x double>* %_bound_P, double* %_bound_pscale) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64* @"neighbours@[III"(i64 0, i64 %_bound_ptnum1)
  %return3 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %__impl_foreach_index_2.0 = phi i64 [ 0, %__llvm_entry ], [ %output18, %body ]
  %dis.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @0, i64 0, i64 0), %__llvm_entry ], [ %output, %body ]
  %return6 = call i64 @"lt@III"(i64 %__impl_foreach_index_2.0, i64 %return3)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return9 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_2.0)
  %return11 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return9)
  %_bound_P12 = load <3 x double>, <3 x double>* %_bound_P
  %return14 = call double @"distance@FVV"(<3 x double> %_bound_P12, <3 x double> %return11)
  %output = call double* @"push@[FF"(double* %dis.0, double %return14)
  %output18 = add i64 %__impl_foreach_index_2.0, 1
  br label %cond

end:                                              ; preds = %cond
  %return20 = call double @"min@F[F"(double* %dis.0)
  store double %return20, double* %_bound_pscale
  ret void
}

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double* @"push@[FF"(double*, double) #2

; Function Attrs: nounwind
declare double @"min@F[F"(double*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %P, double %pscale) #1 {
__llvm_entry:
  %"<pscale>" = alloca double
  %0 = alloca i64
  %1 = alloca <3 x double>
  store double %pscale, double* %"<pscale>"
  store i64 %ptnum, i64* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@IVF"(i64* %0, <3 x double>* %1, double* %"<pscale>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %ptnum) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %P) #3
  %evalue5 = load double, double* %"<pscale>"
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), double %evalue5) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue4, <3 x double>* @P
  store double %gvalue6, double* @pscale
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

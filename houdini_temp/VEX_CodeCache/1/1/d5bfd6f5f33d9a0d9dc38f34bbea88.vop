;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [28 x i8] c"../tmpAttrib_primpoints_out\00"
@1 = private constant [18 x i8] c"../tmpAttrib_ndir\00"
@2 = private constant [2 x i8] c"P\00"
@3 = private constant [22 x i8] c"../tmpAttrib_lastdist\00"
@4 = private constant [4 x i8] c"max\00"
@5 = private constant [22 x i8] c"../tmpAttrib_nextdist\00"
@pointprim = external global i64
@ptnum = external global i64
@P = external global <3 x double>
@6 = private constant [10 x i8] c"pointprim\00"
@7 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIV"(i64* %_bound_pointprim, i64* %_bound_ptnum, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @0, i64 0, i64 0))
  %_bound_pointprim1 = load i64, i64* %_bound_pointprim
  %return2 = call i64* @"prim@[IISI"(i64 0, i8* %return, i64 %_bound_pointprim1)
  %return4 = call i64 @"len@I[I"(i64* %return2)
  %output = sub i64 %return4, 1
  br label %cond

cond:                                             ; preds = %end13, %__llvm_entry
  %idx.0 = phi i64 [ 0, %__llvm_entry ], [ %output15, %end13 ]
  %return7 = call i64 @"getcomp@I[II"(i64* %return2, i64 %idx.0)
  %_bound_ptnum8 = load i64, i64* %_bound_ptnum
  %return9 = call i64 @"lt@III"(i64 %return7, i64 %_bound_ptnum8)
  %0 = icmp ne i64 %return9, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return12 = call i64 @"eq@III"(i64 %idx.0, i64 %output)
  %1 = icmp ne i64 %return12, 0
  br i1 %1, label %true, label %end13

end:                                              ; preds = %true, %cond
  %idx.1 = phi i64 [ 0, %true ], [ %idx.0, %cond ]
  %return16 = call i8* @"chs@SS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1, i64 0, i64 0))
  %output19 = sub i64 %idx.1, 1
  %return20 = call i64 @"getcomp@I[II"(i64* %return2, i64 %output19)
  %return21 = call <3 x double> @"point@VISI"(i64 0, i8* %return16, i64 %return20)
  %return24 = call i64 @"getcomp@I[II"(i64* %return2, i64 %idx.1)
  %return25 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), i64 %return24)
  %_bound_P26 = load <3 x double>, <3 x double>* %_bound_P
  %output28 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P26, <3 x double> %return25)
  %return31 = call double @"dot@FVV"(<3 x double> %output28, <3 x double> %return21)
  %cast = call <3 x double> @"set@VF"(double %return31)
  %output33 = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %return21)
  %return35 = call double @"distance@FVV"(<3 x double> %output33, <3 x double> %output28)
  %return36 = call i8* @"chs@SS"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @3, i64 0, i64 0))
  %return41 = call i64 @"setpointattrib@IISIFS"(i64 0, i8* %return36, i64 %return24, double %return35, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  %return42 = call i8* @"chs@SS"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @5, i64 0, i64 0))
  %return48 = call i64 @"setpointattrib@IISIFS"(i64 0, i8* %return42, i64 %return20, double %return35, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  ret void

true:                                             ; preds = %body
  br label %end

end13:                                            ; preds = %body
  %output15 = add i64 %idx.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64* @"prim@[IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIFS"(i64, i8*, i64, double, i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %pointprim, i64 %ptnum, <3 x double> %P) #2 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca <3 x double>
  store i64 %pointprim, i64* %0
  store i64 %ptnum, i64* %1
  store <3 x double> %P, <3 x double>* %2
  call void @"__vex_snippet_snippet@IIV"(i64* %0, i64* %1, <3 x double>* %2)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @6, i64 0, i64 0), i64 %pointprim) #3
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @7, i64 0, i64 0), i64 %ptnum) #3
  %gvalue7 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %P) #3
  store i64 %gvalue, i64* @pointprim
  store i64 %gvalue5, i64* @ptnum
  store <3 x double> %gvalue7, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [4 x i8] c"tag\00"
@1 = private constant [17 x i8] c"useprimnumattrib\00"
@2 = private constant [14 x i8] c"primnumattrib\00"
@3 = private constant [17 x i8] c"useprimuvwattrib\00"
@4 = private constant [14 x i8] c"primuwvattrib\00"
@5 = private constant [1 x i8] zeroinitializer
@tag = external global i8*
@ptnum = external global i64
@__sourceprim = external global i64
@__sourceprimuv = external global <3 x double>
@6 = private constant [6 x i8] c"ptnum\00"
@7 = private constant [13 x i8] c"__sourceprim\00"
@8 = private constant [15 x i8] c"__sourceprimuv\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SIIV"(i8** %_bound_tag, i64* %_bound_ptnum, i64* %_bound___sourceprim, <3 x double>* %_bound___sourceprimuv) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i64 0, i64 0))
  store i8* %return, i8** %_bound_tag
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1, i64 0, i64 0))
  %0 = icmp ne i64 %return1, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return2 = call i64 @"geoself@I"()
  %return3 = call i8* @"chs@SS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @2, i64 0, i64 0))
  %_bound_ptnum4 = load i64, i64* %_bound_ptnum
  %_bound___sourceprim5 = load i64, i64* %_bound___sourceprim
  %return6 = call i64 @"setpointattrib@IISII"(i64 %return2, i8* %return3, i64 %_bound_ptnum4, i64 %_bound___sourceprim5)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %return7 = call i64 @"chi@IS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @3, i64 0, i64 0))
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %true8, label %end9

true8:                                            ; preds = %end
  %return10 = call i64 @"geoself@I"()
  %return11 = call i8* @"chs@SS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @4, i64 0, i64 0))
  %_bound_ptnum12 = load i64, i64* %_bound_ptnum
  %_bound___sourceprimuv13 = load <3 x double>, <3 x double>* %_bound___sourceprimuv
  %return14 = call i64 @"setpointattrib@IISIV"(i64 %return10, i8* %return11, i64 %_bound_ptnum12, <3 x double> %_bound___sourceprimuv13)
  br label %end9

end9:                                             ; preds = %true8, %end
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"geoself@I"() #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISII"(i64, i8*, i64, i64) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIV"(i64, i8*, i64, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i8* %tag, i64 %ptnum, i64 %__sourceprim, <3 x double> %__sourceprimuv) #2 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca <3 x double>
  %"<tag>" = alloca i8*
  store i8* %tag, i8** %"<tag>"
  store i64 %ptnum, i64* %0
  store i64 %__sourceprim, i64* %1
  store <3 x double> %__sourceprimuv, <3 x double>* %2
  call void @"__vex_snippet_snippet@SIIV"(i8** %"<tag>", i64* %0, i64* %1, <3 x double>* %2)
  %evalue = load i8*, i8** %"<tag>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i64 0, i64 0), i8* %evalue) #3
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i64 0, i64 0), i64 %ptnum) #3
  %gvalue7 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @7, i64 0, i64 0), i64 %__sourceprim) #3
  %gvalue9 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @8, i64 0, i64 0), <3 x double> %__sourceprimuv) #3
  store i8* %gvalue, i8** @tag
  store i64 %gvalue5, i64* @ptnum
  store i64 %gvalue7, i64* @__sourceprim
  store <3 x double> %gvalue9, <3 x double>* @__sourceprimuv
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @5, i64 0, i64 0), i64 0, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

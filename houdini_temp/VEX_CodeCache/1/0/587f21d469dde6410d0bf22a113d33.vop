;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@N = external global <3 x double>
@orient = external global <4 x double>
@0 = private constant [2 x i8] c"N\00"
@1 = private constant [7 x i8] c"orient\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VP"(<3 x double>* %_bound_N, <4 x double>* %_bound_orient) #0 {
__llvm_entry:
  %_bound_N1 = load <3 x double>, <3 x double>* %_bound_N
  %return = call <3 x double> @"normalize@VV"(<3 x double> %_bound_N1)
  %return2 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 1.000000e+00, double 0.000000e+00)
  %return3 = call <9 x double> @"maketransform@3VV"(<3 x double> %return, <3 x double> %return2)
  %return5 = call <4 x double> @"quaternion@P3"(<9 x double> %return3)
  store <4 x double> %return5, <4 x double>* %_bound_orient
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare <9 x double> @"maketransform@3VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"quaternion@P3"(<9 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %N, <4 x double> %orient) #1 {
__llvm_entry:
  %"<orient>" = alloca <4 x double>
  %0 = alloca <3 x double>
  store <4 x double> %orient, <4 x double>* %"<orient>"
  store <3 x double> %N, <3 x double>* %0
  call void @"__vex_snippet_snippet@VP"(<3 x double>* %0, <4 x double>* %"<orient>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %N) #3
  %evalue2 = load <4 x double>, <4 x double>* %"<orient>"
  %gvalue3 = call <4 x double> @"_export@PSP"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), <4 x double> %evalue2) #3
  store <3 x double> %gvalue, <3 x double>* @N
  store <4 x double> %gvalue3, <4 x double>* @orient
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare <4 x double> @"_export@PSP"(i8*, <4 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

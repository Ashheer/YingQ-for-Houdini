;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@ptnum = external global i64
@numpt = external global i64
@P = external global <3 x double>
@0 = private constant [6 x i8] c"ptnum\00"
@1 = private constant [6 x i8] c"numpt\00"
@2 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIV"(i64* %_bound_ptnum, i64* %_bound_numpt, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %cast = sitofp i64 %_bound_ptnum1 to double
  %_bound_numpt2 = load i64, i64* %_bound_numpt
  %cast3 = sitofp i64 %_bound_numpt2 to double
  %output = call double @"div@FF"(double %cast, double %cast3)
  %output4 = fmul double %output, 2.000000e+00
  %output5 = fsub double %output4, 1.000000e+00
  %output8 = fmul double %output5, %output5
  %output10 = fsub double 1.000000e+00, %output8
  %_bound_P11 = load <3 x double>, <3 x double>* %_bound_P
  %return = call double @"getcomp@FVI"(<3 x double> %_bound_P11, i64 1)
  %output13 = fmul double %output10, 2.000000e+00
  %output14 = fsub double %return, %output13
  %return15 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %_bound_P11, double %output14, i64 1)
  %output17 = extractvalue { double, <3 x double> } %return15, 1
  store <3 x double> %output17, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 1)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64 %numpt, <3 x double> %P) #3 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca i64
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  store i64 %numpt, i64* %1
  call void @"__vex_snippet_snippet@IIV"(i64* %0, i64* %1, <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i64 %ptnum) #4
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i64 %numpt) #4
  %evalue5 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %evalue5) #4
  store i64 %gvalue, i64* @ptnum
  store i64 %gvalue4, i64* @numpt
  store <3 x double> %gvalue6, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

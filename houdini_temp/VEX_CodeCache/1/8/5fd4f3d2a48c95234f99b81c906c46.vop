;_name	/obj/geo1/MOPs_Move_Along_Spline/MOPs_Apply_Attributes/pointwrangle1/attribvop1
; ModuleID = 'obj_geo1_MOPs_Move_Along_Spline_MOPs_Apply_Attributes_pointwrangle1_attribvop1'

@0 = private constant [12 x i8] c"mops_orient\00"
@ptnum = external global i64
@orient = external global <4 x double>
@1 = private constant [6 x i8] c"ptnum\00"
@2 = private constant [7 x i8] c"orient\00"

define private void @"_obj_geo1_MOPs_Move_Along_Spline_MOPs_Apply_Attributes_pointwrangle1_attribvop1_snippet1@IP"(i64* %_bound_ptnum, <4 x double>* %_bound_orient) nounwind alwaysinline {
__llvm_entry:
  %return = call <9 x double> @"ident@3"()
  %return1 = call <4 x double> @"quaternion@P3"(<9 x double> %return)
  %return2 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([12 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return2, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_ptnum3 = load i64* %_bound_ptnum
  %return4 = call <4 x double> @"point@PISI"(i64 0, i8* getelementptr inbounds ([12 x i8]* @0, i64 0, i64 0), i64 %_bound_ptnum3)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %mops_orient.0 = phi <4 x double> [ %return4, %true ], [ %return1, %__llvm_entry ]
  %return6 = call <4 x double> @"qinvert@PP"(<4 x double> %mops_orient.0)
  %_bound_orient7 = load <4 x double>* %_bound_orient
  %return8 = call <4 x double> @"qmultiply@PPP"(<4 x double> %return6, <4 x double> %_bound_orient7)
  store <4 x double> %return8, <4 x double>* %_bound_orient
  ret void
}

declare <9 x double> @"ident@3"() nounwind

declare <4 x double> @"quaternion@P3"(<9 x double>) nounwind readnone

declare i64 @"haspointattrib@IIS"(i64, i8*) nounwind

declare <4 x double> @"point@PISI"(i64, i8*, i64) nounwind

declare <4 x double> @"qinvert@PP"(<4 x double>) nounwind readnone

declare <4 x double> @"qmultiply@PPP"(<4 x double>, <4 x double>) nounwind readnone

define void @obj_geo1_MOPs_Move_Along_Spline_MOPs_Apply_Attributes_pointwrangle1_attribvop1(i64 %ptnum, <4 x double> %orient) nounwind {
__llvm_entry:
  %"<orient>" = alloca <4 x double>
  %0 = alloca i64
  store <4 x double> %orient, <4 x double>* %"<orient>"
  store i64 %ptnum, i64* %0
  call void @"_obj_geo1_MOPs_Move_Along_Spline_MOPs_Apply_Attributes_pointwrangle1_attribvop1_snippet1@IP"(i64* %0, <4 x double>* %"<orient>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8]* @1, i64 0, i64 0), i64 %ptnum) nounwind readonly
  %evalue2 = load <4 x double>* %"<orient>"
  %gvalue3 = call <4 x double> @"_export@PSP"(i8* getelementptr inbounds ([7 x i8]* @2, i64 0, i64 0), <4 x double> %evalue2) nounwind readonly
  store i64 %gvalue, i64* @ptnum
  store <4 x double> %gvalue3, <4 x double>* @orient
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <4 x double> @"_export@PSP"(i8*, <4 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_geo1_MOPs_Move_Along_Spline_MOPs_Apply_Attributes_pointwrangle1_attribvop1(i64 0, <4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  ret void
}

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"18.5.633"}
!2 = metadata !{metadata !"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@__shift = external global <3 x double>
@0 = private constant [8 x i8] c"__shift\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VFFFIV"(<3 x double>* %_bound_N, double* %_bound___cutteroffset, double* %_bound___cutterspacing, double* %_bound___cutteroffsetseed, i64* %_bound_ptnum, <3 x double>* %_bound___shift) #0 {
__llvm_entry:
  %_bound_N1 = load <3 x double>, <3 x double>* %_bound_N
  %return = call <3 x double> @"neg@VV"(<3 x double> %_bound_N1)
  %_bound___cutteroffset2 = load double, double* %_bound___cutteroffset
  %output = fmul double 5.000000e-01, %_bound___cutteroffset2
  %_bound___cutterspacing3 = load double, double* %_bound___cutterspacing
  %output4 = fmul double %output, %_bound___cutterspacing3
  %_bound___cutteroffsetseed5 = load double, double* %_bound___cutteroffsetseed
  %_bound_ptnum6 = load i64, i64* %_bound_ptnum
  %cast = sitofp i64 %_bound_ptnum6 to double
  %output7 = fadd double %_bound___cutteroffsetseed5, %cast
  %return8 = call double @"random@FF"(double %output7)
  %return10 = call double @"neg@FF"(double %output4)
  %return12 = call double @"fit@FFFFFF"(double %return8, double 0.000000e+00, double 1.000000e+00, double %return10, double %output4)
  %cast15 = call <3 x double> @"set@VF"(double %return12)
  %output16 = call <3 x double> @"mul@VV"(<3 x double> %cast15, <3 x double> %return)
  store <3 x double> %output16, <3 x double>* %_bound___shift
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #1

; Function Attrs: alwaysinline
define private double @"random@FF"(double %rw11) #2 {
__llvm_entry:
  %t_0_ = call i64 @"floor@IF"(double %rw11)
  %rw03 = call double @"random@FI"(i64 %t_0_)
  ret double %rw03
}

; Function Attrs: nounwind
declare i64 @"floor@IF"(double) #3

; Function Attrs: nounwind readnone
declare double @"random@FI"(i64) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #3

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %N, double %__cutteroffset, double %__cutterspacing, double %__cutteroffsetseed, i64 %ptnum, <3 x double> %__shift) #3 {
__llvm_entry:
  %"<__shift>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  store <3 x double> %__shift, <3 x double>* %"<__shift>"
  store <3 x double> %N, <3 x double>* %0
  store double %__cutteroffset, double* %1
  store double %__cutterspacing, double* %2
  store double %__cutteroffsetseed, double* %3
  store i64 %ptnum, i64* %4
  call void @"__vex_snippet_snippet@VFFFIV"(<3 x double>* %0, double* %1, double* %2, double* %3, i64* %4, <3 x double>* %"<__shift>")
  %evalue = load <3 x double>, <3 x double>* %"<__shift>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0), <3 x double> %evalue) #4
  store <3 x double> %gvalue, <3 x double>* @__shift
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

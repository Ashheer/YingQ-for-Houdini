;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [15 x i8] c"maxconstraints\00"
@1 = private constant [6 x i8] c"group\00"
@2 = private constant [13 x i8] c"nconstraints\00"
@ptnum = external global i64
@3 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_ptnum) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i64 0, i64 0))
  %return1 = call i8* @"chs@SS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0))
  %_bound_ptnum2 = load i64, i64* %_bound_ptnum
  %return3 = call i64 @"point@IISI"(i64 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0), i64 %_bound_ptnum2)
  %return6 = call i64 @"le@III"(i64 %return3, i64 %return)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %cond, %__llvm_entry
  ret void

end:                                              ; preds = %__llvm_entry
  %_bound_ptnum7 = load i64, i64* %_bound_ptnum
  %return8 = call i64* @"pointprims@[III"(i64 0, i64 %_bound_ptnum7)
  %return10 = call i64 @"len@I[I"(i64* %return8)
  br label %cond

cond:                                             ; preds = %end22, %end
  %__impl_foreach_index_19d.0 = phi i64 [ 0, %end ], [ %output33, %end22 ]
  %maxc.0 = phi i64 [ %return, %end ], [ %maxc.1, %end22 ]
  %return13 = call i64 @"lt@III"(i64 %__impl_foreach_index_19d.0, i64 %return10)
  %1 = icmp ne i64 %return13, 0
  br i1 %1, label %body, label %true

body:                                             ; preds = %cond
  %return17 = call i64 @"getcomp@I[II"(i64* %return8, i64 %__impl_foreach_index_19d.0)
  %return20 = call i64 @"inprimgroup@IISI"(i64 0, i8* %return1, i64 %return17)
  %2 = icmp ne i64 %return20, 0
  br i1 %2, label %true21, label %end22

true21:                                           ; preds = %body
  %output = sub i64 %maxc.0, 1
  %return26 = call i64 @"lt@III"(i64 %output, i64 0)
  %3 = icmp ne i64 %return26, 0
  br i1 %3, label %true27, label %end22

end22:                                            ; preds = %true21, %true27, %body
  %maxc.1 = phi i64 [ %output, %true27 ], [ %output, %true21 ], [ %maxc.0, %body ]
  %output33 = add i64 %__impl_foreach_index_19d.0, 1
  br label %cond

true27:                                           ; preds = %true21
  %return29 = call i64 @"geoself@I"()
  %return31 = call i64 @"removeprim@IIII"(i64 %return29, i64 %return17, i64 0)
  br label %end22
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"le@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64* @"pointprims@[III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64 @"inprimgroup@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"geoself@I"() #2

; Function Attrs: nounwind
declare i64 @"removeprim@IIII"(i64, i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum) #2 {
__llvm_entry:
  %0 = alloca i64
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  store i64 %gvalue, i64* @ptnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [16 x i8] c"primitivegroups\00"
@1 = private constant [8 x i8] c"outside\00"
@2 = private constant [7 x i8] c"inside\00"
@3 = private constant [4 x i8] c"grp\00"

; Function Attrs: alwaysinline nounwind
define private void @__vex_snippet_snippet() #0 {
__llvm_entry:
  %return = call i8** @"detailintrinsic@[SIS"(i64 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i64 0, i64 0))
  %return2 = call i64 @"len@I[S"(i8** %return)
  br label %cond

cond:                                             ; preds = %end18, %__llvm_entry
  %__impl_foreach_index_b.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %end18 ]
  %return5 = call i64 @"lt@III"(i64 %__impl_foreach_index_b.0, i64 %return2)
  %0 = icmp ne i64 %return5, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return8 = call i8* @"getcomp@S[SI"(i8** %return, i64 %__impl_foreach_index_b.0)
  %return10 = call i64 @"neg@II"(i64 7)
  %return11 = call i8* @"slice@SSIIIIII"(i8* %return8, i64 1, i64 %return10, i64 0, i64 0, i64 0, i64 0)
  %return12 = call i64 @"ne@ISS"(i8* %return11, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0))
  %return14 = call i64 @"neg@II"(i64 6)
  %return15 = call i8* @"slice@SSIIIIII"(i8* %return8, i64 1, i64 %return14, i64 0, i64 0, i64 0, i64 0)
  %return16 = call i64 @"ne@ISS"(i8* %return15, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0))
  %return17 = call i64 @"and@III"(i64 %return12, i64 %return16)
  %1 = icmp ne i64 %return17, 0
  br i1 %1, label %true, label %end18

end:                                              ; preds = %cond
  ret void

true:                                             ; preds = %body
  %return19 = call i64 @"addpoint@IIV"(i64 0, <3 x double> zeroinitializer)
  %return22 = call i64 @"setpointattrib@IISIS"(i64 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i64 0, i64 0), i64 %return19, i8* %return8)
  br label %end18

end18:                                            ; preds = %true, %body
  %output = add i64 %__impl_foreach_index_b.0, 1
  br label %cond
}

; Function Attrs: nounwind
declare i8** @"detailintrinsic@[SIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare i8* @"slice@SSIIIIII"(i8*, i64, i64, i64, i64, i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIS"(i64, i8*, i64, i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet() #1 {
__llvm_entry:
  call void @__vex_snippet_snippet()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [7 x i8] c"optype\00"
@1 = private constant [6 x i8] c"point\00"
@2 = private constant [8 x i8] c"optypes\00"
@optype_idx = external global i64
@3 = private constant [11 x i8] c"optype_idx\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_optype_idx) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0))
  %return2 = call i64 @"findattribval@IISSS"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i8* %return)
  store i64 %return2, i64* %_bound_optype_idx
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"findattribval@IISSS"(i64, i8*, i8*, i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %optype_idx) #2 {
__llvm_entry:
  %"<optype_idx>" = alloca i64
  store i64 %optype_idx, i64* %"<optype_idx>"
  call void @"__vex_snippet_snippet@I"(i64* %"<optype_idx>")
  %evalue = load i64, i64* %"<optype_idx>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0), i64 %evalue) #3
  store i64 %gvalue, i64* @optype_idx
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

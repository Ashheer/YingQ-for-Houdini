;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [10 x i8] c"name_orig\00"
@2 = private constant [1 x i8] zeroinitializer
@3 = private constant [5 x i8] c"name\00"
@4 = private constant [6 x i8] c"Crate\00"
@5 = private constant [27 x i8] c"Assets/WFC_Pieces/Prefabs/\00"
@6 = private constant [8 x i8] c".prefab\00"
@7 = private constant [5 x i8] c"Core\00"
@name = external global i8*
@ptnum = external global i64
@unity_instance = external global i8*
@scale = external global <3 x double>
@N = external global <3 x double>
@P = external global <3 x double>
@8 = private constant [6 x i8] c"ptnum\00"
@9 = private constant [15 x i8] c"unity_instance\00"
@10 = private constant [6 x i8] c"scale\00"
@11 = private constant [2 x i8] c"N\00"
@12 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SISVVV"(i8** %_bound_name, i64* %_bound_ptnum, i8** %_bound_unity_instance, <3 x double>* %_bound_scale, <3 x double>* %_bound_N, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_name1 = load i8*, i8** %_bound_name
  %return = call i64 @"findattribval@IISSSI"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), i8* %_bound_name1, i64 0)
  %return3 = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), i64 %return)
  %_bound_name9 = load i8*, i8** %_bound_name
  %return11 = call i64 @"eq@ISS"(i8* %_bound_name9, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0))
  %0 = icmp ne i64 %return11, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_ptnum12 = load i64, i64* %_bound_ptnum
  %output = mul i64 %_bound_ptnum12, 42
  %cast = sitofp i64 %output to double
  %return13 = call double @"rand@FF"(double %cast)
  %return14 = call double @"fit01@FFFF"(double %return13, double 1.000000e+00, double 4.000000e+00)
  %return15 = call i64 @"floor@IF"(double %return14)
  %return17 = call i8* @"itoa@SI"(i64 %return15)
  %return18 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i8* %return17)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %curname.0 = phi i8* [ %return18, %true ], [ %_bound_name9, %__llvm_entry ]
  %return20 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @5, i64 0, i64 0), i8* %curname.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @6, i64 0, i64 0))
  store i8* %return20, i8** %_bound_unity_instance
  %return21 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double 1.000000e+00, double 1.000000e+00)
  store <3 x double> %return21, <3 x double>* %_bound_scale
  %return22 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double 0.000000e+00, double 0.000000e+00)
  store <3 x double> %return22, <3 x double>* %_bound_N
  %_bound_name23 = load i8*, i8** %_bound_name
  %return24 = call i64 @"eq@ISS"(i8* %_bound_name23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i64 0, i64 0))
  %1 = icmp ne i64 %return24, 0
  br i1 %1, label %true25, label %end26

true25:                                           ; preds = %end
  %return27 = call <3 x double> @"set@VFFF"(double 4.000000e-01, double 4.000000e-01, double 4.000000e-01)
  store <3 x double> %return27, <3 x double>* %_bound_scale
  %return28 = call double @"neg@FF"(double 5.000000e-02)
  %tmp = load <3 x double>, <3 x double>* %_bound_P
  %return29 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %return28, i64 1)
  %output31 = extractvalue { double, <3 x double> } %return29, 1
  store <3 x double> %output31, <3 x double>* %_bound_P
  br label %end26

end26:                                            ; preds = %true25, %end
  ret void
}

; Function Attrs: nounwind
declare i64 @"findattribval@IISSSI"(i64, i8*, i8*, i8*, i64) #1

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"slice@SSIIIIII"(i8*, i64, i64, i64, i64, i64, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #2

; Function Attrs: nounwind
declare double @"rand@FF"(double) #1

; Function Attrs: nounwind
declare double @"fit01@FFFF"(double, double, double) #1

; Function Attrs: nounwind
declare i64 @"floor@IF"(double) #1

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #2

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS:S"(i8*, i8*, i8*) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #2

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 1)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i8* %name, i64 %ptnum, i8* %unity_instance, <3 x double> %scale, <3 x double> %N, <3 x double> %P) #1 {
__llvm_entry:
  %"<unity_instance>" = alloca i8*
  %"<scale>" = alloca <3 x double>
  %"<N>" = alloca <3 x double>
  %"<P>" = alloca <3 x double>
  %0 = alloca i8*
  %1 = alloca i64
  store i8* %unity_instance, i8** %"<unity_instance>"
  store <3 x double> %scale, <3 x double>* %"<scale>"
  store <3 x double> %N, <3 x double>* %"<N>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store i8* %name, i8** %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@SISVVV"(i8** %0, i64* %1, i8** %"<unity_instance>", <3 x double>* %"<scale>", <3 x double>* %"<N>", <3 x double>* %"<P>")
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), i8* %name) #4
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @8, i64 0, i64 0), i64 %ptnum) #4
  %evalue5 = load i8*, i8** %"<unity_instance>"
  %gvalue6 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @9, i64 0, i64 0), i8* %evalue5) #4
  %evalue7 = load <3 x double>, <3 x double>* %"<scale>"
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @10, i64 0, i64 0), <3 x double> %evalue7) #4
  %evalue9 = load <3 x double>, <3 x double>* %"<N>"
  %gvalue10 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i64 0, i64 0), <3 x double> %evalue9) #4
  %evalue11 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue12 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i64 0, i64 0), <3 x double> %evalue11) #4
  store i8* %gvalue, i8** @name
  store i64 %gvalue4, i64* @ptnum
  store i8* %gvalue6, i8** @unity_instance
  store <3 x double> %gvalue8, <3 x double>* @scale
  store <3 x double> %gvalue10, <3 x double>* @N
  store <3 x double> %gvalue12, <3 x double>* @P
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), i64 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

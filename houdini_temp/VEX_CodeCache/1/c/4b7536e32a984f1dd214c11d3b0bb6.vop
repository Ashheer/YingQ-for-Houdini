;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"start\00"
@1 = private constant [4 x i8] c"end\00"
@2 = private constant [20 x i8] c"bornbeforestartmode\00"
@3 = private constant [17 x i8] c"deadafterendmode\00"
@4 = private constant [8 x i8] c"fade_in\00"
@5 = private constant [16 x i8] c"fadein_duration\00"
@6 = private constant [9 x i8] c"fade_out\00"
@7 = private constant [17 x i8] c"fadeout_duration\00"
@TimeInc = external global double
@Time = external global double
@age = external global double
@life = external global double
@ptnum = external global i64
@pscale = external global double
@8 = private constant [8 x i8] c"TimeInc\00"
@9 = private constant [5 x i8] c"Time\00"
@10 = private constant [4 x i8] c"age\00"
@11 = private constant [5 x i8] c"life\00"
@12 = private constant [6 x i8] c"ptnum\00"
@13 = private constant [7 x i8] c"pscale\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FFFFIF"(double* %_bound_TimeInc, double* %_bound_Time, double* %_bound_age, double* %_bound_life, i64* %_bound_ptnum, double* %_bound_pscale) #0 {
__llvm_entry:
  %_bound_TimeInc1 = load double, double* %_bound_TimeInc
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0))
  %output = sub i64 %return, 1
  %cast = sitofp i64 %output to double
  %output2 = fmul double %_bound_TimeInc1, %cast
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i64 0, i64 0))
  %output5 = sub i64 %return4, 1
  %cast6 = sitofp i64 %output5 to double
  %output7 = fmul double %_bound_TimeInc1, %cast6
  %_bound_Time8 = load double, double* %_bound_Time
  %_bound_age9 = load double, double* %_bound_age
  %output10 = fsub double %_bound_Time8, %_bound_age9
  %_bound_life12 = load double, double* %_bound_life
  %output13 = fadd double %output10, %_bound_life12
  %return16 = fcmp olt double %output10, %output2
  br i1 %return16, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return18 = call i64 @"chi@IS"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @2, i64 0, i64 0))
  %return19 = call i64 @"eq@III"(i64 %return18, i64 0)
  %0 = icmp ne i64 %return19, 0
  br i1 %0, label %true20, label %false

end:                                              ; preds = %false, %__llvm_entry
  %birth_time.0 = phi double [ %output2, %false ], [ %output10, %__llvm_entry ]
  %return30 = fcmp ogt double %output13, %output7
  br i1 %return30, label %true32, label %end33

true20:                                           ; preds = %true
  %_bound_ptnum22 = load i64, i64* %_bound_ptnum
  %return23 = call i64 @"removepoint@III"(i64 0, i64 %_bound_ptnum22)
  br label %UnifiedReturnBlock

false:                                            ; preds = %true
  %output26 = fsub double %_bound_Time8, %output2
  store double %output26, double* %_bound_age
  br label %end

true32:                                           ; preds = %end
  %return34 = call i64 @"chi@IS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @3, i64 0, i64 0))
  %return35 = call i64 @"eq@III"(i64 %return34, i64 0)
  %1 = icmp ne i64 %return35, 0
  br i1 %1, label %true36, label %false37

end33:                                            ; preds = %false37, %end
  %return44 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0))
  %2 = icmp ne i64 %return44, 0
  br i1 %2, label %true45, label %end46

true36:                                           ; preds = %true32
  %_bound_ptnum39 = load i64, i64* %_bound_ptnum
  %return40 = call i64 @"removepoint@III"(i64 0, i64 %_bound_ptnum39)
  br label %UnifiedReturnBlock

false37:                                          ; preds = %true32
  %output43 = fsub double %output7, %birth_time.0
  store double %output43, double* %_bound_life
  br label %end33

true45:                                           ; preds = %end33
  %return47 = call double @"chf@FS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @5, i64 0, i64 0))
  %_bound_age48 = load double, double* %_bound_age
  %return50 = fcmp ole double %_bound_age48, %return47
  br i1 %return50, label %true52, label %end46

end46:                                            ; preds = %true45, %true52, %end33
  %return61 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @6, i64 0, i64 0))
  %3 = icmp ne i64 %return61, 0
  br i1 %3, label %true62, label %end63

true52:                                           ; preds = %true45
  %_bound_pscale54 = load double, double* %_bound_pscale
  %output57 = call double @"div@FF"(double %_bound_age48, double %return47)
  %output58 = fmul double %_bound_pscale54, %output57
  %return60 = call double @"max@FFF"(double 0.000000e+00, double %output58)
  store double %return60, double* %_bound_pscale
  br label %end46

true62:                                           ; preds = %end46
  %return65 = call double @"chf@FS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @7, i64 0, i64 0))
  %_bound_life66 = load double, double* %_bound_life
  %_bound_age67 = load double, double* %_bound_age
  %output68 = fsub double %_bound_life66, %_bound_age67
  %return70 = fcmp ole double %output68, %return65
  br i1 %return70, label %true72, label %end63

end63:                                            ; preds = %true62, %true72, %end46
  br label %UnifiedReturnBlock

true72:                                           ; preds = %true62
  %_bound_pscale74 = load double, double* %_bound_pscale
  %output79 = call double @"div@FF"(double %output68, double %return65)
  %output80 = fmul double %_bound_pscale74, %output79
  %return82 = call double @"max@FFF"(double 0.000000e+00, double %output80)
  store double %return82, double* %_bound_pscale
  br label %end63

UnifiedReturnBlock:                               ; preds = %end63, %true36, %true20
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"removepoint@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %TimeInc, double %Time, double %age, double %life, i64 %ptnum, double %pscale) #2 {
__llvm_entry:
  %"<age>" = alloca double
  %"<life>" = alloca double
  %"<pscale>" = alloca double
  %0 = alloca double
  %1 = alloca double
  %2 = alloca i64
  store double %age, double* %"<age>"
  store double %life, double* %"<life>"
  store double %pscale, double* %"<pscale>"
  store double %TimeInc, double* %0
  store double %Time, double* %1
  store i64 %ptnum, i64* %2
  call void @"__vex_snippet_snippet@FFFFIF"(double* %0, double* %1, double* %"<age>", double* %"<life>", i64* %2, double* %"<pscale>")
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0), double %TimeInc) #3
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i64 0, i64 0), double %Time) #3
  %evalue6 = load double, double* %"<age>"
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @10, i64 0, i64 0), double %evalue6) #3
  %evalue8 = load double, double* %"<life>"
  %gvalue9 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0), double %evalue8) #3
  %gvalue11 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @12, i64 0, i64 0), i64 %ptnum) #3
  %evalue12 = load double, double* %"<pscale>"
  %gvalue13 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i64 0, i64 0), double %evalue12) #3
  store double %gvalue, double* @TimeInc
  store double %gvalue5, double* @Time
  store double %gvalue7, double* @age
  store double %gvalue9, double* @life
  store i64 %gvalue11, i64* @ptnum
  store double %gvalue13, double* @pscale
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, i64 0, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

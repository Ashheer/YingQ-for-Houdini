;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@px = external global double
@P = external global <3 x double>
@py = external global double
@pz = external global double
@dist = external global double
@0 = private constant [3 x i8] c"px\00"
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [3 x i8] c"py\00"
@3 = private constant [3 x i8] c"pz\00"
@4 = private constant [5 x i8] c"dist\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FVFFF"(double* %_bound_px, <3 x double>* %_bound_P, double* %_bound_py, double* %_bound_pz, double* %_bound_dist) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call double @"getcomp@FVI"(<3 x double> %_bound_P1, i64 0)
  store double %return, double* %_bound_px
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %return3 = call double @"getcomp@FVI"(<3 x double> %_bound_P2, i64 1)
  store double %return3, double* %_bound_py
  %_bound_P4 = load <3 x double>, <3 x double>* %_bound_P
  %return5 = call double @"getcomp@FVI"(<3 x double> %_bound_P4, i64 2)
  store double %return5, double* %_bound_pz
  store double 0.000000e+00, double* %_bound_dist
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %px, <3 x double> %P, double %py, double %pz, double %dist) #2 {
__llvm_entry:
  %"<py>" = alloca double
  %"<pz>" = alloca double
  %"<dist>" = alloca double
  %0 = alloca <3 x double>
  %"<px>" = alloca double
  store double %px, double* %"<px>"
  store double %py, double* %"<py>"
  store double %pz, double* %"<pz>"
  store double %dist, double* %"<dist>"
  store <3 x double> %P, <3 x double>* %0
  call void @"__vex_snippet_snippet@FVFFF"(double* %"<px>", <3 x double>* %0, double* %"<py>", double* %"<pz>", double* %"<dist>")
  %evalue = load double, double* %"<px>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), double %evalue) #3
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %P) #3
  %evalue4 = load double, double* %"<py>"
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), double %evalue4) #3
  %evalue6 = load double, double* %"<pz>"
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), double %evalue6) #3
  %evalue8 = load double, double* %"<dist>"
  %gvalue9 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0), double %evalue8) #3
  store double %gvalue, double* @px
  store <3 x double> %gvalue3, <3 x double>* @P
  store double %gvalue5, double* @py
  store double %gvalue7, double* @pz
  store double %gvalue9, double* @dist
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, <3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@opinput1_N = external global <3 x double>
@opinput1_N2D = external global <3 x double>
@P = external global <3 x double>
@0 = private constant [11 x i8] c"opinput1_N\00"
@1 = private constant [13 x i8] c"opinput1_N2D\00"
@2 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVV"(<3 x double>* %_bound_opinput1_N, <3 x double>* %_bound_opinput1_N2D, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_opinput1_N1 = load <3 x double>, <3 x double>* %_bound_opinput1_N
  %return = call <3 x double> @"cross@VVV"(<3 x double> %_bound_opinput1_N1, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>)
  %return2 = call <3 x double> @"normalize@VV"(<3 x double> %return)
  %_bound_opinput1_N2D5 = load <3 x double>, <3 x double>* %_bound_opinput1_N2D
  %return6 = call double @"dot@FVV"(<3 x double> %return2, <3 x double> %_bound_opinput1_N2D5)
  %return7 = fcmp olt double %return6, 0.000000e+00
  br i1 %return7, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return9 = call i64 @"neg@II"(i64 1)
  br label %end

end:                                              ; preds = %__llvm_entry, %true
  %phi = phi i64 [ %return9, %true ], [ 1, %__llvm_entry ]
  %cast = call <3 x double> @"set@VI"(i64 %phi)
  %output = call <3 x double> @"mul@VV"(<3 x double> %return2, <3 x double> %cast)
  %_bound_P10 = load <3 x double>, <3 x double>* %_bound_P
  %cast12 = call <3 x double> @"set@VF"(double 1.000000e-02)
  %output13 = call <3 x double> @"mul@VV"(<3 x double> %output, <3 x double> %cast12)
  %output14 = call <3 x double> @"add@VV"(<3 x double> %_bound_P10, <3 x double> %output13)
  store <3 x double> %output14, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %opinput1_N, <3 x double> %opinput1_N2D, <3 x double> %P) #1 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %opinput1_N, <3 x double>* %0
  store <3 x double> %opinput1_N2D, <3 x double>* %1
  call void @"__vex_snippet_snippet@VVV"(<3 x double>* %0, <3 x double>* %1, <3 x double>* %"<P>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i64 0, i64 0), <3 x double> %opinput1_N) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0), <3 x double> %opinput1_N2D) #3
  %evalue5 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %evalue5) #3
  store <3 x double> %gvalue, <3 x double>* @opinput1_N
  store <3 x double> %gvalue4, <3 x double>* @opinput1_N2D
  store <3 x double> %gvalue6, <3 x double>* @P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

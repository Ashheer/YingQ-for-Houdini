;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [0 x i64] zeroinitializer
@primpoints = external global i64*
@primnum = external global i64
@center = external global <3 x double>
@2 = private constant [11 x i8] c"primpoints\00"
@3 = private constant [8 x i8] c"primnum\00"
@4 = private constant [7 x i8] c"center\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[IIV"(i64** %_bound_primpoints, i64* %_bound_primnum, <3 x double>* %_bound_center) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum1)
  store i64* %return, i64** %_bound_primpoints
  %return3 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %__impl_foreach_index.0 = phi i64 [ 0, %__llvm_entry ], [ %output14, %body ]
  %return6 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return3)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %_bound_primpoints7 = load i64*, i64** %_bound_primpoints
  %return9 = call i64 @"getcomp@I[II"(i64* %_bound_primpoints7, i64 %__impl_foreach_index.0)
  %_bound_center10 = load <3 x double>, <3 x double>* %_bound_center
  %return12 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return9)
  %output = call <3 x double> @"add@VV"(<3 x double> %_bound_center10, <3 x double> %return12)
  store <3 x double> %output, <3 x double>* %_bound_center
  %output14 = add i64 %__impl_foreach_index.0, 1
  br label %cond

end:                                              ; preds = %cond
  %_bound_center15 = load <3 x double>, <3 x double>* %_bound_center
  %cast16 = call <3 x double> @"set@VI"(i64 4)
  %output17 = call <3 x double> @"div@VV"(<3 x double> %_bound_center15, <3 x double> %cast16)
  store <3 x double> %output17, <3 x double>* %_bound_center
  ret void
}

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64* %primpoints, i64 %primnum, <3 x double> %center) #1 {
__llvm_entry:
  %"<center>" = alloca <3 x double>
  %0 = alloca i64
  %"<primpoints>" = alloca i64*
  store i64* %primpoints, i64** %"<primpoints>"
  store <3 x double> %center, <3 x double>* %"<center>"
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@[IIV"(i64** %"<primpoints>", i64* %0, <3 x double>* %"<center>")
  %evalue = load i64*, i64** %"<primpoints>"
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0), i64* %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i64 %primnum) #3
  %evalue4 = load <3 x double>, <3 x double>* %"<center>"
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0), <3 x double> %evalue4) #3
  store i64* %gvalue, i64** @primpoints
  store i64 %gvalue3, i64* @primnum
  store <3 x double> %gvalue5, <3 x double>* @center
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

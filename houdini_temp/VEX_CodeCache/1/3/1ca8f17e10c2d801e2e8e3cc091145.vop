;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [19 x i8] c"../switchif3/expr1\00"
@1 = private constant [11 x i8] c"../reverse\00"
@2 = private constant [9 x i8] c"../class\00"
@3 = private constant [14 x i8] c"../attribname\00"
@4 = private constant [9 x i8] c"../index\00"
@5 = private constant [11 x i8] c"../outenum\00"
@6 = private constant [8 x i8] c"../type\00"
@7 = private constant [10 x i8] c"../prefix\00"
@8 = private constant [9 x i8] c"../sufix\00"
@9 = private constant [12 x i8] c"../outgroup\00"
@10 = private constant [16 x i8] c"../reversegroup\00"
@11 = private constant [10 x i8] c"../outint\00"
@12 = private constant [19 x i8] c"../promotetodetail\00"
@13 = private constant [23 x i8] c"../attribcreate1/name1\00"
@14 = private constant [7 x i8] c"append\00"
@15 = private constant [1 x i8] zeroinitializer
@enum_int = external global i64
@class_str = external global i8*
@class_int = external global i64
@enum_flt = external global double
@enum_str = external global i8*
@outgroup = external global i64
@elemnum = external global i64
@intattrib = external global i64
@16 = private constant [9 x i8] c"enum_int\00"
@17 = private constant [10 x i8] c"class_str\00"
@18 = private constant [10 x i8] c"class_int\00"
@19 = private constant [9 x i8] c"enum_flt\00"
@20 = private constant [9 x i8] c"enum_str\00"
@21 = private constant [9 x i8] c"outgroup\00"
@22 = private constant [8 x i8] c"elemnum\00"
@23 = private constant [10 x i8] c"intattrib\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@ISIFSIII"(i64* %_bound_enum_int, i8** %_bound_class_str, i64* %_bound_class_int, double* %_bound_enum_flt, i8** %_bound_enum_str, i64* %_bound_outgroup, i64* %_bound_elemnum, i64* %_bound_intattrib) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_bound_enum_int1 = load i64, i64* %_bound_enum_int
  br label %end

false:                                            ; preds = %__llvm_entry
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0))
  %1 = icmp ne i64 %return2, 0
  %return6 = call i8* @"chs@SS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0))
  %return7 = call i8* @"chs@SS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @3, i64 0, i64 0))
  %return8 = call i64 @"attribtype@IISS"(i64 0, i8* %return6, i8* %return7)
  %return9 = call i64 @"eq@III"(i64 %return8, i64 2)
  %2 = icmp ne i64 %return9, 0
  br i1 %1, label %true3, label %false4

end:                                              ; preds = %true56, %false57, %true50, %end5, %true
  %findattribval.0 = phi i64 [ %_bound_enum_int1, %true ], [ %findattribval.1, %true50 ], [ %findattribval.1, %true56 ], [ %findattribval.1, %false57 ], [ %findattribval.1, %end5 ]
  %return65 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @9, i64 0, i64 0))
  %3 = icmp ne i64 %return65, 0
  br i1 %3, label %true66, label %end67

true3:                                            ; preds = %false
  br i1 %2, label %true10, label %false11

false4:                                           ; preds = %false
  br i1 %2, label %true32, label %false33

end5:                                             ; preds = %true32, %false33, %true10, %false11
  %findattribval.1 = phi i64 [ %return19, %true10 ], [ %return27, %false11 ], [ %return39, %true32 ], [ %return44, %false33 ]
  %return45 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0))
  %4 = icmp ne i64 %return45, 0
  br i1 %4, label %true46, label %end

true10:                                           ; preds = %true3
  %_bound_class_str15 = load i8*, i8** %_bound_class_str
  %return16 = call i64* @"findattribval@[IISSS"(i64 0, i8* %return6, i8* %return7, i8* %_bound_class_str15)
  %return17 = call i64 @"neg@II"(i64 1)
  %return18 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0))
  %output = sub i64 %return17, %return18
  %return19 = call i64 @"getcomp@I[II"(i64* %return16, i64 %output)
  br label %end5

false11:                                          ; preds = %true3
  %_bound_class_int22 = load i64, i64* %_bound_class_int
  %return23 = call i64* @"findattribval@[IISSI"(i64 0, i8* %return6, i8* %return7, i64 %_bound_class_int22)
  %return24 = call i64 @"neg@II"(i64 1)
  %return25 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0))
  %output26 = sub i64 %return24, %return25
  %return27 = call i64 @"getcomp@I[II"(i64* %return23, i64 %output26)
  br label %end5

true32:                                           ; preds = %false4
  %_bound_class_str37 = load i8*, i8** %_bound_class_str
  %return38 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0))
  %return39 = call i64 @"findattribval@IISSSI"(i64 0, i8* %return6, i8* %return7, i8* %_bound_class_str37, i64 %return38)
  br label %end5

false33:                                          ; preds = %false4
  %_bound_class_int42 = load i64, i64* %_bound_class_int
  %return43 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0))
  %return44 = call i64 @"findattribval@IISSII"(i64 0, i8* %return6, i8* %return7, i64 %_bound_class_int42, i64 %return43)
  br label %end5

true46:                                           ; preds = %end5
  %return48 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @6, i64 0, i64 0))
  %return49 = call i64 @"eq@III"(i64 %return48, i64 0)
  %5 = icmp ne i64 %return49, 0
  br i1 %5, label %true50, label %false51

true50:                                           ; preds = %true46
  store i64 %findattribval.1, i64* %_bound_enum_int
  br label %end

false51:                                          ; preds = %true46
  %return55 = call i64 @"eq@III"(i64 %return48, i64 1)
  %6 = icmp ne i64 %return55, 0
  br i1 %6, label %true56, label %false57

true56:                                           ; preds = %false51
  %cast = sitofp i64 %findattribval.1 to double
  store double %cast, double* %_bound_enum_flt
  br label %end

false57:                                          ; preds = %false51
  %return60 = call i8* @"chs@SS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @7, i64 0, i64 0))
  %return62 = call i8* @"itoa@SI"(i64 %findattribval.1)
  %return63 = call i8* @"chs@SS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @8, i64 0, i64 0))
  %return64 = call i8* @"concat@SSS:S"(i8* %return60, i8* %return62, i8* %return63)
  store i8* %return64, i8** %_bound_enum_str
  br label %end

true66:                                           ; preds = %end
  %return68 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @10, i64 0, i64 0))
  %7 = icmp ne i64 %return68, 0
  %_bound_elemnum72 = load i64, i64* %_bound_elemnum
  br i1 %7, label %true69, label %false70

end67:                                            ; preds = %true69, %false70, %end
  %return78 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @11, i64 0, i64 0))
  %8 = icmp ne i64 %return78, 0
  br i1 %8, label %true79, label %end80

true69:                                           ; preds = %true66
  %return74 = call i64 @"ne@III"(i64 %_bound_elemnum72, i64 %findattribval.0)
  store i64 %return74, i64* %_bound_outgroup
  br label %end67

false70:                                          ; preds = %true66
  %return77 = call i64 @"eq@III"(i64 %_bound_elemnum72, i64 %findattribval.0)
  store i64 %return77, i64* %_bound_outgroup
  br label %end67

true79:                                           ; preds = %end67
  %return81 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @10, i64 0, i64 0))
  %9 = icmp ne i64 %return81, 0
  %_bound_elemnum85 = load i64, i64* %_bound_elemnum
  br i1 %9, label %true82, label %false83

end80:                                            ; preds = %true82, %false83, %end67
  %return91 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0))
  %return92 = call i64 @"chi@IS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @12, i64 0, i64 0))
  %return93 = call i64 @"and@III"(i64 %return91, i64 %return92)
  %10 = icmp ne i64 %return93, 0
  br i1 %10, label %true94, label %end95

true82:                                           ; preds = %true79
  %return87 = call i64 @"ne@III"(i64 %_bound_elemnum85, i64 %findattribval.0)
  store i64 %return87, i64* %_bound_intattrib
  br label %end80

false83:                                          ; preds = %true79
  %return90 = call i64 @"eq@III"(i64 %_bound_elemnum85, i64 %findattribval.0)
  store i64 %return90, i64* %_bound_intattrib
  br label %end80

true94:                                           ; preds = %end80
  %_bound_elemnum96 = load i64, i64* %_bound_elemnum
  %return98 = call i64 @"eq@III"(i64 %_bound_elemnum96, i64 %findattribval.0)
  %11 = icmp ne i64 %return98, 0
  br i1 %11, label %true99, label %end95

end95:                                            ; preds = %true94, %true99, %end80
  ret void

true99:                                           ; preds = %true94
  %return101 = call i8* @"chs@SS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @13, i64 0, i64 0))
  %return103 = call i64 @"setdetailattrib@IISIS"(i64 0, i8* %return101, i64 %_bound_elemnum96, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @14, i64 0, i64 0))
  br label %end95
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"attribtype@IISS"(i64, i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64* @"findattribval@[IISSS"(i64, i8*, i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64* @"findattribval@[IISSI"(i64, i8*, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"findattribval@IISSSI"(i64, i8*, i8*, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"findattribval@IISSII"(i64, i8*, i8*, i64, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #1

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS:S"(i8*, i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"setdetailattrib@IISIS"(i64, i8*, i64, i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %enum_int, i8* %class_str, i64 %class_int, double %enum_flt, i8* %enum_str, i64 %outgroup, i64 %elemnum, i64 %intattrib) #2 {
__llvm_entry:
  %"<enum_flt>" = alloca double
  %"<enum_str>" = alloca i8*
  %"<outgroup>" = alloca i64
  %"<intattrib>" = alloca i64
  %0 = alloca i8*
  %1 = alloca i64
  %2 = alloca i64
  %"<enum_int>" = alloca i64
  store i64 %enum_int, i64* %"<enum_int>"
  store double %enum_flt, double* %"<enum_flt>"
  store i8* %enum_str, i8** %"<enum_str>"
  store i64 %outgroup, i64* %"<outgroup>"
  store i64 %intattrib, i64* %"<intattrib>"
  store i8* %class_str, i8** %0
  store i64 %class_int, i64* %1
  store i64 %elemnum, i64* %2
  call void @"__vex_snippet_snippet@ISIFSIII"(i64* %"<enum_int>", i8** %0, i64* %1, double* %"<enum_flt>", i8** %"<enum_str>", i64* %"<outgroup>", i64* %2, i64* %"<intattrib>")
  %evalue = load i64, i64* %"<enum_int>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @16, i64 0, i64 0), i64 %evalue) #3
  %gvalue5 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @17, i64 0, i64 0), i8* %class_str) #3
  %gvalue7 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @18, i64 0, i64 0), i64 %class_int) #3
  %evalue8 = load double, double* %"<enum_flt>"
  %gvalue9 = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @19, i64 0, i64 0), double %evalue8) #3
  %evalue10 = load i8*, i8** %"<enum_str>"
  %gvalue11 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @20, i64 0, i64 0), i8* %evalue10) #3
  %evalue12 = load i64, i64* %"<outgroup>"
  %gvalue13 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @21, i64 0, i64 0), i64 %evalue12) #3
  %gvalue15 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @22, i64 0, i64 0), i64 %elemnum) #3
  %evalue16 = load i64, i64* %"<intattrib>"
  %gvalue17 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @23, i64 0, i64 0), i64 %evalue16) #3
  store i64 %gvalue, i64* @enum_int
  store i8* %gvalue5, i8** @class_str
  store i64 %gvalue7, i64* @class_int
  store double %gvalue9, double* @enum_flt
  store i8* %gvalue11, i8** @enum_str
  store i64 %gvalue13, i64* @outgroup
  store i64 %gvalue15, i64* @elemnum
  store i64 %gvalue17, i64* @intattrib
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i8* @"_export@SSS"(i8*, i8*)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @15, i64 0, i64 0), i64 0, double 0.000000e+00, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @15, i64 0, i64 0), i64 0, i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

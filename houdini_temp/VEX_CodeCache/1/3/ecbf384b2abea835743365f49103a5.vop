;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [23 x i8] c"scatternearinputpoints\00"
@1 = private constant [1 x i8] zeroinitializer
@2 = private constant [11 x i8] c"mask_layer\00"
@3 = private constant [8 x i8] c"minmask\00"
@4 = private constant [9 x i8] c"has_mask\00"
@5 = private constant [20 x i8] c"allow_out_of_bounds\00"
@mask = external global double
@rmflag = external global double
@uv = external global <3 x double>
@6 = private constant [5 x i8] c"mask\00"
@7 = private constant [7 x i8] c"rmflag\00"
@8 = private constant [3 x i8] c"uv\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FFV"(double* %_bound_mask, double* %_bound_rmflag, <3 x double>* %_bound_uv) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @0, i64 0, i64 0))
  %return1 = call i8* @"chs@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0))
  %return2 = call double @"ch@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0))
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0))
  %return5 = call i64 @"le@III"(i64 %return, i64 2)
  %return7 = call i64 @"and@III"(i64 %return5, i64 %return3)
  %return9 = call i64 @"ne@ISS"(i8* %return1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0))
  %return10 = call i64 @"and@III"(i64 %return7, i64 %return9)
  %_bound_mask11 = load double, double* %_bound_mask
  %return13 = fcmp olt double %_bound_mask11, %return2
  %return14 = zext i1 %return13 to i64
  %return15 = call i64 @"and@III"(i64 %return10, i64 %return14)
  %0 = icmp ne i64 %return15, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %_bound_rmflag
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %return16 = call i64 @"chi@IS"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @5, i64 0, i64 0))
  %return18 = call i64 @"not@II"(i64 %return16)
  %_bound_uv19 = load <3 x double>, <3 x double>* %_bound_uv
  %return20 = call double @"getcomp@FVI"(<3 x double> %_bound_uv19, i64 0)
  %return21 = fcmp olt double %return20, 0.000000e+00
  %return22 = zext i1 %return21 to i64
  %return25 = fcmp ogt double %return20, 1.000000e+00
  %return26 = zext i1 %return25 to i64
  %return27 = call i64 @"or@III"(i64 %return22, i64 %return26)
  %return29 = call double @"getcomp@FVI"(<3 x double> %_bound_uv19, i64 1)
  %return30 = fcmp olt double %return29, 0.000000e+00
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %return35 = fcmp ogt double %return29, 1.000000e+00
  %return36 = zext i1 %return35 to i64
  %return37 = call i64 @"or@III"(i64 %return32, i64 %return36)
  %return39 = call double @"getcomp@FVI"(<3 x double> %_bound_uv19, i64 2)
  %return40 = fcmp olt double %return39, 0.000000e+00
  %return41 = zext i1 %return40 to i64
  %return42 = call i64 @"or@III"(i64 %return37, i64 %return41)
  %return45 = fcmp ogt double %return39, 1.000000e+00
  %return46 = zext i1 %return45 to i64
  %return47 = call i64 @"or@III"(i64 %return42, i64 %return46)
  %return48 = call i64 @"and@III"(i64 %return18, i64 %return47)
  %1 = icmp ne i64 %return48, 0
  br i1 %1, label %true49, label %end50

true49:                                           ; preds = %end
  store double 1.000000e+00, double* %_bound_rmflag
  br label %end50

end50:                                            ; preds = %true49, %end
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"le@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %mask, double %rmflag, <3 x double> %uv) #2 {
__llvm_entry:
  %"<rmflag>" = alloca double
  %0 = alloca double
  %1 = alloca <3 x double>
  store double %rmflag, double* %"<rmflag>"
  store double %mask, double* %0
  store <3 x double> %uv, <3 x double>* %1
  call void @"__vex_snippet_snippet@FFV"(double* %0, double* %"<rmflag>", <3 x double>* %1)
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i64 0, i64 0), double %mask) #3
  %evalue3 = load double, double* %"<rmflag>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), double %evalue3) #3
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @8, i64 0, i64 0), <3 x double> %uv) #3
  store double %gvalue, double* @mask
  store double %gvalue4, double* @rmflag
  store <3 x double> %gvalue6, <3 x double>* @uv
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [20 x i8] c"../pcentergrouptype\00"
@1 = private constant [16 x i8] c"../pcentergroup\00"
@center = external global <3 x double>
@2 = private constant [7 x i8] c"center\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@V"(<3 x double>* %_bound_center) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"eq@III"(i64 %return, i64 3)
  %0 = icmp ne i64 %return1, 0
  %return2 = call i8* @"chs@SS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1, i64 0, i64 0))
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return3 = call <3 x double> @"getpointbbox_center@VIS"(i64 1, i8* %return2)
  store <3 x double> %return3, <3 x double>* %_bound_center
  br label %end

false:                                            ; preds = %__llvm_entry
  %return5 = call <3 x double> @"getbbox_center@VIS"(i64 1, i8* %return2)
  store <3 x double> %return5, <3 x double>* %_bound_center
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"getpointbbox_center@VIS"(i64, i8*) #2

; Function Attrs: nounwind
declare <3 x double> @"getbbox_center@VIS"(i64, i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %center) #2 {
__llvm_entry:
  %"<center>" = alloca <3 x double>
  store <3 x double> %center, <3 x double>* %"<center>"
  call void @"__vex_snippet_snippet@V"(<3 x double>* %"<center>")
  %evalue = load <3 x double>, <3 x double>* %"<center>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), <3 x double> %evalue) #3
  store <3 x double> %gvalue, <3 x double>* @center
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

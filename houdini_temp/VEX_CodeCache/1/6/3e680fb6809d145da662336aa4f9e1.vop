;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@orgP = external global <3 x double>
@P = external global <3 x double>
@uv = external global <3 x double>
@0 = private constant [5 x i8] c"orgP\00"
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [3 x i8] c"uv\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVV"(<3 x double>* %_bound_orgP, <3 x double>* %_bound_P, <3 x double>* %_bound_uv) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  store <3 x double> %_bound_P1, <3 x double>* %_bound_orgP
  %_bound_uv2 = load <3 x double>, <3 x double>* %_bound_uv
  %return = call double @"getcomp@FVI"(<3 x double> %_bound_uv2, i64 0)
  %tmp = load <3 x double>, <3 x double>* %_bound_P
  %return3 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %return, i64 0)
  %output = extractvalue { double, <3 x double> } %return3, 1
  store <3 x double> %output, <3 x double>* %_bound_P
  %return6 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output, double 0.000000e+00, i64 1)
  %output8 = extractvalue { double, <3 x double> } %return6, 1
  store <3 x double> %output8, <3 x double>* %_bound_P
  %_bound_uv9 = load <3 x double>, <3 x double>* %_bound_uv
  %return10 = call double @"getcomp@FVI"(<3 x double> %_bound_uv9, i64 1)
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output8, double %return10, i64 2)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %orgP, <3 x double> %P, <3 x double> %uv) #3 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %"<orgP>" = alloca <3 x double>
  store <3 x double> %orgP, <3 x double>* %"<orgP>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %uv, <3 x double>* %0
  call void @"__vex_snippet_snippet@VVV"(<3 x double>* %"<orgP>", <3 x double>* %"<P>", <3 x double>* %0)
  %evalue = load <3 x double>, <3 x double>* %"<orgP>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0), <3 x double> %evalue) #4
  %evalue2 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue2) #4
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), <3 x double> %uv) #4
  store <3 x double> %gvalue, <3 x double>* @orgP
  store <3 x double> %gvalue3, <3 x double>* @P
  store <3 x double> %gvalue5, <3 x double>* @uv
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

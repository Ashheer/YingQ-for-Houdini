;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"group\00"
@1 = private constant [2 x i8] c"P\00"
@ptnum = external global i64
@P = external global <3 x double>
@2 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IV"(i64* %_bound_ptnum, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64* @"neighbours@[III"(i64 0, i64 %_bound_ptnum1)
  %return3 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %true, %__llvm_entry
  %__impl_foreach_index_165.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %true ]
  %return6 = call i64 @"lt@III"(i64 %__impl_foreach_index_165.0, i64 %return3)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return9 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_165.0)
  %return10 = call i8* @"chs@SS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0))
  %return12 = call i64 @"inpointgroup@IISI"(i64 0, i8* %return10, i64 %return9)
  %1 = icmp ne i64 %return12, 0
  br i1 %1, label %true, label %end13

end:                                              ; preds = %end13, %cond
  %nebpos.0 = phi <3 x double> [ %return15, %end13 ], [ zeroinitializer, %cond ]
  %_bound_P17 = load <3 x double>, <3 x double>* %_bound_P
  %output19 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P17, <3 x double> %nebpos.0)
  %return20 = call <3 x double> @"normalize@VV"(<3 x double> %output19)
  %_bound_P21 = load <3 x double>, <3 x double>* %_bound_P
  %cast = call <3 x double> @"set@VF"(double 1.000000e-01)
  %output23 = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %return20)
  %output24 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P21, <3 x double> %output23)
  %cast26 = call <3 x double> @"set@VF"(double 1.000000e+05)
  %output27 = call <3 x double> @"mul@VV"(<3 x double> %cast26, <3 x double> %return20)
  %return28 = call { i64, <3 x double>, <3 x double> } @"intersect@IIVVVV"(i64 2, <3 x double> %output24, <3 x double> %output27)
  %output30 = extractvalue { i64, <3 x double>, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %_bound_P
  ret void

true:                                             ; preds = %body
  %output = add i64 %__impl_foreach_index_165.0, 1
  br label %cond

end13:                                            ; preds = %body
  %return15 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return9)
  br label %end
}

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind
declare i64 @"inpointgroup@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare { i64, <3 x double>, <3 x double> } @"intersect@IIVVVV"(i64, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %P) #1 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@IV"(i64* %0, <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue2) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue3, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

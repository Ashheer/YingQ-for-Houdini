;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [17 x i8] c"../outside_group\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound___partition_attrib, i64* %_bound_primnum) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @0, i64 0, i64 0))
  %_bound___partition_attrib2 = load i64, i64* %_bound___partition_attrib
  %return3 = call i8* @"itoa@SI"(i64 %_bound___partition_attrib2)
  %return4 = call i8* @"concat@SSS"(i8* %return, i8* %return3)
  %_bound_primnum5 = load i64, i64* %_bound_primnum
  %return6 = call i64 @"setprimgroup@IISII"(i64 0, i8* %return4, i64 %_bound_primnum5, i64 1)
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #1

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i64 @"setprimgroup@IISII"(i64, i8*, i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %__partition_attrib, i64 %primnum) #2 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  store i64 %__partition_attrib, i64* %0
  store i64 %primnum, i64* %1
  call void @"__vex_snippet_snippet@II"(i64* %0, i64* %1)
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

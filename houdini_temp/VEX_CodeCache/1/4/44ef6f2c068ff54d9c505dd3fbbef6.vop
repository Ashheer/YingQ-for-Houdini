;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"remap\00"
@Cd = external global <3 x double>
@class = external global double
@1 = private constant [3 x i8] c"Cd\00"
@2 = private constant [6 x i8] c"class\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VF"(<3 x double>* %_bound_Cd, double* %_bound_class) #0 {
__llvm_entry:
  %_bound_class1 = load double, double* %_bound_class
  %output = fmul double %_bound_class1, 0.000000e+00
  %return = call <3 x double> @"rand@VF"(double %output)
  %return3 = call double @"getcomp@FVI"(<3 x double> %return, i64 0)
  %return4 = call <3 x double> @"chramp@VSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), double %return3)
  store <3 x double> %return4, <3 x double>* %_bound_Cd
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"rand@VF"(double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"chramp@VSF"(i8*, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %Cd, double %class) #1 {
__llvm_entry:
  %0 = alloca double
  %"<Cd>" = alloca <3 x double>
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store double %class, double* %0
  call void @"__vex_snippet_snippet@VF"(<3 x double>* %"<Cd>", double* %0)
  %evalue = load <3 x double>, <3 x double>* %"<Cd>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), double %class) #3
  store <3 x double> %gvalue, <3 x double>* @Cd
  store double %gvalue3, double* @class
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

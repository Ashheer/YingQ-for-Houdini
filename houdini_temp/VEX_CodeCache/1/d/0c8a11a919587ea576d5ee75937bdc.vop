;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [5 x i8] c"isle\00"
@2 = private constant [4 x i8] c"set\00"
@islands = external global i64*
@3 = private constant [8 x i8] c"islands\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[I"(i64** %_bound_islands) #0 {
__llvm_entry:
  %return = call i64 @"nprimitives@II"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output10, %body ]
  %test.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %__llvm_entry ], [ %output, %body ]
  %return3 = call i64 @"le@III"(i64 %i.0, i64 %return)
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return5 = call i64 @"prim@IISI"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %i.0)
  %output = call i64* @"push@[II"(i64* %test.0, i64 %return5)
  %output10 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  br label %cond12

cond12:                                           ; preds = %end52, %end
  %oisle.0 = phi i64 [ 0, %end ], [ %output85, %end52 ]
  %test.1 = phi i64* [ %test.0, %end ], [ %test.2, %end52 ]
  %return16 = call i64 @"le@III"(i64 %oisle.0, i64 %return)
  %1 = icmp ne i64 %return16, 0
  br i1 %1, label %body13, label %end17

body13:                                           ; preds = %cond12
  %return20 = call i64 @"primhedge@III"(i64 0, i64 %oisle.0)
  store i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), i64** %_bound_islands
  br label %body23

end17:                                            ; preds = %cond12
  ret void

body23:                                           ; preds = %body23, %body13
  %h.0 = phi i64 [ %return20, %body13 ], [ %return44, %body23 ]
  %return34 = call i64 @"hedge_nextequiv@III"(i64 0, i64 %h.0)
  %return35 = call i64 @"hedge_prim@III"(i64 0, i64 %return34)
  %return39 = call i64 @"getcomp@I[II"(i64* %test.1, i64 %return35)
  %_bound_islands40 = load i64*, i64** %_bound_islands
  %output42 = call i64* @"push@[II"(i64* %_bound_islands40, i64 %return39)
  store i64* %output42, i64** %_bound_islands
  %return44 = call i64 @"hedge_next@III"(i64 0, i64 %h.0)
  %return26 = call i64 @"ne@III"(i64 %return44, i64 %return20)
  %return28 = call i64 @"neg@II"(i64 1)
  %return29 = call i64 @"ne@III"(i64 %return44, i64 %return28)
  %return30 = call i64 @"and@III"(i64 %return26, i64 %return29)
  %2 = icmp ne i64 %return30, 0
  br i1 %2, label %body23, label %end31

end31:                                            ; preds = %body23
  %_bound_islands45 = load i64*, i64** %_bound_islands
  %return47 = call i64 @"prim@IISI"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %oisle.0)
  %return48 = call i64* @"find@[I[II"(i64* %_bound_islands45, i64 %return47)
  %return50 = call i64 @"len@I[I"(i64* %return48)
  %return51 = call i64 @"eq@III"(i64 %return50, i64 1)
  %3 = icmp ne i64 %return51, 0
  br i1 %3, label %true, label %end52

true:                                             ; preds = %end31
  %_bound_islands53 = load i64*, i64** %_bound_islands
  %return54 = call i64 @"len@I[I"(i64* %_bound_islands53)
  br label %cond55

end52:                                            ; preds = %cond55, %true71, %end31
  %test.2 = phi i64* [ %output80, %true71 ], [ %test.1, %cond55 ], [ %test.1, %end31 ]
  %output85 = add i64 %oisle.0, 1
  br label %cond12

cond55:                                           ; preds = %end72, %true
  %__impl_foreach_index.0 = phi i64 [ 0, %true ], [ %output82, %end72 ]
  %return59 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return54)
  %4 = icmp ne i64 %return59, 0
  br i1 %4, label %body56, label %end52

body56:                                           ; preds = %cond55
  %_bound_islands62 = load i64*, i64** %_bound_islands
  %return64 = call i64 @"getcomp@I[II"(i64* %_bound_islands62, i64 %__impl_foreach_index.0)
  %return67 = call i64* @"find@[I[II"(i64* %_bound_islands62, i64 %return64)
  %return69 = call i64 @"len@I[I"(i64* %return67)
  %return70 = call i64 @"eq@III"(i64 %return69, i64 2)
  %5 = icmp ne i64 %return70, 0
  br i1 %5, label %true71, label %end72

true71:                                           ; preds = %body56
  %return75 = call i64 @"setprimattrib@IISIIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %oisle.0, i64 %return64, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i64 0, i64 0))
  %return78 = call { i64, i64* } @"setcomp@I[III"(i64* %test.1, i64 %return64, i64 %oisle.0)
  %output80 = extractvalue { i64, i64* } %return78, 1
  br label %end52

end72:                                            ; preds = %body56
  %output82 = add i64 %__impl_foreach_index.0, 1
  br label %cond55
}

; Function Attrs: nounwind
declare i64 @"nprimitives@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"le@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"prim@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64* @"push@[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"primhedge@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"hedge_nextequiv@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"hedge_prim@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"hedge_next@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64* @"find@[I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"setprimattrib@IISIIS"(i64, i8*, i64, i64, i8*) #1

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64* %islands) #1 {
__llvm_entry:
  %"<islands>" = alloca i64*
  store i64* %islands, i64** %"<islands>"
  call void @"__vex_snippet_snippet@[I"(i64** %"<islands>")
  %evalue = load i64*, i64** %"<islands>"
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i64* %evalue) #3
  store i64* %gvalue, i64** @islands
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

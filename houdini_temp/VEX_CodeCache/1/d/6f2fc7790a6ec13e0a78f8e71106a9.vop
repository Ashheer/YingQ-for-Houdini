;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [18 x i8] c"blendtowardtarget\00"
@1 = private constant [12 x i8] c"blendtarget\00"
@2 = private constant [2 x i8] c"x\00"
@3 = private constant [2 x i8] c"y\00"
@4 = private constant [2 x i8] c"z\00"
@5 = private constant [7 x i8] c"custom\00"
@6 = private constant [10 x i8] c"targetdir\00"
@7 = private constant [12 x i8] c"blendamount\00"
@8 = private constant [10 x i8] c"coneangle\00"
@9 = private constant [19 x i8] c"outputradiusattrib\00"
@10 = private constant [13 x i8] c"radiusattrib\00"
@11 = private constant [19 x i8] c"outputorientattrib\00"
@12 = private constant [8 x i8] c"perprot\00"
@13 = private constant [15 x i8] c"perprotrandmin\00"
@14 = private constant [15 x i8] c"perprotrandmax\00"
@15 = private constant [15 x i8] c"useperprotramp\00"
@16 = private constant [12 x i8] c"perprotramp\00"
@17 = private constant [13 x i8] c"roundperprot\00"
@18 = private constant [13 x i8] c"perprandstep\00"
@19 = private constant [11 x i8] c"initnormal\00"
@20 = private constant [17 x i8] c"initnormalcustom\00"
@21 = private constant [7 x i8] c"initup\00"
@22 = private constant [13 x i8] c"initupcustom\00"
@23 = private constant [7 x i8] c"upbias\00"
@24 = private constant [7 x i8] c"nobias\00"
@25 = private constant [13 x i8] c"upbiascustom\00"
@26 = private constant [13 x i8] c"orientattrib\00"
@__blend_target_attrib = external global <3 x double>
@N = external global <3 x double>
@__blend_attrib = external global double
@ptnum = external global i64
@__cone_attrib = external global double
@__pscale = external global double
@__basenml_attrib = external global double
@__up_target_attrib = external global <3 x double>
@__orient = external global <4 x double>
@27 = private constant [22 x i8] c"__blend_target_attrib\00"
@28 = private constant [2 x i8] c"N\00"
@29 = private constant [15 x i8] c"__blend_attrib\00"
@30 = private constant [6 x i8] c"ptnum\00"
@31 = private constant [14 x i8] c"__cone_attrib\00"
@32 = private constant [9 x i8] c"__pscale\00"
@33 = private constant [17 x i8] c"__basenml_attrib\00"
@34 = private constant [19 x i8] c"__up_target_attrib\00"
@35 = private constant [9 x i8] c"__orient\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVFIFFFVP"(<3 x double>* %_bound___blend_target_attrib, <3 x double>* %_bound_N, double* %_bound___blend_attrib, i64* %_bound_ptnum, double* %_bound___cone_attrib, double* %_bound___pscale, double* %_bound___basenml_attrib, <3 x double>* %_bound___up_target_attrib, <4 x double>* %_bound___orient) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return1 = call i8* @"chs@SS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i64 0, i64 0))
  %return3 = call i64 @"eq@ISS"(i8* %return1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0))
  %1 = icmp ne i64 %return3, 0
  br i1 %1, label %true4, label %false

end:                                              ; preds = %end35, %__llvm_entry
  %_bound_ptnum68 = load i64, i64* %_bound_ptnum
  %cast69 = sitofp i64 %_bound_ptnum68 to double
  %return70 = call i64 @"random_fhash@IF"(double %cast69)
  %return72 = call i64 @"mod@III"(i64 %return70, i64 65536)
  %cast73 = sitofp i64 %return72 to double
  %output75 = call i64 @"div@II"(i64 %return70, i64 65536)
  %cast76 = sitofp i64 %output75 to double
  %return77 = call <2 x double> @"set@UFF"(double %cast73, double %cast76)
  %return78 = call i64 @"random_fhash@IU"(<2 x double> %return77)
  %return79 = call double @"ch@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @8, i64 0, i64 0))
  %return80 = call double @"radians@FF"(double %return79)
  %_bound___cone_attrib82 = load double, double* %_bound___cone_attrib
  %output83 = fmul double %return80, %_bound___cone_attrib82
  %_bound_N84 = load <3 x double>, <3 x double>* %_bound_N
  %return87 = call double @"random@FI"(i64 %return70)
  %return89 = call double @"random@FI"(i64 %return78)
  %return90 = call <2 x double> @"set@UFF"(double %return87, double %return89)
  %return91 = call <3 x double> @"sample_direction_cone@VVFU"(<3 x double> %_bound_N84, double %output83, <2 x double> %return90)
  store <3 x double> %return91, <3 x double>* %_bound_N
  %return92 = call i64 @"chi@IS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @9, i64 0, i64 0))
  %2 = icmp ne i64 %return92, 0
  br i1 %2, label %true93, label %end94

true4:                                            ; preds = %true
  %return6 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double 0.000000e+00, double 0.000000e+00)
  br label %end5

false:                                            ; preds = %true
  %return8 = call i64 @"eq@ISS"(i8* %return1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0))
  %3 = icmp ne i64 %return8, 0
  br i1 %3, label %true9, label %false10

end5:                                             ; preds = %true21, %false22, %true15, %true9, %true4
  %target_dir.0 = phi <3 x double> [ %return6, %true4 ], [ %return12, %true9 ], [ %return18, %true15 ], [ %return25, %true21 ], [ %return27, %false22 ]
  %_bound_N28 = load <3 x double>, <3 x double>* %_bound_N
  %return29 = call double @"length@FV"(<3 x double> %_bound_N28)
  %_bound_N30 = load <3 x double>, <3 x double>* %_bound_N
  %return32 = fcmp one double %return29, 0.000000e+00
  br i1 %return32, label %true34, label %end35

true9:                                            ; preds = %false
  %return12 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 1.000000e+00, double 0.000000e+00)
  br label %end5

false10:                                          ; preds = %false
  %return14 = call i64 @"eq@ISS"(i8* %return1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0))
  %4 = icmp ne i64 %return14, 0
  br i1 %4, label %true15, label %false16

true15:                                           ; preds = %false10
  %return18 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 1.000000e+00)
  br label %end5

false16:                                          ; preds = %false10
  %return20 = call i64 @"eq@ISS"(i8* %return1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0))
  %5 = icmp ne i64 %return20, 0
  br i1 %5, label %true21, label %false22

true21:                                           ; preds = %false16
  %return24 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @6, i64 0, i64 0))
  %return25 = call <3 x double> @"normalize@VV"(<3 x double> %return24)
  br label %end5

false22:                                          ; preds = %false16
  %_bound___blend_target_attrib26 = load <3 x double>, <3 x double>* %_bound___blend_target_attrib
  %return27 = call <3 x double> @"normalize@VV"(<3 x double> %_bound___blend_target_attrib26)
  br label %end5

true34:                                           ; preds = %end5
  %cast = call <3 x double> @"set@VF"(double %return29)
  %output = call <3 x double> @"div@VV"(<3 x double> %_bound_N30, <3 x double> %cast)
  br label %end35

end35:                                            ; preds = %true34, %end5
  %normal.0 = phi <3 x double> [ %output, %true34 ], [ %_bound_N30, %end5 ]
  %return38 = call double @"ch@FS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i64 0, i64 0))
  %_bound___blend_attrib40 = load double, double* %_bound___blend_attrib
  %output41 = fmul double %return38, %_bound___blend_attrib40
  %return45 = call double @"dot@FVV"(<3 x double> %normal.0, <3 x double> %target_dir.0)
  %return46 = call double @"acos@FF"(double %return45)
  %output47 = fmul double %output41, %return46
  %return50 = call <3 x double> @"cross@VVV"(<3 x double> %normal.0, <3 x double> %target_dir.0)
  %return51 = call <3 x double> @"normalize@VV"(<3 x double> %return50)
  %return54 = call double @"cos@FF"(double %output47)
  %cast56 = call <3 x double> @"set@VF"(double %return54)
  %output57 = call <3 x double> @"mul@VV"(<3 x double> %cast56, <3 x double> %normal.0)
  %return59 = call double @"sin@FF"(double %output47)
  %return62 = call <3 x double> @"cross@VVV"(<3 x double> %return51, <3 x double> %normal.0)
  %cast63 = call <3 x double> @"set@VF"(double %return59)
  %output64 = call <3 x double> @"mul@VV"(<3 x double> %cast63, <3 x double> %return62)
  %output65 = call <3 x double> @"add@VV"(<3 x double> %output57, <3 x double> %output64)
  %cast66 = call <3 x double> @"set@VF"(double %return29)
  %output67 = call <3 x double> @"mul@VV"(<3 x double> %cast66, <3 x double> %output65)
  store <3 x double> %output67, <3 x double>* %_bound_N
  br label %end

true93:                                           ; preds = %end
  %return95 = call i8* @"chs@SS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @10, i64 0, i64 0))
  %_bound_ptnum96 = load i64, i64* %_bound_ptnum
  %_bound___pscale97 = load double, double* %_bound___pscale
  %return98 = call i64 @"setpointattrib@IISIF"(i64 0, i8* %return95, i64 %_bound_ptnum96, double %_bound___pscale97)
  br label %end94

end94:                                            ; preds = %true93, %end
  %return99 = call i64 @"chi@IS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @11, i64 0, i64 0))
  %6 = icmp ne i64 %return99, 0
  br i1 %6, label %true100, label %end101

true100:                                          ; preds = %end94
  %return102 = call double @"ch@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @12, i64 0, i64 0))
  %return103 = call double @"radians@FF"(double %return102)
  %_bound___basenml_attrib105 = load double, double* %_bound___basenml_attrib
  %output106 = fmul double %return103, %_bound___basenml_attrib105
  %return107 = call double @"ch@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @13, i64 0, i64 0))
  %return108 = call double @"radians@FF"(double %return107)
  %return109 = call double @"ch@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @14, i64 0, i64 0))
  %return110 = call double @"radians@FF"(double %return109)
  %_bound_ptnum111 = load i64, i64* %_bound_ptnum
  %output112 = mul i64 2, %_bound_ptnum111
  %cast113 = sitofp i64 %output112 to double
  %return114 = call double @"rand@FF"(double %cast113)
  %return115 = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @15, i64 0, i64 0))
  %7 = icmp ne i64 %return115, 0
  br i1 %7, label %true116, label %end117

end101:                                           ; preds = %end196, %end94
  ret void

true116:                                          ; preds = %true100
  %return119 = call double @"chramp@FSF"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @16, i64 0, i64 0), double %return114)
  br label %end117

end117:                                           ; preds = %true116, %true100
  %r.0 = phi double [ %return119, %true116 ], [ %return114, %true100 ]
  %return123 = call double @"lerp@FFFF"(double %return108, double %return110, double %r.0)
  %return124 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @17, i64 0, i64 0))
  %8 = icmp ne i64 %return124, 0
  br i1 %8, label %true125, label %end126

true125:                                          ; preds = %end117
  %return127 = call double @"ch@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @18, i64 0, i64 0))
  %return128 = call double @"radians@FF"(double %return127)
  %output132 = call double @"div@FF"(double %return123, double %return128)
  %return133 = call double @"rint@FF"(double %output132)
  %output134 = fmul double %return128, %return133
  %return137 = call double @"max@FFF"(double %output134, double %return108)
  %return140 = call double @"min@FFF"(double %return137, double %return110)
  br label %end126

end126:                                           ; preds = %true125, %end117
  %perprotrand.0 = phi double [ %return140, %true125 ], [ %return123, %end117 ]
  %output143 = fadd double %output106, %perprotrand.0
  %_bound_N145 = load <3 x double>, <3 x double>* %_bound_N
  %return146 = call <3 x double> @"normalize@VV"(<3 x double> %_bound_N145)
  %return147 = call i8* @"chs@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @19, i64 0, i64 0))
  %return149 = call i64 @"eq@ISS"(i8* %return147, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0))
  %9 = icmp ne i64 %return149, 0
  br i1 %9, label %true150, label %false151

true150:                                          ; preds = %end126
  %return153 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double 0.000000e+00, double 0.000000e+00)
  br label %end152

false151:                                         ; preds = %end126
  %return155 = call i64 @"eq@ISS"(i8* %return147, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0))
  %10 = icmp ne i64 %return155, 0
  br i1 %10, label %true156, label %false157

end152:                                           ; preds = %true162, %false163, %true156, %true150
  %orig_nml.0 = phi <3 x double> [ %return153, %true150 ], [ %return159, %true156 ], [ %return165, %true162 ], [ %return167, %false163 ]
  %return170 = call <4 x double> @"dihedral@PVV"(<3 x double> %orig_nml.0, <3 x double> %return146)
  %return171 = call i8* @"chs@SS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @21, i64 0, i64 0))
  %return173 = call i64 @"eq@ISS"(i8* %return171, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0))
  %11 = icmp ne i64 %return173, 0
  br i1 %11, label %true174, label %false175

true156:                                          ; preds = %false151
  %return159 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 1.000000e+00, double 0.000000e+00)
  br label %end152

false157:                                         ; preds = %false151
  %return161 = call i64 @"eq@ISS"(i8* %return147, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0))
  %12 = icmp ne i64 %return161, 0
  br i1 %12, label %true162, label %false163

true162:                                          ; preds = %false157
  %return165 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 1.000000e+00)
  br label %end152

false163:                                         ; preds = %false157
  %return166 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @20, i64 0, i64 0))
  %return167 = call <3 x double> @"normalize@VV"(<3 x double> %return166)
  br label %end152

true174:                                          ; preds = %end152
  %return177 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double 0.000000e+00, double 0.000000e+00)
  br label %end176

false175:                                         ; preds = %end152
  %return179 = call i64 @"eq@ISS"(i8* %return171, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0))
  %13 = icmp ne i64 %return179, 0
  br i1 %13, label %true180, label %false181

end176:                                           ; preds = %true186, %false187, %true180, %true174
  %init_up_vec.0 = phi <3 x double> [ %return177, %true174 ], [ %return183, %true180 ], [ %return189, %true186 ], [ %return191, %false187 ]
  %return192 = call i8* @"chs@SS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @23, i64 0, i64 0))
  %return194 = call i64 @"ne@ISS"(i8* %return192, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @24, i64 0, i64 0))
  %14 = icmp ne i64 %return194, 0
  br i1 %14, label %true195, label %end196

true180:                                          ; preds = %false175
  %return183 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 1.000000e+00, double 0.000000e+00)
  br label %end176

false181:                                         ; preds = %false175
  %return185 = call i64 @"eq@ISS"(i8* %return171, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0))
  %15 = icmp ne i64 %return185, 0
  br i1 %15, label %true186, label %false187

true186:                                          ; preds = %false181
  %return189 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 1.000000e+00)
  br label %end176

false187:                                         ; preds = %false181
  %return190 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @22, i64 0, i64 0))
  %return191 = call <3 x double> @"normalize@VV"(<3 x double> %return190)
  br label %end176

true195:                                          ; preds = %end176
  %return198 = call i64 @"eq@ISS"(i8* %return192, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0))
  %16 = icmp ne i64 %return198, 0
  br i1 %16, label %true199, label %false200

end196:                                           ; preds = %end201, %end176
  %orient.0 = phi <4 x double> [ %return240, %end201 ], [ %return170, %end176 ]
  %return243 = call <4 x double> @"quaternion@PFV"(double %output143, <3 x double> %return146)
  %return245 = call <4 x double> @"qmultiply@PPP"(<4 x double> %return243, <4 x double> %orient.0)
  %_bound___orient247 = load <4 x double>, <4 x double>* %_bound___orient
  %return248 = call <4 x double> @"qmultiply@PPP"(<4 x double> %return245, <4 x double> %_bound___orient247)
  %return249 = call i8* @"chs@SS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @26, i64 0, i64 0))
  %_bound_ptnum250 = load i64, i64* %_bound_ptnum
  %return252 = call i64 @"setpointattrib@IISIP"(i64 0, i8* %return249, i64 %_bound_ptnum250, <4 x double> %return248)
  br label %end101

true199:                                          ; preds = %true195
  %return202 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double 0.000000e+00, double 0.000000e+00)
  br label %end201

false200:                                         ; preds = %true195
  %return204 = call i64 @"eq@ISS"(i8* %return192, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0))
  %17 = icmp ne i64 %return204, 0
  br i1 %17, label %true205, label %false206

end201:                                           ; preds = %true217, %false218, %true211, %true205, %true199
  %bias.0 = phi <3 x double> [ %return202, %true199 ], [ %return208, %true205 ], [ %return214, %true211 ], [ %return221, %true217 ], [ %return223, %false218 ]
  %return226 = call <3 x double> @"qrotate@VPV"(<4 x double> %return170, <3 x double> %init_up_vec.0)
  %return229 = call double @"dot@FVV"(<3 x double> %bias.0, <3 x double> %return146)
  %cast231 = call <3 x double> @"set@VF"(double %return229)
  %output232 = call <3 x double> @"mul@VV"(<3 x double> %cast231, <3 x double> %return146)
  %output235 = call <3 x double> @"sub@VV"(<3 x double> %bias.0, <3 x double> %output232)
  %return238 = call <4 x double> @"dihedral@PVV"(<3 x double> %return226, <3 x double> %output235)
  %return240 = call <4 x double> @"qmultiply@PPP"(<4 x double> %return238, <4 x double> %return170)
  br label %end196

true205:                                          ; preds = %false200
  %return208 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 1.000000e+00, double 0.000000e+00)
  br label %end201

false206:                                         ; preds = %false200
  %return210 = call i64 @"eq@ISS"(i8* %return192, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0))
  %18 = icmp ne i64 %return210, 0
  br i1 %18, label %true211, label %false212

true211:                                          ; preds = %false206
  %return214 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 1.000000e+00)
  br label %end201

false212:                                         ; preds = %false206
  %return216 = call i64 @"eq@ISS"(i8* %return192, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0))
  %19 = icmp ne i64 %return216, 0
  br i1 %19, label %true217, label %false218

true217:                                          ; preds = %false212
  %return220 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @25, i64 0, i64 0))
  %return221 = call <3 x double> @"normalize@VV"(<3 x double> %return220)
  br label %end201

false218:                                         ; preds = %false212
  %_bound___up_target_attrib222 = load <3 x double>, <3 x double>* %_bound___up_target_attrib
  %return223 = call <3 x double> @"normalize@VV"(<3 x double> %_bound___up_target_attrib222)
  br label %end201
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"acos@FF"(double) #1

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"random_fhash@IF"(double) #1

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"div@II"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #1

; Function Attrs: nounwind readnone
declare i64 @"random_fhash@IU"(<2 x double>) #1

; Function Attrs: nounwind
declare double @"radians@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"random@FI"(i64) #1

; Function Attrs: nounwind
declare <3 x double> @"sample_direction_cone@VVFU"(<3 x double>, double, <2 x double>) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIF"(i64, i8*, i64, double) #2

; Function Attrs: nounwind
declare double @"rand@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"chramp@FSF"(i8*, double) #1

; Function Attrs: nounwind
declare double @"lerp@FFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"rint@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"min@FFF"(double, double) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"dihedral@PVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"qrotate@VPV"(<4 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"qmultiply@PPP"(<4 x double>, <4 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"quaternion@PFV"(double, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIP"(i64, i8*, i64, <4 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %__blend_target_attrib, <3 x double> %N, double %__blend_attrib, i64 %ptnum, double %__cone_attrib, double %__pscale, double %__basenml_attrib, <3 x double> %__up_target_attrib, <4 x double> %__orient) #2 {
__llvm_entry:
  %"<N>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca double
  %2 = alloca i64
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  %6 = alloca <3 x double>
  %7 = alloca <4 x double>
  store <3 x double> %N, <3 x double>* %"<N>"
  store <3 x double> %__blend_target_attrib, <3 x double>* %0
  store double %__blend_attrib, double* %1
  store i64 %ptnum, i64* %2
  store double %__cone_attrib, double* %3
  store double %__pscale, double* %4
  store double %__basenml_attrib, double* %5
  store <3 x double> %__up_target_attrib, <3 x double>* %6
  store <4 x double> %__orient, <4 x double>* %7
  call void @"__vex_snippet_snippet@VVFIFFFVP"(<3 x double>* %0, <3 x double>* %"<N>", double* %1, i64* %2, double* %3, double* %4, double* %5, <3 x double>* %6, <4 x double>* %7)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @27, i64 0, i64 0), <3 x double> %__blend_target_attrib) #3
  %evalue9 = load <3 x double>, <3 x double>* %"<N>"
  %gvalue10 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @28, i64 0, i64 0), <3 x double> %evalue9) #3
  %gvalue12 = call double @"_export@FSF"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @29, i64 0, i64 0), double %__blend_attrib) #3
  %gvalue14 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @30, i64 0, i64 0), i64 %ptnum) #3
  %gvalue16 = call double @"_export@FSF"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @31, i64 0, i64 0), double %__cone_attrib) #3
  %gvalue18 = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @32, i64 0, i64 0), double %__pscale) #3
  %gvalue20 = call double @"_export@FSF"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @33, i64 0, i64 0), double %__basenml_attrib) #3
  %gvalue22 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @34, i64 0, i64 0), <3 x double> %__up_target_attrib) #3
  %gvalue24 = call <4 x double> @"_export@PSP"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @35, i64 0, i64 0), <4 x double> %__orient) #3
  store <3 x double> %gvalue, <3 x double>* @__blend_target_attrib
  store <3 x double> %gvalue10, <3 x double>* @N
  store double %gvalue12, double* @__blend_attrib
  store i64 %gvalue14, i64* @ptnum
  store double %gvalue16, double* @__cone_attrib
  store double %gvalue18, double* @__pscale
  store double %gvalue20, double* @__basenml_attrib
  store <3 x double> %gvalue22, <3 x double>* @__up_target_attrib
  store <4 x double> %gvalue24, <4 x double>* @__orient
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

declare <4 x double> @"_export@PSP"(i8*, <4 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, <3 x double> zeroinitializer, <4 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [1 x i8] zeroinitializer
@packname = external global i8*
@name = external global i64
@1 = private constant [9 x i8] c"packname\00"
@2 = private constant [5 x i8] c"name\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SI"(i8** %_bound_packname, i64* %_bound_name) #0 {
__llvm_entry:
  %_bound_name1 = load i64, i64* %_bound_name
  %return = call i8* @"itoa@SI"(i64 %_bound_name1)
  store i8* %return, i8** %_bound_packname
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %packname, i64 %name) #2 {
__llvm_entry:
  %0 = alloca i64
  %"<packname>" = alloca i8*
  store i8* %packname, i8** %"<packname>"
  store i64 %name, i64* %0
  call void @"__vex_snippet_snippet@SI"(i8** %"<packname>", i64* %0)
  %evalue = load i8*, i8** %"<packname>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0), i8* %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), i64 %name) #3
  store i8* %gvalue, i8** @packname
  store i64 %gvalue3, i64* @name
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

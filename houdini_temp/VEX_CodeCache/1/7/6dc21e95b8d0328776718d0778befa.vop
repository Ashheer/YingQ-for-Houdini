;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [11 x i8] c"stepHeight\00"
@elev = external global double
@primnum = external global i64
@1 = private constant [5 x i8] c"elev\00"
@2 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FI"(double* %_bound_elev, i64* %_bound_primnum) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %output = add i64 %_bound_primnum1, 1
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i64 0, i64 0))
  %cast = sitofp i64 %output to double
  %output2 = fmul double %cast, %return
  store double %output2, double* %_bound_elev
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %elev, i64 %primnum) #2 {
__llvm_entry:
  %0 = alloca i64
  %"<elev>" = alloca double
  store double %elev, double* %"<elev>"
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@FI"(double* %"<elev>", i64* %0)
  %evalue = load double, double* %"<elev>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), double %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i64 %primnum) #3
  store double %gvalue, double* @elev
  store i64 %gvalue3, i64* @primnum
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

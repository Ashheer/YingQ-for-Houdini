;_name	/obj/geo1/MOPs_Move_Along_Spline/apply_new_goals/attribvop1
; ModuleID = 'obj_geo1_MOPs_Move_Along_Spline_apply_new_goals_attribvop1'

@0 = private constant [7 x i8] c"travel\00"
@1 = private constant [11 x i8] c"do_falloff\00"
@2 = private constant [10 x i8] c"goal_type\00"
@3 = private constant [5 x i8] c"wrap\00"
@4 = private constant [16 x i8] c"maintain_offset\00"
@5 = private constant [14 x i8] c"orient_offset\00"
@6 = private constant [15 x i8] c"invert_tangent\00"
@7 = private constant [13 x i8] c"twist_amount\00"
@8 = private constant [13 x i8] c"random_shift\00"
@9 = private constant [12 x i8] c"random_seed\00"
@10 = private constant [1 x i8] zeroinitializer
@11 = private constant [9 x i8] c"typename\00"
@12 = private constant [10 x i8] c"arclength\00"
@13 = private constant [5 x i8] c"Poly\00"
@14 = private constant [18 x i8] c"measuredperimeter\00"
@15 = private constant [18 x i8] c"acceleration_ramp\00"
@16 = private constant [12 x i8] c"offset_ramp\00"
@17 = private constant [19 x i8] c"orient_offset_ramp\00"
@18 = private constant [2 x i8] c"P\00"
@19 = private constant [15 x i8] c"mops_PT_normal\00"
@20 = private constant [16 x i8] c"mops_PT_tangent\00"
@21 = private constant [11 x i8] c"twist_ramp\00"
@mops_falloff = external global double
@__goalu = external global double
@OpInput2 = external global i8*
@__curvenum = external global i64
@id = external global i64
@__orig_orient = external global <4 x double>
@__orig_offset = external global <3 x double>
@P = external global <3 x double>
@__delta_orient = external global <4 x double>
@orient = external global <4 x double>
@__offset = external global <3 x double>
@22 = private constant [13 x i8] c"mops_falloff\00"
@23 = private constant [8 x i8] c"__goalu\00"
@24 = private constant [9 x i8] c"OpInput2\00"
@25 = private constant [11 x i8] c"__curvenum\00"
@26 = private constant [3 x i8] c"id\00"
@27 = private constant [14 x i8] c"__orig_orient\00"
@28 = private constant [14 x i8] c"__orig_offset\00"
@29 = private constant [15 x i8] c"__delta_orient\00"
@30 = private constant [7 x i8] c"orient\00"
@31 = private constant [9 x i8] c"__offset\00"

define private void @"_obj_geo1_MOPs_Move_Along_Spline_apply_new_goals_attribvop1_snippet1@FFSIIPVVPPV"(double* %_bound_mops_falloff, double* %_bound___goalu, i8** %_bound_OpInput2, i64* %_bound___curvenum, i64* %_bound_id, <4 x double>* %_bound___orig_orient, <3 x double>* %_bound___orig_offset, <3 x double>* %_bound_P, <4 x double>* %_bound___delta_orient, <4 x double>* %_bound_orient, <3 x double>* %_bound___offset) nounwind alwaysinline {
__llvm_entry:
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([7 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8]* @1, i64 0, i64 0))
  %0 = icmp ne i64 %return1, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_mops_falloff3 = load double* %_bound_mops_falloff
  %output = fmul double %return, %_bound_mops_falloff3
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %travel.0 = phi double [ %output, %true ], [ %return, %__llvm_entry ]
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8]* @2, i64 0, i64 0))
  %return5 = call i64 @"chi@IS"(i8* getelementptr inbounds ([5 x i8]* @3, i64 0, i64 0))
  %_bound___goalu6 = load double* %_bound___goalu
  %return8 = call i64 @"eq@III"(i64 %return4, i64 1)
  %1 = icmp ne i64 %return8, 0
  br i1 %1, label %true9, label %end10

true9:                                            ; preds = %end
  %_bound_OpInput211 = load i8** %_bound_OpInput2
  %_bound___curvenum13 = load i64* %_bound___curvenum
  %return14 = call double @"primuvconvert@FSFII"(i8* %_bound_OpInput211, double %_bound___goalu6, i64 %_bound___curvenum13, i64 5)
  %cast = call <2 x double> @"set@UF"(double %return14)
  %return16 = call double @"getcomp@FUI"(<2 x double> %cast, i64 0)
  br label %end10

end10:                                            ; preds = %true9, %end
  %goalu.0 = phi double [ %return16, %true9 ], [ %_bound___goalu6, %end ]
  %output19 = fadd double %goalu.0, %travel.0
  %return20 = call double @"ch@FS"(i8* getelementptr inbounds ([16 x i8]* @4, i64 0, i64 0))
  %return21 = call double @"ch@FS"(i8* getelementptr inbounds ([14 x i8]* @5, i64 0, i64 0))
  %return22 = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8]* @6, i64 0, i64 0))
  %2 = icmp ne i64 %return22, 0
  br i1 %2, label %true23, label %end24

true23:                                           ; preds = %end10
  %return25 = call i64 @"neg@II"(i64 1)
  %cast26 = sitofp i64 %return25 to double
  br label %end24

end24:                                            ; preds = %true23, %end10
  %invert.0 = phi double [ %cast26, %true23 ], [ 1.000000e+00, %end10 ]
  %return27 = call double @"ch@FS"(i8* getelementptr inbounds ([13 x i8]* @7, i64 0, i64 0))
  %return28 = call double @"radians@FF"(double %return27)
  %return29 = call double @"ch@FS"(i8* getelementptr inbounds ([13 x i8]* @8, i64 0, i64 0))
  %return30 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8]* @9, i64 0, i64 0))
  %_bound_id32 = load i64* %_bound_id
  %output34 = mul i64 %return30, 100000
  %output35 = add i64 %_bound_id32, %output34
  %cast36 = sitofp i64 %output35 to double
  %return37 = call double @"rand@FF"(double %cast36)
  %return39 = call double @"neg@FF"(double %return29)
  %return41 = call double @"fit01@FFFF"(double %return37, double %return39, double %return29)
  %output42 = fadd double %output19, %return41
  br i1 %1, label %true45, label %end46

true45:                                           ; preds = %end24
  %_bound___curvenum47 = load i64* %_bound___curvenum
  %return48 = call i8* @"primintrinsic@SISI"(i64 1, i8* getelementptr inbounds ([9 x i8]* @11, i64 0, i64 0), i64 %_bound___curvenum47)
  %_bound___curvenum49 = load i64* %_bound___curvenum
  %return50 = call double @"primintrinsic@FISI"(i64 1, i8* getelementptr inbounds ([10 x i8]* @12, i64 0, i64 0), i64 %_bound___curvenum49)
  %return52 = call i64 @"eq@ISS"(i8* %return48, i8* getelementptr inbounds ([5 x i8]* @13, i64 0, i64 0))
  %3 = icmp ne i64 %return52, 0
  br i1 %3, label %true53, label %end54

end46:                                            ; preds = %true58, %false, %end24
  %goalu.1 = phi double [ %return69, %true58 ], [ %return77, %false ], [ %output42, %end24 ]
  %return80 = call i64 @"eq@III"(i64 %return4, i64 0)
  %return81 = call i64 @"and@III"(i64 %return5, i64 %return80)
  %4 = icmp ne i64 %return81, 0
  br i1 %4, label %true82, label %false83

true53:                                           ; preds = %true45
  %_bound___curvenum55 = load i64* %_bound___curvenum
  %return56 = call double @"primintrinsic@FISI"(i64 1, i8* getelementptr inbounds ([18 x i8]* @14, i64 0, i64 0), i64 %_bound___curvenum55)
  br label %end54

end54:                                            ; preds = %true53, %true45
  %arclen.0 = phi double [ %return56, %true53 ], [ %return50, %true45 ]
  %5 = icmp ne i64 %return5, 0
  %_bound_OpInput261 = load i8** %_bound_OpInput2
  br i1 %5, label %true58, label %false

true58:                                           ; preds = %end54
  %return64 = call double @"mod@FFF"(double %output42, double %arclen.0)
  %_bound___curvenum65 = load i64* %_bound___curvenum
  %return66 = call double @"primuvconvert@FSFII"(i8* %_bound_OpInput261, double %return64, i64 %_bound___curvenum65, i64 10)
  %cast67 = call <2 x double> @"set@UF"(double %return66)
  %return69 = call double @"getcomp@FUI"(<2 x double> %cast67, i64 0)
  br label %end46

false:                                            ; preds = %end54
  %_bound___curvenum73 = load i64* %_bound___curvenum
  %return74 = call double @"primuvconvert@FSFII"(i8* %_bound_OpInput261, double %output42, i64 %_bound___curvenum73, i64 10)
  %cast75 = call <2 x double> @"set@UF"(double %return74)
  %return77 = call double @"getcomp@FUI"(<2 x double> %cast75, i64 0)
  br label %end46

true82:                                           ; preds = %end46
  %return86 = call double @"mod@FFF"(double %goalu.1, double 1.000000e+00)
  br label %end84

false83:                                          ; preds = %end46
  %return88 = call double @"clamp@FFFF"(double %goalu.1, double 0.000000e+00, double 1.000000e+00)
  br label %end84

end84:                                            ; preds = %false83, %true82
  %goalu.2 = phi double [ %return86, %true82 ], [ %return88, %false83 ]
  %return90 = call double @"chramp@FSF"(i8* getelementptr inbounds ([18 x i8]* @15, i64 0, i64 0), double %goalu.2)
  %return93 = call double @"chramp@FSF"(i8* getelementptr inbounds ([12 x i8]* @16, i64 0, i64 0), double %return90)
  %output94 = fmul double %return20, %return93
  %return97 = call double @"chramp@FSF"(i8* getelementptr inbounds ([19 x i8]* @17, i64 0, i64 0), double %return90)
  %output98 = fmul double %return21, %return97
  %_bound___curvenum99 = load i64* %_bound___curvenum
  %cast101 = call <3 x double> @"set@VF"(double %return90)
  %return102 = call <3 x double> @"primuv@VISIV"(i64 1, i8* getelementptr inbounds ([2 x i8]* @18, i64 0, i64 0), i64 %_bound___curvenum99, <3 x double> %cast101)
  %_bound___curvenum103 = load i64* %_bound___curvenum
  %return106 = call <3 x double> @"primuv@VISIV"(i64 1, i8* getelementptr inbounds ([15 x i8]* @19, i64 0, i64 0), i64 %_bound___curvenum103, <3 x double> %cast101)
  %return107 = call <3 x double> @"normalize@VV"(<3 x double> %return106)
  %_bound___curvenum108 = load i64* %_bound___curvenum
  %return111 = call <3 x double> @"primuv@VISIV"(i64 1, i8* getelementptr inbounds ([16 x i8]* @20, i64 0, i64 0), i64 %_bound___curvenum108, <3 x double> %cast101)
  %return112 = call <3 x double> @"normalize@VV"(<3 x double> %return111)
  %cast116 = call <3 x double> @"set@VF"(double %invert.0)
  %output117 = call <3 x double> @"mul@VV"(<3 x double> %return107, <3 x double> %cast116)
  %return118 = call <9 x double> @"maketransform@3VV"(<3 x double> %return112, <3 x double> %output117)
  %return119 = call <4 x double> @"quaternion@P3"(<9 x double> %return118)
  %return121 = call double @"chramp@FSF"(i8* getelementptr inbounds ([11 x i8]* @21, i64 0, i64 0), double %return90)
  %output124 = fmul double %return121, %return28
  %return126 = call <4 x double> @"quaternion@PFV"(double %output124, <3 x double> %return112)
  %_bound___orig_orient128 = load <4 x double>* %_bound___orig_orient
  %return129 = call <4 x double> @"qinvert@PP"(<4 x double> %_bound___orig_orient128)
  %return130 = call <4 x double> @"qmultiply@PPP"(<4 x double> %return119, <4 x double> %return129)
  %return133 = call <4 x double> @"qmultiply@PPP"(<4 x double> %return126, <4 x double> %return130)
  %_bound___orig_offset135 = load <3 x double>* %_bound___orig_offset
  %return136 = call <3 x double> @"qrotate@VPV"(<4 x double> %return133, <3 x double> %_bound___orig_offset135)
  %cast140 = call <3 x double> @"set@VF"(double %output94)
  %output141 = call <3 x double> @"mul@VV"(<3 x double> %return136, <3 x double> %cast140)
  %output142 = call <3 x double> @"add@VV"(<3 x double> %return102, <3 x double> %output141)
  store <3 x double> %output142, <3 x double>* %_bound_P
  %return145 = call <4 x double> @"qmultiply@PPP"(<4 x double> %return126, <4 x double> %return119)
  %_bound___delta_orient147 = load <4 x double>* %_bound___delta_orient
  %return148 = call <4 x double> @"qmultiply@PPP"(<4 x double> %return145, <4 x double> %_bound___delta_orient147)
  %return152 = call <4 x double> @"slerp@PPPF"(<4 x double> %return145, <4 x double> %return148, double %output98)
  store <4 x double> %return152, <4 x double>* %_bound_orient
  store double %return90, double* %_bound___goalu
  store <3 x double> %output141, <3 x double>* %_bound___offset
  ret void
}

declare double @"ch@FS"(i8*) nounwind readnone

declare i64 @"chi@IS"(i8*) nounwind readnone

declare i64 @"eq@III"(i64, i64) nounwind readnone

declare double @"primuvconvert@FSFII"(i8*, double, i64, i64) nounwind readnone

declare <2 x double> @"set@UF"(double) nounwind readnone

declare double @"getcomp@FUI"(<2 x double>, i64) nounwind readnone

declare i64 @"neg@II"(i64) nounwind readnone

declare double @"radians@FF"(double) nounwind

declare double @"rand@FF"(double) nounwind

declare double @"neg@FF"(double) nounwind readnone

declare double @"fit01@FFFF"(double, double, double) nounwind

declare i8* @"primintrinsic@SISI"(i64, i8*, i64) nounwind

declare double @"primintrinsic@FISI"(i64, i8*, i64) nounwind

declare i64 @"eq@ISS"(i8*, i8*) nounwind readnone

declare double @"mod@FFF"(double, double) nounwind readnone

declare i64 @"and@III"(i64, i64) nounwind readnone

declare double @"clamp@FFFF"(double, double, double) nounwind

declare double @"chramp@FSF"(i8*, double) nounwind readnone

declare <3 x double> @"set@VF"(double) nounwind readnone

declare <3 x double> @"primuv@VISIV"(i64, i8*, i64, <3 x double>) nounwind

declare <3 x double> @"normalize@VV"(<3 x double>) nounwind

declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) nounwind readnone

declare <9 x double> @"maketransform@3VV"(<3 x double>, <3 x double>) nounwind readnone

declare <4 x double> @"quaternion@P3"(<9 x double>) nounwind readnone

declare <4 x double> @"quaternion@PFV"(double, <3 x double>) nounwind readnone

declare <4 x double> @"qinvert@PP"(<4 x double>) nounwind readnone

declare <4 x double> @"qmultiply@PPP"(<4 x double>, <4 x double>) nounwind readnone

declare <3 x double> @"qrotate@VPV"(<4 x double>, <3 x double>) nounwind readnone

declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) nounwind readnone

declare <4 x double> @"slerp@PPPF"(<4 x double>, <4 x double>, double) nounwind readnone

define void @obj_geo1_MOPs_Move_Along_Spline_apply_new_goals_attribvop1(double %mops_falloff, double %__goalu, i8* %OpInput2, i64 %__curvenum, i64 %id, <4 x double> %__orig_orient, <3 x double> %__orig_offset, <3 x double> %P, <4 x double> %__delta_orient, <4 x double> %orient, <3 x double> %__offset) nounwind {
__llvm_entry:
  %"<__goalu>" = alloca double
  %"<P>" = alloca <3 x double>
  %"<orient>" = alloca <4 x double>
  %"<__offset>" = alloca <3 x double>
  %0 = alloca double
  %1 = alloca i8*
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca <4 x double>
  %5 = alloca <3 x double>
  %6 = alloca <4 x double>
  store double %__goalu, double* %"<__goalu>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store <4 x double> %orient, <4 x double>* %"<orient>"
  store <3 x double> %__offset, <3 x double>* %"<__offset>"
  store double %mops_falloff, double* %0
  store i8* %OpInput2, i8** %1
  store i64 %__curvenum, i64* %2
  store i64 %id, i64* %3
  store <4 x double> %__orig_orient, <4 x double>* %4
  store <3 x double> %__orig_offset, <3 x double>* %5
  store <4 x double> %__delta_orient, <4 x double>* %6
  call void @"_obj_geo1_MOPs_Move_Along_Spline_apply_new_goals_attribvop1_snippet1@FFSIIPVVPPV"(double* %0, double* %"<__goalu>", i8** %1, i64* %2, i64* %3, <4 x double>* %4, <3 x double>* %5, <3 x double>* %"<P>", <4 x double>* %6, <4 x double>* %"<orient>", <3 x double>* %"<__offset>")
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([13 x i8]* @22, i64 0, i64 0), double %mops_falloff) nounwind readonly
  %evalue8 = load double* %"<__goalu>"
  %gvalue9 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8]* @23, i64 0, i64 0), double %evalue8) nounwind readonly
  %gvalue11 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([9 x i8]* @24, i64 0, i64 0), i8* %OpInput2) nounwind readonly
  %gvalue13 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([11 x i8]* @25, i64 0, i64 0), i64 %__curvenum) nounwind readonly
  %gvalue15 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([3 x i8]* @26, i64 0, i64 0), i64 %id) nounwind readonly
  %gvalue17 = call <4 x double> @"_export@PSP"(i8* getelementptr inbounds ([14 x i8]* @27, i64 0, i64 0), <4 x double> %__orig_orient) nounwind readonly
  %gvalue19 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([14 x i8]* @28, i64 0, i64 0), <3 x double> %__orig_offset) nounwind readonly
  %evalue20 = load <3 x double>* %"<P>"
  %gvalue21 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8]* @18, i64 0, i64 0), <3 x double> %evalue20) nounwind readonly
  %gvalue23 = call <4 x double> @"_export@PSP"(i8* getelementptr inbounds ([15 x i8]* @29, i64 0, i64 0), <4 x double> %__delta_orient) nounwind readonly
  %evalue24 = load <4 x double>* %"<orient>"
  %gvalue25 = call <4 x double> @"_export@PSP"(i8* getelementptr inbounds ([7 x i8]* @30, i64 0, i64 0), <4 x double> %evalue24) nounwind readonly
  %evalue26 = load <3 x double>* %"<__offset>"
  %gvalue27 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([9 x i8]* @31, i64 0, i64 0), <3 x double> %evalue26) nounwind readonly
  store double %gvalue, double* @mops_falloff
  store double %gvalue9, double* @__goalu
  store i8* %gvalue11, i8** @OpInput2
  store i64 %gvalue13, i64* @__curvenum
  store i64 %gvalue15, i64* @id
  store <4 x double> %gvalue17, <4 x double>* @__orig_orient
  store <3 x double> %gvalue19, <3 x double>* @__orig_offset
  store <3 x double> %gvalue21, <3 x double>* @P
  store <4 x double> %gvalue23, <4 x double>* @__delta_orient
  store <4 x double> %gvalue25, <4 x double>* @orient
  store <3 x double> %gvalue27, <3 x double>* @__offset
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

declare <4 x double> @"_export@PSP"(i8*, <4 x double>)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_geo1_MOPs_Move_Along_Spline_apply_new_goals_attribvop1(double 0.000000e+00, double 0.000000e+00, i8* getelementptr inbounds ([1 x i8]* @10, i64 0, i64 0), i64 0, i64 -1, <4 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <4 x double> zeroinitializer, <4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>, <3 x double> zeroinitializer)
  ret void
}

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"18.5.633"}
!2 = metadata !{metadata !"64"}

;_code_end

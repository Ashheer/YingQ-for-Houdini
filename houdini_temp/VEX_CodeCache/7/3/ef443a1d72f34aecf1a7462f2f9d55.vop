;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [7 x i8] c"origpt\00"
@2 = private constant [8 x i8] c"__seams\00"
@ptnum = external global i64
@3 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64* @"findattribval@[IISSI"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i64 %_bound_ptnum1)
  %return3 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %end16, %__llvm_entry
  %__impl_foreach_index_5.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %end16 ]
  %return6 = call i64 @"lt@III"(i64 %__impl_foreach_index_5.0, i64 %return3)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return9 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_5.0)
  %return11 = call i64 @"pointhedge@III"(i64 1, i64 %return9)
  br label %cond12

end:                                              ; preds = %cond
  ret void

cond12:                                           ; preds = %body13, %body
  %h.0 = phi i64 [ %return11, %body ], [ %return27, %body13 ]
  %return15 = call i64 @"ge@III"(i64 %h.0, i64 0)
  %1 = icmp ne i64 %return15, 0
  br i1 %1, label %body13, label %end16

body13:                                           ; preds = %cond12
  %return19 = call i64 @"hedge_dstpoint@III"(i64 1, i64 %h.0)
  %return21 = call i64 @"point@IISI"(i64 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i64 %return19)
  %return22 = call i64 @"geoself@I"()
  %_bound_ptnum23 = load i64, i64* %_bound_ptnum
  %return25 = call i64 @"setedgegroup@IISIII"(i64 %return22, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i64 %_bound_ptnum23, i64 %return21, i64 1)
  %return27 = call i64 @"pointhedgenext@III"(i64 1, i64 %h.0)
  br label %cond12

end16:                                            ; preds = %cond12
  %output = add i64 %__impl_foreach_index_5.0, 1
  br label %cond
}

; Function Attrs: nounwind
declare i64* @"findattribval@[IISSI"(i64, i8*, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"pointhedge@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"hedge_dstpoint@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"geoself@I"() #1

; Function Attrs: nounwind
declare i64 @"setedgegroup@IISIII"(i64, i8*, i64, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"pointhedgenext@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum) #1 {
__llvm_entry:
  %0 = alloca i64
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  store i64 %gvalue, i64* @ptnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

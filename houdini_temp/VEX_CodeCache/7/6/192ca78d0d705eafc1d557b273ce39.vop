;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [7 x i8] c"attach\00"
@1 = private constant [4 x i8] c"pin\00"
@2 = private constant [7 x i8] c"stitch\00"
@3 = private constant [13 x i8] c"branchstitch\00"
@4 = private constant [9 x i8] c"distance\00"
@5 = private constant [13 x i8] c"attachnormal\00"
@6 = private constant [13 x i8] c"distanceline\00"
@7 = private constant [8 x i8] c"triarap\00"
@8 = private constant [10 x i8] c"triarapnl\00"
@9 = private constant [12 x i8] c"triarapnorm\00"
@10 = private constant [11 x i8] c"tetarapvol\00"
@11 = private constant [13 x i8] c"tetarapnlvol\00"
@12 = private constant [15 x i8] c"tetarapnormvol\00"
@13 = private constant [8 x i8] c"tetarap\00"
@14 = private constant [10 x i8] c"tetarapnl\00"
@15 = private constant [12 x i8] c"tetarapnorm\00"
@16 = private constant [9 x i8] c"tetfiber\00"
@17 = private constant [13 x i8] c"tetfibernorm\00"
@18 = private constant [0 x i8*] zeroinitializer
@19 = private constant [5 x i8] c"bend\00"
@20 = private constant [13 x i8] c"trianglebend\00"
@21 = private constant [6 x i8] c"angle\00"
@22 = private constant [13 x i8] c"stretchshear\00"
@23 = private constant [10 x i8] c"bendtwist\00"
@24 = private constant [10 x i8] c"pinorient\00"
@25 = private constant [9 x i8] c"pressure\00"
@26 = private constant [11 x i8] c"shapematch\00"
@27 = private constant [10 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @19, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @20, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @21, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @16, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @17, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @22, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @23, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @24, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @25, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @26, i64 0, i64 0)]
@28 = private constant [10 x i8] c"primitive\00"
@29 = private constant [5 x i8] c"type\00"
@30 = private constant [14 x i8] c"secondarypass\00"
@31 = private constant [15 x i8] c"secondarytypes\00"
@32 = private constant [1 x i8] zeroinitializer
@33 = private constant [15 x i8] c"-D CONSTRAINT_\00"
@34 = private constant [2 x i8] c" \00"
@35 = private constant [17 x i8] c"secondarydefines\00"
@36 = private constant [0 x i64] zeroinitializer
@37 = private constant [26 x i8] c"secondarysmoothingoffsets\00"
@38 = private constant [24 x i8] c"secondarysmoothingsizes\00"
@smoothingoffsets = external global i64*
@smoothingsizes = external global i64*
@constraintdefines = external global i8*
@39 = private constant [17 x i8] c"smoothingoffsets\00"
@40 = private constant [15 x i8] c"smoothingsizes\00"
@41 = private constant [18 x i8] c"constraintdefines\00"

; Function Attrs: alwaysinline nounwind
define private i8* @"constraintAlias@SS"(i8** %type) #0 {
__llvm_entry:
  %type1 = load i8*, i8** %type
  %return = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %end8, %end, %__llvm_entry
  %merge = phi i8* [ getelementptr inbounds ([4 x i8], [4 x i8]* @1, i64 0, i64 0), %__llvm_entry ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0), %end ], [ getelementptr inbounds ([13 x i8], [13 x i8]* @6, i64 0, i64 0), %end8 ]
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %return3 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0))
  %return5 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @3, i64 0, i64 0))
  %return6 = call i64 @"or@III"(i64 %return3, i64 %return5)
  %1 = icmp ne i64 %return6, 0
  br i1 %1, label %true, label %end8

end8:                                             ; preds = %end
  %return10 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @5, i64 0, i64 0))
  %2 = icmp ne i64 %return10, 0
  br i1 %2, label %true, label %end12

end12:                                            ; preds = %end8
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end12, %true
  %UnifiedRetVal = phi i8* [ %merge, %true ], [ %type1, %end12 ]
  ret i8* %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: alwaysinline nounwind
define private i64 @"isTriARAP@IS"(i8** %type) #0 {
__llvm_entry:
  %type1 = load i8*, i8** %type
  %return = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @7, i64 0, i64 0))
  %return3 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @8, i64 0, i64 0))
  %return4 = call i64 @"or@III"(i64 %return, i64 %return3)
  %return6 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @9, i64 0, i64 0))
  %return7 = call i64 @"or@III"(i64 %return4, i64 %return6)
  ret i64 %return7
}

; Function Attrs: alwaysinline nounwind
define private i64 @"isTetARAPVol@IS"(i8** %type) #0 {
__llvm_entry:
  %type1 = load i8*, i8** %type
  %return = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @10, i64 0, i64 0))
  %return3 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @11, i64 0, i64 0))
  %return4 = call i64 @"or@III"(i64 %return, i64 %return3)
  %return6 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @12, i64 0, i64 0))
  %return7 = call i64 @"or@III"(i64 %return4, i64 %return6)
  ret i64 %return7
}

; Function Attrs: alwaysinline nounwind
define private i64 @"isTetARAP@IS"(i8** %type) #0 {
__llvm_entry:
  %0 = alloca i8*
  %type1 = load i8*, i8** %type
  %return = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @13, i64 0, i64 0))
  %return3 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @14, i64 0, i64 0))
  %return4 = call i64 @"or@III"(i64 %return, i64 %return3)
  %return6 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @15, i64 0, i64 0))
  %return7 = call i64 @"or@III"(i64 %return4, i64 %return6)
  store i8* %type1, i8** %0
  %isTetARAPVol = call i64 @"isTetARAPVol@IS"(i8** %0)
  %return9 = call i64 @"or@III"(i64 %return7, i64 %isTetARAPVol)
  ret i64 %return9
}

; Function Attrs: alwaysinline nounwind
define private i64 @"isTetFiber@IS"(i8** %type) #0 {
__llvm_entry:
  %type1 = load i8*, i8** %type
  %return = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @16, i64 0, i64 0))
  %return3 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @17, i64 0, i64 0))
  %return4 = call i64 @"or@III"(i64 %return, i64 %return3)
  ret i64 %return4
}

; Function Attrs: alwaysinline nounwind
define private i64 @"hasSmoothing@IS"(i8** %type) #0 {
__llvm_entry:
  %type2 = load i8*, i8** %type
  %return = call i64 @"find@I[SS"(i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @27, i64 0, i64 0), i8* %type2)
  %return3 = call i64 @"lt@III"(i64 %return, i64 0)
  ret i64 %return3
}

; Function Attrs: nounwind
declare i64 @"find@I[SS"(i8**, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[I[IS[I[I[I[I"(i64** %_bound_smoothingoffsets, i64** %_bound_smoothingsizes, i8** %_bound_constraintdefines, i64** %_bound_offsets, i64** %_bound_sizes, i64** %_bound_secondaryoffsets, i64** %_bound_secondarysizes) #0 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca i8*
  %2 = alloca i8*
  %3 = alloca i8*
  %4 = alloca i8*
  %5 = alloca i8*
  %return = call i8** @"uniquevals@[SISS"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @28, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @29, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @30, i64 0, i64 0))
  %return2 = call i8** @"detail@[SIS"(i64 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @31, i64 0, i64 0))
  %return4 = call i64 @"len@I[S"(i8** %return)
  br label %cond

cond:                                             ; preds = %end27, %__llvm_entry
  %defines.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @18, i64 0, i64 0), %__llvm_entry ], [ %defines.1, %end27 ]
  %secondarydefines.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @18, i64 0, i64 0), %__llvm_entry ], [ %secondarydefines.1, %end27 ]
  %hassmoothing.0 = phi i64 [ 0, %__llvm_entry ], [ %hassmoothing.1, %end27 ]
  %hassecondarysmoothing.0 = phi i64 [ 0, %__llvm_entry ], [ %hassecondarysmoothing.1, %end27 ]
  %__impl_foreach_index_8d.0 = phi i64 [ 0, %__llvm_entry ], [ %output43, %end27 ]
  %return7 = call i64 @"lt@III"(i64 %__impl_foreach_index_8d.0, i64 %return4)
  %6 = icmp ne i64 %return7, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %return10 = call i8* @"getcomp@S[SI"(i8** %return, i64 %__impl_foreach_index_8d.0)
  store i8* %return10, i8** %0
  %constraintAlias = call i8* @"constraintAlias@SS"(i8** %0)
  store i8* %constraintAlias, i8** %1
  %isTetARAP = call i64 @"isTetARAP@IS"(i8** %1)
  %7 = icmp ne i64 %isTetARAP, 0
  br i1 %7, label %true, label %end13

end:                                              ; preds = %cond
  %return45 = call i8* @"join@S[SS"(i8** %defines.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @34, i64 0, i64 0))
  store i8* %return45, i8** %_bound_constraintdefines
  %8 = icmp ne i64 %hassmoothing.0, 0
  br i1 %8, label %true47, label %end48

true:                                             ; preds = %body
  br label %end13

end13:                                            ; preds = %true, %body
  %type.0 = phi i8* [ getelementptr inbounds ([8 x i8], [8 x i8]* @13, i64 0, i64 0), %true ], [ %constraintAlias, %body ]
  store i8* %type.0, i8** %2
  %isTriARAP = call i64 @"isTriARAP@IS"(i8** %2)
  %9 = icmp ne i64 %isTriARAP, 0
  br i1 %9, label %true15, label %end16

true15:                                           ; preds = %end13
  br label %end16

end16:                                            ; preds = %true15, %end13
  %type.1 = phi i8* [ getelementptr inbounds ([8 x i8], [8 x i8]* @7, i64 0, i64 0), %true15 ], [ %type.0, %end13 ]
  store i8* %type.1, i8** %3
  %isTetFiber = call i64 @"isTetFiber@IS"(i8** %3)
  %10 = icmp ne i64 %isTetFiber, 0
  br i1 %10, label %true18, label %end19

true18:                                           ; preds = %end16
  br label %end19

end19:                                            ; preds = %true18, %end16
  %type.2 = phi i8* [ getelementptr inbounds ([9 x i8], [9 x i8]* @16, i64 0, i64 0), %true18 ], [ %type.1, %end16 ]
  %return23 = call i64 @"find@I[SS"(i8** %return2, i8* %type.2)
  %return24 = call i64 @"ge@III"(i64 %return23, i64 0)
  %return25 = call i64 @"and@III"(i64 %return1, i64 %return24)
  %11 = icmp ne i64 %return25, 0
  br i1 %11, label %true26, label %false

true26:                                           ; preds = %end19
  %output = call i8* @"add@SS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @33, i64 0, i64 0), i8* %type.2)
  %output30 = call i8** @"append@[SS"(i8** %secondarydefines.0, i8* %output)
  store i8* %type.2, i8** %4
  %hasSmoothing = call i64 @"hasSmoothing@IS"(i8** %4)
  %return33 = or i64 %hassecondarysmoothing.0, %hasSmoothing
  br label %end27

false:                                            ; preds = %end19
  %output36 = call i8* @"add@SS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @33, i64 0, i64 0), i8* %type.2)
  %output37 = call i8** @"append@[SS"(i8** %defines.0, i8* %output36)
  store i8* %type.2, i8** %5
  %hasSmoothing40 = call i64 @"hasSmoothing@IS"(i8** %5)
  %return41 = or i64 %hassmoothing.0, %hasSmoothing40
  br label %end27

end27:                                            ; preds = %false, %true26
  %defines.1 = phi i8** [ %defines.0, %true26 ], [ %output37, %false ]
  %secondarydefines.1 = phi i8** [ %output30, %true26 ], [ %secondarydefines.0, %false ]
  %hassmoothing.1 = phi i64 [ %hassmoothing.0, %true26 ], [ %return41, %false ]
  %hassecondarysmoothing.1 = phi i64 [ %return33, %true26 ], [ %hassecondarysmoothing.0, %false ]
  %output43 = add i64 %__impl_foreach_index_8d.0, 1
  br label %cond

true47:                                           ; preds = %end
  %_bound_offsets49 = load i64*, i64** %_bound_offsets
  store i64* %_bound_offsets49, i64** %_bound_smoothingoffsets
  %_bound_sizes50 = load i64*, i64** %_bound_sizes
  store i64* %_bound_sizes50, i64** %_bound_smoothingsizes
  br label %end48

end48:                                            ; preds = %true47, %end
  %12 = icmp ne i64 %return1, 0
  br i1 %12, label %true52, label %end53

true52:                                           ; preds = %end48
  %return54 = call i64 @"geoself@I"()
  %return56 = call i8* @"join@S[SS"(i8** %secondarydefines.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @34, i64 0, i64 0))
  %return57 = call i64 @"setdetailattrib@IISS"(i64 %return54, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @35, i64 0, i64 0), i8* %return56)
  %13 = icmp ne i64 %hassecondarysmoothing.0, 0
  br i1 %13, label %true59, label %end60

end53:                                            ; preds = %end60, %end48
  ret void

true59:                                           ; preds = %true52
  %_bound_secondaryoffsets61 = load i64*, i64** %_bound_secondaryoffsets
  %_bound_secondarysizes62 = load i64*, i64** %_bound_secondarysizes
  br label %end60

end60:                                            ; preds = %true59, %true52
  %secondarysmoothingoffsets.0 = phi i64* [ %_bound_secondaryoffsets61, %true59 ], [ getelementptr inbounds ([0 x i64], [0 x i64]* @36, i64 0, i64 0), %true52 ]
  %secondarysmoothingsizes.0 = phi i64* [ %_bound_secondarysizes62, %true59 ], [ getelementptr inbounds ([0 x i64], [0 x i64]* @36, i64 0, i64 0), %true52 ]
  %return63 = call i64 @"geoself@I"()
  %return65 = call i64 @"setdetailattrib@IIS[I"(i64 %return63, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @37, i64 0, i64 0), i64* %secondarysmoothingoffsets.0)
  %return66 = call i64 @"geoself@I"()
  %return68 = call i64 @"setdetailattrib@IIS[I"(i64 %return66, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @38, i64 0, i64 0), i64* %secondarysmoothingsizes.0)
  br label %end53
}

; Function Attrs: nounwind
declare i8** @"uniquevals@[SISS"(i64, i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind
declare i8** @"detail@[SIS"(i64, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #1

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"add@SS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"join@S[SS"(i8**, i8*) #1

; Function Attrs: nounwind
declare i64 @"geoself@I"() #2

; Function Attrs: nounwind
declare i64 @"setdetailattrib@IISS"(i64, i8*, i8*) #2

; Function Attrs: nounwind
declare i64 @"setdetailattrib@IIS[I"(i64, i8*, i64*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64* %smoothingoffsets, i64* %smoothingsizes, i8* %constraintdefines, i64* %offsets, i64* %sizes, i64* %secondaryoffsets, i64* %secondarysizes) #2 {
__llvm_entry:
  %"<smoothingsizes>" = alloca i64*
  %"<constraintdefines>" = alloca i8*
  %0 = alloca i64*
  %1 = alloca i64*
  %2 = alloca i64*
  %3 = alloca i64*
  %"<smoothingoffsets>" = alloca i64*
  store i64* %smoothingoffsets, i64** %"<smoothingoffsets>"
  store i64* %smoothingsizes, i64** %"<smoothingsizes>"
  store i8* %constraintdefines, i8** %"<constraintdefines>"
  store i64* %offsets, i64** %0
  store i64* %sizes, i64** %1
  store i64* %secondaryoffsets, i64** %2
  store i64* %secondarysizes, i64** %3
  call void @"__vex_snippet_snippet@[I[IS[I[I[I[I"(i64** %"<smoothingoffsets>", i64** %"<smoothingsizes>", i8** %"<constraintdefines>", i64** %0, i64** %1, i64** %2, i64** %3)
  %evalue = load i64*, i64** %"<smoothingoffsets>"
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @39, i64 0, i64 0), i64* %evalue) #3
  %evalue5 = load i64*, i64** %"<smoothingsizes>"
  %gvalue6 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @40, i64 0, i64 0), i64* %evalue5) #3
  %evalue7 = load i8*, i8** %"<constraintdefines>"
  %gvalue8 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @41, i64 0, i64 0), i8* %evalue7) #3
  store i64* %gvalue, i64** @smoothingoffsets
  store i64* %gvalue6, i64** @smoothingsizes
  store i8* %gvalue8, i8** @constraintdefines
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @36, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @36, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @32, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @36, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @36, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @36, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @36, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

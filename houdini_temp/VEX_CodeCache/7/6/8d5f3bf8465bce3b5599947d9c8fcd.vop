;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [3 x i8] c"Cd\00"
@1 = private constant [1 x i8] zeroinitializer
@ptnum = external global i64
@Cd = external global <3 x double>
@name = external global i8*
@2 = private constant [6 x i8] c"ptnum\00"
@3 = private constant [5 x i8] c"name\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVS"(i64* %_bound_ptnum, <3 x double>* %_bound_Cd, i8** %_bound_name) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64 @"mod@III"(i64 %_bound_ptnum1, i64 20)
  %return4 = call i64 @"eq@III"(i64 %return, i64 19)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return5 = call i64 @"neg@II"(i64 1)
  br label %end

false:                                            ; preds = %__llvm_entry
  %output7 = add i64 %_bound_ptnum1, 1
  br label %end

end:                                              ; preds = %false, %true
  %phi = phi i64 [ %return5, %true ], [ %output7, %false ]
  %_bound_ptnum8 = load i64, i64* %_bound_ptnum
  %return10 = call i64 @"mod@III"(i64 %_bound_ptnum8, i64 20)
  %return11 = call i64 @"eq@III"(i64 %return10, i64 0)
  %1 = icmp ne i64 %return11, 0
  br i1 %1, label %true12, label %false13

true12:                                           ; preds = %end
  %return15 = call i64 @"neg@II"(i64 1)
  br label %end14

false13:                                          ; preds = %end
  %output17 = sub i64 %_bound_ptnum8, 1
  br label %end14

end14:                                            ; preds = %false13, %true12
  %phi18 = phi i64 [ %return15, %true12 ], [ %output17, %false13 ]
  %_bound_ptnum19 = load i64, i64* %_bound_ptnum
  %return21 = call i64 @"lt@III"(i64 %_bound_ptnum19, i64 20)
  %2 = icmp ne i64 %return21, 0
  br i1 %2, label %true22, label %false23

true22:                                           ; preds = %end14
  %return25 = call i64 @"neg@II"(i64 1)
  br label %end24

false23:                                          ; preds = %end14
  %output28 = sub i64 %_bound_ptnum19, 20
  br label %end24

end24:                                            ; preds = %false23, %true22
  %phi29 = phi i64 [ %return25, %true22 ], [ %output28, %false23 ]
  %_bound_ptnum30 = load i64, i64* %_bound_ptnum
  %return37 = call i64 @"gt@III"(i64 %_bound_ptnum30, i64 379)
  %3 = icmp ne i64 %return37, 0
  br i1 %3, label %true38, label %false39

true38:                                           ; preds = %end24
  %return41 = call i64 @"neg@II"(i64 1)
  br label %end40

false39:                                          ; preds = %end24
  %output44 = add i64 %_bound_ptnum30, 20
  br label %end40

end40:                                            ; preds = %false39, %true38
  %phi45 = phi i64 [ %return41, %true38 ], [ %output44, %false39 ]
  %_bound_ptnum46 = load i64, i64* %_bound_ptnum
  %output47 = add i64 %_bound_ptnum46, 1
  %output49 = sub i64 %output47, 20
  %return50 = call i64 @"le@III"(i64 %output49, i64 0)
  %return53 = call i64 @"mod@III"(i64 %_bound_ptnum46, i64 20)
  %return56 = call i64 @"eq@III"(i64 %return53, i64 19)
  %return57 = call i64 @"or@III"(i64 %return50, i64 %return56)
  %4 = icmp ne i64 %return57, 0
  br i1 %4, label %true58, label %false59

true58:                                           ; preds = %end40
  %return61 = call i64 @"neg@II"(i64 1)
  br label %end60

false59:                                          ; preds = %end40
  br label %end60

end60:                                            ; preds = %false59, %true58
  %phi66 = phi i64 [ %return61, %true58 ], [ %output49, %false59 ]
  %_bound_ptnum67 = load i64, i64* %_bound_ptnum
  %output68 = sub i64 %_bound_ptnum67, 1
  %output70 = sub i64 %output68, 20
  %return71 = call i64 @"le@III"(i64 %output70, i64 0)
  %return74 = call i64 @"mod@III"(i64 %_bound_ptnum67, i64 20)
  %return75 = call i64 @"eq@III"(i64 %return74, i64 0)
  %return76 = call i64 @"or@III"(i64 %return71, i64 %return75)
  %5 = icmp ne i64 %return76, 0
  br i1 %5, label %true77, label %false78

true77:                                           ; preds = %end60
  %return80 = call i64 @"neg@II"(i64 1)
  br label %end79

false78:                                          ; preds = %end60
  br label %end79

end79:                                            ; preds = %false78, %true77
  %phi85 = phi i64 [ %return80, %true77 ], [ %output70, %false78 ]
  %_bound_ptnum86 = load i64, i64* %_bound_ptnum
  %return93 = call i64 @"gt@III"(i64 %_bound_ptnum86, i64 379)
  %return96 = call i64 @"mod@III"(i64 %_bound_ptnum86, i64 20)
  %return99 = call i64 @"eq@III"(i64 %return96, i64 19)
  %return100 = call i64 @"or@III"(i64 %return93, i64 %return99)
  %6 = icmp ne i64 %return100, 0
  br i1 %6, label %true101, label %false102

true101:                                          ; preds = %end79
  %return104 = call i64 @"neg@II"(i64 1)
  br label %end103

false102:                                         ; preds = %end79
  %output106 = add i64 %_bound_ptnum86, 1
  %output108 = add i64 %output106, 20
  br label %end103

end103:                                           ; preds = %false102, %true101
  %phi109 = phi i64 [ %return104, %true101 ], [ %output108, %false102 ]
  %_bound_ptnum110 = load i64, i64* %_bound_ptnum
  %return117 = call i64 @"gt@III"(i64 %_bound_ptnum110, i64 379)
  %return120 = call i64 @"mod@III"(i64 %_bound_ptnum110, i64 20)
  %return121 = call i64 @"eq@III"(i64 %return120, i64 0)
  %return122 = call i64 @"or@III"(i64 %return117, i64 %return121)
  %7 = icmp ne i64 %return122, 0
  br i1 %7, label %true123, label %false124

true123:                                          ; preds = %end103
  %return126 = call i64 @"neg@II"(i64 1)
  br label %end125

false124:                                         ; preds = %end103
  %output128 = sub i64 %_bound_ptnum110, 1
  %output130 = add i64 %output128, 20
  br label %end125

end125:                                           ; preds = %false124, %true123
  %phi131 = phi i64 [ %return126, %true123 ], [ %output130, %false124 ]
  %return133 = call i64 @"neg@II"(i64 1)
  %return134 = call i64 @"eq@III"(i64 %phi, i64 %return133)
  %8 = icmp ne i64 %return134, 0
  br i1 %8, label %end137, label %false136

false136:                                         ; preds = %end125
  %return139 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), i64 %phi)
  %return140 = call double @"rint@FF"(double %return139)
  %cast = fptosi double %return140 to i64
  %output141 = sub i64 1, %cast
  br label %end137

end137:                                           ; preds = %end125, %false136
  %phi142 = phi i64 [ %output141, %false136 ], [ 0, %end125 ]
  %return145 = call i64 @"eq@III"(i64 %phi18, i64 %return133)
  %9 = icmp ne i64 %return145, 0
  br i1 %9, label %end148, label %false147

false147:                                         ; preds = %end137
  %return150 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), i64 %phi18)
  %return151 = call double @"rint@FF"(double %return150)
  %cast152 = fptosi double %return151 to i64
  %output153 = sub i64 1, %cast152
  br label %end148

end148:                                           ; preds = %end137, %false147
  %phi154 = phi i64 [ %output153, %false147 ], [ 0, %end137 ]
  %return157 = call i64 @"eq@III"(i64 %phi45, i64 %return133)
  %10 = icmp ne i64 %return157, 0
  br i1 %10, label %end160, label %false159

false159:                                         ; preds = %end148
  %return162 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), i64 %phi45)
  %return163 = call double @"rint@FF"(double %return162)
  %cast164 = fptosi double %return163 to i64
  %output165 = sub i64 1, %cast164
  br label %end160

end160:                                           ; preds = %end148, %false159
  %phi166 = phi i64 [ %output165, %false159 ], [ 0, %end148 ]
  %return169 = call i64 @"eq@III"(i64 %phi29, i64 %return133)
  %11 = icmp ne i64 %return169, 0
  br i1 %11, label %end172, label %false171

false171:                                         ; preds = %end160
  %return174 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), i64 %phi29)
  %return175 = call double @"rint@FF"(double %return174)
  %cast176 = fptosi double %return175 to i64
  %output177 = sub i64 1, %cast176
  br label %end172

end172:                                           ; preds = %end160, %false171
  %phi178 = phi i64 [ %output177, %false171 ], [ 0, %end160 ]
  %return181 = call i64 @"eq@III"(i64 %phi66, i64 %return133)
  %12 = icmp ne i64 %return181, 0
  br i1 %12, label %end184, label %false183

false183:                                         ; preds = %end172
  %return186 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), i64 %phi66)
  %return187 = call double @"rint@FF"(double %return186)
  %cast188 = fptosi double %return187 to i64
  %output189 = sub i64 1, %cast188
  br label %end184

end184:                                           ; preds = %end172, %false183
  %phi190 = phi i64 [ %output189, %false183 ], [ 0, %end172 ]
  %return193 = call i64 @"eq@III"(i64 %phi85, i64 %return133)
  %13 = icmp ne i64 %return193, 0
  br i1 %13, label %end196, label %false195

false195:                                         ; preds = %end184
  %return198 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), i64 %phi85)
  %return199 = call double @"rint@FF"(double %return198)
  %cast200 = fptosi double %return199 to i64
  %output201 = sub i64 1, %cast200
  br label %end196

end196:                                           ; preds = %end184, %false195
  %phi202 = phi i64 [ %output201, %false195 ], [ 0, %end184 ]
  %return205 = call i64 @"eq@III"(i64 %phi109, i64 %return133)
  %14 = icmp ne i64 %return205, 0
  br i1 %14, label %end208, label %false207

false207:                                         ; preds = %end196
  %return210 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), i64 %phi109)
  %return211 = call double @"rint@FF"(double %return210)
  %cast212 = fptosi double %return211 to i64
  %output213 = sub i64 1, %cast212
  br label %end208

end208:                                           ; preds = %end196, %false207
  %phi214 = phi i64 [ %output213, %false207 ], [ 0, %end196 ]
  %return217 = call i64 @"eq@III"(i64 %phi131, i64 %return133)
  %15 = icmp ne i64 %return217, 0
  br i1 %15, label %end220, label %false219

false219:                                         ; preds = %end208
  %return222 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), i64 %phi131)
  %return223 = call double @"rint@FF"(double %return222)
  %cast224 = fptosi double %return223 to i64
  %output225 = sub i64 1, %cast224
  br label %end220

end220:                                           ; preds = %end208, %false219
  %phi226 = phi i64 [ %output225, %false219 ], [ 0, %end208 ]
  %return228 = call i64 @"eq@III"(i64 %phi178, i64 0)
  %16 = icmp ne i64 %return228, 0
  br i1 %16, label %true229, label %end230

true229:                                          ; preds = %end220
  br label %end230

end230:                                           ; preds = %true229, %end220
  %north_east.0 = phi i64 [ 0, %true229 ], [ %phi190, %end220 ]
  %north_west.0 = phi i64 [ 0, %true229 ], [ %phi202, %end220 ]
  %return232 = call i64 @"eq@III"(i64 %phi142, i64 0)
  %17 = icmp ne i64 %return232, 0
  br i1 %17, label %true233, label %end234

true233:                                          ; preds = %end230
  br label %end234

end234:                                           ; preds = %true233, %end230
  %north_east.1 = phi i64 [ 0, %true233 ], [ %north_east.0, %end230 ]
  %south_east.0 = phi i64 [ 0, %true233 ], [ %phi214, %end230 ]
  %return236 = call i64 @"eq@III"(i64 %phi154, i64 0)
  %18 = icmp ne i64 %return236, 0
  br i1 %18, label %true237, label %end238

true237:                                          ; preds = %end234
  br label %end238

end238:                                           ; preds = %true237, %end234
  %north_west.1 = phi i64 [ 0, %true237 ], [ %north_west.0, %end234 ]
  %south_west.0 = phi i64 [ 0, %true237 ], [ %phi226, %end234 ]
  %return240 = call i64 @"eq@III"(i64 %phi166, i64 0)
  %19 = icmp ne i64 %return240, 0
  br i1 %19, label %true241, label %end242

true241:                                          ; preds = %end238
  br label %end242

end242:                                           ; preds = %true241, %end238
  %south_east.1 = phi i64 [ 0, %true241 ], [ %south_east.0, %end238 ]
  %south_west.1 = phi i64 [ 0, %true241 ], [ %south_west.0, %end238 ]
  %output246 = mul i64 %north_east.1, 2
  %output247 = add i64 %phi178, %output246
  %output249 = mul i64 %phi142, 4
  %output250 = add i64 %output247, %output249
  %output252 = mul i64 %south_east.1, 8
  %output253 = add i64 %output250, %output252
  %output255 = mul i64 %phi166, 16
  %output256 = add i64 %output253, %output255
  %output258 = mul i64 %south_west.1, 32
  %output259 = add i64 %output256, %output258
  %output261 = mul i64 %phi154, 64
  %output262 = add i64 %output259, %output261
  %output264 = mul i64 %north_west.1, 128
  %output265 = add i64 %output262, %output264
  %_bound_Cd266 = load <3 x double>, <3 x double>* %_bound_Cd
  %return267 = call double @"getcomp@FVI"(<3 x double> %_bound_Cd266, i64 0)
  %return268 = call double @"rint@FF"(double %return267)
  %return269 = fcmp oeq double %return268, 1.000000e+00
  %.output265 = select i1 %return269, i64 0, i64 %output265
  %return274 = call i8* @"itoa@SI"(i64 %.output265)
  store i8* %return274, i8** %_bound_name
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"le@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare double @"rint@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %Cd, i8* %name) #2 {
__llvm_entry:
  %"<name>" = alloca i8*
  %0 = alloca i64
  %1 = alloca <3 x double>
  store i8* %name, i8** %"<name>"
  store i64 %ptnum, i64* %0
  store <3 x double> %Cd, <3 x double>* %1
  call void @"__vex_snippet_snippet@IVS"(i64* %0, <3 x double>* %1, i8** %"<name>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %ptnum) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), <3 x double> %Cd) #3
  %evalue5 = load i8*, i8** %"<name>"
  %gvalue6 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), i8* %evalue5) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue4, <3 x double>* @Cd
  store i8* %gvalue6, i8** @name
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

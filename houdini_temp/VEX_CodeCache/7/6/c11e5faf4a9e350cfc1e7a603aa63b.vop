;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [21 x i8] c"../connectonlytoends\00"
@2 = private constant [25 x i8] c"__trace_edges_end_points\00"
@3 = private constant [16 x i8] c"../maxendptdist\00"
@__trace_edges_target_point = external global i64
@group___trace_edges_end_points = external global i64
@4 = private constant [27 x i8] c"__trace_edges_target_point\00"
@5 = private constant [31 x i8] c"group___trace_edges_end_points\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVII"(i64* %_bound___trace_edges_target_point, <3 x double>* %_bound_P, i64* %_bound_ptnum, i64* %_bound_group___trace_edges_end_points) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @1, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %group.0 = phi i8* [ getelementptr inbounds ([25 x i8], [25 x i8]* @2, i64 0, i64 0), %true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), %__llvm_entry ]
  %_bound_P3 = load <3 x double>, <3 x double>* %_bound_P
  %return4 = call double @"chf@FS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @3, i64 0, i64 0))
  %return5 = call i64* @"nearpoints@[IISVFI"(i64 0, i8* %group.0, <3 x double> %_bound_P3, double %return4, i64 2)
  %return7 = call i64 @"min@I[I"(i64* %return5)
  store i64 %return7, i64* %_bound___trace_edges_target_point
  %return9 = call i64 @"len@I[I"(i64* %return5)
  %return11 = call i64 @"not@II"(i64 %return)
  %return13 = call i64 @"ne@III"(i64 %return9, i64 1)
  %return14 = call i64 @"and@III"(i64 %return11, i64 %return13)
  %_bound_ptnum16 = load i64, i64* %_bound_ptnum
  %return17 = call i64 @"eq@III"(i64 %return7, i64 %_bound_ptnum16)
  %return18 = call i64 @"and@III"(i64 %return14, i64 %return17)
  %1 = icmp ne i64 %return18, 0
  br i1 %1, label %true19, label %end20

true19:                                           ; preds = %end
  %return23 = call { i64, i64* } @"removevalue@I[II"(i64* %return5, i64 %_bound_ptnum16)
  %output = extractvalue { i64, i64* } %return23, 1
  %return26 = call i64 @"min@I[I"(i64* %output)
  store i64 %return26, i64* %_bound___trace_edges_target_point
  %return28 = call i64 @"inpointgroup@IISI"(i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @2, i64 0, i64 0), i64 %return26)
  %2 = icmp ne i64 %return28, 0
  br i1 %2, label %true29, label %end20

end20:                                            ; preds = %true19, %true29, %end
  %_bound___trace_edges_target_point34 = load i64, i64* %_bound___trace_edges_target_point
  %_bound_ptnum35 = load i64, i64* %_bound_ptnum
  %return36 = call i64 @"ne@III"(i64 %_bound___trace_edges_target_point34, i64 %_bound_ptnum35)
  %return37 = call i64 @"and@III"(i64 %return13, i64 %return36)
  store i64 %return37, i64* %_bound_group___trace_edges_end_points
  ret void

true29:                                           ; preds = %true19
  %_bound_ptnum31 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum31, i64* %_bound___trace_edges_target_point
  br label %end20
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare i64* @"nearpoints@[IISVFI"(i64, i8*, <3 x double>, double, i64) #2

; Function Attrs: nounwind
declare i64 @"min@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare { i64, i64* } @"removevalue@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"inpointgroup@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %__trace_edges_target_point, <3 x double> %P, i64 %ptnum, i64 %group___trace_edges_end_points) #2 {
__llvm_entry:
  %"<group___trace_edges_end_points>" = alloca i64
  %0 = alloca <3 x double>
  %1 = alloca i64
  %"<__trace_edges_target_point>" = alloca i64
  store i64 %__trace_edges_target_point, i64* %"<__trace_edges_target_point>"
  store i64 %group___trace_edges_end_points, i64* %"<group___trace_edges_end_points>"
  store <3 x double> %P, <3 x double>* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@IVII"(i64* %"<__trace_edges_target_point>", <3 x double>* %0, i64* %1, i64* %"<group___trace_edges_end_points>")
  %evalue = load i64, i64* %"<__trace_edges_target_point>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @4, i64 0, i64 0), i64 %evalue) #3
  %evalue3 = load i64, i64* %"<group___trace_edges_end_points>"
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @5, i64 0, i64 0), i64 %evalue3) #3
  store i64 %gvalue, i64* @__trace_edges_target_point
  store i64 %gvalue4, i64* @group___trace_edges_end_points
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 -1, <3 x double> zeroinitializer, i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

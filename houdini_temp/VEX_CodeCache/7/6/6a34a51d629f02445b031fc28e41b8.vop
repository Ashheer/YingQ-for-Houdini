;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [7 x i8] c"ninput\00"
@1 = private constant [10 x i8] c"../maxpts\00"
@2 = private constant [8 x i8] c"../self\00"
@3 = private constant [0 x double] zeroinitializer
@4 = private constant [0 x i64] zeroinitializer
@5 = private constant [2 x i8] c"P\00"
@6 = private constant [7 x i8] c"radius\00"
@7 = private constant [10 x i8] c"../rscale\00"
@8 = private constant [5 x i8] c"../r\00"
@9 = private constant [10 x i8] c"../nearpt\00"
@10 = private constant [9 x i8] c"../farpt\00"
@11 = private constant [11 x i8] c"../nearpts\00"
@12 = private constant [15 x i8] c"../nearptcount\00"
@13 = private constant [15 x i8] c"../creategroup\00"
@14 = private constant [8 x i8] c"../name\00"
@15 = private constant [11 x i8] c"../density\00"
@16 = private constant [12 x i8] c"../neardist\00"
@17 = private constant [11 x i8] c"../fardist\00"
@18 = private constant [13 x i8] c"../neardists\00"
@19 = private constant [18 x i8] c"../computeweights\00"
@20 = private constant [11 x i8] c"../vistype\00"
@21 = private constant [5 x <3 x double>] [<3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 0.000000e+00>, <3 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>]
@22 = private constant [4 x <3 x double>] [<3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 0.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>]
@23 = private constant [4 x <3 x double>] [<3 x double> zeroinitializer, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>, <3 x double> <double 0.000000e+00, double 5.000000e-01, double 1.000000e+00>, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>]
@24 = private constant [2 x <3 x double>] [<3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>]
@25 = private constant [7 x i8] c"linear\00"
@nearpt = external global i64
@neardist = external global double
@P = external global <3 x double>
@ptnum = external global i64
@farpt = external global i64
@nearpts = external global i64*
@nearptcount = external global i64
@density = external global double
@fardist = external global double
@neardists = external global double*
@weights = external global double*
@Cd = external global <3 x double>
@26 = private constant [7 x i8] c"nearpt\00"
@27 = private constant [9 x i8] c"neardist\00"
@28 = private constant [6 x i8] c"ptnum\00"
@29 = private constant [6 x i8] c"farpt\00"
@30 = private constant [8 x i8] c"nearpts\00"
@31 = private constant [12 x i8] c"nearptcount\00"
@32 = private constant [8 x i8] c"density\00"
@33 = private constant [8 x i8] c"fardist\00"
@34 = private constant [10 x i8] c"neardists\00"
@35 = private constant [8 x i8] c"weights\00"
@36 = private constant [3 x i8] c"Cd\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IFVII[IIFF[F[FV"(i64* %_bound_nearpt, double* %_bound_neardist, <3 x double>* %_bound_P, i64* %_bound_ptnum, i64* %_bound_farpt, i64** %_bound_nearpts, i64* %_bound_nearptcount, double* %_bound_density, double* %_bound_fardist, double** %_bound_neardists, double** %_bound_weights, <3 x double>* %_bound_Cd) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0))
  %return3 = call i64 @"eq@III"(i64 %return, i64 0)
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  %return5 = call i64 @"eq@III"(i64 %return4, i64 0)
  %return6 = call i64 @"and@III"(i64 %return3, i64 %return5)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %output = add i64 %return1, 1
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %maxpts.0 = phi i64 [ %output, %true ], [ %return1, %__llvm_entry ]
  %return9 = call i8* @"chs@SS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0))
  %return10 = call double @"ch@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @7, i64 0, i64 0))
  %_bound_P11 = load <3 x double>, <3 x double>* %_bound_P
  %return12 = call double @"ch@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0))
  %return14 = call { i64*, double* } @"pcfind_radius@[IISSFVFI[F"(i64 %return, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), i8* %return9, double %return10, <3 x double> %_bound_P11, double %return12, i64 %maxpts.0)
  %return15 = extractvalue { i64*, double* } %return14, 0
  %output16 = extractvalue { i64*, double* } %return14, 1
  br i1 %0, label %true22, label %end23

true22:                                           ; preds = %end
  %_bound_ptnum25 = load i64, i64* %_bound_ptnum
  %return26 = call { i64, i64* } @"removevalue@I[II"(i64* %return15, i64 %_bound_ptnum25)
  %output28 = extractvalue { i64, i64* } %return26, 1
  br label %end23

end23:                                            ; preds = %true22, %end
  %pts.0 = phi i64* [ %output28, %true22 ], [ %return15, %end ]
  %return30 = call i64 @"len@I[I"(i64* %pts.0)
  %return31 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @9, i64 0, i64 0))
  %return33 = call i64 @"ne@III"(i64 %return30, i64 0)
  %return34 = call i64 @"and@III"(i64 %return31, i64 %return33)
  %1 = icmp ne i64 %return34, 0
  br i1 %1, label %true35, label %end36

true35:                                           ; preds = %end23
  %return38 = call i64 @"getcomp@I[II"(i64* %pts.0, i64 0)
  store i64 %return38, i64* %_bound_nearpt
  br label %end36

end36:                                            ; preds = %true35, %end23
  %return39 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @10, i64 0, i64 0))
  %return42 = call i64 @"and@III"(i64 %return39, i64 %return33)
  %2 = icmp ne i64 %return42, 0
  br i1 %2, label %true43, label %end44

true43:                                           ; preds = %end36
  %return46 = call i64 @"neg@II"(i64 1)
  %return47 = call i64 @"getcomp@I[II"(i64* %pts.0, i64 %return46)
  store i64 %return47, i64* %_bound_farpt
  br label %end44

end44:                                            ; preds = %true43, %end36
  %return48 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @11, i64 0, i64 0))
  %3 = icmp ne i64 %return48, 0
  br i1 %3, label %true49, label %end50

true49:                                           ; preds = %end44
  store i64* %pts.0, i64** %_bound_nearpts
  br label %end50

end50:                                            ; preds = %true49, %end44
  %return52 = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @12, i64 0, i64 0))
  %4 = icmp ne i64 %return52, 0
  br i1 %4, label %true53, label %end54

true53:                                           ; preds = %end50
  store i64 %return30, i64* %_bound_nearptcount
  br label %end54

end54:                                            ; preds = %true53, %end50
  %return56 = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @13, i64 0, i64 0))
  %5 = icmp ne i64 %return56, 0
  br i1 %5, label %true57, label %end58

true57:                                           ; preds = %end54
  %6 = icmp ne i64 %return3, 0
  br i1 %6, label %true61, label %false

end58:                                            ; preds = %false, %true80, %cond, %end54
  %cast = sitofp i64 %return30 to double
  %cast89 = sitofp i64 %return1 to double
  %output90 = call double @"div@FF"(double %cast, double %cast89)
  %return91 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @15, i64 0, i64 0))
  %7 = icmp ne i64 %return91, 0
  br i1 %7, label %true92, label %end93

true61:                                           ; preds = %true57
  br label %cond

false:                                            ; preds = %true57
  %return79 = call i64 @"gt@III"(i64 %return30, i64 0)
  %8 = icmp ne i64 %return79, 0
  br i1 %8, label %true80, label %end58

cond:                                             ; preds = %body, %true61
  %__impl_foreach_index.0 = phi i64 [ 0, %true61 ], [ %output77, %body ]
  %return67 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return30)
  %9 = icmp ne i64 %return67, 0
  br i1 %9, label %body, label %end58

body:                                             ; preds = %cond
  %return71 = call i64 @"getcomp@I[II"(i64* %pts.0, i64 %__impl_foreach_index.0)
  %return72 = call i64 @"geoself@I"()
  %return73 = call i8* @"chs@SS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @14, i64 0, i64 0))
  %return75 = call i64 @"setpointgroup@IISII"(i64 %return72, i8* %return73, i64 %return71, i64 1)
  %output77 = add i64 %__impl_foreach_index.0, 1
  br label %cond

true80:                                           ; preds = %false
  %return82 = call i64 @"geoself@I"()
  %return83 = call i8* @"chs@SS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @14, i64 0, i64 0))
  %_bound_ptnum84 = load i64, i64* %_bound_ptnum
  %return85 = call i64 @"setpointgroup@IISII"(i64 %return82, i8* %return83, i64 %_bound_ptnum84, i64 1)
  br label %end58

true92:                                           ; preds = %end58
  store double %output90, double* %_bound_density
  br label %end93

end93:                                            ; preds = %true92, %end58
  %return95 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @16, i64 0, i64 0))
  %return98 = call i64 @"and@III"(i64 %return95, i64 %return33)
  %10 = icmp ne i64 %return98, 0
  br i1 %10, label %true99, label %end100

true99:                                           ; preds = %end93
  %return103 = call i64 @"getcomp@I[II"(i64* %pts.0, i64 0)
  %return104 = call <3 x double> @"point@VISI"(i64 %return, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), i64 %return103)
  %_bound_P105 = load <3 x double>, <3 x double>* %_bound_P
  %return107 = call double @"distance@FVV"(<3 x double> %_bound_P105, <3 x double> %return104)
  store double %return107, double* %_bound_neardist
  br label %end100

end100:                                           ; preds = %true99, %end93
  %return108 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @17, i64 0, i64 0))
  %return111 = call i64 @"and@III"(i64 %return108, i64 %return33)
  %11 = icmp ne i64 %return111, 0
  br i1 %11, label %true112, label %end113

true112:                                          ; preds = %end100
  %return117 = call i64 @"neg@II"(i64 1)
  %return118 = call i64 @"getcomp@I[II"(i64* %pts.0, i64 %return117)
  %return119 = call <3 x double> @"point@VISI"(i64 %return, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), i64 %return118)
  %_bound_P120 = load <3 x double>, <3 x double>* %_bound_P
  %return122 = call double @"distance@FVV"(<3 x double> %_bound_P120, <3 x double> %return119)
  store double %return122, double* %_bound_fardist
  br label %end113

end113:                                           ; preds = %true112, %end100
  %return123 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @18, i64 0, i64 0))
  %12 = icmp ne i64 %return123, 0
  br i1 %12, label %true124, label %end125

true124:                                          ; preds = %end113
  store double* %output16, double** %_bound_neardists
  br label %end125

end125:                                           ; preds = %true124, %end113
  %return127 = call i64 @"chi@IS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @19, i64 0, i64 0))
  %13 = icmp ne i64 %return127, 0
  br i1 %13, label %true128, label %end129

true128:                                          ; preds = %end125
  %return131 = call i64 @"neg@II"(i64 1)
  %return132 = call double @"getcomp@F[FI"(double* %output16, i64 %return131)
  br label %cond136

end129:                                           ; preds = %end166, %end125
  %return180 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @20, i64 0, i64 0))
  %return182 = call i64 @"ne@III"(i64 %return180, i64 4)
  %14 = icmp ne i64 %return182, 0
  br i1 %14, label %true183, label %end184

cond136:                                          ; preds = %body137, %true128
  %weights.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %true128 ], [ %output152, %body137 ]
  %sumweight.0 = phi double [ 0.000000e+00, %true128 ], [ %output155, %body137 ]
  %i.0 = phi i64 [ 0, %true128 ], [ %output157, %body137 ]
  %return140 = call i64 @"lt@III"(i64 %i.0, i64 %return30)
  %15 = icmp ne i64 %return140, 0
  br i1 %15, label %body137, label %end141

body137:                                          ; preds = %cond136
  %output144 = fmul double 1.100000e+00, %return132
  %return147 = call double @"getcomp@F[FI"(double* %output16, i64 %i.0)
  %return148 = call double @"smooth@FFFF"(double 0.000000e+00, double %output144, double %return147)
  %output149 = fsub double 1.000000e+00, %return148
  %output152 = call double* @"append@[FF"(double* %weights.0, double %output149)
  %output155 = fadd double %sumweight.0, %output149
  %output157 = add i64 %i.0, 1
  br label %cond136

end141:                                           ; preds = %cond136
  %output159 = call double @"div@FF"(double 1.000000e+00, double %sumweight.0)
  br label %cond161

cond161:                                          ; preds = %body162, %end141
  %weights.1 = phi double* [ %weights.0, %end141 ], [ %output176, %body162 ]
  %i160.0 = phi i64 [ 0, %end141 ], [ %output178, %body162 ]
  %return165 = call i64 @"lt@III"(i64 %i160.0, i64 %return30)
  %16 = icmp ne i64 %return165, 0
  br i1 %16, label %body162, label %end166

body162:                                          ; preds = %cond161
  %return171 = call double @"getcomp@F[FI"(double* %weights.1, i64 %i160.0)
  %output173 = fmul double %return171, %output159
  %return174 = call { double, double* } @"setcomp@F[FFI"(double* %weights.1, double %output173, i64 %i160.0)
  %output176 = extractvalue { double, double* } %return174, 1
  %output178 = add i64 %i160.0, 1
  br label %cond161

end166:                                           ; preds = %cond161
  store double* %weights.1, double** %_bound_weights
  br label %end129

true183:                                          ; preds = %end129
  %return186 = call i64 @"eq@III"(i64 %return180, i64 0)
  %17 = icmp ne i64 %return186, 0
  br i1 %17, label %true187, label %false188

end184:                                           ; preds = %end189, %end129
  ret void

true187:                                          ; preds = %true183
  br label %end189

false188:                                         ; preds = %true183
  %return191 = call i64 @"eq@III"(i64 %return180, i64 1)
  %18 = icmp ne i64 %return191, 0
  br i1 %18, label %true192, label %false193

end189:                                           ; preds = %true197, %false198, %true192, %true187
  %colors.0 = phi <3 x double>* [ getelementptr inbounds ([5 x <3 x double>], [5 x <3 x double>]* @21, i64 0, i64 0), %true187 ], [ getelementptr inbounds ([4 x <3 x double>], [4 x <3 x double>]* @22, i64 0, i64 0), %true192 ], [ getelementptr inbounds ([4 x <3 x double>], [4 x <3 x double>]* @23, i64 0, i64 0), %true197 ], [ getelementptr inbounds ([2 x <3 x double>], [2 x <3 x double>]* @24, i64 0, i64 0), %false198 ]
  %return202 = call <3 x double> @"spline@VSF[V"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @25, i64 0, i64 0), double %output90, <3 x double>* %colors.0)
  store <3 x double> %return202, <3 x double>* %_bound_Cd
  br label %end184

true192:                                          ; preds = %false188
  br label %end189

false193:                                         ; preds = %false188
  %return196 = call i64 @"eq@III"(i64 %return180, i64 2)
  %19 = icmp ne i64 %return196, 0
  br i1 %19, label %true197, label %false198

true197:                                          ; preds = %false193
  br label %end189

false198:                                         ; preds = %false193
  br label %end189
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare { i64*, double* } @"pcfind_radius@[IISSFVFI[F"(i64, i8*, i8*, double, <3 x double>, double, i64) #2

; Function Attrs: nounwind
declare { i64, i64* } @"removevalue@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"geoself@I"() #2

; Function Attrs: nounwind
declare i64 @"setpointgroup@IISII"(i64, i8*, i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #1

; Function Attrs: nounwind readnone
declare double @"smooth@FFFF"(double, double, double) #1

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #2

; Function Attrs: nounwind readnone
declare { double, double* } @"setcomp@F[FFI"(double*, double, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"spline@VSF[V"(i8*, double, <3 x double>*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %nearpt, double %neardist, <3 x double> %P, i64 %ptnum, i64 %farpt, i64* %nearpts, i64 %nearptcount, double %density, double %fardist, double* %neardists, double* %weights, <3 x double> %Cd) #2 {
__llvm_entry:
  %"<neardist>" = alloca double
  %"<farpt>" = alloca i64
  %"<nearpts>" = alloca i64*
  %"<nearptcount>" = alloca i64
  %"<density>" = alloca double
  %"<fardist>" = alloca double
  %"<neardists>" = alloca double*
  %"<weights>" = alloca double*
  %"<Cd>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca i64
  %"<nearpt>" = alloca i64
  store i64 %nearpt, i64* %"<nearpt>"
  store double %neardist, double* %"<neardist>"
  store i64 %farpt, i64* %"<farpt>"
  store i64* %nearpts, i64** %"<nearpts>"
  store i64 %nearptcount, i64* %"<nearptcount>"
  store double %density, double* %"<density>"
  store double %fardist, double* %"<fardist>"
  store double* %neardists, double** %"<neardists>"
  store double* %weights, double** %"<weights>"
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store <3 x double> %P, <3 x double>* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@IFVII[IIFF[F[FV"(i64* %"<nearpt>", double* %"<neardist>", <3 x double>* %0, i64* %1, i64* %"<farpt>", i64** %"<nearpts>", i64* %"<nearptcount>", double* %"<density>", double* %"<fardist>", double** %"<neardists>", double** %"<weights>", <3 x double>* %"<Cd>")
  %evalue = load i64, i64* %"<nearpt>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @26, i64 0, i64 0), i64 %evalue) #3
  %evalue3 = load double, double* %"<neardist>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @27, i64 0, i64 0), double %evalue3) #3
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), <3 x double> %P) #3
  %gvalue8 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @28, i64 0, i64 0), i64 %ptnum) #3
  %evalue9 = load i64, i64* %"<farpt>"
  %gvalue10 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @29, i64 0, i64 0), i64 %evalue9) #3
  %evalue11 = load i64*, i64** %"<nearpts>"
  %gvalue12 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @30, i64 0, i64 0), i64* %evalue11) #3
  %evalue13 = load i64, i64* %"<nearptcount>"
  %gvalue14 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @31, i64 0, i64 0), i64 %evalue13) #3
  %evalue15 = load double, double* %"<density>"
  %gvalue16 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @32, i64 0, i64 0), double %evalue15) #3
  %evalue17 = load double, double* %"<fardist>"
  %gvalue18 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @33, i64 0, i64 0), double %evalue17) #3
  %evalue19 = load double*, double** %"<neardists>"
  %gvalue20 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @34, i64 0, i64 0), double* %evalue19) #3
  %evalue21 = load double*, double** %"<weights>"
  %gvalue22 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @35, i64 0, i64 0), double* %evalue21) #3
  %evalue23 = load <3 x double>, <3 x double>* %"<Cd>"
  %gvalue24 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @36, i64 0, i64 0), <3 x double> %evalue23) #3
  store i64 %gvalue, i64* @nearpt
  store double %gvalue4, double* @neardist
  store <3 x double> %gvalue6, <3 x double>* @P
  store i64 %gvalue8, i64* @ptnum
  store i64 %gvalue10, i64* @farpt
  store i64* %gvalue12, i64** @nearpts
  store i64 %gvalue14, i64* @nearptcount
  store double %gvalue16, double* @density
  store double %gvalue18, double* @fardist
  store double* %gvalue20, double** @neardists
  store double* %gvalue22, double** @weights
  store <3 x double> %gvalue24, <3 x double>* @Cd
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64* @"_export@[IS[I"(i8*, i64*)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 -1, double -1.000000e+00, <3 x double> zeroinitializer, i64 0, i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @4, i64 0, i64 0), i64 0, double 0.000000e+00, double 0.000000e+00, double* getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

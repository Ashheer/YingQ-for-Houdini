;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [30 x i8] c"intrinsic:packedfulltransform\00"
@1 = private constant [10 x i8] c"transform\00"
@2 = private constant [23 x i8] c"pointinstancetransform\00"
@restxform = external global <16 x double>
@rest = external global <3 x double>
@3 = private constant [10 x i8] c"restxform\00"
@4 = private constant [5 x i8] c"rest\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@4IVV"(<16 x double>* %_bound_restxform, i64* %_bound_primnum, <3 x double>* %_bound_P, <3 x double>* %_bound_rest) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call { <16 x double>, i64 } @"primattrib@4ISII"(i64 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @0, i64 0, i64 0), i64 %_bound_primnum1)
  %return2 = extractvalue { <16 x double>, i64 } %return, 0
  %output = extractvalue { <16 x double>, i64 } %return, 1
  %return4 = call i64 @"not@II"(i64 %output)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_primnum5 = load i64, i64* %_bound_primnum
  %return6 = call <9 x double> @"primintrinsic@3ISI"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), i64 %_bound_primnum5)
  %cast = call <16 x double> @"set@43"(<9 x double> %return6)
  %_bound_P8 = load <3 x double>, <3 x double>* %_bound_P
  %output9 = call <16 x double> @"translate@4V"(<16 x double> %cast, <3 x double> %_bound_P8)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %full_xform.0 = phi <16 x double> [ %output9, %true ], [ %return2, %__llvm_entry ]
  %_bound_P10 = load <3 x double>, <3 x double>* %_bound_P
  store <3 x double> %_bound_P10, <3 x double>* %_bound_rest
  %_bound_primnum11 = load i64, i64* %_bound_primnum
  %return12 = call i64 @"primintrinsic@IISI"(i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @2, i64 0, i64 0), i64 %_bound_primnum11)
  %return13 = call i64 @"not@II"(i64 %return12)
  %1 = icmp ne i64 %return13, 0
  br i1 %1, label %true14, label %end15

true14:                                           ; preds = %end
  store <16 x double> %full_xform.0, <16 x double>* %_bound_restxform
  br label %end15

end15:                                            ; preds = %true14, %end
  ret void
}

; Function Attrs: nounwind
declare { <16 x double>, i64 } @"primattrib@4ISII"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind
declare <9 x double> @"primintrinsic@3ISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare <16 x double> @"set@43"(<9 x double>) #1

; Function Attrs: nounwind readnone
declare <16 x double> @"translate@4V"(<16 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"primintrinsic@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<16 x double> %restxform, i64 %primnum, <3 x double> %P, <3 x double> %rest) #1 {
__llvm_entry:
  %"<rest>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca <3 x double>
  %"<restxform>" = alloca <16 x double>
  store <16 x double> %restxform, <16 x double>* %"<restxform>"
  store <3 x double> %rest, <3 x double>* %"<rest>"
  store i64 %primnum, i64* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@4IVV"(<16 x double>* %"<restxform>", i64* %0, <3 x double>* %1, <3 x double>* %"<rest>")
  %evalue = load <16 x double>, <16 x double>* %"<restxform>"
  %gvalue = call <16 x double> @"_export@4S4"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), <16 x double> %evalue) #3
  %evalue3 = load <3 x double>, <3 x double>* %"<rest>"
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0), <3 x double> %evalue3) #3
  store <16 x double> %gvalue, <16 x double>* @restxform
  store <3 x double> %gvalue4, <3 x double>* @rest
  ret void
}

declare <16 x double> @"_export@4S4"(i8*, <16 x double>)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<16 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>, i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

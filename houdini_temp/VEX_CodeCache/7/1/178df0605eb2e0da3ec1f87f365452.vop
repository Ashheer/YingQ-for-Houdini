;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@primnum = external global i64
@__neighbors = external global i64*
@1 = private constant [8 x i8] c"primnum\00"
@2 = private constant [12 x i8] c"__neighbors\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I[I"(i64* %_bound_primnum, i64** %_bound___neighbors) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum1)
  %return3 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %end18, %__llvm_entry
  %__impl_foreach_index_c7.0 = phi i64 [ 0, %__llvm_entry ], [ %output33, %end18 ]
  %neighbors.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %__llvm_entry ], [ %neighbors.1, %end18 ]
  %return6 = call i64 @"lt@III"(i64 %__impl_foreach_index_c7.0, i64 %return3)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return9 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_c7.0)
  %return11 = call i64* @"pointprims@[III"(i64 0, i64 %return9)
  %return12 = call i64 @"len@I[I"(i64* %return11)
  br label %cond13

end:                                              ; preds = %cond
  store i64* %neighbors.0, i64** %_bound___neighbors
  ret void

cond13:                                           ; preds = %end27, %body
  %__impl_foreach_index_c6.0 = phi i64 [ 0, %body ], [ %output31, %end27 ]
  %neighbors.1 = phi i64* [ %neighbors.0, %body ], [ %neighbors.2, %end27 ]
  %return17 = call i64 @"lt@III"(i64 %__impl_foreach_index_c6.0, i64 %return12)
  %1 = icmp ne i64 %return17, 0
  br i1 %1, label %body14, label %end18

body14:                                           ; preds = %cond13
  %return21 = call i64* @"pointprims@[III"(i64 0, i64 %return9)
  %return23 = call i64 @"getcomp@I[II"(i64* %return21, i64 %__impl_foreach_index_c6.0)
  %_bound_primnum25 = load i64, i64* %_bound_primnum
  %return26 = call i64 @"ne@III"(i64 %return23, i64 %_bound_primnum25)
  %2 = icmp ne i64 %return26, 0
  br i1 %2, label %true, label %end27

end18:                                            ; preds = %cond13
  %output33 = add i64 %__impl_foreach_index_c7.0, 1
  br label %cond

true:                                             ; preds = %body14
  %output = call i64* @"append@[II"(i64* %neighbors.1, i64 %return23)
  br label %end27

end27:                                            ; preds = %true, %body14
  %neighbors.2 = phi i64* [ %output, %true ], [ %neighbors.1, %body14 ]
  %output31 = add i64 %__impl_foreach_index_c6.0, 1
  br label %cond13
}

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64* @"pointprims@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, i64* %__neighbors) #1 {
__llvm_entry:
  %"<__neighbors>" = alloca i64*
  %0 = alloca i64
  store i64* %__neighbors, i64** %"<__neighbors>"
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@I[I"(i64* %0, i64** %"<__neighbors>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i64 %primnum) #3
  %evalue2 = load i64*, i64** %"<__neighbors>"
  %gvalue3 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i64 0, i64 0), i64* %evalue2) #3
  store i64 %gvalue, i64* @primnum
  store i64* %gvalue3, i64** @__neighbors
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

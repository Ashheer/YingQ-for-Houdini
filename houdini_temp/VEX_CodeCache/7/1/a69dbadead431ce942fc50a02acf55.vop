;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"upow\00"
@1 = private constant [5 x i8] c"vpow\00"
@2 = private constant [7 x i8] c"ustart\00"
@3 = private constant [5 x i8] c"uend\00"
@4 = private constant [7 x i8] c"vstart\00"
@5 = private constant [5 x i8] c"vend\00"
@uv = external global <3 x double>
@6 = private constant [3 x i8] c"uv\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@V"(<3 x double>* %_bound_uv) #0 {
__llvm_entry:
  %_bound_uv1 = load <3 x double>, <3 x double>* %_bound_uv
  %return = call double @"getcomp@FVI"(<3 x double> %_bound_uv1, i64 0)
  %return2 = call double @"clamp@FFFF"(double %return, double 0.000000e+00, double 1.000000e+00)
  %tmp = load <3 x double>, <3 x double>* %_bound_uv
  %return3 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %return2, i64 0)
  %output = extractvalue { double, <3 x double> } %return3, 1
  store <3 x double> %output, <3 x double>* %_bound_uv
  %return6 = call double @"getcomp@FVI"(<3 x double> %output, i64 1)
  %return7 = call double @"clamp@FFFF"(double %return6, double 0.000000e+00, double 1.000000e+00)
  %tmp8 = load <3 x double>, <3 x double>* %_bound_uv
  %return9 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp8, double %return7, i64 1)
  %output11 = extractvalue { double, <3 x double> } %return9, 1
  store <3 x double> %output11, <3 x double>* %_bound_uv
  %return13 = call double @"getcomp@FVI"(<3 x double> %output11, i64 0)
  %return14 = call double @"ch@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  %return15 = call double @"pow@FFF"(double %return13, double %return14)
  %return17 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output11, double %return15, i64 0)
  %output19 = extractvalue { double, <3 x double> } %return17, 1
  store <3 x double> %output19, <3 x double>* %_bound_uv
  %return21 = call double @"getcomp@FVI"(<3 x double> %output19, i64 1)
  %return22 = call double @"ch@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0))
  %return23 = call double @"pow@FFF"(double %return21, double %return22)
  %return25 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output19, double %return23, i64 1)
  %output27 = extractvalue { double, <3 x double> } %return25, 1
  store <3 x double> %output27, <3 x double>* %_bound_uv
  %return29 = call double @"getcomp@FVI"(<3 x double> %output27, i64 0)
  %return30 = call double @"ch@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0))
  %return31 = call double @"ch@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0))
  %return32 = call double @"fit01@FFFF"(double %return29, double %return30, double %return31)
  %tmp33 = load <3 x double>, <3 x double>* %_bound_uv
  %return34 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp33, double %return32, i64 0)
  %output36 = extractvalue { double, <3 x double> } %return34, 1
  store <3 x double> %output36, <3 x double>* %_bound_uv
  %return38 = call double @"getcomp@FVI"(<3 x double> %output36, i64 1)
  %return39 = call double @"ch@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0))
  %return40 = call double @"ch@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i64 0, i64 0))
  %return41 = call double @"fit01@FFFF"(double %return38, double %return39, double %return40)
  %tmp42 = load <3 x double>, <3 x double>* %_bound_uv
  %return43 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp42, double %return41, i64 1)
  %output45 = extractvalue { double, <3 x double> } %return43, 1
  store <3 x double> %output45, <3 x double>* %_bound_uv
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #2

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"pow@FFF"(double, double) #1

; Function Attrs: nounwind
declare double @"fit01@FFFF"(double, double, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %uv) #2 {
__llvm_entry:
  %"<uv>" = alloca <3 x double>
  store <3 x double> %uv, <3 x double>* %"<uv>"
  call void @"__vex_snippet_snippet@V"(<3 x double>* %"<uv>")
  %evalue = load <3 x double>, <3 x double>* %"<uv>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @6, i64 0, i64 0), <3 x double> %evalue) #4
  store <3 x double> %gvalue, <3 x double>* @uv
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

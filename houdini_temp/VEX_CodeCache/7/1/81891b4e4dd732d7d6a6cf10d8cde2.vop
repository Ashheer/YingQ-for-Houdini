;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [15 x i8] c"Obstacle_1wide\00"
@1 = private constant [2 x i8] c"N\00"
@2 = private constant [1 x i8] zeroinitializer
@name = external global i8*
@P = external global <3 x double>
@N = external global <3 x double>
@test = external global i64
@ptnum = external global i64
@3 = private constant [5 x i8] c"name\00"
@4 = private constant [2 x i8] c"P\00"
@5 = private constant [5 x i8] c"test\00"
@6 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SVVII"(i8** %_bound_name, <3 x double>* %_bound_P, <3 x double>* %_bound_N, i64* %_bound_test, i64* %_bound_ptnum) #0 {
__llvm_entry:
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i64 0, i64 0), i8** %_bound_name
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 1.000000e-01, double 0.000000e+00)
  %output = call <3 x double> @"add@VV"(<3 x double> %_bound_P1, <3 x double> %return)
  %return2 = call { double, i64, <3 x double> } @"xyzdist@FIVIVF"(i64 1, <3 x double> %output, double 5.000000e-01)
  %output4 = extractvalue { double, i64, <3 x double> } %return2, 1
  %return7 = call <3 x double> @"prim@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %output4)
  store <3 x double> %return7, <3 x double>* %_bound_N
  store i64 %output4, i64* %_bound_test
  %return10 = call i64 @"neg@II"(i64 1)
  %return11 = call i64 @"eq@III"(i64 %output4, i64 %return10)
  %0 = icmp ne i64 %return11, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_ptnum12 = load i64, i64* %_bound_ptnum
  %output13 = add i64 %_bound_ptnum12, 1
  %output14 = mul i64 %output13, 42
  %cast = sitofp i64 %output14 to double
  %return15 = call double @"rand@FF"(double %cast)
  %return16 = fcmp olt double %return15, 5.000000e-01
  br i1 %return16, label %true18, label %false

end:                                              ; preds = %end19, %__llvm_entry
  ret void

true18:                                           ; preds = %true
  %return20 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double 0.000000e+00, double 0.000000e+00)
  br label %end19

false:                                            ; preds = %true
  %return21 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 1.000000e+00)
  br label %end19

end19:                                            ; preds = %false, %true18
  %phi = phi <3 x double> [ %return20, %true18 ], [ %return21, %false ]
  store <3 x double> %phi, <3 x double>* %_bound_N
  br label %end
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare { double, i64, <3 x double> } @"xyzdist@FIVIVF"(i64, <3 x double>, double) #2

; Function Attrs: nounwind
declare <3 x double> @"prim@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare double @"rand@FF"(double) #2

; Function Attrs: nounwind
define void @__vex_snippet(i8* %name, <3 x double> %P, <3 x double> %N, i64 %test, i64 %ptnum) #2 {
__llvm_entry:
  %"<N>" = alloca <3 x double>
  %"<test>" = alloca i64
  %0 = alloca <3 x double>
  %1 = alloca i64
  %"<name>" = alloca i8*
  store i8* %name, i8** %"<name>"
  store <3 x double> %N, <3 x double>* %"<N>"
  store i64 %test, i64* %"<test>"
  store <3 x double> %P, <3 x double>* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@SVVII"(i8** %"<name>", <3 x double>* %0, <3 x double>* %"<N>", i64* %"<test>", i64* %1)
  %evalue = load i8*, i8** %"<name>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), i8* %evalue) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), <3 x double> %P) #3
  %evalue5 = load <3 x double>, <3 x double>* %"<N>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue5) #3
  %evalue7 = load i64, i64* %"<test>"
  %gvalue8 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i64 0, i64 0), i64 %evalue7) #3
  %gvalue10 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i64 0, i64 0), i64 %ptnum) #3
  store i8* %gvalue, i8** @name
  store <3 x double> %gvalue4, <3 x double>* @P
  store <3 x double> %gvalue6, <3 x double>* @N
  store i64 %gvalue8, i64* @test
  store i64 %gvalue10, i64* @ptnum
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), <3 x double> zeroinitializer, <3 x double> zeroinitializer, i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [8 x i8] c"__piece\00"
@P = external global <3 x double>
@ptnum = external global i64
@__piece = external global i64
@2 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VII"(<3 x double>* %_bound_P, i64* %_bound_ptnum, i64* %_bound___piece) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call <3 x double> @"prim@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %_bound_ptnum1)
  store <3 x double> %return, <3 x double>* %_bound_P
  %_bound_ptnum2 = load i64, i64* %_bound_ptnum
  %return3 = call i64 @"prim@IISI"(i64 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i64 %_bound_ptnum2)
  store i64 %return3, i64* %_bound___piece
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"prim@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"prim@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, i64 %ptnum, i64 %__piece) #1 {
__llvm_entry:
  %"<__piece>" = alloca i64
  %0 = alloca i64
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %__piece, i64* %"<__piece>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@VII"(<3 x double>* %"<P>", i64* %0, i64* %"<__piece>")
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %evalue) #2
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %ptnum) #2
  %evalue4 = load i64, i64* %"<__piece>"
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i64 %evalue4) #2
  store <3 x double> %gvalue, <3 x double>* @P
  store i64 %gvalue3, i64* @ptnum
  store i64 %gvalue5, i64* @__piece
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

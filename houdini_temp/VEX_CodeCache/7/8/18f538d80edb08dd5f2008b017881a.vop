;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [7 x i8] c"closed\00"
@1 = private constant [18 x i8] c"facepts_subdivide\00"
@2 = private constant [13 x i8] c"primcenterpt\00"
@3 = private constant [0 x double] zeroinitializer
@4 = private constant [17 x i8] c"sourcept_indices\00"
@5 = private constant [17 x i8] c"sourcept_weights\00"
@primnum = external global i64
@6 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_primnum) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64 @"primintrinsic@IISI"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0), i64 %_bound_primnum1)
  %return3 = call i64 @"not@II"(i64 %return)
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %cast = call <3 x double> @"set@VI"(i64 0)
  %return5 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %cast)
  %return7 = call i64 @"setpointgroup@IISII"(i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1, i64 0, i64 0), i64 %return5, i64 1)
  %return8 = call i64 @"neg@II"(i64 1)
  %return9 = call i64 @"addpointattrib@IISI"(i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0), i64 %return8)
  %_bound_primnum11 = load i64, i64* %_bound_primnum
  %return12 = call i64 @"setpointattrib@IISII"(i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0), i64 %return5, i64 %_bound_primnum11)
  %_bound_primnum13 = load i64, i64* %_bound_primnum
  %return14 = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum13)
  %return16 = call i64 @"len@I[I"(i64* %return14)
  %cast17 = sitofp i64 %return16 to double
  %output = call double @"div@FF"(double 1.000000e+00, double %cast17)
  br label %cond

cond:                                             ; preds = %body, %end
  %weights.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %end ], [ %output29, %body ]
  %__impl_foreach_index_2.0 = phi i64 [ 0, %end ], [ %output31, %body ]
  %return22 = call i64 @"lt@III"(i64 %__impl_foreach_index_2.0, i64 %return16)
  %1 = icmp ne i64 %return22, 0
  br i1 %1, label %body, label %end23

body:                                             ; preds = %cond
  %output29 = call double* @"append@[FF"(double* %weights.0, double %output)
  %output31 = add i64 %__impl_foreach_index_2.0, 1
  br label %cond

end23:                                            ; preds = %cond
  %return34 = call i64 @"setpointattrib@IISI[I"(i64 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @4, i64 0, i64 0), i64 %return5, i64* %return14)
  %return37 = call i64 @"setpointattrib@IISI[F"(i64 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @5, i64 0, i64 0), i64 %return5, double* %weights.0)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end23, %true
  ret void
}

; Function Attrs: nounwind
declare i64 @"primintrinsic@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #2

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"setpointgroup@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind
declare i64 @"addpointattrib@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISI[I"(i64, i8*, i64, i64*) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISI[F"(i64, i8*, i64, double*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum) #1 {
__llvm_entry:
  %0 = alloca i64
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @6, i64 0, i64 0), i64 %primnum) #3
  store i64 %gvalue, i64* @primnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

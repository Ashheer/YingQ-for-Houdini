;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@y = external global double
@P = external global <3 x double>
@poss = external global <3 x double>
@0 = private constant [2 x i8] c"y\00"
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [5 x i8] c"poss\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FVV"(double* %_bound_y, <3 x double>* %_bound_P, <3 x double>* %_bound_poss) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call double @"getcomp@FVI"(<3 x double> %_bound_P1, i64 1)
  store double %return, double* %_bound_y
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  store <3 x double> %_bound_P2, <3 x double>* %_bound_poss
  %tmp = load <3 x double>, <3 x double>* %_bound_P
  %return3 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double 0.000000e+00, i64 1)
  %output = extractvalue { double, <3 x double> } %return3, 1
  store <3 x double> %output, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double 0.000000e+00, i64 1)
  %mrv9 = insertvalue { double, <3 x double> } { double 0.000000e+00, <3 x double> undef }, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %y, <3 x double> %P, <3 x double> %poss) #3 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %"<poss>" = alloca <3 x double>
  %"<y>" = alloca double
  store double %y, double* %"<y>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %poss, <3 x double>* %"<poss>"
  call void @"__vex_snippet_snippet@FVV"(double* %"<y>", <3 x double>* %"<P>", <3 x double>* %"<poss>")
  %evalue = load double, double* %"<y>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), double %evalue) #4
  %evalue1 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue2 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue1) #4
  %evalue3 = load <3 x double>, <3 x double>* %"<poss>"
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), <3 x double> %evalue3) #4
  store double %gvalue, double* @y
  store <3 x double> %gvalue2, <3 x double>* @P
  store <3 x double> %gvalue4, <3 x double>* @poss
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

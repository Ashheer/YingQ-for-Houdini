;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@primnum = external global i64
@vert0 = external global i64
@vert1 = external global i64
@vert2 = external global i64
@0 = private constant [8 x i8] c"primnum\00"
@1 = private constant [6 x i8] c"vert0\00"
@2 = private constant [6 x i8] c"vert1\00"
@3 = private constant [6 x i8] c"vert2\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIII"(i64* %_bound_primnum, i64* %_bound_vert0, i64* %_bound_vert1, i64* %_bound_vert2) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum1)
  %return3 = call i64 @"getcomp@I[II"(i64* %return, i64 0)
  store i64 %return3, i64* %_bound_vert0
  %return5 = call i64 @"getcomp@I[II"(i64* %return, i64 1)
  store i64 %return5, i64* %_bound_vert1
  %return7 = call i64 @"getcomp@I[II"(i64* %return, i64 2)
  store i64 %return7, i64* %_bound_vert2
  ret void
}

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, i64 %vert0, i64 %vert1, i64 %vert2) #1 {
__llvm_entry:
  %"<vert0>" = alloca i64
  %"<vert1>" = alloca i64
  %"<vert2>" = alloca i64
  %0 = alloca i64
  store i64 %vert0, i64* %"<vert0>"
  store i64 %vert1, i64* %"<vert1>"
  store i64 %vert2, i64* %"<vert2>"
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@IIII"(i64* %0, i64* %"<vert0>", i64* %"<vert1>", i64* %"<vert2>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0), i64 %primnum) #3
  %evalue2 = load i64, i64* %"<vert0>"
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i64 %evalue2) #3
  %evalue4 = load i64, i64* %"<vert1>"
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %evalue4) #3
  %evalue6 = load i64, i64* %"<vert2>"
  %gvalue7 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %evalue6) #3
  store i64 %gvalue, i64* @primnum
  store i64 %gvalue3, i64* @vert0
  store i64 %gvalue5, i64* @vert1
  store i64 %gvalue7, i64* @vert2
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [2 x i8] c"u\00"
@numpt = external global i64
@ptnum = external global i64
@P = external global <3 x double>
@repulsive_force = external global <3 x double>
@2 = private constant [6 x i8] c"numpt\00"
@3 = private constant [6 x i8] c"ptnum\00"
@4 = private constant [16 x i8] c"repulsive_force\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIVV"(i64* %_bound_numpt, i64* %_bound_ptnum, <3 x double>* %_bound_P, <3 x double>* %_bound_repulsive_force) #0 {
__llvm_entry:
  br label %cond

cond:                                             ; preds = %end6, %__llvm_entry
  %npt.0 = phi i64 [ 0, %__llvm_entry ], [ %output28, %end6 ]
  %G.0 = phi <3 x double> [ zeroinitializer, %__llvm_entry ], [ %G.1, %end6 ]
  %_bound_numpt2 = load i64, i64* %_bound_numpt
  %return = call i64 @"lt@III"(i64 %npt.0, i64 %_bound_numpt2)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %_bound_ptnum4 = load i64, i64* %_bound_ptnum
  %return5 = call i64 @"ne@III"(i64 %npt.0, i64 %_bound_ptnum4)
  %1 = icmp ne i64 %return5, 0
  br i1 %1, label %true, label %end6

end:                                              ; preds = %cond
  store <3 x double> %G.0, <3 x double>* %_bound_repulsive_force
  ret void

true:                                             ; preds = %body
  %return8 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %npt.0)
  %_bound_P10 = load <3 x double>, <3 x double>* %_bound_P
  %output = call <3 x double> @"sub@VV"(<3 x double> %return8, <3 x double> %_bound_P10)
  %return11 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %return13 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %npt.0)
  %_bound_P14 = load <3 x double>, <3 x double>* %_bound_P
  %return16 = call double @"distance@FVV"(<3 x double> %_bound_P14, <3 x double> %return8)
  %output18 = fsub double 1.000000e+00, %return13
  %output20 = call double @"div@FF"(double %output18, double %return16)
  %cast = call <3 x double> @"set@VF"(double %output20)
  %output22 = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %return11)
  %output25 = call <3 x double> @"add@VV"(<3 x double> %G.0, <3 x double> %output22)
  br label %end6

end6:                                             ; preds = %true, %body
  %G.1 = phi <3 x double> [ %output25, %true ], [ %G.0, %body ]
  %output28 = add i64 %npt.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %numpt, i64 %ptnum, <3 x double> %P, <3 x double> %repulsive_force) #2 {
__llvm_entry:
  %"<repulsive_force>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca <3 x double>
  store <3 x double> %repulsive_force, <3 x double>* %"<repulsive_force>"
  store i64 %numpt, i64* %0
  store i64 %ptnum, i64* %1
  store <3 x double> %P, <3 x double>* %2
  call void @"__vex_snippet_snippet@IIVV"(i64* %0, i64* %1, <3 x double>* %2, <3 x double>* %"<repulsive_force>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %numpt) #3
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  %gvalue7 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %P) #3
  %evalue8 = load <3 x double>, <3 x double>* %"<repulsive_force>"
  %gvalue9 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @4, i64 0, i64 0), <3 x double> %evalue8) #3
  store i64 %gvalue, i64* @numpt
  store i64 %gvalue5, i64* @ptnum
  store <3 x double> %gvalue7, <3 x double>* @P
  store <3 x double> %gvalue9, <3 x double>* @repulsive_force
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

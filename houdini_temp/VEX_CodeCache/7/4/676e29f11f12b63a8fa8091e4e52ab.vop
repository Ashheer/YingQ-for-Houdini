;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [5 x i8] c"seed\00"
@2 = private constant [9 x i8] c"simplify\00"
@primnum = external global i64
@pts = external global i64
@P = external global <3 x double>
@3 = private constant [8 x i8] c"primnum\00"
@4 = private constant [4 x i8] c"pts\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIV"(i64* %_bound_primnum, i64* %_bound_pts, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum1)
  %return3 = call i64 @"len@I[I"(i64* %return)
  store i64 %return3, i64* %_bound_pts
  br label %cond

cond:                                             ; preds = %end44, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %end44 ]
  %return7 = call i64 @"lt@III"(i64 %i.0, i64 %return3)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return10 = call i64 @"getcomp@I[II"(i64* %return, i64 %i.0)
  %output = add i64 %i.0, 1
  %return15 = call i64 @"mod@III"(i64 %output, i64 %return3)
  %return16 = call i64 @"getcomp@I[II"(i64* %return, i64 %return15)
  %output19 = add i64 %i.0, 2
  %return22 = call i64 @"mod@III"(i64 %output19, i64 %return3)
  %return23 = call i64 @"getcomp@I[II"(i64* %return, i64 %return22)
  %return25 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return10)
  %return27 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return16)
  %return29 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return23)
  %output32 = call <3 x double> @"sub@VV"(<3 x double> %return27, <3 x double> %return25)
  %return33 = call <3 x double> @"normalize@VV"(<3 x double> %output32)
  %output36 = call <3 x double> @"sub@VV"(<3 x double> %return29, <3 x double> %return27)
  %return37 = call <3 x double> @"normalize@VV"(<3 x double> %output36)
  %return40 = call double @"dot@FVV"(<3 x double> %return33, <3 x double> %return37)
  %return42 = fcmp ogt double %return40, 5.000000e-01
  br i1 %return42, label %true, label %end44

end:                                              ; preds = %cond
  ret void

true:                                             ; preds = %body
  %_bound_P45 = load <3 x double>, <3 x double>* %_bound_P
  %cast = sitofp i64 %i.0 to double
  %output47 = fmul double %cast, 5.330000e+00
  %cast48 = call <3 x double> @"set@VF"(double %output47)
  %output49 = call <3 x double> @"add@VV"(<3 x double> %_bound_P45, <3 x double> %cast48)
  %return50 = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0))
  %cast51 = call <3 x double> @"set@VF"(double %return50)
  %output52 = call <3 x double> @"add@VV"(<3 x double> %output49, <3 x double> %cast51)
  %return53 = call double @"rand@FV"(<3 x double> %output52)
  %return54 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0))
  %return55 = fcmp olt double %return53, %return54
  br i1 %return55, label %true57, label %end44

end44:                                            ; preds = %true, %true57, %body
  br label %cond

true57:                                           ; preds = %true
  %return60 = call i64 @"removepoint@III"(i64 0, i64 %return16)
  br label %end44
}

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind
declare double @"rand@FV"(<3 x double>) #1

; Function Attrs: nounwind
declare i64 @"removepoint@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, i64 %pts, <3 x double> %P) #1 {
__llvm_entry:
  %"<pts>" = alloca i64
  %0 = alloca i64
  %1 = alloca <3 x double>
  store i64 %pts, i64* %"<pts>"
  store i64 %primnum, i64* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@IIV"(i64* %0, i64* %"<pts>", <3 x double>* %1)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i64 %primnum) #3
  %evalue3 = load i64, i64* %"<pts>"
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0), i64 %evalue3) #3
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %P) #3
  store i64 %gvalue, i64* @primnum
  store i64 %gvalue4, i64* @pts
  store <3 x double> %gvalue6, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@ma = external global <16 x double>
@0 = private constant [3 x i8] c"ma\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@4"(<16 x double>* %_bound_ma) #0 {
__llvm_entry:
  %return1 = call <9 x double> @"set@3VVV"(<3 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  %cast = call <16 x double> @"set@43"(<9 x double> %return1)
  store <16 x double> %cast, <16 x double>* %_bound_ma
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind
declare <9 x double> @"set@3VVV"(<3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <16 x double> @"set@43"(<9 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<16 x double> %ma) #2 {
__llvm_entry:
  %"<ma>" = alloca <16 x double>
  store <16 x double> %ma, <16 x double>* %"<ma>"
  call void @"__vex_snippet_snippet@4"(<16 x double>* %"<ma>")
  %evalue = load <16 x double>, <16 x double>* %"<ma>"
  %gvalue = call <16 x double> @"_export@4S4"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), <16 x double> %evalue) #3
  store <16 x double> %gvalue, <16 x double>* @ma
  ret void
}

declare <16 x double> @"_export@4S4"(i8*, <16 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<16 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

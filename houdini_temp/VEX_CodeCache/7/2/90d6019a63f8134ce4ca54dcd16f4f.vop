;_name	/obj/geo1/scifi_panels1/BEVEL_SOME_CORNERS/sop_group_curve_corners1/group_by_insidedness/attribvop1
; ModuleID = 'obj_geo1_scifi_panels1_BEVEL_SOME_CORNERS_sop_group_curve_corners1_group_by_insidedness_attribvop1'

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [20 x i8] c"../bDirectionNormal\00"
@2 = private constant [2 x i8] c"N\00"
@3 = private constant [4 x i8] c"set\00"
@4 = private constant [17 x i8] c"../enable_inside\00"
@5 = private constant [21 x i8] c"../inside_group_name\00"
@6 = private constant [18 x i8] c"../enable_outside\00"
@7 = private constant [22 x i8] c"../outside_group_name\00"
@ptnum = external global i64
@P = external global <3 x double>
@angle = external global double
@8 = private constant [6 x i8] c"ptnum\00"
@9 = private constant [6 x i8] c"angle\00"

define private void @"_obj_geo1_scifi_panels1_BEVEL_SOME_CORNERS_sop_group_curve_corners1_group_by_insidedness_attribvop1_snippet1@IVF"(i64* %_bound_ptnum, <3 x double>* %_bound_P, double* %_bound_angle) nounwind alwaysinline {
__llvm_entry:
  %_bound_ptnum1 = load i64* %_bound_ptnum
  %output = add i64 %_bound_ptnum1, 1
  %return = call i64 @"npoints@II"(i64 0)
  %return2 = call i64 @"mod@III"(i64 %output, i64 %return)
  %_bound_ptnum3 = load i64* %_bound_ptnum
  %output4 = sub i64 %_bound_ptnum3, 1
  %return6 = call i64 @"neg@II"(i64 1)
  %return7 = call i64 @"eq@III"(i64 %output4, i64 %return6)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return8 = call i64 @"npoints@II"(i64 0)
  %output9 = sub i64 %return8, 1
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %prev_pt.0 = phi i64 [ %output9, %true ], [ %output4, %__llvm_entry ]
  %return11 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8]* @0, i64 0, i64 0), i64 %prev_pt.0)
  %return13 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8]* @0, i64 0, i64 0), i64 %return2)
  %_bound_P14 = load <3 x double>* %_bound_P
  %output16 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P14, <3 x double> %return11)
  %return17 = call <3 x double> @"normalize@VV"(<3 x double> %output16)
  %_bound_P19 = load <3 x double>* %_bound_P
  %output20 = call <3 x double> @"sub@VV"(<3 x double> %return13, <3 x double> %_bound_P19)
  %return21 = call <3 x double> @"normalize@VV"(<3 x double> %output20)
  %return22 = call i64 @"chi@IS"(i8* getelementptr inbounds ([20 x i8]* @1, i64 0, i64 0))
  %return23 = call i64 @"eq@III"(i64 %return22, i64 1)
  %1 = icmp ne i64 %return23, 0
  br i1 %1, label %true24, label %end25

true24:                                           ; preds = %end
  %_bound_P26 = load <3 x double>* %_bound_P
  %output29 = call <3 x double> @"sub@VV"(<3 x double> %return13, <3 x double> %_bound_P26)
  %return30 = call <3 x double> @"normalize@VV"(<3 x double> %output29)
  %output31 = call <3 x double> @"add@VV"(<3 x double> %_bound_P26, <3 x double> %return30)
  %_bound_P32 = load <3 x double>* %_bound_P
  %output35 = call <3 x double> @"sub@VV"(<3 x double> %return11, <3 x double> %_bound_P32)
  %return36 = call <3 x double> @"normalize@VV"(<3 x double> %output35)
  %output37 = call <3 x double> @"add@VV"(<3 x double> %_bound_P32, <3 x double> %return36)
  %output40 = call <3 x double> @"add@VV"(<3 x double> %output31, <3 x double> %output37)
  %cast = call <3 x double> @"set@VI"(i64 2)
  %output41 = call <3 x double> @"div@VV"(<3 x double> %output40, <3 x double> %cast)
  %_bound_ptnum42 = load i64* %_bound_ptnum
  %_bound_P44 = load <3 x double>* %_bound_P
  %output45 = call <3 x double> @"sub@VV"(<3 x double> %output41, <3 x double> %_bound_P44)
  %return46 = call <3 x double> @"normalize@VV"(<3 x double> %output45)
  %return47 = call i64 @"setpointattrib@IISIVS"(i64 0, i8* getelementptr inbounds ([2 x i8]* @2, i64 0, i64 0), i64 %_bound_ptnum42, <3 x double> %return46, i8* getelementptr inbounds ([4 x i8]* @3, i64 0, i64 0))
  br label %end25

end25:                                            ; preds = %true24, %end
  %return50 = call <3 x double> @"cross@VVV"(<3 x double> %return17, <3 x double> %return21)
  %return51 = call <3 x double> @"normalize@VV"(<3 x double> %return50)
  br label %cond

cond:                                             ; preds = %end69, %end25
  %largestcomponentvalue.0 = phi double [ 0.000000e+00, %end25 ], [ %largestcomponentvalue.1, %end69 ]
  %i.0 = phi i64 [ 0, %end25 ], [ %output73, %end69 ]
  %return54 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %2 = icmp ne i64 %return54, 0
  br i1 %2, label %body, label %end55

body:                                             ; preds = %cond
  %return58 = call <3 x double> @"cross@VVV"(<3 x double> %return17, <3 x double> %return21)
  %return59 = call <3 x double> @"normalize@VV"(<3 x double> %return58)
  %return61 = call double @"getcomp@FVI"(<3 x double> %return59, i64 %i.0)
  %return63 = call double @"abs@FF"(double %return61)
  %return65 = call double @"abs@FF"(double %largestcomponentvalue.0)
  %return66 = fcmp ogt double %return63, %return65
  br i1 %return66, label %true68, label %end69

end55:                                            ; preds = %cond
  %return76 = call double @"dot@FVV"(<3 x double> %return21, <3 x double> %return17)
  %return78 = fcmp olt double %return76, 1.000000e+00
  br i1 %return78, label %true80, label %end81

true68:                                           ; preds = %body
  br label %end69

end69:                                            ; preds = %true68, %body
  %largestcomponentvalue.1 = phi double [ %return61, %true68 ], [ %largestcomponentvalue.0, %body ]
  %output73 = add i64 %i.0, 1
  br label %cond

true80:                                           ; preds = %end55
  %return83 = fcmp ogt double %largestcomponentvalue.0, 0.000000e+00
  %return84 = zext i1 %return83 to i64
  %return85 = call double @"ch@FS"(i8* getelementptr inbounds ([17 x i8]* @4, i64 0, i64 0))
  %return86 = fcmp oeq double %return85, 1.000000e+00
  %return87 = zext i1 %return86 to i64
  %return88 = call i64 @"and@III"(i64 %return84, i64 %return87)
  %3 = icmp ne i64 %return88, 0
  br i1 %3, label %true89, label %false

end81:                                            ; preds = %end90, %end55
  ret void

true89:                                           ; preds = %true80
  %return91 = call i8* @"chs@SS"(i8* getelementptr inbounds ([21 x i8]* @5, i64 0, i64 0))
  %_bound_ptnum92 = load i64* %_bound_ptnum
  %return93 = call i64 @"setpointgroup@IISII"(i64 0, i8* %return91, i64 %_bound_ptnum92, i64 1)
  br label %end90

false:                                            ; preds = %true80
  %return95 = fcmp olt double %largestcomponentvalue.0, 0.000000e+00
  %return96 = zext i1 %return95 to i64
  %return97 = call double @"ch@FS"(i8* getelementptr inbounds ([18 x i8]* @6, i64 0, i64 0))
  %return98 = fcmp oeq double %return97, 1.000000e+00
  %return99 = zext i1 %return98 to i64
  %return100 = call i64 @"and@III"(i64 %return96, i64 %return99)
  %4 = icmp ne i64 %return100, 0
  br i1 %4, label %true101, label %end90

end90:                                            ; preds = %false, %true101, %true89
  %return107 = call double @"acos@FF"(double %return76)
  %output108 = fmul double %return107, 1.800000e+02
  %output109 = call double @"div@FF"(double %output108, double 0x400921FB54442EEA)
  store double %output109, double* %_bound_angle
  br label %end81

true101:                                          ; preds = %false
  %return103 = call i8* @"chs@SS"(i8* getelementptr inbounds ([22 x i8]* @7, i64 0, i64 0))
  %_bound_ptnum104 = load i64* %_bound_ptnum
  %return105 = call i64 @"setpointgroup@IISII"(i64 0, i8* %return103, i64 %_bound_ptnum104, i64 1)
  br label %end90
}

declare i64 @"npoints@II"(i64) nounwind

declare i64 @"mod@III"(i64, i64) nounwind readnone

declare i64 @"neg@II"(i64) nounwind readnone

declare i64 @"eq@III"(i64, i64) nounwind readnone

declare <3 x double> @"point@VISI"(i64, i8*, i64) nounwind

declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) nounwind readnone

declare <3 x double> @"normalize@VV"(<3 x double>) nounwind

declare i64 @"chi@IS"(i8*) nounwind readnone

declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) nounwind readnone

declare <3 x double> @"set@VI"(i64) nounwind readnone

declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) nounwind readnone

declare i64 @"setpointattrib@IISIVS"(i64, i8*, i64, <3 x double>, i8*) nounwind

declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) nounwind

declare double @"getcomp@FVI"(<3 x double>, i64) nounwind readnone

declare i64 @"lt@III"(i64, i64) nounwind readnone

declare double @"abs@FF"(double) nounwind

declare double @"dot@FVV"(<3 x double>, <3 x double>) nounwind

declare double @"ch@FS"(i8*) nounwind readnone

declare i64 @"and@III"(i64, i64) nounwind readnone

declare i8* @"chs@SS"(i8*) nounwind readnone

declare i64 @"setpointgroup@IISII"(i64, i8*, i64, i64) nounwind

declare double @"acos@FF"(double) nounwind readnone

declare double @"div@FF"(double, double) nounwind readnone

define void @obj_geo1_scifi_panels1_BEVEL_SOME_CORNERS_sop_group_curve_corners1_group_by_insidedness_attribvop1(i64 %ptnum, <3 x double> %P, double %angle) nounwind {
__llvm_entry:
  %"<angle>" = alloca double
  %0 = alloca i64
  %1 = alloca <3 x double>
  store double %angle, double* %"<angle>"
  store i64 %ptnum, i64* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"_obj_geo1_scifi_panels1_BEVEL_SOME_CORNERS_sop_group_curve_corners1_group_by_insidedness_attribvop1_snippet1@IVF"(i64* %0, <3 x double>* %1, double* %"<angle>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8]* @8, i64 0, i64 0), i64 %ptnum) nounwind readonly
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8]* @0, i64 0, i64 0), <3 x double> %P) nounwind readonly
  %evalue5 = load double* %"<angle>"
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8]* @9, i64 0, i64 0), double %evalue5) nounwind readonly
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue4, <3 x double>* @P
  store double %gvalue6, double* @angle
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_geo1_scifi_panels1_BEVEL_SOME_CORNERS_sop_group_curve_corners1_group_by_insidedness_attribvop1(i64 0, <3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"18.5.633"}
!2 = metadata !{metadata !"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [1 x i8] zeroinitializer
@scale = external global <3 x double>
@Width = external global i8*
@Height = external global i8*
@length = external global i8*
@1 = private constant [6 x i8] c"scale\00"
@2 = private constant [6 x i8] c"Width\00"
@3 = private constant [7 x i8] c"Height\00"
@4 = private constant [7 x i8] c"length\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VSSS"(<3 x double>* %_bound_scale, i8** %_bound_Width, i8** %_bound_Height, i8** %_bound_length) #0 {
__llvm_entry:
  %_bound_Width1 = load i8*, i8** %_bound_Width
  %return = call double @"atof@FS"(i8* %_bound_Width1)
  %_bound_Height2 = load i8*, i8** %_bound_Height
  %return3 = call double @"atof@FS"(i8* %_bound_Height2)
  %_bound_length4 = load i8*, i8** %_bound_length
  %return5 = call double @"atof@FS"(i8* %_bound_length4)
  %return6 = call <3 x double> @"set@VFFF"(double %return, double %return3, double %return5)
  %cast = call <3 x double> @"set@VI"(i64 100)
  %output = call <3 x double> @"div@VV"(<3 x double> %return6, <3 x double> %cast)
  store <3 x double> %output, <3 x double>* %_bound_scale
  ret void
}

; Function Attrs: nounwind readnone
declare double @"atof@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %scale, i8* %Width, i8* %Height, i8* %length) #2 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca i8*
  %2 = alloca i8*
  %"<scale>" = alloca <3 x double>
  store <3 x double> %scale, <3 x double>* %"<scale>"
  store i8* %Width, i8** %0
  store i8* %Height, i8** %1
  store i8* %length, i8** %2
  call void @"__vex_snippet_snippet@VSSS"(<3 x double>* %"<scale>", i8** %0, i8** %1, i8** %2)
  %evalue = load <3 x double>, <3 x double>* %"<scale>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue5 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i8* %Width) #3
  %gvalue7 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), i8* %Height) #3
  %gvalue9 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0), i8* %length) #3
  store <3 x double> %gvalue, <3 x double>* @scale
  store i8* %gvalue5, i8** @Width
  store i8* %gvalue7, i8** @Height
  store i8* %gvalue9, i8** @length
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

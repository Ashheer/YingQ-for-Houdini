;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@stroke_hit = external global double
@P = external global <3 x double>
@stroke_orig = external global <3 x double>
@0 = private constant [11 x i8] c"stroke_hit\00"
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [12 x i8] c"stroke_orig\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FVV"(double* %_bound_stroke_hit, <3 x double>* %_bound_P, <3 x double>* %_bound_stroke_orig) #0 {
__llvm_entry:
  %_bound_stroke_hit1 = load double, double* %_bound_stroke_hit
  %return = fcmp oeq double %_bound_stroke_hit1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_stroke_orig3 = load <3 x double>, <3 x double>* %_bound_stroke_orig
  store <3 x double> %_bound_stroke_orig3, <3 x double>* %_bound_P
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind
define void @__vex_snippet(double %stroke_hit, <3 x double> %P, <3 x double> %stroke_orig) #1 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca double
  %1 = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store double %stroke_hit, double* %0
  store <3 x double> %stroke_orig, <3 x double>* %1
  call void @"__vex_snippet_snippet@FVV"(double* %0, <3 x double>* %"<P>", <3 x double>* %1)
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i64 0, i64 0), double %stroke_hit) #2
  %evalue3 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue3) #2
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i64 0, i64 0), <3 x double> %stroke_orig) #2
  store double %gvalue, double* @stroke_hit
  store <3 x double> %gvalue4, <3 x double>* @P
  store <3 x double> %gvalue6, <3 x double>* @stroke_orig
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [10 x i8] c"name_orig\00"
@2 = private constant [1 x i8] zeroinitializer
@3 = private constant [5 x i8] c"name\00"
@4 = private constant [12 x i8] c"prefabwWall\00"
@name = external global i8*
@unreal_instance = external global i8*
@scale = external global <3 x double>
@5 = private constant [16 x i8] c"unreal_instance\00"
@6 = private constant [6 x i8] c"scale\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SSV"(i8** %_bound_name, i8** %_bound_unreal_instance, <3 x double>* %_bound_scale) #0 {
__llvm_entry:
  %_bound_name1 = load i8*, i8** %_bound_name
  %return = call i64 @"findattribval@IISSSI"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), i8* %_bound_name1, i64 0)
  %return3 = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), i64 %return)
  %return9 = call i8* @"chs@SS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i64 0, i64 0))
  store i8* %return9, i8** %_bound_unreal_instance
  %return10 = call <3 x double> @"set@VFFF"(double 1.000000e+01, double 1.000000e+01, double 1.000000e+01)
  store <3 x double> %return10, <3 x double>* %_bound_scale
  ret void
}

; Function Attrs: nounwind
declare i64 @"findattribval@IISSSI"(i64, i8*, i8*, i8*, i64) #1

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"slice@SSIIIIII"(i8*, i64, i64, i64, i64, i64, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(i8* %name, i8* %unreal_instance, <3 x double> %scale) #1 {
__llvm_entry:
  %"<unreal_instance>" = alloca i8*
  %"<scale>" = alloca <3 x double>
  %0 = alloca i8*
  store i8* %unreal_instance, i8** %"<unreal_instance>"
  store <3 x double> %scale, <3 x double>* %"<scale>"
  store i8* %name, i8** %0
  call void @"__vex_snippet_snippet@SSV"(i8** %0, i8** %"<unreal_instance>", <3 x double>* %"<scale>")
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), i8* %name) #3
  %evalue2 = load i8*, i8** %"<unreal_instance>"
  %gvalue3 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @5, i64 0, i64 0), i8* %evalue2) #3
  %evalue4 = load <3 x double>, <3 x double>* %"<scale>"
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i64 0, i64 0), <3 x double> %evalue4) #3
  store i8* %gvalue, i8** @name
  store i8* %gvalue3, i8** @unreal_instance
  store <3 x double> %gvalue5, <3 x double>* @scale
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	/obj/pcopen_vs_pcfind_vs_nearpoints/attribvop1
; ModuleID = 'obj_pcopen_vs_pcfind_vs_nearpoints_attribvop1'
source_filename = "obj_pcopen_vs_pcfind_vs_nearpoints_attribvop1"

@0 = private constant [1 x i8] zeroinitializer
@Cd = external global <3 x double>
@1 = private constant [7 x i8] c"xnoise\00"
@2 = private constant [7 x i8] c"onoise\00"
@3 = private constant [7 x i8] c"snoise\00"
@4 = private constant [7 x i8] c"anoise\00"
@5 = private constant [13 x i8] c"correctnoise\00"
@6 = private constant [3 x i8] c"Cd\00"

; Function Attrs: alwaysinline nounwind
define private double @"vop_perlinNoiseVF@FVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %output11, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output19, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output14, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output16, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return8 = call double @"noise@FV"(<3 x double> %pp.0)
  %output9 = fadd double %return8, 0.000000e+00
  %output10 = fmul double %scale.0, %output9
  %output11 = fadd double %nval.0, %output10
  %output14 = add i64 %i.0, 1
  %cast = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output16 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast)
  %rough18 = load double, double* %rough
  %output19 = fmul double %scale.0, %rough18
  br label %cond

end:                                              ; preds = %cond
  %atten21 = load double, double* %atten
  %return22 = call double @"pow@FFF"(double %nval.0, double %atten21)
  ret double %return22
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"noise@FV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"pow@FFF"(double, double) #1

; Function Attrs: alwaysinline nounwind
define private double @"vop_correctperlinNoiseVF@FVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %output12, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output20, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output15, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output17, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %output = fmul double 5.000000e-01, %scale.0
  %return8 = call double @"noise@FV"(<3 x double> %pp.0)
  %return9 = call double @"neg@FF"(double 5.000000e-01)
  %output10 = fadd double %return8, %return9
  %output11 = fmul double %output, %output10
  %output12 = fadd double %nval.0, %output11
  %output15 = add i64 %i.0, 1
  %cast = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output17 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast)
  %rough19 = load double, double* %rough
  %output20 = fmul double %scale.0, %rough19
  br label %cond

end:                                              ; preds = %cond
  %atten22 = load double, double* %atten
  %return23 = call double @"pow@FFF"(double %nval.0, double %atten22)
  ret double %return23
}

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private double @"vop_simplexNoiseVF@FVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %output12, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output20, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output15, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output17, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %output = fmul double 5.000000e-01, %scale.0
  %return8 = call double @"xnoise@FV"(<3 x double> %pp.0)
  %return9 = call double @"neg@FF"(double 5.000000e-01)
  %output10 = fadd double %return8, %return9
  %output11 = fmul double %output, %output10
  %output12 = fadd double %nval.0, %output11
  %output15 = add i64 %i.0, 1
  %cast = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output17 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast)
  %rough19 = load double, double* %rough
  %output20 = fmul double %scale.0, %rough19
  br label %cond

end:                                              ; preds = %cond
  %atten22 = load double, double* %atten
  %return23 = call double @"pow@FFF"(double %nval.0, double %atten22)
  ret double %return23
}

; Function Attrs: nounwind readnone
declare double @"xnoise@FV"(<3 x double>) #1

; Function Attrs: nounwind
define void @obj_pcopen_vs_pcfind_vs_nearpoints_attribvop1(i64 %ptnum, i64 %vtxnum, i64 %primnum, i64 %id, i64 %numpt, i64 %numvtx, i64 %numprim, double %Time, double %TimeInc, double %Frame, double %life, double %age, i8* %OpInput2, i8* %OpInput3, i8* %OpInput4, i8* %OpInput1, <3 x double> %uv, <3 x double> %P, <3 x double> %v, <3 x double> %force, <3 x double> %Cd, <3 x double> %N) #2 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca i64
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca <3 x double>
  %6 = alloca i64
  %7 = alloca double
  %8 = alloca double
  %9 = alloca double
  %return = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0))
  %10 = icmp ne i64 %return, 0
  br i1 %10, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output = call <3 x double> @"mul@VV"(<3 x double> %P, <3 x double> <double 1.000000e+01, double 1.000000e+01, double 1.000000e+01>)
  %output31 = call <3 x double> @"sub@VV"(<3 x double> %output, <3 x double> zeroinitializer)
  %return32 = call double @"onoise@FVIFF"(<3 x double> %output31, i64 5, double 5.000000e-01, double 1.000000e+00)
  br label %end

false:                                            ; preds = %__llvm_entry
  %return35 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0))
  %11 = icmp ne i64 %return35, 0
  br i1 %11, label %true36, label %false37

end:                                              ; preds = %true63, %false64, %true56, %true46, %true36, %true
  %noise.0 = phi double [ %return32, %true ], [ %return42, %true36 ], [ %return52, %true46 ], [ %vop_correctperlinNoiseVF, %true56 ], [ %vop_simplexNoiseVF, %true63 ], [ %vop_perlinNoiseVF, %false64 ]
  %return73 = call double @"neg@FF"(double 1.000000e-01)
  %return74 = call double @"fit@FFFFFF"(double %noise.0, double %return73, double 3.000000e-01, double 0.000000e+00, double 1.000000e+00)
  %return78 = call <3 x double> @"set@VFFF"(double %return74, double %return74, double %return74)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @6, i64 0, i64 0), <3 x double> %return78) #3
  store <3 x double> %gvalue, <3 x double>* @Cd
  ret void

true36:                                           ; preds = %false
  %output40 = call <3 x double> @"mul@VV"(<3 x double> %P, <3 x double> <double 1.000000e+01, double 1.000000e+01, double 1.000000e+01>)
  %output41 = call <3 x double> @"sub@VV"(<3 x double> %output40, <3 x double> zeroinitializer)
  %return42 = call double @"snoise@FVIFF"(<3 x double> %output41, i64 5, double 5.000000e-01, double 1.000000e+00)
  br label %end

false37:                                          ; preds = %false
  %return45 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0))
  %12 = icmp ne i64 %return45, 0
  br i1 %12, label %true46, label %false47

true46:                                           ; preds = %false37
  %output50 = call <3 x double> @"mul@VV"(<3 x double> %P, <3 x double> <double 1.000000e+01, double 1.000000e+01, double 1.000000e+01>)
  %output51 = call <3 x double> @"sub@VV"(<3 x double> %output50, <3 x double> zeroinitializer)
  %return52 = call double @"anoise@FVIFF"(<3 x double> %output51, i64 5, double 5.000000e-01, double 1.000000e+00)
  br label %end

false47:                                          ; preds = %false37
  %return55 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @5, i64 0, i64 0))
  %13 = icmp ne i64 %return55, 0
  br i1 %13, label %true56, label %false57

true56:                                           ; preds = %false47
  %output60 = call <3 x double> @"mul@VV"(<3 x double> %P, <3 x double> <double 1.000000e+01, double 1.000000e+01, double 1.000000e+01>)
  %output61 = call <3 x double> @"sub@VV"(<3 x double> %output60, <3 x double> zeroinitializer)
  store <3 x double> %output61, <3 x double>* %0
  store i64 5, i64* %1
  store double 1.000000e+00, double* %2
  store double 5.000000e-01, double* %3
  store double 1.000000e+00, double* %4
  %vop_correctperlinNoiseVF = call double @"vop_correctperlinNoiseVF@FVIFFF"(<3 x double>* %0, i64* %1, double* %2, double* %3, double* %4)
  br label %end

false57:                                          ; preds = %false47
  %return62 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %14 = icmp ne i64 %return62, 0
  %output67 = call <3 x double> @"mul@VV"(<3 x double> %P, <3 x double> <double 1.000000e+01, double 1.000000e+01, double 1.000000e+01>)
  %output68 = call <3 x double> @"sub@VV"(<3 x double> %output67, <3 x double> zeroinitializer)
  store <3 x double> %output68, <3 x double>* %5
  store i64 5, i64* %6
  store double 1.000000e+00, double* %7
  store double 5.000000e-01, double* %8
  store double 1.000000e+00, double* %9
  br i1 %14, label %true63, label %false64

true63:                                           ; preds = %false57
  %vop_simplexNoiseVF = call double @"vop_simplexNoiseVF@FVIFFF"(<3 x double>* %5, i64* %6, double* %7, double* %8, double* %9)
  br label %end

false64:                                          ; preds = %false57
  %vop_perlinNoiseVF = call double @"vop_perlinNoiseVF@FVIFFF"(<3 x double>* %5, i64* %6, double* %7, double* %8, double* %9)
  br label %end
}

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"onoise@FVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind readnone
declare double @"snoise@FVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind readnone
declare double @"anoise@FVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_pcopen_vs_pcfind_vs_nearpoints_attribvop1(i64 0, i64 0, i64 0, i64 -1, i64 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

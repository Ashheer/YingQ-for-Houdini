;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [9 x i8] c"polyline\00"
@1 = private constant [7 x i8] c"primid\00"
@primnum = external global i64
@P = external global <3 x double>
@primid = external global i64
@2 = private constant [8 x i8] c"primnum\00"
@3 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVI"(i64* %_bound_primnum, <3 x double>* %_bound_P, i64* %_bound_primid) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum1)
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %return3 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %_bound_P2)
  %return5 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %__impl_foreach_index_9.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %body ]
  %return8 = call i64 @"lt@III"(i64 %__impl_foreach_index_9.0, i64 %return5)
  %0 = icmp ne i64 %return8, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return11 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_9.0)
  %return14 = call i64 @"addprim@IISII"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0), i64 %return3, i64 %return11)
  %_bound_primid16 = load i64, i64* %_bound_primid
  %return17 = call i64 @"setprimattrib@IISII"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i64 %return14, i64 %_bound_primid16)
  %output = add i64 %__impl_foreach_index_9.0, 1
  br label %cond

end:                                              ; preds = %cond
  ret void
}

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"addprim@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"setprimattrib@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, <3 x double> %P, i64 %primid) #1 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca <3 x double>
  %2 = alloca i64
  store i64 %primnum, i64* %0
  store <3 x double> %P, <3 x double>* %1
  store i64 %primid, i64* %2
  call void @"__vex_snippet_snippet@IVI"(i64* %0, <3 x double>* %1, i64* %2)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i64 %primnum) #3
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %P) #3
  %gvalue7 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i64 %primid) #3
  store i64 %gvalue, i64* @primnum
  store <3 x double> %gvalue5, <3 x double>* @P
  store i64 %gvalue7, i64* @primid
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

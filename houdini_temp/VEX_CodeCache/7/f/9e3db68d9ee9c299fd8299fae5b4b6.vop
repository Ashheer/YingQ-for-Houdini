;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [12 x i8] c"interpolate\00"
@2 = private constant [11 x i8] c"randomness\00"
@3 = private constant [11 x i8] c"spreadness\00"
@ptnum = external global i64
@P = external global <3 x double>
@4 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IV"(i64* %_bound_ptnum, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %_bound_ptnum1)
  %return2 = call double @"chf@FS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i64 0, i64 0))
  %output = fmul double 0x400921FB54442D18, %return2
  %return4 = call double @"sin@FF"(double %output)
  %_bound_P5 = load <3 x double>, <3 x double>* %_bound_P
  %cast = call <3 x double> @"set@VF"(double %return2)
  %output7 = call <3 x double> @"add@VV"(<3 x double> %_bound_P5, <3 x double> %cast)
  %return8 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0))
  %cast9 = call <3 x double> @"set@VF"(double %return8)
  %output10 = call <3 x double> @"mul@VV"(<3 x double> %output7, <3 x double> %cast9)
  %return11 = call <3 x double> @"noise@VV"(<3 x double> %output10)
  %return12 = call <3 x double> @"set@VFFF"(double 5.000000e-01, double 5.000000e-01, double 5.000000e-01)
  %output13 = call <3 x double> @"sub@VV"(<3 x double> %return11, <3 x double> %return12)
  %return15 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0))
  %output17 = fmul double %return15, %return4
  %cast18 = call <3 x double> @"set@VF"(double %output17)
  %output19 = call <3 x double> @"mul@VV"(<3 x double> %output13, <3 x double> %cast18)
  %output23 = call <3 x double> @"sub@VV"(<3 x double> %return, <3 x double> %_bound_P5)
  %output26 = call <3 x double> @"mul@VV"(<3 x double> %output23, <3 x double> %cast)
  %output27 = call <3 x double> @"add@VV"(<3 x double> %_bound_P5, <3 x double> %output26)
  %output29 = call <3 x double> @"add@VV"(<3 x double> %output27, <3 x double> %output19)
  store <3 x double> %output29, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"noise@VV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %P) #1 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@IV"(i64* %0, <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %evalue2) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue3, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"name\00"
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [1 x i8] zeroinitializer
@oldname = external global i8*
@name = external global i8*
@P = external global <3 x double>
@rest = external global <3 x double>
@__dist = external global double
@3 = private constant [8 x i8] c"oldname\00"
@4 = private constant [5 x i8] c"rest\00"
@5 = private constant [7 x i8] c"__dist\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SSVVF"(i8** %_bound_oldname, i8** %_bound_name, <3 x double>* %_bound_P, <3 x double>* %_bound_rest, double* %_bound___dist) #0 {
__llvm_entry:
  %_bound_name1 = load i8*, i8** %_bound_name
  store i8* %_bound_name1, i8** %_bound_oldname
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %return = call i64 @"nearpoint@IIV"(i64 1, <3 x double> %_bound_P2)
  %return4 = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0), i64 %return)
  store i8* %return4, i8** %_bound_name
  %_bound_P5 = load <3 x double>, <3 x double>* %_bound_P
  store <3 x double> %_bound_P5, <3 x double>* %_bound_rest
  %return7 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return)
  store <3 x double> %return7, <3 x double>* %_bound_P
  %_bound_rest8 = load <3 x double>, <3 x double>* %_bound_rest
  %return10 = call double @"distance@FVV"(<3 x double> %_bound_rest8, <3 x double> %return7)
  store double %return10, double* %_bound___dist
  ret void
}

; Function Attrs: nounwind
declare i64 @"nearpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %oldname, i8* %name, <3 x double> %P, <3 x double> %rest, double %__dist) #1 {
__llvm_entry:
  %"<name>" = alloca i8*
  %"<P>" = alloca <3 x double>
  %"<rest>" = alloca <3 x double>
  %"<__dist>" = alloca double
  %"<oldname>" = alloca i8*
  store i8* %oldname, i8** %"<oldname>"
  store i8* %name, i8** %"<name>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %rest, <3 x double>* %"<rest>"
  store double %__dist, double* %"<__dist>"
  call void @"__vex_snippet_snippet@SSVVF"(i8** %"<oldname>", i8** %"<name>", <3 x double>* %"<P>", <3 x double>* %"<rest>", double* %"<__dist>")
  %evalue = load i8*, i8** %"<oldname>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i8* %evalue) #2
  %evalue1 = load i8*, i8** %"<name>"
  %gvalue2 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0), i8* %evalue1) #2
  %evalue3 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue3) #2
  %evalue5 = load <3 x double>, <3 x double>* %"<rest>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0), <3 x double> %evalue5) #2
  %evalue7 = load double, double* %"<__dist>"
  %gvalue8 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0), double %evalue7) #2
  store i8* %gvalue, i8** @oldname
  store i8* %gvalue2, i8** @name
  store <3 x double> %gvalue4, <3 x double>* @P
  store <3 x double> %gvalue6, <3 x double>* @rest
  store double %gvalue8, double* @__dist
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), <3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

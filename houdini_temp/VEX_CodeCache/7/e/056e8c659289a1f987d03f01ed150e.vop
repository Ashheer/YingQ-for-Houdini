;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [7 x i8] c"pixels\00"
@1 = private constant [11 x i8] c"centimeter\00"
@2 = private constant [10 x i8] c"assetunit\00"
@3 = private constant [19 x i8] c"targettexeldensity\00"
@__texeldensity = external global double
@__uvarea = external global double
@__area = external global double
@__scalefactor = external global double
@4 = private constant [15 x i8] c"__texeldensity\00"
@5 = private constant [9 x i8] c"__uvarea\00"
@6 = private constant [7 x i8] c"__area\00"
@7 = private constant [14 x i8] c"__scalefactor\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FFFF"(double* %_bound___texeldensity, double* %_bound___uvarea, double* %_bound___area, double* %_bound___scalefactor) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0))
  %_bound___uvarea2 = load double, double* %_bound___uvarea
  %return3 = call double @"sqrt@FF"(double %_bound___uvarea2)
  %_bound___area4 = load double, double* %_bound___area
  %return5 = call double @"sqrt@FF"(double %_bound___area4)
  %output = call double @"div@FF"(double %return3, double %return5)
  %cast = sitofp i64 %return to double
  %output7 = fmul double %output, %cast
  %cast9 = sitofp i64 %return1 to double
  %return10 = call double @"detail@FISI"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0), i64 0)
  %output11 = call double @"div@FF"(double %cast9, double %return10)
  %output12 = call double @"div@FF"(double %output7, double %output11)
  store double %output12, double* %_bound___texeldensity
  %return13 = call double @"detail@FISI"(i64 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @3, i64 0, i64 0), i64 0)
  %_bound___texeldensity14 = load double, double* %_bound___texeldensity
  %output15 = call double @"div@FF"(double %return13, double %_bound___texeldensity14)
  store double %output15, double* %_bound___scalefactor
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
declare double @"detail@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(double %__texeldensity, double %__uvarea, double %__area, double %__scalefactor) #2 {
__llvm_entry:
  %"<__scalefactor>" = alloca double
  %0 = alloca double
  %1 = alloca double
  %"<__texeldensity>" = alloca double
  store double %__texeldensity, double* %"<__texeldensity>"
  store double %__scalefactor, double* %"<__scalefactor>"
  store double %__uvarea, double* %0
  store double %__area, double* %1
  call void @"__vex_snippet_snippet@FFFF"(double* %"<__texeldensity>", double* %0, double* %1, double* %"<__scalefactor>")
  %evalue = load double, double* %"<__texeldensity>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @4, i64 0, i64 0), double %evalue) #3
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i64 0, i64 0), double %__uvarea) #3
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0), double %__area) #3
  %evalue7 = load double, double* %"<__scalefactor>"
  %gvalue8 = call double @"_export@FSF"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @7, i64 0, i64 0), double %evalue7) #3
  store double %gvalue, double* @__texeldensity
  store double %gvalue4, double* @__uvarea
  store double %gvalue6, double* @__area
  store double %gvalue8, double* @__scalefactor
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x double] zeroinitializer
@1 = private constant [10 x i8] c"cut_areas\00"
@cut_areas = external global double*

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[F"(double** %_bound_cut_areas) #0 {
__llvm_entry:
  %return = call double* @"detail@[FIS"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0))
  store double* %return, double** %_bound_cut_areas
  ret void
}

; Function Attrs: nounwind
declare double* @"detail@[FIS"(i64, i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(double* %cut_areas) #1 {
__llvm_entry:
  %"<cut_areas>" = alloca double*
  store double* %cut_areas, double** %"<cut_areas>"
  call void @"__vex_snippet_snippet@[F"(double** %"<cut_areas>")
  %evalue = load double*, double** %"<cut_areas>"
  %gvalue = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), double* %evalue) #2
  store double* %gvalue, double** @cut_areas
  ret void
}

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double* getelementptr inbounds ([0 x double], [0 x double]* @0, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

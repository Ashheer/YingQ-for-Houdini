;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"iteration\00"
@1 = private constant [19 x i8] c"../vShapeBound0_%g\00"
@2 = private constant [19 x i8] c"../vShapeBound1_%g\00"
@3 = private constant [19 x i8] c"../vShapeBound2_%g\00"
@4 = private constant [19 x i8] c"../vShapeBound3_%g\00"
@5 = private constant [21 x i8] c"../mBoxCutterMode_%g\00"
@6 = private constant [24 x i8] c"../sBooleanOperation_%g\00"
@7 = private constant [17 x i8] c"../iNumCopies_%g\00"
@8 = private constant [21 x i8] c"../vCopyTranslate_%g\00"
@9 = private constant [17 x i8] c"../vPivotCopy_%g\00"
@10 = private constant [15 x i8] c"../vRotCopy_%g\00"
@11 = private constant [1 x i8] zeroinitializer
@12 = private constant [14 x i8] c"../opShape_%g\00"
@13 = private constant [2 x i8] c".\00"
@14 = private constant [4 x i8] c"../\00"
@15 = private constant [22 x i8] c"../iBevelDivisions_%g\00"
@16 = private constant [21 x i8] c"../fBevelDistance_%g\00"
@17 = private constant [17 x i8] c"../vTranslate_%g\00"
@18 = private constant [14 x i8] c"../vRotate_%g\00"
@19 = private constant [13 x i8] c"../vScale_%g\00"
@val1 = external global <3 x double>
@val2 = external global <3 x double>
@val3 = external global <3 x double>
@val4 = external global <3 x double>
@mode = external global i64
@boolmode = external global i64
@copies = external global i64
@copytranslate = external global <3 x double>
@copypivot = external global <3 x double>
@copyrotate = external global <3 x double>
@op = external global i8*
@beveldivisions = external global i64
@beveldistance = external global double
@position = external global <3 x double>
@rotation = external global <3 x double>
@scale = external global <3 x double>
@20 = private constant [5 x i8] c"val1\00"
@21 = private constant [5 x i8] c"val2\00"
@22 = private constant [5 x i8] c"val3\00"
@23 = private constant [5 x i8] c"val4\00"
@24 = private constant [5 x i8] c"mode\00"
@25 = private constant [9 x i8] c"boolmode\00"
@26 = private constant [7 x i8] c"copies\00"
@27 = private constant [14 x i8] c"copytranslate\00"
@28 = private constant [10 x i8] c"copypivot\00"
@29 = private constant [11 x i8] c"copyrotate\00"
@30 = private constant [3 x i8] c"op\00"
@31 = private constant [15 x i8] c"beveldivisions\00"
@32 = private constant [14 x i8] c"beveldistance\00"
@33 = private constant [9 x i8] c"position\00"
@34 = private constant [9 x i8] c"rotation\00"
@35 = private constant [6 x i8] c"scale\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVVVIIIVVVSIFVVV"(<3 x double>* %_bound_val1, <3 x double>* %_bound_val2, <3 x double>* %_bound_val3, <3 x double>* %_bound_val4, i64* %_bound_mode, i64* %_bound_boolmode, i64* %_bound_copies, <3 x double>* %_bound_copytranslate, <3 x double>* %_bound_copypivot, <3 x double>* %_bound_copyrotate, i8** %_bound_op, i64* %_bound_beveldivisions, double* %_bound_beveldistance, <3 x double>* %_bound_position, <3 x double>* %_bound_rotation, <3 x double>* %_bound_scale) #0 {
__llvm_entry:
  %return = call i64 @"detail@IISI"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), i64 0)
  %output = add i64 %return, 1
  %return2 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1, i64 0, i64 0), i64 %output)
  %return3 = call <3 x double> @"chv@VS"(i8* %return2)
  store <3 x double> %return3, <3 x double>* %_bound_val1
  %return5 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @2, i64 0, i64 0), i64 %output)
  %return6 = call <3 x double> @"chv@VS"(i8* %return5)
  store <3 x double> %return6, <3 x double>* %_bound_val2
  %return8 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @3, i64 0, i64 0), i64 %output)
  %return9 = call <3 x double> @"chv@VS"(i8* %return8)
  store <3 x double> %return9, <3 x double>* %_bound_val3
  %return11 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @4, i64 0, i64 0), i64 %output)
  %return12 = call <3 x double> @"chv@VS"(i8* %return11)
  store <3 x double> %return12, <3 x double>* %_bound_val4
  %return14 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @5, i64 0, i64 0), i64 %output)
  %return15 = call i64 @"chi@IS"(i8* %return14)
  store i64 %return15, i64* %_bound_mode
  %return17 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @6, i64 0, i64 0), i64 %output)
  %return18 = call i64 @"chi@IS"(i8* %return17)
  store i64 %return18, i64* %_bound_boolmode
  %return20 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @7, i64 0, i64 0), i64 %output)
  %return21 = call i64 @"chi@IS"(i8* %return20)
  store i64 %return21, i64* %_bound_copies
  %return23 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @8, i64 0, i64 0), i64 %output)
  %return24 = call <3 x double> @"chv@VS"(i8* %return23)
  store <3 x double> %return24, <3 x double>* %_bound_copytranslate
  %return26 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @9, i64 0, i64 0), i64 %output)
  %return27 = call <3 x double> @"chv@VS"(i8* %return26)
  store <3 x double> %return27, <3 x double>* %_bound_copypivot
  %return29 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @10, i64 0, i64 0), i64 %output)
  %return30 = call <3 x double> @"chv@VS"(i8* %return29)
  store <3 x double> %return30, <3 x double>* %_bound_copyrotate
  %return32 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @12, i64 0, i64 0), i64 %output)
  %return33 = call i8* @"chsraw@SS"(i8* %return32)
  %return35 = call i8* @"getcomp@SSI"(i8* %return33, i64 0)
  %return36 = call i64 @"eq@ISS"(i8* %return35, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i64 0, i64 0))
  %0 = icmp ne i64 %return36, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return38 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @14, i64 0, i64 0), i8* %return33)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %path.0 = phi i8* [ %return38, %true ], [ %return33, %__llvm_entry ]
  %return40 = call i8* @"opfullpath@SS"(i8* %path.0)
  store i8* %return40, i8** %_bound_op
  %return42 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @15, i64 0, i64 0), i64 %output)
  %return43 = call i64 @"chi@IS"(i8* %return42)
  store i64 %return43, i64* %_bound_beveldivisions
  %return45 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @16, i64 0, i64 0), i64 %output)
  %return46 = call double @"chf@FS"(i8* %return45)
  store double %return46, double* %_bound_beveldistance
  %return48 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @17, i64 0, i64 0), i64 %output)
  %return49 = call <3 x double> @"chv@VS"(i8* %return48)
  store <3 x double> %return49, <3 x double>* %_bound_position
  %return51 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @18, i64 0, i64 0), i64 %output)
  %return52 = call <3 x double> @"chv@VS"(i8* %return51)
  store <3 x double> %return52, <3 x double>* %_bound_rotation
  %return54 = call i8* @"sprintf@SS:I"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @19, i64 0, i64 0), i64 %output)
  %return55 = call <3 x double> @"chv@VS"(i8* %return54)
  store <3 x double> %return55, <3 x double>* %_bound_scale
  ret void
}

; Function Attrs: nounwind
declare i64 @"detail@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"sprintf@SS:I"(i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"chsraw@SS"(i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"getcomp@SSI"(i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"opfullpath@SS"(i8*) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %val1, <3 x double> %val2, <3 x double> %val3, <3 x double> %val4, i64 %mode, i64 %boolmode, i64 %copies, <3 x double> %copytranslate, <3 x double> %copypivot, <3 x double> %copyrotate, i8* %op, i64 %beveldivisions, double %beveldistance, <3 x double> %position, <3 x double> %rotation, <3 x double> %scale) #1 {
__llvm_entry:
  %"<val2>" = alloca <3 x double>
  %"<val3>" = alloca <3 x double>
  %"<val4>" = alloca <3 x double>
  %"<mode>" = alloca i64
  %"<boolmode>" = alloca i64
  %"<copies>" = alloca i64
  %"<copytranslate>" = alloca <3 x double>
  %"<copypivot>" = alloca <3 x double>
  %"<copyrotate>" = alloca <3 x double>
  %"<op>" = alloca i8*
  %"<beveldivisions>" = alloca i64
  %"<beveldistance>" = alloca double
  %"<position>" = alloca <3 x double>
  %"<rotation>" = alloca <3 x double>
  %"<scale>" = alloca <3 x double>
  %"<val1>" = alloca <3 x double>
  store <3 x double> %val1, <3 x double>* %"<val1>"
  store <3 x double> %val2, <3 x double>* %"<val2>"
  store <3 x double> %val3, <3 x double>* %"<val3>"
  store <3 x double> %val4, <3 x double>* %"<val4>"
  store i64 %mode, i64* %"<mode>"
  store i64 %boolmode, i64* %"<boolmode>"
  store i64 %copies, i64* %"<copies>"
  store <3 x double> %copytranslate, <3 x double>* %"<copytranslate>"
  store <3 x double> %copypivot, <3 x double>* %"<copypivot>"
  store <3 x double> %copyrotate, <3 x double>* %"<copyrotate>"
  store i8* %op, i8** %"<op>"
  store i64 %beveldivisions, i64* %"<beveldivisions>"
  store double %beveldistance, double* %"<beveldistance>"
  store <3 x double> %position, <3 x double>* %"<position>"
  store <3 x double> %rotation, <3 x double>* %"<rotation>"
  store <3 x double> %scale, <3 x double>* %"<scale>"
  call void @"__vex_snippet_snippet@VVVVIIIVVVSIFVVV"(<3 x double>* %"<val1>", <3 x double>* %"<val2>", <3 x double>* %"<val3>", <3 x double>* %"<val4>", i64* %"<mode>", i64* %"<boolmode>", i64* %"<copies>", <3 x double>* %"<copytranslate>", <3 x double>* %"<copypivot>", <3 x double>* %"<copyrotate>", i8** %"<op>", i64* %"<beveldivisions>", double* %"<beveldistance>", <3 x double>* %"<position>", <3 x double>* %"<rotation>", <3 x double>* %"<scale>")
  %evalue = load <3 x double>, <3 x double>* %"<val1>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @20, i64 0, i64 0), <3 x double> %evalue) #3
  %evalue1 = load <3 x double>, <3 x double>* %"<val2>"
  %gvalue2 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @21, i64 0, i64 0), <3 x double> %evalue1) #3
  %evalue3 = load <3 x double>, <3 x double>* %"<val3>"
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @22, i64 0, i64 0), <3 x double> %evalue3) #3
  %evalue5 = load <3 x double>, <3 x double>* %"<val4>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @23, i64 0, i64 0), <3 x double> %evalue5) #3
  %evalue7 = load i64, i64* %"<mode>"
  %gvalue8 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @24, i64 0, i64 0), i64 %evalue7) #3
  %evalue9 = load i64, i64* %"<boolmode>"
  %gvalue10 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @25, i64 0, i64 0), i64 %evalue9) #3
  %evalue11 = load i64, i64* %"<copies>"
  %gvalue12 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @26, i64 0, i64 0), i64 %evalue11) #3
  %evalue13 = load <3 x double>, <3 x double>* %"<copytranslate>"
  %gvalue14 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @27, i64 0, i64 0), <3 x double> %evalue13) #3
  %evalue15 = load <3 x double>, <3 x double>* %"<copypivot>"
  %gvalue16 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @28, i64 0, i64 0), <3 x double> %evalue15) #3
  %evalue17 = load <3 x double>, <3 x double>* %"<copyrotate>"
  %gvalue18 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @29, i64 0, i64 0), <3 x double> %evalue17) #3
  %evalue19 = load i8*, i8** %"<op>"
  %gvalue20 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @30, i64 0, i64 0), i8* %evalue19) #3
  %evalue21 = load i64, i64* %"<beveldivisions>"
  %gvalue22 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @31, i64 0, i64 0), i64 %evalue21) #3
  %evalue23 = load double, double* %"<beveldistance>"
  %gvalue24 = call double @"_export@FSF"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @32, i64 0, i64 0), double %evalue23) #3
  %evalue25 = load <3 x double>, <3 x double>* %"<position>"
  %gvalue26 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @33, i64 0, i64 0), <3 x double> %evalue25) #3
  %evalue27 = load <3 x double>, <3 x double>* %"<rotation>"
  %gvalue28 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @34, i64 0, i64 0), <3 x double> %evalue27) #3
  %evalue29 = load <3 x double>, <3 x double>* %"<scale>"
  %gvalue30 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @35, i64 0, i64 0), <3 x double> %evalue29) #3
  store <3 x double> %gvalue, <3 x double>* @val1
  store <3 x double> %gvalue2, <3 x double>* @val2
  store <3 x double> %gvalue4, <3 x double>* @val3
  store <3 x double> %gvalue6, <3 x double>* @val4
  store i64 %gvalue8, i64* @mode
  store i64 %gvalue10, i64* @boolmode
  store i64 %gvalue12, i64* @copies
  store <3 x double> %gvalue14, <3 x double>* @copytranslate
  store <3 x double> %gvalue16, <3 x double>* @copypivot
  store <3 x double> %gvalue18, <3 x double>* @copyrotate
  store i8* %gvalue20, i8** @op
  store i64 %gvalue22, i64* @beveldivisions
  store double %gvalue24, double* @beveldistance
  store <3 x double> %gvalue26, <3 x double>* @position
  store <3 x double> %gvalue28, <3 x double>* @rotation
  store <3 x double> %gvalue30, <3 x double>* @scale
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

declare i8* @"_export@SSS"(i8*, i8*)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, i64 0, i64 0, i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @11, i64 0, i64 0), i64 0, double 0.000000e+00, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

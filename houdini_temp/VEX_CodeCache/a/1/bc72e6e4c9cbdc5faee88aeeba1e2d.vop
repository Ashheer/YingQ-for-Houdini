;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [23 x i8] c"../check_oneof_xyzsize\00"
@1 = private constant [21 x i8] c"../check_all_xyzsize\00"
@2 = private constant [21 x i8] c"../check_xyzsize_sum\00"
@3 = private constant [19 x i8] c"../check_bbox_area\00"
@4 = private constant [21 x i8] c"../check_bbox_volume\00"
@5 = private constant [7 x i8] c"bounds\00"
@6 = private constant [21 x i8] c"../numConditionMatch\00"
@7 = private constant [27 x i8] c"../threshold_oneof_xyzsize\00"
@8 = private constant [34 x i8] c"../threshold_oneof_xyzsize_attrib\00"
@9 = private constant [1 x i8] zeroinitializer
@10 = private constant [25 x i8] c"../threshold_all_xyzsize\00"
@11 = private constant [32 x i8] c"../threshold_all_xyzsize_attrib\00"
@12 = private constant [25 x i8] c"../threshold_xyzsize_sum\00"
@13 = private constant [18 x i8] c"../threshold_area\00"
@14 = private constant [25 x i8] c"../threshold_bbox_volume\00"
@15 = private constant [15 x i8] c"../checkvolume\00"
@16 = private constant [15 x i8] c"measuredvolume\00"
@17 = private constant [20 x i8] c"../threshold_volume\00"
@18 = private constant [13 x i8] c"../checkarea\00"
@19 = private constant [30 x i8] c"../check_area_perimeter_ratio\00"
@20 = private constant [13 x i8] c"measuredarea\00"
@21 = private constant [18 x i8] c"../checkperimeter\00"
@22 = private constant [18 x i8] c"measuredperimeter\00"
@23 = private constant [23 x i8] c"../threshold_perimeter\00"
@24 = private constant [34 x i8] c"../threshold_area_perimeter_ratio\00"
@25 = private constant [14 x i8] c"../blastgroup\00"
@26 = private constant [10 x i8] c"../negate\00"
@27 = private constant [22 x i8] c"../RemoveUnusedPoints\00"
@primnum = external global i64
@threshold_oneof_xyzsize_attrib = external global double
@threshold_all_xyzsize_attrib = external global double
@outgrp = external global i64
@28 = private constant [8 x i8] c"primnum\00"
@29 = private constant [31 x i8] c"threshold_oneof_xyzsize_attrib\00"
@30 = private constant [29 x i8] c"threshold_all_xyzsize_attrib\00"
@31 = private constant [7 x i8] c"outgrp\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IFFI"(i64* %_bound_primnum, double* %_bound_threshold_oneof_xyzsize_attrib, double* %_bound_threshold_all_xyzsize_attrib, i64* %_bound_outgrp) #0 {
__llvm_entry:
  %return = call i64 @"nprimitives@II"(i64 1)
  %return1 = call i64 @"gt@III"(i64 %return, i64 0)
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @0, i64 0, i64 0))
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @1, i64 0, i64 0))
  %return4 = call i64 @"or@III"(i64 %return2, i64 %return3)
  %return5 = call i64 @"chi@IS"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @2, i64 0, i64 0))
  %return6 = call i64 @"or@III"(i64 %return4, i64 %return5)
  %return7 = call i64 @"chi@IS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @3, i64 0, i64 0))
  %return8 = call i64 @"or@III"(i64 %return6, i64 %return7)
  %return9 = call i64 @"chi@IS"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @4, i64 0, i64 0))
  %return10 = call i64 @"or@III"(i64 %return8, i64 %return9)
  %0 = icmp ne i64 %return10, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_primnum12 = load i64, i64* %_bound_primnum
  %return13 = call double* @"primintrinsic@[FISI"(i64 %return1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0), i64 %_bound_primnum12)
  %return15 = call double @"getcomp@F[FI"(double* %return13, i64 1)
  %return17 = call double @"getcomp@F[FI"(double* %return13, i64 0)
  %output = fsub double %return15, %return17
  %return18 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> zeroinitializer, double %output, i64 0)
  %output20 = extractvalue { double, <3 x double> } %return18, 1
  %return22 = call double @"getcomp@F[FI"(double* %return13, i64 3)
  %return24 = call double @"getcomp@F[FI"(double* %return13, i64 2)
  %output25 = fsub double %return22, %return24
  %return27 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output20, double %output25, i64 1)
  %output29 = extractvalue { double, <3 x double> } %return27, 1
  %return31 = call double @"getcomp@F[FI"(double* %return13, i64 5)
  %return33 = call double @"getcomp@F[FI"(double* %return13, i64 4)
  %output34 = fsub double %return31, %return33
  %return36 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output29, double %output34, i64 2)
  %output38 = extractvalue { double, <3 x double> } %return36, 1
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %bbox_size0.0 = phi <3 x double> [ %output38, %true ], [ zeroinitializer, %__llvm_entry ]
  %return40 = call i64 @"chi@IS"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @6, i64 0, i64 0))
  %return41 = call i64 @"lt@III"(i64 0, i64 %return40)
  %return43 = call i64 @"and@III"(i64 %return41, i64 %return2)
  %1 = icmp ne i64 %return43, 0
  br i1 %1, label %true44, label %end45

true44:                                           ; preds = %end
  %return46 = call double @"chf@FS"(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @7, i64 0, i64 0))
  %return47 = call i8* @"chs@SS"(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @8, i64 0, i64 0))
  %return48 = call i64 @"ne@ISS"(i8* %return47, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @9, i64 0, i64 0))
  %2 = icmp ne i64 %return48, 0
  br i1 %2, label %true49, label %end50

end45:                                            ; preds = %end50, %end
  %flag.0 = phi i64 [ %return71, %end50 ], [ 0, %end ]
  %return75 = call i64 @"lt@III"(i64 %flag.0, i64 %return40)
  %return77 = call i64 @"and@III"(i64 %return75, i64 %return3)
  %3 = icmp ne i64 %return77, 0
  br i1 %3, label %true78, label %end79

true49:                                           ; preds = %true44
  %_bound_threshold_oneof_xyzsize_attrib52 = load double, double* %_bound_threshold_oneof_xyzsize_attrib
  %output53 = fmul double %return46, %_bound_threshold_oneof_xyzsize_attrib52
  br label %end50

end50:                                            ; preds = %true49, %true44
  %thred.0 = phi double [ %output53, %true49 ], [ %return46, %true44 ]
  %return56 = call double @"getcomp@FVI"(<3 x double> %bbox_size0.0, i64 0)
  %return58 = fcmp olt double %return56, %thred.0
  %return59 = zext i1 %return58 to i64
  %return61 = call double @"getcomp@FVI"(<3 x double> %bbox_size0.0, i64 1)
  %return63 = fcmp olt double %return61, %thred.0
  %return64 = zext i1 %return63 to i64
  %return65 = call i64 @"and@III"(i64 %return59, i64 %return64)
  %return67 = call double @"getcomp@FVI"(<3 x double> %bbox_size0.0, i64 2)
  %return69 = fcmp olt double %return67, %thred.0
  %return70 = zext i1 %return69 to i64
  %return71 = call i64 @"and@III"(i64 %return65, i64 %return70)
  br label %end45

true78:                                           ; preds = %end45
  %return81 = call double @"chf@FS"(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @10, i64 0, i64 0))
  %return82 = call i8* @"chs@SS"(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @11, i64 0, i64 0))
  %return83 = call i64 @"ne@ISS"(i8* %return82, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @9, i64 0, i64 0))
  %4 = icmp ne i64 %return83, 0
  br i1 %4, label %true84, label %end85

end79:                                            ; preds = %end85, %end45
  %flag.1 = phi i64 [ %output107, %end85 ], [ %flag.0, %end45 ]
  %return110 = call i64 @"lt@III"(i64 %flag.1, i64 %return40)
  %return112 = call i64 @"and@III"(i64 %return110, i64 %return5)
  %5 = icmp ne i64 %return112, 0
  br i1 %5, label %true113, label %end114

true84:                                           ; preds = %true78
  %_bound_threshold_all_xyzsize_attrib87 = load double, double* %_bound_threshold_all_xyzsize_attrib
  %output88 = fmul double %return81, %_bound_threshold_all_xyzsize_attrib87
  br label %end85

end85:                                            ; preds = %true84, %true78
  %thred80.0 = phi double [ %output88, %true84 ], [ %return81, %true78 ]
  %return91 = call double @"getcomp@FVI"(<3 x double> %bbox_size0.0, i64 0)
  %return93 = fcmp olt double %return91, %thred80.0
  %return94 = zext i1 %return93 to i64
  %return96 = call double @"getcomp@FVI"(<3 x double> %bbox_size0.0, i64 1)
  %return98 = fcmp olt double %return96, %thred80.0
  %return99 = zext i1 %return98 to i64
  %return100 = call i64 @"or@III"(i64 %return94, i64 %return99)
  %return102 = call double @"getcomp@FVI"(<3 x double> %bbox_size0.0, i64 2)
  %return104 = fcmp olt double %return102, %thred80.0
  %return105 = zext i1 %return104 to i64
  %return106 = call i64 @"or@III"(i64 %return100, i64 %return105)
  %output107 = add i64 %flag.0, %return106
  br label %end79

true113:                                          ; preds = %end79
  %return117 = call double @"getcomp@FVI"(<3 x double> %bbox_size0.0, i64 0)
  %return119 = call double @"getcomp@FVI"(<3 x double> %bbox_size0.0, i64 1)
  %output120 = fadd double %return117, %return119
  %return122 = call double @"getcomp@FVI"(<3 x double> %bbox_size0.0, i64 2)
  %output123 = fadd double %output120, %return122
  %return124 = call double @"chf@FS"(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @12, i64 0, i64 0))
  %return125 = fcmp olt double %output123, %return124
  %return126 = zext i1 %return125 to i64
  %output127 = add i64 %flag.1, %return126
  br label %end114

end114:                                           ; preds = %true113, %end79
  %flag.2 = phi i64 [ %output127, %true113 ], [ %flag.1, %end79 ]
  %return130 = call i64 @"lt@III"(i64 %flag.2, i64 %return40)
  %return132 = call i64 @"and@III"(i64 %return130, i64 %return7)
  %6 = icmp ne i64 %return132, 0
  br i1 %6, label %true133, label %end134

true133:                                          ; preds = %end114
  %return136 = call double @"getcomp@FVI"(<3 x double> %bbox_size0.0, i64 0)
  %return138 = call double @"getcomp@FVI"(<3 x double> %bbox_size0.0, i64 1)
  %output139 = fmul double %return136, %return138
  %return143 = call double @"getcomp@FVI"(<3 x double> %bbox_size0.0, i64 2)
  %output144 = fmul double %return138, %return143
  %output145 = fadd double %output139, %output144
  %output150 = fmul double %return143, %return136
  %output151 = fadd double %output145, %output150
  %return154 = call double @"chf@FS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @13, i64 0, i64 0))
  %return155 = fcmp olt double %output151, %return154
  %return156 = zext i1 %return155 to i64
  %output157 = add i64 %flag.2, %return156
  br label %end134

end134:                                           ; preds = %true133, %end114
  %flag.3 = phi i64 [ %output157, %true133 ], [ %flag.2, %end114 ]
  %return160 = call i64 @"lt@III"(i64 %flag.3, i64 %return40)
  %return162 = call i64 @"and@III"(i64 %return160, i64 %return9)
  %7 = icmp ne i64 %return162, 0
  br i1 %7, label %true163, label %end164

true163:                                          ; preds = %end134
  %return166 = call double @"getcomp@FVI"(<3 x double> %bbox_size0.0, i64 0)
  %return168 = call double @"getcomp@FVI"(<3 x double> %bbox_size0.0, i64 1)
  %output169 = fmul double %return166, %return168
  %return171 = call double @"getcomp@FVI"(<3 x double> %bbox_size0.0, i64 2)
  %output172 = fmul double %output169, %return171
  %return175 = call double @"chf@FS"(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @14, i64 0, i64 0))
  %return176 = fcmp olt double %output172, %return175
  %return177 = zext i1 %return176 to i64
  %output178 = add i64 %flag.3, %return177
  br label %end164

end164:                                           ; preds = %true163, %end134
  %flag.4 = phi i64 [ %output178, %true163 ], [ %flag.3, %end134 ]
  %return181 = call i64 @"lt@III"(i64 %flag.4, i64 %return40)
  %return182 = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @15, i64 0, i64 0))
  %return183 = call i64 @"and@III"(i64 %return181, i64 %return182)
  %8 = icmp ne i64 %return183, 0
  br i1 %8, label %true184, label %end185

true184:                                          ; preds = %end164
  %_bound_primnum187 = load i64, i64* %_bound_primnum
  %return188 = call double @"primintrinsic@FISI"(i64 %return1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @16, i64 0, i64 0), i64 %_bound_primnum187)
  %return191 = call i64 @"isnan@IF"(double %return188)
  %return193 = call double @"chf@FS"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @17, i64 0, i64 0))
  %return194 = fcmp olt double %return188, %return193
  %return195 = zext i1 %return194 to i64
  %return196 = call i64 @"or@III"(i64 %return191, i64 %return195)
  %output197 = add i64 %flag.4, %return196
  br label %end185

end185:                                           ; preds = %true184, %end164
  %flag.5 = phi i64 [ %output197, %true184 ], [ %flag.4, %end164 ]
  %return200 = call i64 @"lt@III"(i64 %flag.5, i64 %return40)
  %return201 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @18, i64 0, i64 0))
  %return202 = call i64 @"and@III"(i64 %return200, i64 %return201)
  %return203 = call i64 @"chi@IS"(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @19, i64 0, i64 0))
  %return204 = call i64 @"or@III"(i64 %return202, i64 %return203)
  %9 = icmp ne i64 %return204, 0
  br i1 %9, label %true205, label %end206

true205:                                          ; preds = %end185
  %_bound_primnum207 = load i64, i64* %_bound_primnum
  %return208 = call double @"primintrinsic@FISI"(i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @20, i64 0, i64 0), i64 %_bound_primnum207)
  br label %end206

end206:                                           ; preds = %true205, %end185
  %area.0 = phi double [ %return208, %true205 ], [ 0.000000e+00, %end185 ]
  %10 = icmp ne i64 %return202, 0
  br i1 %10, label %true214, label %end215

true214:                                          ; preds = %end206
  %return218 = call i64 @"isnan@IF"(double %area.0)
  %return220 = call double @"chf@FS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @13, i64 0, i64 0))
  %return221 = fcmp olt double %area.0, %return220
  %return222 = zext i1 %return221 to i64
  %return223 = call i64 @"or@III"(i64 %return218, i64 %return222)
  %output224 = add i64 %flag.5, %return223
  br label %end215

end215:                                           ; preds = %true214, %end206
  %flag.6 = phi i64 [ %output224, %true214 ], [ %flag.5, %end206 ]
  %return227 = call i64 @"lt@III"(i64 %flag.6, i64 %return40)
  %return228 = call i64 @"chi@IS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @21, i64 0, i64 0))
  %return229 = call i64 @"and@III"(i64 %return227, i64 %return228)
  %return231 = call i64 @"or@III"(i64 %return229, i64 %return203)
  %11 = icmp ne i64 %return231, 0
  br i1 %11, label %true232, label %end233

true232:                                          ; preds = %end215
  %_bound_primnum235 = load i64, i64* %_bound_primnum
  %return236 = call double @"primintrinsic@FISI"(i64 %return1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @22, i64 0, i64 0), i64 %_bound_primnum235)
  br label %end233

end233:                                           ; preds = %true232, %end215
  %perimeter.0 = phi double [ %return236, %true232 ], [ 0.000000e+00, %end215 ]
  %12 = icmp ne i64 %return229, 0
  br i1 %12, label %true242, label %end243

true242:                                          ; preds = %end233
  %return246 = call i64 @"isnan@IF"(double %perimeter.0)
  %return248 = call double @"chf@FS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @23, i64 0, i64 0))
  %return249 = fcmp olt double %perimeter.0, %return248
  %return250 = zext i1 %return249 to i64
  %return251 = call i64 @"or@III"(i64 %return246, i64 %return250)
  %output252 = add i64 %flag.6, %return251
  br label %end243

end243:                                           ; preds = %true242, %end233
  %flag.7 = phi i64 [ %output252, %true242 ], [ %flag.6, %end233 ]
  %return255 = call i64 @"lt@III"(i64 %flag.7, i64 %return40)
  %return257 = call i64 @"and@III"(i64 %return255, i64 %return203)
  %13 = icmp ne i64 %return257, 0
  br i1 %13, label %true258, label %end259

true258:                                          ; preds = %end243
  %return262 = call i64 @"isnan@IF"(double %area.0)
  %return264 = call i64 @"isnan@IF"(double %perimeter.0)
  %return265 = call i64 @"or@III"(i64 %return262, i64 %return264)
  %output268 = call double @"div@FF"(double %area.0, double %perimeter.0)
  %return269 = call double @"chf@FS"(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @24, i64 0, i64 0))
  %return270 = fcmp olt double %output268, %return269
  %return271 = zext i1 %return270 to i64
  %return272 = call i64 @"or@III"(i64 %return265, i64 %return271)
  %output273 = add i64 %flag.7, %return272
  br label %end259

end259:                                           ; preds = %true258, %end243
  %flag.8 = phi i64 [ %output273, %true258 ], [ %flag.7, %end243 ]
  %return274 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @25, i64 0, i64 0))
  %14 = icmp ne i64 %return274, 0
  %return279 = call i64 @"ge@III"(i64 %flag.8, i64 %return40)
  br i1 %14, label %true275, label %false

true275:                                          ; preds = %end259
  %return280 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @26, i64 0, i64 0))
  %return281 = xor i64 %return279, %return280
  %15 = icmp ne i64 %return281, 0
  br i1 %15, label %true282, label %end276

false:                                            ; preds = %end259
  store i64 %return279, i64* %_bound_outgrp
  br label %end276

end276:                                           ; preds = %true275, %true282, %false
  ret void

true282:                                          ; preds = %true275
  %_bound_primnum284 = load i64, i64* %_bound_primnum
  %return285 = call i64 @"chi@IS"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @27, i64 0, i64 0))
  %return286 = call i64 @"removeprim@IIII"(i64 0, i64 %_bound_primnum284, i64 %return285)
  br label %end276
}

; Function Attrs: nounwind
declare i64 @"nprimitives@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #2

; Function Attrs: nounwind
declare double* @"primintrinsic@[FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #2

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #2

; Function Attrs: nounwind
declare double @"primintrinsic@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"isnan@IF"(double) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #2

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"removeprim@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, double %threshold_oneof_xyzsize_attrib, double %threshold_all_xyzsize_attrib, i64 %outgrp) #1 {
__llvm_entry:
  %"<outgrp>" = alloca i64
  %0 = alloca i64
  %1 = alloca double
  %2 = alloca double
  store i64 %outgrp, i64* %"<outgrp>"
  store i64 %primnum, i64* %0
  store double %threshold_oneof_xyzsize_attrib, double* %1
  store double %threshold_all_xyzsize_attrib, double* %2
  call void @"__vex_snippet_snippet@IFFI"(i64* %0, double* %1, double* %2, i64* %"<outgrp>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @28, i64 0, i64 0), i64 %primnum) #4
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @29, i64 0, i64 0), double %threshold_oneof_xyzsize_attrib) #4
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @30, i64 0, i64 0), double %threshold_all_xyzsize_attrib) #4
  %evalue8 = load i64, i64* %"<outgrp>"
  %gvalue9 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @31, i64 0, i64 0), i64 %evalue8) #4
  store i64 %gvalue, i64* @primnum
  store double %gvalue5, double* @threshold_oneof_xyzsize_attrib
  store double %gvalue7, double* @threshold_all_xyzsize_attrib
  store i64 %gvalue9, i64* @outgrp
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, double 0.000000e+00, double 0.000000e+00, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

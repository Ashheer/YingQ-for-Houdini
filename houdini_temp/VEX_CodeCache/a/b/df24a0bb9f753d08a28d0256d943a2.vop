;_name	/obj/geo1/polypath1/find_end_points/attribvop1
; ModuleID = 'obj_geo1_polypath1_find_end_points_attribvop1'

@group___trace_edges_end_points = external global i64
@0 = private constant [31 x i8] c"group___trace_edges_end_points\00"

define private void @"_obj_geo1_polypath1_find_end_points_attribvop1_snippet1@II"(i64* %_bound_group___trace_edges_end_points, i64* %_bound_ptnum) nounwind alwaysinline {
__llvm_entry:
  %_bound_ptnum1 = load i64* %_bound_ptnum
  %return = call i64 @"neighbourcount@III"(i64 0, i64 %_bound_ptnum1)
  %return2 = call i64 @"eq@III"(i64 %return, i64 1)
  store i64 %return2, i64* %_bound_group___trace_edges_end_points
  ret void
}

declare i64 @"neighbourcount@III"(i64, i64) nounwind

declare i64 @"eq@III"(i64, i64) nounwind readnone

define void @obj_geo1_polypath1_find_end_points_attribvop1(i64 %group___trace_edges_end_points, i64 %ptnum) nounwind {
__llvm_entry:
  %0 = alloca i64
  %"<group___trace_edges_end_points>" = alloca i64
  store i64 %group___trace_edges_end_points, i64* %"<group___trace_edges_end_points>"
  store i64 %ptnum, i64* %0
  call void @"_obj_geo1_polypath1_find_end_points_attribvop1_snippet1@II"(i64* %"<group___trace_edges_end_points>", i64* %0)
  %evalue = load i64* %"<group___trace_edges_end_points>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([31 x i8]* @0, i64 0, i64 0), i64 %evalue) nounwind readonly
  store i64 %gvalue, i64* @group___trace_edges_end_points
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_geo1_polypath1_find_end_points_attribvop1(i64 0, i64 0)
  ret void
}

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"18.5.633"}
!2 = metadata !{metadata !"64"}

;_code_end

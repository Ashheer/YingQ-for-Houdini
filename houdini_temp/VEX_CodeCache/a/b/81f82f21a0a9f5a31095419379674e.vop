;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@numpt = external global i64
@P = external global <3 x double>
@1 = private constant [6 x i8] c"numpt\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IV"(i64* %_bound_numpt, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_numpt1 = load i64, i64* %_bound_numpt
  %output = sub i64 %_bound_numpt1, 1
  %return = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %output)
  %_bound_numpt2 = load i64, i64* %_bound_numpt
  %output3 = sub i64 %_bound_numpt2, 2
  %return4 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %output3)
  %output7 = call <3 x double> @"sub@VV"(<3 x double> %return, <3 x double> %return4)
  %return8 = call <3 x double> @"normalize@VV"(<3 x double> %output7)
  %return9 = call <3 x double> @"cross@VVV"(<3 x double> %return8, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>)
  %_bound_P10 = load <3 x double>, <3 x double>* %_bound_P
  %cast = call <3 x double> @"set@VF"(double 5.000000e-03)
  %output12 = call <3 x double> @"mul@VV"(<3 x double> %return9, <3 x double> %cast)
  %output13 = call <3 x double> @"add@VV"(<3 x double> %_bound_P10, <3 x double> %output12)
  store <3 x double> %output13, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %numpt, <3 x double> %P) #1 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %numpt, i64* %0
  call void @"__vex_snippet_snippet@IV"(i64* %0, <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i64 %numpt) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %evalue2) #3
  store i64 %gvalue, i64* @numpt
  store <3 x double> %gvalue3, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

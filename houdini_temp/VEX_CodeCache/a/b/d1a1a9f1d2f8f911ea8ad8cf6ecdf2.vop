;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [19 x i8] c"../pointattriblist\00"
@2 = private constant [6 x i8] c"point\00"
@3 = private constant [17 x i8] c"../sDefaultValue\00"
@4 = private constant [4 x i8] c"set\00"
@ptnum = external global i64
@5 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_ptnum) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1, i64 0, i64 0))
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return2 = call i8* @"point@SISI"(i64 0, i8* %return, i64 %_bound_ptnum1)
  %return5 = call i64 @"findattribval@IISSSI"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i8* %return, i8* %return2, i64 0)
  %return7 = call i64 @"neg@II"(i64 1)
  %return8 = call i64 @"ne@III"(i64 %return5, i64 %return7)
  %0 = icmp ne i64 %return8, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_ptnum10 = load i64, i64* %_bound_ptnum
  %return11 = call i8* @"chs@SS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @3, i64 0, i64 0))
  %return12 = call i64 @"setpointattrib@IISISS"(i64 0, i8* %return, i64 %_bound_ptnum10, i8* %return11, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %return14 = call i64 @"eq@ISS"(i8* %return2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0))
  %1 = icmp ne i64 %return14, 0
  br i1 %1, label %true15, label %end16

true15:                                           ; preds = %end
  %_bound_ptnum18 = load i64, i64* %_bound_ptnum
  %return19 = call i8* @"chs@SS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @3, i64 0, i64 0))
  %return20 = call i64 @"setpointattrib@IISISS"(i64 0, i8* %return, i64 %_bound_ptnum18, i8* %return19, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  br label %end16

end16:                                            ; preds = %true15, %end
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"findattribval@IISSSI"(i64, i8*, i8*, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISISS"(i64, i8*, i64, i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum) #2 {
__llvm_entry:
  %0 = alloca i64
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i64 0, i64 0), i64 %ptnum) #3
  store i64 %gvalue, i64* @ptnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

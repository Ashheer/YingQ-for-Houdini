;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"iteration\00"
@1 = private constant [14 x i8] c"numiterations\00"
@group_lastStep = external global i64
@2 = private constant [15 x i8] c"group_lastStep\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_group_lastStep) #0 {
__llvm_entry:
  %return = call i64 @"detail@IISI"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), i64 0)
  %return1 = call i64 @"detail@IISI"(i64 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1, i64 0, i64 0), i64 0)
  %output = sub i64 %return1, 1
  %return4 = call i64 @"eq@III"(i64 %return, i64 %output)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store i64 1, i64* %_bound_group_lastStep
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind
declare i64 @"detail@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %group_lastStep) #1 {
__llvm_entry:
  %"<group_lastStep>" = alloca i64
  store i64 %group_lastStep, i64* %"<group_lastStep>"
  call void @"__vex_snippet_snippet@I"(i64* %"<group_lastStep>")
  %evalue = load i64, i64* %"<group_lastStep>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i64 0, i64 0), i64 %evalue) #3
  store i64 %gvalue, i64* @group_lastStep
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

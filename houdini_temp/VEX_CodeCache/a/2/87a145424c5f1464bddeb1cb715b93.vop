;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [20 x i8] c"__second_pass_width\00"
@1 = private constant [21 x i8] c"__second_pass_height\00"
@2 = private constant [12 x i8] c"start_frame\00"
@3 = private constant [23 x i8] c"__accum_numpt_by_frame\00"
@4 = private constant [23 x i8] c"__second_pass_active_x\00"
@5 = private constant [23 x i8] c"__second_pass_active_y\00"
@6 = private constant [19 x i8] c"lookup_table_depth\00"
@Frame = external global double
@ptnum = external global i64
@__lookup_rgb = external global <3 x double>
@__lookup_a = external global double
@7 = private constant [6 x i8] c"Frame\00"
@8 = private constant [6 x i8] c"ptnum\00"
@9 = private constant [13 x i8] c"__lookup_rgb\00"
@10 = private constant [11 x i8] c"__lookup_a\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FIVF"(double* %_bound_Frame, i64* %_bound_ptnum, <3 x double>* %_bound___lookup_rgb, double* %_bound___lookup_a) #0 {
__llvm_entry:
  %return = call double @"detail@FISI"(i64 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @0, i64 0, i64 0), i64 0)
  %return1 = call double @"detail@FISI"(i64 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @1, i64 0, i64 0), i64 0)
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i64 0, i64 0))
  %_bound_Frame3 = load double, double* %_bound_Frame
  %cast = fptosi double %_bound_Frame3 to i64
  %output = sub i64 %cast, %return2
  %return5 = call i64* @"detail@[IISI"(i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @3, i64 0, i64 0), i64 0)
  %return8 = call i64 @"getcomp@I[II"(i64* %return5, i64 %output)
  %return9 = call i64 @"npoints@II"(i64 0)
  %output10 = sub i64 %return8, %return9
  %cast11 = sitofp i64 %output10 to double
  %_bound_ptnum12 = load i64, i64* %_bound_ptnum
  %cast14 = sitofp i64 %_bound_ptnum12 to double
  %output15 = fadd double %cast14, %cast11
  %return17 = call double @"mod@FFF"(double %output15, double %return)
  %output23 = call double @"div@FF"(double %output15, double %return)
  %return24 = call double @"floor@FF"(double %output23)
  %output26 = call double @"div@FF"(double 1.000000e+00, double %return)
  %output28 = call double @"div@FF"(double 1.000000e+00, double %return1)
  %return30 = call double @"detail@FISI"(i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @4, i64 0, i64 0), i64 0)
  %output31 = fmul double %output26, %return30
  %return33 = call double @"detail@FISI"(i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @5, i64 0, i64 0), i64 0)
  %output34 = fmul double %output28, %return33
  %output37 = fadd double %return17, 5.000000e-01
  %output38 = fmul double %output31, %output37
  %output41 = fadd double %return24, 5.000000e-01
  %output42 = fmul double %output34, %output41
  %return43 = call i64 @"chi@IS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @6, i64 0, i64 0))
  %return44 = call i64 @"eq@III"(i64 %return43, i64 0)
  %0 = icmp ne i64 %return44, 0
  %. = select i1 %0, double 2.048000e+03, double 2.550000e+02
  %output47 = fmul double %output38, %.
  %return48 = call double @"floor@FF"(double %output47)
  %output53 = fmul double %output47, %.
  %output56 = fmul double %return48, %.
  %output57 = fsub double %output53, %output56
  %return58 = call double @"floor@FF"(double %output57)
  %output61 = call double @"div@FF"(double %return48, double %.)
  %output64 = call double @"div@FF"(double %return58, double %.)
  %output67 = fmul double %output42, %.
  %return68 = call double @"floor@FF"(double %output67)
  %output73 = fmul double %output67, %.
  %output76 = fmul double %return68, %.
  %output77 = fsub double %output73, %output76
  %return78 = call double @"floor@FF"(double %output77)
  %output81 = call double @"div@FF"(double %return68, double %.)
  %output84 = call double @"div@FF"(double %return78, double %.)
  %return88 = call <3 x double> @"set@VFFF"(double %output61, double %output64, double %output81)
  store <3 x double> %return88, <3 x double>* %_bound___lookup_rgb
  store double %output84, double* %_bound___lookup_a
  ret void
}

; Function Attrs: nounwind
declare double @"detail@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind
declare i64* @"detail@[IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #1

; Function Attrs: nounwind readnone
declare double @"mod@FFF"(double, double) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #2

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(double %Frame, i64 %ptnum, <3 x double> %__lookup_rgb, double %__lookup_a) #1 {
__llvm_entry:
  %"<__lookup_rgb>" = alloca <3 x double>
  %"<__lookup_a>" = alloca double
  %0 = alloca double
  %1 = alloca i64
  store <3 x double> %__lookup_rgb, <3 x double>* %"<__lookup_rgb>"
  store double %__lookup_a, double* %"<__lookup_a>"
  store double %Frame, double* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@FIVF"(double* %0, i64* %1, <3 x double>* %"<__lookup_rgb>", double* %"<__lookup_a>")
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @7, i64 0, i64 0), double %Frame) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @8, i64 0, i64 0), i64 %ptnum) #3
  %evalue5 = load <3 x double>, <3 x double>* %"<__lookup_rgb>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @9, i64 0, i64 0), <3 x double> %evalue5) #3
  %evalue7 = load double, double* %"<__lookup_a>"
  %gvalue8 = call double @"_export@FSF"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @10, i64 0, i64 0), double %evalue7) #3
  store double %gvalue, double* @Frame
  store i64 %gvalue4, i64* @ptnum
  store <3 x double> %gvalue6, <3 x double>* @__lookup_rgb
  store double %gvalue8, double* @__lookup_a
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, i64 0, <3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

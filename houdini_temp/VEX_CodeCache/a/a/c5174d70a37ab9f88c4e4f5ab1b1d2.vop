;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [3 x i8] c"%i\00"
@1 = private constant [0 x i64] zeroinitializer
@2 = private constant [5 x i8] c"cols\00"
@3 = private constant [5 x i8] c"rows\00"
@ptnum = external global i64
@tile = external global i64
@legal = external global i64*
@4 = private constant [6 x i8] c"ptnum\00"
@5 = private constant [5 x i8] c"tile\00"
@6 = private constant [6 x i8] c"legal\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II[I"(i64* %_bound_ptnum, i64* %_bound_tile, i64** %_bound_legal) #0 {
__llvm_entry:
  %return = call i64 @"npoints@II"(i64 0)
  call void @"printf@S:I"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), i64 %return)
  %return2 = call i64 @"neg@II"(i64 1)
  %return3 = call i64 @"npoints@II"(i64 %return2)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output10, %body ]
  %legal.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), %__llvm_entry ], [ %output, %body ]
  %return6 = call i64 @"lt@III"(i64 %i.0, i64 %return3)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %output = call i64* @"append@[II"(i64* %legal.0, i64 %i.0)
  %output10 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %return11 = call i64 @"detail@IIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0))
  %return12 = call i64 @"detail@IIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0))
  %_bound_ptnum13 = load i64, i64* %_bound_ptnum
  %return15 = call i64 @"mod@III"(i64 %_bound_ptnum13, i64 %return11)
  %return16 = call i64 @"eq@III"(i64 %return15, i64 0)
  %output21 = sub i64 %return11, 1
  %return22 = call i64 @"eq@III"(i64 %return15, i64 %output21)
  %return23 = call i64 @"or@III"(i64 %return16, i64 %return22)
  %output27 = mul i64 %return12, %return11
  %return28 = call i64 @"mod@III"(i64 %_bound_ptnum13, i64 %output27)
  %output34 = sub i64 %output27, %output21
  %return35 = call i64 @"ge@III"(i64 %return28, i64 %output34)
  %return36 = call i64 @"or@III"(i64 %return23, i64 %return35)
  %return44 = call i64 @"le@III"(i64 %return28, i64 %output21)
  %return45 = call i64 @"or@III"(i64 %return36, i64 %return44)
  %1 = icmp ne i64 %return45, 0
  br i1 %1, label %true, label %end46

true:                                             ; preds = %end
  %return48 = call i64* @"slice@[I[IIIIIII"(i64* %legal.0, i64 1, i64 0, i64 1, i64 12, i64 0, i64 0)
  br label %end46

end46:                                            ; preds = %true, %end
  %legal.1 = phi i64* [ %return48, %true ], [ %legal.0, %end ]
  store i64 %return2, i64* %_bound_tile
  store i64* %legal.1, i64** %_bound_legal
  ret void
}

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #1

; Function Attrs: nounwind
declare void @"printf@S:I"(i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64 @"detail@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"le@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64* @"slice@[I[IIIIIII"(i64*, i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64 %tile, i64* %legal) #1 {
__llvm_entry:
  %"<tile>" = alloca i64
  %"<legal>" = alloca i64*
  %0 = alloca i64
  store i64 %tile, i64* %"<tile>"
  store i64* %legal, i64** %"<legal>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@II[I"(i64* %0, i64* %"<tile>", i64** %"<legal>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load i64, i64* %"<tile>"
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i64 0, i64 0), i64 %evalue2) #3
  %evalue4 = load i64*, i64** %"<legal>"
  %gvalue5 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i64 0, i64 0), i64* %evalue4) #3
  store i64 %gvalue, i64* @ptnum
  store i64 %gvalue3, i64* @tile
  store i64* %gvalue5, i64** @legal
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

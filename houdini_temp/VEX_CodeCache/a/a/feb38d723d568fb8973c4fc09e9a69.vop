;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"name\00"
@1 = private constant [1 x i8] zeroinitializer
@2 = private constant [5 x i8] c"rank\00"
@3 = private constant [8 x i8] c"pattern\00"
@4 = private constant [16 x i8] c"pointattributes\00"
@5 = private constant [6 x i8] c"point\00"
@6 = private constant [7 x i8] c"vector\00"
@7 = private constant [7 x i8] c"normal\00"
@8 = private constant [8 x i8] c"vectype\00"

; Function Attrs: alwaysinline nounwind
define private void @__vex_snippet_snippet() #0 {
__llvm_entry:
  %return = call i64 @"addpointattrib@IISS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0))
  %return1 = call i64 @"addpointattrib@IISI"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), i64 0)
  %return2 = call i8* @"chs@SS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0))
  %return3 = call i8** @"detailintrinsic@[SIS"(i64 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @4, i64 0, i64 0))
  %return5 = call i64 @"len@I[S"(i8** %return3)
  br label %cond

cond:                                             ; preds = %end17, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %end17 ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 %return5)
  %0 = icmp ne i64 %return8, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return11 = call i8* @"getcomp@S[SI"(i8** %return3, i64 %i.0)
  %return13 = call i64 @"pointattribsize@IIS"(i64 1, i8* %return11)
  %return15 = call i64 @"pointattribtype@IIS"(i64 1, i8* %return11)
  %return16 = call i64 @"eq@III"(i64 %return15, i64 1)
  %1 = icmp ne i64 %return16, 0
  br i1 %1, label %true, label %end17

end:                                              ; preds = %cond
  ret void

true:                                             ; preds = %body
  %return20 = call i64 @"match@ISS"(i8* %return2, i8* %return11)
  %return22 = call i64 @"eq@III"(i64 %return13, i64 1)
  %return24 = call i64 @"eq@III"(i64 %return13, i64 3)
  %return25 = call i64 @"or@III"(i64 %return22, i64 %return24)
  %return26 = call i64 @"and@III"(i64 %return20, i64 %return25)
  %2 = icmp ne i64 %return26, 0
  br i1 %2, label %true27, label %end17

end17:                                            ; preds = %true36, %end48, %true, %body
  %output = add i64 %i.0, 1
  br label %cond

true27:                                           ; preds = %true
  %return29 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  %return30 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return29)
  %return33 = call i64 @"setpointattrib@IISIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0), i64 %return30, i8* %return11)
  %3 = icmp ne i64 %return22, 0
  br i1 %3, label %true36, label %false

true36:                                           ; preds = %true27
  %return39 = call i64 @"setpointattrib@IISII"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), i64 %return30, i64 0)
  br label %end17

false:                                            ; preds = %true27
  %return41 = call i64 @"setpointattrib@IISII"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), i64 %return30, i64 3)
  %return43 = call i8* @"pointattribtypeinfo@SIS"(i64 1, i8* %return11)
  %return45 = call i64 @"eq@ISS"(i8* %return43, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i64 0, i64 0))
  %4 = icmp ne i64 %return45, 0
  br i1 %4, label %true46, label %false47

true46:                                           ; preds = %false
  br label %end48

false47:                                          ; preds = %false
  %return50 = call i64 @"eq@ISS"(i8* %return43, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0))
  %5 = icmp ne i64 %return50, 0
  br i1 %5, label %true51, label %false52

end48:                                            ; preds = %false52, %true56, %true51, %true46
  %vectype.0 = phi i64 [ 4, %true46 ], [ 3, %true51 ], [ 1, %true56 ], [ 0, %false52 ]
  %return60 = call i64 @"setpointattrib@IISII"(i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0), i64 %return30, i64 %vectype.0)
  br label %end17

true51:                                           ; preds = %false47
  br label %end48

false52:                                          ; preds = %false47
  %return55 = call i64 @"eq@ISS"(i8* %return43, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0))
  %6 = icmp ne i64 %return55, 0
  br i1 %6, label %true56, label %end48

true56:                                           ; preds = %false52
  br label %end48
}

; Function Attrs: nounwind
declare i64 @"addpointattrib@IISS"(i64, i8*, i8*) #1

; Function Attrs: nounwind
declare i64 @"addpointattrib@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind
declare i8** @"detailintrinsic@[SIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #2

; Function Attrs: nounwind
declare i64 @"pointattribsize@IIS"(i64, i8*) #1

; Function Attrs: nounwind
declare i64 @"pointattribtype@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"match@ISS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIS"(i64, i8*, i64, i8*) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: nounwind
declare i8* @"pointattribtypeinfo@SIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet() #1 {
__llvm_entry:
  call void @__vex_snippet_snippet()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.383"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [8 x i8] c"__piece\00"
@__otherpiece = external global i64
@2 = private constant [13 x i8] c"__otherpiece\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVI"(i64* %_bound___otherpiece, <3 x double>* %_bound_P, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call i64* @"pcfind@[IISVFI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %_bound_P1, double 1.000000e-05, i64 2)
  %return2 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %__impl_foreach_index_19.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %iter ]
  %return5 = call i64 @"lt@III"(i64 %__impl_foreach_index_19.0, i64 %return2)
  %0 = icmp ne i64 %return5, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %_bound_P6 = load <3 x double>, <3 x double>* %_bound_P
  %return7 = call i64* @"pcfind@[IISVFI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %_bound_P6, double 1.000000e-05, i64 2)
  %return9 = call i64 @"getcomp@I[II"(i64* %return7, i64 %__impl_foreach_index_19.0)
  %_bound_ptnum11 = load i64, i64* %_bound_ptnum
  %return12 = call i64 @"eq@III"(i64 %return9, i64 %_bound_ptnum11)
  %1 = icmp ne i64 %return12, 0
  br i1 %1, label %iter, label %end13

end:                                              ; preds = %cond
  ret void

iter:                                             ; preds = %body, %end13
  %output = add i64 %__impl_foreach_index_19.0, 1
  br label %cond

end13:                                            ; preds = %body
  %return15 = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i64 %return9)
  store i64 %return15, i64* %_bound___otherpiece
  br label %iter
}

; Function Attrs: nounwind
declare i64* @"pcfind@[IISVFI"(i64, i8*, <3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %__otherpiece, <3 x double> %P, i64 %ptnum) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca i64
  %"<__otherpiece>" = alloca i64
  store i64 %__otherpiece, i64* %"<__otherpiece>"
  store <3 x double> %P, <3 x double>* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@IVI"(i64* %"<__otherpiece>", <3 x double>* %0, i64* %1)
  %evalue = load i64, i64* %"<__otherpiece>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0), i64 %evalue) #3
  store i64 %gvalue, i64* @__otherpiece
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 -1, <3 x double> zeroinitializer, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

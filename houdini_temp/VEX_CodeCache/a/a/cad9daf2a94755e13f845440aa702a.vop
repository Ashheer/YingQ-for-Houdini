;_name	/obj/geo1/MOPs_Move_Along_Spline/MOPs_Apply_Attributes/apply_attributes1/attribvop1
; ModuleID = 'obj_geo1_MOPs_Move_Along_Spline_MOPs_Apply_Attributes_apply_attributes1_attribvop1'

@0 = private constant [10 x i8] c"matchmode\00"
@1 = private constant [11 x i8] c"forcematch\00"
@2 = private constant [3 x i8] c"id\00"
@3 = private constant [5 x i8] c"name\00"
@4 = private constant [12 x i8] c"rotate_mode\00"
@5 = private constant [11 x i8] c"scale_mode\00"
@6 = private constant [12 x i8] c"local_space\00"
@7 = private constant [18 x i8] c"falloff_attribute\00"
@8 = private constant [2 x i8] c"P\00"
@9 = private constant [7 x i8] c"orient\00"
@10 = private constant [6 x i8] c"scale\00"
@11 = private constant [7 x i8] c"pscale\00"
@12 = private constant [6 x i8] c"pivot\00"
@13 = private constant [13 x i8] c"do_translate\00"
@14 = private constant [10 x i8] c"do_rotate\00"
@15 = private constant [9 x i8] c"do_scale\00"
@16 = private constant [9 x i8] c"do_pivot\00"
@17 = private constant [10 x i8] c"do_weight\00"
@18 = private constant [12 x i8] c"mops_orient\00"
@19 = private constant [10 x i8] c"transform\00"
@20 = private constant [9 x i8] c"typename\00"
@21 = private constant [15 x i8] c"PackedGeometry\00"
@22 = private constant [15 x i8] c"PackedFragment\00"
@23 = private constant [19 x i8] c"PackedDiskSequence\00"
@24 = private constant [11 x i8] c"AlembicRef\00"
@25 = private constant [10 x i8] c"PackedUSD\00"
@26 = private constant [2 x i8] c"N\00"
@27 = private constant [3 x i8] c"up\00"
@28 = private constant [6 x i8] c"euler\00"
@29 = private constant [13 x i8] c"rotate_order\00"
@30 = private constant [4 x i8] c"set\00"
@ptnum = external global i64
@__scale = external global <3 x double>
@__pscale = external global double
@P = external global <3 x double>
@__out_orient = external global <4 x double>
@31 = private constant [6 x i8] c"ptnum\00"
@32 = private constant [8 x i8] c"__scale\00"
@33 = private constant [9 x i8] c"__pscale\00"
@34 = private constant [13 x i8] c"__out_orient\00"

define private void @"_obj_geo1_MOPs_Move_Along_Spline_MOPs_Apply_Attributes_apply_attributes1_attribvop1_snippet1@IVFVP"(i64* %_bound_ptnum, <3 x double>* %_bound___scale, double* %_bound___pscale, <3 x double>* %_bound_P, <4 x double>* %_bound___out_orient) nounwind alwaysinline {
__llvm_entry:
  %_bound_ptnum1 = load i64* %_bound_ptnum
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8]* @0, i64 0, i64 0))
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8]* @1, i64 0, i64 0))
  %return4 = call i64 @"eq@III"(i64 %return, i64 0)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return5 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([3 x i8]* @2, i64 0, i64 0))
  %1 = icmp ne i64 %return5, 0
  br i1 %1, label %true6, label %end7

false:                                            ; preds = %__llvm_entry
  %return19 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([5 x i8]* @3, i64 0, i64 0))
  %2 = icmp ne i64 %return19, 0
  br i1 %2, label %true20, label %end21

end:                                              ; preds = %end21, %true30, %end7, %true16
  %matchpt.0 = phi i64 [ %return18, %true16 ], [ %matchpt.1, %end7 ], [ %return32, %true30 ], [ %matchpt.2, %end21 ]
  %return34 = call i64 @"neg@II"(i64 1)
  %return35 = call i64 @"eq@III"(i64 %matchpt.0, i64 %return34)
  %return37 = call i64 @"not@II"(i64 %return2)
  %return38 = call i64 @"and@III"(i64 %return35, i64 %return37)
  %3 = icmp ne i64 %return38, 0
  br i1 %3, label %true39, label %end40

true6:                                            ; preds = %true
  %_bound_ptnum8 = load i64* %_bound_ptnum
  %return9 = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([3 x i8]* @2, i64 0, i64 0), i64 %_bound_ptnum8)
  %return10 = call i64 @"idtopoint@III"(i64 1, i64 %return9)
  br label %end7

end7:                                             ; preds = %true6, %true
  %matchpt.1 = phi i64 [ %return10, %true6 ], [ %_bound_ptnum1, %true ]
  %return12 = call i64 @"not@II"(i64 %return2)
  %return13 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([3 x i8]* @2, i64 0, i64 0))
  %return14 = call i64 @"not@II"(i64 %return13)
  %return15 = call i64 @"and@III"(i64 %return12, i64 %return14)
  %4 = icmp ne i64 %return15, 0
  br i1 %4, label %true16, label %end

true16:                                           ; preds = %end7
  %return18 = call i64 @"neg@II"(i64 1)
  br label %end

true20:                                           ; preds = %false
  %_bound_ptnum22 = load i64* %_bound_ptnum
  %return23 = call i8* @"point@SISI"(i64 0, i8* getelementptr inbounds ([5 x i8]* @3, i64 0, i64 0), i64 %_bound_ptnum22)
  %return24 = call i64 @"nametopoint@IIS"(i64 1, i8* %return23)
  br label %end21

end21:                                            ; preds = %true20, %false
  %matchpt.2 = phi i64 [ %return24, %true20 ], [ %_bound_ptnum1, %false ]
  %return26 = call i64 @"not@II"(i64 %return2)
  %return27 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([5 x i8]* @3, i64 0, i64 0))
  %return28 = call i64 @"not@II"(i64 %return27)
  %return29 = call i64 @"and@III"(i64 %return26, i64 %return28)
  %5 = icmp ne i64 %return29, 0
  br i1 %5, label %true30, label %end

true30:                                           ; preds = %end21
  %return32 = call i64 @"neg@II"(i64 1)
  br label %end

true39:                                           ; preds = %end
  br label %UnifiedReturnBlock

end40:                                            ; preds = %end
  %return41 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8]* @4, i64 0, i64 0))
  %return42 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8]* @5, i64 0, i64 0))
  %return43 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8]* @6, i64 0, i64 0))
  %return44 = call i8* @"chs@SS"(i8* getelementptr inbounds ([18 x i8]* @7, i64 0, i64 0))
  %return46 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8]* @8, i64 0, i64 0), i64 %matchpt.0)
  %return48 = call <4 x double> @"point@PISI"(i64 1, i8* getelementptr inbounds ([7 x i8]* @9, i64 0, i64 0), i64 %matchpt.0)
  %return50 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([6 x i8]* @10, i64 0, i64 0), i64 %matchpt.0)
  %return52 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([7 x i8]* @11, i64 0, i64 0), i64 %matchpt.0)
  %return54 = call <3 x double> @"primintrinsic@VISI"(i64 1, i8* getelementptr inbounds ([6 x i8]* @12, i64 0, i64 0), i64 %matchpt.0)
  %return55 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([6 x i8]* @12, i64 0, i64 0))
  %6 = icmp ne i64 %return55, 0
  br i1 %6, label %true56, label %end57

true56:                                           ; preds = %end40
  %return59 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([6 x i8]* @12, i64 0, i64 0), i64 %matchpt.0)
  br label %end57

end57:                                            ; preds = %true56, %end40
  %pivot2.0 = phi <3 x double> [ %return59, %true56 ], [ %return54, %end40 ]
  %return61 = call i64 @"haspointattrib@IIS"(i64 0, i8* %return44)
  %7 = icmp ne i64 %return61, 0
  br i1 %7, label %true62, label %end63

true62:                                           ; preds = %end57
  %_bound_ptnum65 = load i64* %_bound_ptnum
  %return66 = call double @"point@FISI"(i64 0, i8* %return44, i64 %_bound_ptnum65)
  br label %end63

end63:                                            ; preds = %true62, %end57
  %weight.0 = phi double [ %return66, %true62 ], [ 1.000000e+00, %end57 ]
  %return67 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([6 x i8]* @10, i64 0, i64 0))
  %return68 = call i64 @"not@II"(i64 %return67)
  %8 = icmp ne i64 %return68, 0
  br i1 %8, label %true69, label %end70

true69:                                           ; preds = %end63
  br label %end70

end70:                                            ; preds = %true69, %end63
  %scale2.0 = phi <3 x double> [ <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %true69 ], [ %return50, %end63 ]
  %return71 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([7 x i8]* @11, i64 0, i64 0))
  %return72 = call i64 @"not@II"(i64 %return71)
  %9 = icmp ne i64 %return72, 0
  br i1 %9, label %true73, label %end74

true73:                                           ; preds = %end70
  br label %end74

end74:                                            ; preds = %true73, %end70
  %pscale2.0 = phi double [ 1.000000e+00, %true73 ], [ %return52, %end70 ]
  %return75 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([7 x i8]* @9, i64 0, i64 0))
  %return76 = call i64 @"not@II"(i64 %return75)
  %10 = icmp ne i64 %return76, 0
  br i1 %10, label %true77, label %end78

true77:                                           ; preds = %end74
  %return79 = call <9 x double> @"ident@3"()
  %return80 = call <4 x double> @"quaternion@P3"(<9 x double> %return79)
  br label %end78

end78:                                            ; preds = %true77, %end74
  %orient2.0 = phi <4 x double> [ %return80, %true77 ], [ %return48, %end74 ]
  %return81 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8]* @13, i64 0, i64 0))
  %return82 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8]* @14, i64 0, i64 0))
  %return83 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8]* @15, i64 0, i64 0))
  %return84 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8]* @16, i64 0, i64 0))
  %return85 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8]* @17, i64 0, i64 0))
  %return86 = call <9 x double> @"ident@3"()
  %return87 = call <4 x double> @"quaternion@P3"(<9 x double> %return86)
  %return88 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([12 x i8]* @18, i64 0, i64 0))
  %11 = icmp ne i64 %return88, 0
  br i1 %11, label %true89, label %end90

true89:                                           ; preds = %end78
  %_bound_ptnum91 = load i64* %_bound_ptnum
  %return92 = call <4 x double> @"point@PISI"(i64 0, i8* getelementptr inbounds ([12 x i8]* @18, i64 0, i64 0), i64 %_bound_ptnum91)
  br label %end90

end90:                                            ; preds = %true89, %end78
  %mops_orient.0 = phi <4 x double> [ %return92, %true89 ], [ %return87, %end78 ]
  %_bound_ptnum93 = load i64* %_bound_ptnum
  %return94 = call <9 x double> @"primintrinsic@3ISI"(i64 0, i8* getelementptr inbounds ([10 x i8]* @19, i64 0, i64 0), i64 %_bound_ptnum93)
  %return96 = call <9 x double> @"qconvert@3P"(<4 x double> %mops_orient.0)
  %output = call <9 x double> @"mul@33"(<9 x double> %return96, <9 x double> %return94)
  %cast100 = call <16 x double> @"set@43"(<9 x double> %output)
  %return101 = call <3 x double> @"cracktransform@VIIIV4"(i64 0, i64 0, i64 2, <3 x double> zeroinitializer, <16 x double> %cast100)
  %return103 = call <4 x double> @"quaternion@P3"(<9 x double> %return94)
  %_bound_ptnum104 = load i64* %_bound_ptnum
  %return105 = call i8* @"primintrinsic@SISI"(i64 0, i8* getelementptr inbounds ([9 x i8]* @20, i64 0, i64 0), i64 %_bound_ptnum104)
  %return107 = call i64 @"ne@ISS"(i8* %return105, i8* getelementptr inbounds ([15 x i8]* @21, i64 0, i64 0))
  %return109 = call i64 @"ne@ISS"(i8* %return105, i8* getelementptr inbounds ([15 x i8]* @22, i64 0, i64 0))
  %return110 = call i64 @"and@III"(i64 %return107, i64 %return109)
  %return112 = call i64 @"ne@ISS"(i8* %return105, i8* getelementptr inbounds ([19 x i8]* @23, i64 0, i64 0))
  %return113 = call i64 @"and@III"(i64 %return110, i64 %return112)
  %return115 = call i64 @"ne@ISS"(i8* %return105, i8* getelementptr inbounds ([11 x i8]* @24, i64 0, i64 0))
  %return116 = call i64 @"and@III"(i64 %return113, i64 %return115)
  %return118 = call i64 @"ne@ISS"(i8* %return105, i8* getelementptr inbounds ([10 x i8]* @25, i64 0, i64 0))
  %return119 = call i64 @"and@III"(i64 %return116, i64 %return118)
  %12 = icmp ne i64 %return119, 0
  br i1 %12, label %true120, label %end121

true120:                                          ; preds = %end90
  %return122 = call <9 x double> @"ident@3"()
  %return123 = call <4 x double> @"quaternion@P3"(<9 x double> %return122)
  %return124 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double 1.000000e+00, double 1.000000e+00)
  %return125 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([6 x i8]* @10, i64 0, i64 0))
  %13 = icmp ne i64 %return125, 0
  br i1 %13, label %true126, label %end127

end121:                                           ; preds = %false137, %end154, %true136, %end90
  %orient.0 = phi <4 x double> [ %return140, %true136 ], [ %return160, %end154 ], [ %return123, %false137 ], [ %return103, %end90 ]
  %pscale.0 = phi double [ %pscale.1, %true136 ], [ %pscale.1, %end154 ], [ %pscale.1, %false137 ], [ 1.000000e+00, %end90 ]
  %scale.0 = phi <3 x double> [ %scale.1, %true136 ], [ %scale.1, %end154 ], [ %scale.1, %false137 ], [ %return101, %end90 ]
  %return162 = call i64 @"eq@III"(i64 %return85, i64 0)
  %14 = icmp ne i64 %return162, 0
  br i1 %14, label %true163, label %end164

true126:                                          ; preds = %true120
  %_bound_ptnum128 = load i64* %_bound_ptnum
  %return129 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([6 x i8]* @10, i64 0, i64 0), i64 %_bound_ptnum128)
  br label %end127

end127:                                           ; preds = %true126, %true120
  %scale.1 = phi <3 x double> [ %return129, %true126 ], [ %return124, %true120 ]
  %return130 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([7 x i8]* @11, i64 0, i64 0))
  %15 = icmp ne i64 %return130, 0
  br i1 %15, label %true131, label %end132

true131:                                          ; preds = %end127
  %_bound_ptnum133 = load i64* %_bound_ptnum
  %return134 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([7 x i8]* @11, i64 0, i64 0), i64 %_bound_ptnum133)
  br label %end132

end132:                                           ; preds = %true131, %end127
  %pscale.1 = phi double [ %return134, %true131 ], [ 1.000000e+00, %end127 ]
  %return135 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([7 x i8]* @9, i64 0, i64 0))
  %16 = icmp ne i64 %return135, 0
  br i1 %16, label %true136, label %false137

true136:                                          ; preds = %end132
  %_bound_ptnum139 = load i64* %_bound_ptnum
  %return140 = call <4 x double> @"point@PISI"(i64 0, i8* getelementptr inbounds ([7 x i8]* @9, i64 0, i64 0), i64 %_bound_ptnum139)
  br label %end121

false137:                                         ; preds = %end132
  %return141 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([2 x i8]* @26, i64 0, i64 0))
  %17 = icmp ne i64 %return141, 0
  br i1 %17, label %true142, label %end121

true142:                                          ; preds = %false137
  %_bound_ptnum144 = load i64* %_bound_ptnum
  %return145 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8]* @26, i64 0, i64 0), i64 %_bound_ptnum144)
  %return147 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 1.000000e+00)
  %return148 = call <9 x double> @"dihedral@3VV"(<3 x double> %return145, <3 x double> %return147)
  %output151 = call <3 x double> @"mul@V3"(<3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>, <9 x double> %return148)
  %return152 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([3 x i8]* @27, i64 0, i64 0))
  %18 = icmp ne i64 %return152, 0
  br i1 %18, label %true153, label %end154

true153:                                          ; preds = %true142
  %_bound_ptnum155 = load i64* %_bound_ptnum
  %return156 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([3 x i8]* @27, i64 0, i64 0), i64 %_bound_ptnum155)
  br label %end154

end154:                                           ; preds = %true153, %true142
  %up.0 = phi <3 x double> [ %return156, %true153 ], [ %output151, %true142 ]
  %return159 = call <9 x double> @"maketransform@3VV"(<3 x double> %return145, <3 x double> %up.0)
  %return160 = call <4 x double> @"quaternion@P3"(<9 x double> %return159)
  br label %end121

true163:                                          ; preds = %end121
  br label %end164

end164:                                           ; preds = %true163, %end121
  %weight.1 = phi double [ 1.000000e+00, %true163 ], [ %weight.0, %end121 ]
  %return165 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([6 x i8]* @28, i64 0, i64 0))
  %19 = icmp ne i64 %return165, 0
  br i1 %19, label %true166, label %end167

true166:                                          ; preds = %end164
  %return169 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([6 x i8]* @28, i64 0, i64 0), i64 %matchpt.0)
  %cast172 = call <3 x double> @"set@VF"(double %weight.1)
  %output173 = call <3 x double> @"mul@VV"(<3 x double> %return169, <3 x double> %cast172)
  %return174 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8]* @29, i64 0, i64 0))
  %return176 = call <3 x double> @"radians@VV"(<3 x double> %output173)
  %return178 = call <4 x double> @"eulertoquaternion@PVI"(<3 x double> %return176, i64 %return174)
  br label %end167

end167:                                           ; preds = %true166, %end164
  %orient2.1 = phi <4 x double> [ %return178, %true166 ], [ %orient2.0, %end164 ]
  %_bound_ptnum179 = load i64* %_bound_ptnum
  %return180 = call <3 x double> @"primintrinsic@VISI"(i64 0, i8* getelementptr inbounds ([6 x i8]* @12, i64 0, i64 0), i64 %_bound_ptnum179)
  %20 = icmp ne i64 %return84, 0
  br i1 %20, label %true182, label %end183

true182:                                          ; preds = %end167
  %return187 = call <3 x double> @"lerp@VVVF"(<3 x double> %return180, <3 x double> %pivot2.0, double %weight.1)
  br label %end183

end183:                                           ; preds = %true182, %end167
  %pivot.0 = phi <3 x double> [ %return187, %true182 ], [ %return180, %end167 ]
  %21 = icmp ne i64 %return83, 0
  %return194 = call i64 @"eq@III"(i64 %return42, i64 0)
  %22 = icmp ne i64 %return194, 0
  br i1 %21, label %true190, label %false191

true190:                                          ; preds = %end183
  br i1 %22, label %true195, label %false196

false191:                                         ; preds = %end183
  br i1 %22, label %true220, label %end192

end192:                                           ; preds = %false191, %true220, %true195, %false196
  %pscale.2 = phi double [ %return209, %true195 ], [ %return217, %false196 ], [ %pscale.0, %true220 ], [ %pscale.0, %false191 ]
  %out_scale.0 = phi <3 x double> [ %return203, %true195 ], [ %return213, %false196 ], [ %scale.0, %true220 ], [ %scale.0, %false191 ]
  %pscale2.1 = phi double [ %pscale2.0, %true195 ], [ %pscale2.0, %false196 ], [ 1.000000e+00, %true220 ], [ %pscale2.0, %false191 ]
  %scale2.1 = phi <3 x double> [ %scale2.0, %true195 ], [ %scale2.0, %false196 ], [ %cast222, %true220 ], [ %scale2.0, %false191 ]
  store <3 x double> %out_scale.0, <3 x double>* %_bound___scale
  store double %pscale.2, double* %_bound___pscale
  %23 = icmp ne i64 %return82, 0
  br i1 %23, label %true226, label %end227

true195:                                          ; preds = %true190
  %output201 = call <3 x double> @"mul@VV"(<3 x double> %scale.0, <3 x double> %scale2.0)
  %return203 = call <3 x double> @"lerp@VVVF"(<3 x double> %scale.0, <3 x double> %output201, double %weight.1)
  %output207 = fmul double %pscale.0, %pscale2.0
  %return209 = call double @"lerp@FFFF"(double %pscale.0, double %output207, double %weight.1)
  br label %end192

false196:                                         ; preds = %true190
  %return213 = call <3 x double> @"lerp@VVVF"(<3 x double> %scale.0, <3 x double> %scale2.0, double %weight.1)
  %return217 = call double @"lerp@FFFF"(double %pscale.0, double %pscale2.0, double %weight.1)
  br label %end192

true220:                                          ; preds = %false191
  %cast222 = call <3 x double> @"set@VI"(i64 1)
  br label %end192

true226:                                          ; preds = %end192
  %return229 = call i64 @"eq@III"(i64 %return41, i64 0)
  %24 = icmp ne i64 %return229, 0
  br i1 %24, label %true230, label %false231

end227:                                           ; preds = %end238, %end265, %end192
  %orient.1 = phi <4 x double> [ %out_orient.0, %end238 ], [ %return273, %end265 ], [ %orient.0, %end192 ]
  %25 = icmp ne i64 %return81, 0
  br i1 %25, label %true275, label %end276

true230:                                          ; preds = %true226
  %return233 = call <9 x double> @"ident@3"()
  %26 = icmp ne i64 %return43, 0
  br i1 %26, label %true236, label %false237

false231:                                         ; preds = %true226
  %return262 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([6 x i8]* @28, i64 0, i64 0))
  %return263 = call i64 @"not@II"(i64 %return262)
  %27 = icmp ne i64 %return263, 0
  br i1 %27, label %true264, label %end265

true236:                                          ; preds = %true230
  %return239 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([6 x i8]* @28, i64 0, i64 0))
  %return240 = call i64 @"not@II"(i64 %return239)
  %28 = icmp ne i64 %return240, 0
  br i1 %28, label %true241, label %end242

false237:                                         ; preds = %true230
  %return260 = call <4 x double> @"qmultiply@PPP"(<4 x double> %orient2.1, <4 x double> %orient.0)
  br label %end238

end238:                                           ; preds = %false237, %end242
  %out_orient.0 = phi <4 x double> [ %return257, %end242 ], [ %return260, %false237 ]
  br label %end227

true241:                                          ; preds = %true236
  %return243 = call <9 x double> @"ident@3"()
  %return244 = call <4 x double> @"quaternion@P3"(<9 x double> %return243)
  %return247 = call <4 x double> @"slerp@PPPF"(<4 x double> %return244, <4 x double> %orient2.1, double %weight.1)
  br label %end242

end242:                                           ; preds = %true241, %true236
  %orient2.2 = phi <4 x double> [ %return247, %true241 ], [ %orient2.1, %true236 ]
  %return250 = call <4 x double> @"qmultiply@PPP"(<4 x double> %orient.0, <4 x double> %mops_orient.0)
  %return253 = call <4 x double> @"qmultiply@PPP"(<4 x double> %return250, <4 x double> %orient2.2)
  %return256 = call <4 x double> @"qinvert@PP"(<4 x double> %mops_orient.0)
  %return257 = call <4 x double> @"qmultiply@PPP"(<4 x double> %return253, <4 x double> %return256)
  br label %end238

true264:                                          ; preds = %false231
  %return269 = call <4 x double> @"slerp@PPPF"(<4 x double> %orient.0, <4 x double> %orient2.1, double %weight.1)
  br label %end265

end265:                                           ; preds = %true264, %false231
  %orient2.3 = phi <4 x double> [ %return269, %true264 ], [ %orient2.1, %false231 ]
  %return272 = call <4 x double> @"qinvert@PP"(<4 x double> %mops_orient.0)
  %return273 = call <4 x double> @"qmultiply@PPP"(<4 x double> %orient2.3, <4 x double> %return272)
  br label %end227

true275:                                          ; preds = %end227
  %_bound_P277 = load <3 x double>* %_bound_P
  %return280 = call <3 x double> @"lerp@VVVF"(<3 x double> %_bound_P277, <3 x double> %return46, double %weight.1)
  store <3 x double> %return280, <3 x double>* %_bound_P
  br label %end276

end276:                                           ; preds = %true275, %end227
  store <4 x double> %orient.1, <4 x double>* %_bound___out_orient
  %return282 = call <9 x double> @"ident@3"()
  %return286 = call <9 x double> @"qconvert@3P"(<4 x double> %orient.1)
  %29 = icmp ne i64 %return43, 0
  br i1 %29, label %true288, label %false289

true288:                                          ; preds = %end276
  %return293 = call <9 x double> @"invert@33"(<9 x double> %return96)
  %output294 = call <9 x double> @"mul@33"(<9 x double> %return282, <9 x double> %return293)
  %cast298 = call <3 x double> @"set@VF"(double %pscale.2)
  %output299 = call <3 x double> @"mul@VV"(<3 x double> %out_scale.0, <3 x double> %cast298)
  %output300 = call <9 x double> @"scale@3V"(<9 x double> %output294, <3 x double> %output299)
  %output303 = call <9 x double> @"mul@33"(<9 x double> %output300, <9 x double> %return96)
  %output306 = call <9 x double> @"mul@33"(<9 x double> %output303, <9 x double> %return286)
  br label %end290

false289:                                         ; preds = %end276
  br i1 %22, label %true309, label %false310

end290:                                           ; preds = %true309, %false310, %true288
  %out.0 = phi <9 x double> [ %output306, %true288 ], [ %output334, %true309 ], [ %output350, %false310 ]
  %_bound_ptnum351 = load i64* %_bound_ptnum
  %return353 = call i64 @"setprimintrinsic@IISI3S"(i64 0, i8* getelementptr inbounds ([10 x i8]* @19, i64 0, i64 0), i64 %_bound_ptnum351, <9 x double> %out.0, i8* getelementptr inbounds ([4 x i8]* @30, i64 0, i64 0))
  %_bound_ptnum354 = load i64* %_bound_ptnum
  %return356 = call i64 @"setprimintrinsic@IISIVS"(i64 0, i8* getelementptr inbounds ([6 x i8]* @12, i64 0, i64 0), i64 %_bound_ptnum354, <3 x double> %pivot.0, i8* getelementptr inbounds ([4 x i8]* @30, i64 0, i64 0))
  br label %UnifiedReturnBlock

true309:                                          ; preds = %false289
  %return314 = call <9 x double> @"invert@33"(<9 x double> %return96)
  %output315 = call <9 x double> @"mul@33"(<9 x double> %return282, <9 x double> %return314)
  %output318 = call <9 x double> @"scale@3V"(<9 x double> %output315, <3 x double> %scale.0)
  %output321 = call <9 x double> @"mul@33"(<9 x double> %output318, <9 x double> %return96)
  %output324 = call <9 x double> @"mul@33"(<9 x double> %output321, <9 x double> %return286)
  %cast325 = call <3 x double> @"set@VI"(i64 1)
  %cast328 = call <3 x double> @"set@VF"(double %pscale2.1)
  %output329 = call <3 x double> @"mul@VV"(<3 x double> %scale2.1, <3 x double> %cast328)
  %return331 = call <3 x double> @"lerp@VVVF"(<3 x double> %cast325, <3 x double> %output329, double %weight.1)
  %output334 = call <9 x double> @"scale@3V"(<9 x double> %output324, <3 x double> %return331)
  br label %end290

false310:                                         ; preds = %false289
  %output337 = call <9 x double> @"mul@33"(<9 x double> %return282, <9 x double> %return286)
  %cast340 = call <3 x double> @"set@VF"(double %pscale.2)
  %output341 = call <3 x double> @"mul@VV"(<3 x double> %scale.0, <3 x double> %cast340)
  %cast344 = call <3 x double> @"set@VF"(double %pscale2.1)
  %output345 = call <3 x double> @"mul@VV"(<3 x double> %scale2.1, <3 x double> %cast344)
  %return347 = call <3 x double> @"lerp@VVVF"(<3 x double> %output341, <3 x double> %output345, double %weight.1)
  %output350 = call <9 x double> @"scale@3V"(<9 x double> %output337, <3 x double> %return347)
  br label %end290

UnifiedReturnBlock:                               ; preds = %end290, %true39
  ret void
}

declare i64 @"chi@IS"(i8*) nounwind readnone

declare i64 @"eq@III"(i64, i64) nounwind readnone

declare i64 @"haspointattrib@IIS"(i64, i8*) nounwind

declare i64 @"point@IISI"(i64, i8*, i64) nounwind

declare i64 @"idtopoint@III"(i64, i64) nounwind

declare i64 @"not@II"(i64) nounwind readnone

declare i64 @"and@III"(i64, i64) nounwind readnone

declare i64 @"neg@II"(i64) nounwind readnone

declare i8* @"point@SISI"(i64, i8*, i64) nounwind

declare i64 @"nametopoint@IIS"(i64, i8*) nounwind

declare i8* @"chs@SS"(i8*) nounwind readnone

declare <3 x double> @"point@VISI"(i64, i8*, i64) nounwind

declare <4 x double> @"point@PISI"(i64, i8*, i64) nounwind

declare double @"point@FISI"(i64, i8*, i64) nounwind

declare <3 x double> @"primintrinsic@VISI"(i64, i8*, i64) nounwind

declare <9 x double> @"ident@3"() nounwind

declare <4 x double> @"quaternion@P3"(<9 x double>) nounwind readnone

declare <9 x double> @"primintrinsic@3ISI"(i64, i8*, i64) nounwind

declare <9 x double> @"qconvert@3P"(<4 x double>) nounwind readnone

declare <3 x double> @"set@VI"(i64) nounwind readnone

declare <9 x double> @"mul@33"(<9 x double>, <9 x double>) nounwind

declare <16 x double> @"set@43"(<9 x double>) nounwind

declare <3 x double> @"cracktransform@VIIIV4"(i64, i64, i64, <3 x double>, <16 x double>) nounwind readnone

declare i8* @"primintrinsic@SISI"(i64, i8*, i64) nounwind

declare i64 @"ne@ISS"(i8*, i8*) nounwind readnone

declare <3 x double> @"set@VFFF"(double, double, double) nounwind readnone

declare <9 x double> @"dihedral@3VV"(<3 x double>, <3 x double>) nounwind readnone

declare <3 x double> @"mul@V3"(<3 x double>, <9 x double>) nounwind

declare <9 x double> @"maketransform@3VV"(<3 x double>, <3 x double>) nounwind readnone

declare <3 x double> @"set@VF"(double) nounwind readnone

declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) nounwind readnone

declare <3 x double> @"radians@VV"(<3 x double>) nounwind

declare <4 x double> @"eulertoquaternion@PVI"(<3 x double>, i64) nounwind readnone

declare <3 x double> @"lerp@VVVF"(<3 x double>, <3 x double>, double) nounwind

declare double @"lerp@FFFF"(double, double, double) nounwind

declare <4 x double> @"slerp@PPPF"(<4 x double>, <4 x double>, double) nounwind readnone

declare <4 x double> @"qmultiply@PPP"(<4 x double>, <4 x double>) nounwind readnone

declare <4 x double> @"qinvert@PP"(<4 x double>) nounwind readnone

declare <9 x double> @"invert@33"(<9 x double>) nounwind readnone

declare <9 x double> @"scale@3V"(<9 x double>, <3 x double>) nounwind readnone

declare i64 @"setprimintrinsic@IISI3S"(i64, i8*, i64, <9 x double>, i8*) nounwind

declare i64 @"setprimintrinsic@IISIVS"(i64, i8*, i64, <3 x double>, i8*) nounwind

define void @obj_geo1_MOPs_Move_Along_Spline_MOPs_Apply_Attributes_apply_attributes1_attribvop1(i64 %ptnum, <3 x double> %__scale, double %__pscale, <3 x double> %P, <4 x double> %__out_orient) nounwind {
__llvm_entry:
  %"<__scale>" = alloca <3 x double>
  %"<__pscale>" = alloca double
  %"<P>" = alloca <3 x double>
  %"<__out_orient>" = alloca <4 x double>
  %0 = alloca i64
  store <3 x double> %__scale, <3 x double>* %"<__scale>"
  store double %__pscale, double* %"<__pscale>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store <4 x double> %__out_orient, <4 x double>* %"<__out_orient>"
  store i64 %ptnum, i64* %0
  call void @"_obj_geo1_MOPs_Move_Along_Spline_MOPs_Apply_Attributes_apply_attributes1_attribvop1_snippet1@IVFVP"(i64* %0, <3 x double>* %"<__scale>", double* %"<__pscale>", <3 x double>* %"<P>", <4 x double>* %"<__out_orient>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8]* @31, i64 0, i64 0), i64 %ptnum) nounwind readonly
  %evalue2 = load <3 x double>* %"<__scale>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([8 x i8]* @32, i64 0, i64 0), <3 x double> %evalue2) nounwind readonly
  %evalue4 = load double* %"<__pscale>"
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8]* @33, i64 0, i64 0), double %evalue4) nounwind readonly
  %evalue6 = load <3 x double>* %"<P>"
  %gvalue7 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8]* @8, i64 0, i64 0), <3 x double> %evalue6) nounwind readonly
  %evalue8 = load <4 x double>* %"<__out_orient>"
  %gvalue9 = call <4 x double> @"_export@PSP"(i8* getelementptr inbounds ([13 x i8]* @34, i64 0, i64 0), <4 x double> %evalue8) nounwind readonly
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue3, <3 x double>* @__scale
  store double %gvalue5, double* @__pscale
  store <3 x double> %gvalue7, <3 x double>* @P
  store <4 x double> %gvalue9, <4 x double>* @__out_orient
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

declare <4 x double> @"_export@PSP"(i8*, <4 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_geo1_MOPs_Move_Along_Spline_MOPs_Apply_Attributes_apply_attributes1_attribvop1(i64 0, <3 x double> zeroinitializer, double 0.000000e+00, <3 x double> zeroinitializer, <4 x double> zeroinitializer)
  ret void
}

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"18.5.633"}
!2 = metadata !{metadata !"64"}

;_code_end

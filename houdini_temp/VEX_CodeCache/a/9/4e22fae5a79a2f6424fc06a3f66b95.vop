;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@P = external global <3 x double>
@0 = private constant [2 x i8] c"P\00"

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #0

; Function Attrs: alwaysinline nounwind
define private void @"cmultiply@UUU"(<2 x double>* %z, <2 x double>* %w, <2 x double>* %a) #1 {
__llvm_entry:
  %z1 = load <2 x double>, <2 x double>* %z
  %return = call double @"getcomp@FUI"(<2 x double> %z1, i64 0)
  %w2 = load <2 x double>, <2 x double>* %w
  %return3 = call double @"getcomp@FUI"(<2 x double> %w2, i64 0)
  %output = fmul double %return, %return3
  %return5 = call double @"getcomp@FUI"(<2 x double> %z1, i64 1)
  %return7 = call double @"getcomp@FUI"(<2 x double> %w2, i64 1)
  %output8 = fmul double %return5, %return7
  %output9 = fsub double %output, %output8
  %output14 = fmul double %return, %return7
  %output19 = fmul double %return5, %return3
  %output20 = fadd double %output14, %output19
  %tmp = load <2 x double>, <2 x double>* %a
  %return21 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output20, i64 1)
  %output23 = extractvalue { double, <2 x double> } %return21, 1
  store <2 x double> %output23, <2 x double>* %a
  %return26 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output23, double %output9, i64 0)
  %output28 = extractvalue { double, <2 x double> } %return26, 1
  store <2 x double> %output28, <2 x double>* %a
  ret void
}

; Function Attrs: alwaysinline
define private { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <2 x double> @"setcomp@UFI"(<2 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <2 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <2 x double> } %mrv, <2 x double> %rw16, 1
  ret { double, <2 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #0

; Function Attrs: alwaysinline nounwind
define private void @"cinvert@UU"(<2 x double>* %a, <2 x double>* %b) #1 {
__llvm_entry:
  %a1 = load <2 x double>, <2 x double>* %a
  %return = call double @"getcomp@FUI"(<2 x double> %a1, i64 0)
  %output = fmul double %return, %return
  %return5 = call double @"getcomp@FUI"(<2 x double> %a1, i64 1)
  %output8 = fmul double %return5, %return5
  %output9 = fadd double %output, %output8
  %output10 = call double @"div@FF"(double 1.000000e+00, double %output9)
  %output14 = fmul double %output10, %return
  %tmp = load <2 x double>, <2 x double>* %b
  %return15 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output14, i64 0)
  %output17 = extractvalue { double, <2 x double> } %return15, 1
  store <2 x double> %output17, <2 x double>* %b
  %return19 = call double @"neg@FF"(double %output10)
  %a20 = load <2 x double>, <2 x double>* %a
  %return21 = call double @"getcomp@FUI"(<2 x double> %a20, i64 1)
  %output22 = fmul double %return19, %return21
  %return24 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output17, double %output22, i64 1)
  %output26 = extractvalue { double, <2 x double> } %return24, 1
  store <2 x double> %output26, <2 x double>* %b
  ret void
}

; Function Attrs: alwaysinline nounwind
define private <2 x double> @"cpow@UUI"(<2 x double>* %z, i64* %n) #1 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca <2 x double>
  %w = alloca <2 x double>
  store <2 x double> <double 1.000000e+00, double 0.000000e+00>, <2 x double>* %w
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %j.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %body ]
  %n2 = load i64, i64* %n
  %return = call i64 @"abs@II"(i64 %n2)
  %return3 = call i64 @"lt@III"(i64 %j.0, i64 %return)
  %3 = icmp ne i64 %return3, 0
  br i1 %3, label %body, label %end

body:                                             ; preds = %cond
  %w4 = load <2 x double>, <2 x double>* %w
  store <2 x double> %w4, <2 x double>* %0
  %z5 = load <2 x double>, <2 x double>* %z
  store <2 x double> %z5, <2 x double>* %1
  call void @"cmultiply@UUU"(<2 x double>* %0, <2 x double>* %1, <2 x double>* %w)
  %output = add i64 %j.0, 1
  br label %cond

end:                                              ; preds = %cond
  %return9 = call i64 @"lt@III"(i64 %n2, i64 0)
  %4 = icmp ne i64 %return9, 0
  br i1 %4, label %true, label %end10

true:                                             ; preds = %end
  %w11 = load <2 x double>, <2 x double>* %w
  store <2 x double> %w11, <2 x double>* %2
  call void @"cinvert@UU"(<2 x double>* %2, <2 x double>* %w)
  br label %end10

end10:                                            ; preds = %true, %end
  %w12 = load <2 x double>, <2 x double>* %w
  ret <2 x double> %w12
}

; Function Attrs: nounwind readnone
declare i64 @"abs@II"(i64) #0

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #0

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@V"(<3 x double>* %_bound_P) #1 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca i64
  %2 = alloca <2 x double>
  %3 = alloca i64
  %return = call double @"pow@FFF"(double 8.000000e-01, double 9.000000e+00)
  %output10 = call double @"div@FF"(double 1.000000e+00, double 9.000000e+00)
  %return13 = call double @"pow@FFF"(double 8.000000e-01, double 5.000000e+00)
  %output14 = fmul double 2.000000e+00, %return13
  %output16 = call double @"div@FF"(double %output14, double 5.000000e+00)
  %output19 = fadd double 8.000000e-01, %return
  %output20 = call double @"div@FF"(double 1.000000e+00, double %output19)
  %_bound_P21 = load <3 x double>, <3 x double>* %_bound_P
  %return22 = call double @"getcomp@FVI"(<3 x double> %_bound_P21, i64 0)
  %return24 = call double @"getcomp@FVI"(<3 x double> %_bound_P21, i64 1)
  %return27 = call <2 x double> @"set@UFF"(double %return22, double %return24)
  store <2 x double> %return27, <2 x double>* %0
  store i64 9, i64* %1
  %cpow = call <2 x double> @"cpow@UUI"(<2 x double>* %0, i64* %1)
  store <2 x double> %return27, <2 x double>* %2
  store i64 5, i64* %3
  %cpow34 = call <2 x double> @"cpow@UUI"(<2 x double>* %2, i64* %3)
  %output38 = fmul double 8.000000e-01, %return22
  %output41 = fmul double %output10, %return
  %return43 = call double @"getcomp@FUI"(<2 x double> %cpow, i64 0)
  %output44 = fmul double %output41, %return43
  %output45 = fadd double %output38, %output44
  %output46 = fmul double %output20, %output45
  %tmp = load <3 x double>, <3 x double>* %_bound_P
  %return47 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output46, i64 0)
  %output49 = extractvalue { double, <3 x double> } %return47, 1
  store <3 x double> %output49, <3 x double>* %_bound_P
  %output52 = fmul double %output20, %output16
  %return54 = call double @"getcomp@FUI"(<2 x double> %cpow34, i64 1)
  %output55 = fmul double %output52, %return54
  %return57 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output49, double %output55, i64 1)
  %output59 = extractvalue { double, <3 x double> } %return57, 1
  store <3 x double> %output59, <3 x double>* %_bound_P
  %output63 = fmul double 8.000000e-01, %return24
  %return68 = call double @"getcomp@FUI"(<2 x double> %cpow, i64 1)
  %output69 = fmul double %output41, %return68
  %output70 = fsub double %output63, %output69
  %output71 = fmul double %output20, %output70
  %return73 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output59, double %output71, i64 2)
  %output75 = extractvalue { double, <3 x double> } %return73, 1
  store <3 x double> %output75, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare double @"pow@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #0

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #0

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P) #3 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  call void @"__vex_snippet_snippet@V"(<3 x double>* %"<P>")
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %evalue) #4
  store <3 x double> %gvalue, <3 x double>* @P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer)
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline nounwind }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

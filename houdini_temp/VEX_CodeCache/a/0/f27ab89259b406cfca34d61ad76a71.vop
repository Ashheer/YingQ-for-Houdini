;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@ori = external global <3 x double>
@P = external global <3 x double>
@invers = external global i64
@primnum = external global i64
@dir = external global <3 x double>
@1 = private constant [4 x i8] c"ori\00"
@2 = private constant [7 x i8] c"invers\00"
@3 = private constant [8 x i8] c"primnum\00"
@4 = private constant [4 x i8] c"dir\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVIIV"(<3 x double>* %_bound_ori, <3 x double>* %_bound_P, i64* %_bound_invers, i64* %_bound_primnum, <3 x double>* %_bound_dir) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  store <3 x double> %_bound_P1, <3 x double>* %_bound_ori
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %return = call double @"getcomp@FVI"(<3 x double> %_bound_P2, i64 1)
  %return3 = fcmp olt double %return, 0.000000e+00
  br i1 %return3, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store i64 1, i64* %_bound_invers
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %_bound_primnum5 = load i64, i64* %_bound_primnum
  %return6 = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum5)
  %return8 = call i64 @"getcomp@I[II"(i64* %return6, i64 1)
  %return9 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return8)
  %return11 = call i64 @"getcomp@I[II"(i64* %return6, i64 0)
  %return12 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return11)
  %output = call <3 x double> @"sub@VV"(<3 x double> %return9, <3 x double> %return12)
  store <3 x double> %output, <3 x double>* %_bound_dir
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %ori, <3 x double> %P, i64 %invers, i64 %primnum, <3 x double> %dir) #2 {
__llvm_entry:
  %"<invers>" = alloca i64
  %"<dir>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca i64
  %"<ori>" = alloca <3 x double>
  store <3 x double> %ori, <3 x double>* %"<ori>"
  store i64 %invers, i64* %"<invers>"
  store <3 x double> %dir, <3 x double>* %"<dir>"
  store <3 x double> %P, <3 x double>* %0
  store i64 %primnum, i64* %1
  call void @"__vex_snippet_snippet@VVIIV"(<3 x double>* %"<ori>", <3 x double>* %0, i64* %"<invers>", i64* %1, <3 x double>* %"<dir>")
  %evalue = load <3 x double>, <3 x double>* %"<ori>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %P) #3
  %evalue5 = load i64, i64* %"<invers>"
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), i64 %evalue5) #3
  %gvalue8 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i64 %primnum) #3
  %evalue9 = load <3 x double>, <3 x double>* %"<dir>"
  %gvalue10 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0), <3 x double> %evalue9) #3
  store <3 x double> %gvalue, <3 x double>* @ori
  store <3 x double> %gvalue4, <3 x double>* @P
  store i64 %gvalue6, i64* @invers
  store i64 %gvalue8, i64* @primnum
  store <3 x double> %gvalue10, <3 x double>* @dir
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, i64 0, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

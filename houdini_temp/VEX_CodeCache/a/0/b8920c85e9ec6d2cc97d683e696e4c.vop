;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@opinput2_dist = external global double
@opinput1_dist = external global double
@P = external global <3 x double>
@opinput2_P = external global <3 x double>
@opinput1_P = external global <3 x double>
@0 = private constant [14 x i8] c"opinput2_dist\00"
@1 = private constant [14 x i8] c"opinput1_dist\00"
@2 = private constant [2 x i8] c"P\00"
@3 = private constant [11 x i8] c"opinput2_P\00"
@4 = private constant [11 x i8] c"opinput1_P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FFVVV"(double* %_bound_opinput2_dist, double* %_bound_opinput1_dist, <3 x double>* %_bound_P, <3 x double>* %_bound_opinput2_P, <3 x double>* %_bound_opinput1_P) #0 {
__llvm_entry:
  %_bound_opinput2_dist1 = load double, double* %_bound_opinput2_dist
  %_bound_opinput1_dist2 = load double, double* %_bound_opinput1_dist
  %return = fcmp olt double %_bound_opinput2_dist1, %_bound_opinput1_dist2
  %_bound_opinput2_P5 = load <3 x double>, <3 x double>* %_bound_opinput2_P
  %_bound_opinput1_P6 = load <3 x double>, <3 x double>* %_bound_opinput1_P
  %return7 = select i1 %return, <3 x double> %_bound_opinput2_P5, <3 x double> %_bound_opinput1_P6
  store <3 x double> %return7, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind
define void @__vex_snippet(double %opinput2_dist, double %opinput1_dist, <3 x double> %P, <3 x double> %opinput2_P, <3 x double> %opinput1_P) #1 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca double
  %1 = alloca double
  %2 = alloca <3 x double>
  %3 = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store double %opinput2_dist, double* %0
  store double %opinput1_dist, double* %1
  store <3 x double> %opinput2_P, <3 x double>* %2
  store <3 x double> %opinput1_P, <3 x double>* %3
  call void @"__vex_snippet_snippet@FFVVV"(double* %0, double* %1, <3 x double>* %"<P>", <3 x double>* %2, <3 x double>* %3)
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @0, i64 0, i64 0), double %opinput2_dist) #2
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1, i64 0, i64 0), double %opinput1_dist) #2
  %evalue7 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %evalue7) #2
  %gvalue10 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0), <3 x double> %opinput2_P) #2
  %gvalue12 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0), <3 x double> %opinput1_P) #2
  store double %gvalue, double* @opinput2_dist
  store double %gvalue6, double* @opinput1_dist
  store <3 x double> %gvalue8, <3 x double>* @P
  store <3 x double> %gvalue10, <3 x double>* @opinput2_P
  store <3 x double> %gvalue12, <3 x double>* @opinput1_P
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

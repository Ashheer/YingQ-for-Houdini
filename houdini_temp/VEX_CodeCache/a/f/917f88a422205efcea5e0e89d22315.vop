;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [14 x i8] c"../baseheight\00"
@1 = private constant [8 x i8] c"../ramp\00"
@2 = private constant [10 x i8] c"../height\00"
@3 = private constant [14 x i8] c"../ramporient\00"
@4 = private constant [11 x i8] c"../originx\00"
@5 = private constant [11 x i8] c"../originy\00"
@6 = private constant [11 x i8] c"../originz\00"
@ptnum = external global i64
@numpt = external global i64
@P = external global <3 x double>
@7 = private constant [6 x i8] c"ptnum\00"
@8 = private constant [6 x i8] c"numpt\00"
@9 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIV"(i64* %_bound_ptnum, i64* %_bound_numpt, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @0, i64 0, i64 0))
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %cast = sitofp i64 %_bound_ptnum1 to double
  %_bound_numpt2 = load i64, i64* %_bound_numpt
  %output = sub i64 %_bound_numpt2, 1
  %cast3 = sitofp i64 %output to double
  %output4 = call double @"div@FF"(double %cast, double %cast3)
  %return5 = call double @"chramp@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), double %output4)
  %return6 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0))
  %output7 = fmul double %return5, %return6
  %output8 = fadd double %return, %output7
  %return9 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @3, i64 0, i64 0))
  %return10 = call i64 @"eq@III"(i64 %return9, i64 0)
  %0 = icmp ne i64 %return10, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return12 = call double @"neg@FF"(double %output8)
  %return13 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0))
  %output14 = fadd double %return12, %return13
  %tmp = load <3 x double>, <3 x double>* %_bound_P
  %return15 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output14, i64 0)
  %output17 = extractvalue { double, <3 x double> } %return15, 1
  store <3 x double> %output17, <3 x double>* %_bound_P
  br label %end

false:                                            ; preds = %__llvm_entry
  %return19 = call i64 @"eq@III"(i64 %return9, i64 1)
  %1 = icmp ne i64 %return19, 0
  br i1 %1, label %true20, label %false21

end:                                              ; preds = %true57, %false58, %true45, %true32, %true20, %true
  ret void

true20:                                           ; preds = %false
  %return24 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0))
  %output25 = fadd double %output8, %return24
  %tmp26 = load <3 x double>, <3 x double>* %_bound_P
  %return27 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp26, double %output25, i64 0)
  %output29 = extractvalue { double, <3 x double> } %return27, 1
  store <3 x double> %output29, <3 x double>* %_bound_P
  br label %end

false21:                                          ; preds = %false
  %return31 = call i64 @"eq@III"(i64 %return9, i64 2)
  %2 = icmp ne i64 %return31, 0
  br i1 %2, label %true32, label %false33

true32:                                           ; preds = %false21
  %return36 = call double @"neg@FF"(double %output8)
  %return37 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0))
  %output38 = fadd double %return36, %return37
  %tmp39 = load <3 x double>, <3 x double>* %_bound_P
  %return40 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp39, double %output38, i64 1)
  %output42 = extractvalue { double, <3 x double> } %return40, 1
  store <3 x double> %output42, <3 x double>* %_bound_P
  br label %end

false33:                                          ; preds = %false21
  %return44 = call i64 @"eq@III"(i64 %return9, i64 3)
  %3 = icmp ne i64 %return44, 0
  br i1 %3, label %true45, label %false46

true45:                                           ; preds = %false33
  %return49 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0))
  %output50 = fadd double %output8, %return49
  %tmp51 = load <3 x double>, <3 x double>* %_bound_P
  %return52 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp51, double %output50, i64 1)
  %output54 = extractvalue { double, <3 x double> } %return52, 1
  store <3 x double> %output54, <3 x double>* %_bound_P
  br label %end

false46:                                          ; preds = %false33
  %return56 = call i64 @"eq@III"(i64 %return9, i64 4)
  %4 = icmp ne i64 %return56, 0
  br i1 %4, label %true57, label %false58

true57:                                           ; preds = %false46
  %return61 = call double @"neg@FF"(double %output8)
  %return62 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @6, i64 0, i64 0))
  %output63 = fadd double %return61, %return62
  %tmp64 = load <3 x double>, <3 x double>* %_bound_P
  %return65 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp64, double %output63, i64 2)
  %output67 = extractvalue { double, <3 x double> } %return65, 1
  store <3 x double> %output67, <3 x double>* %_bound_P
  br label %end

false58:                                          ; preds = %false46
  %return69 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @6, i64 0, i64 0))
  %output70 = fadd double %output8, %return69
  %tmp71 = load <3 x double>, <3 x double>* %_bound_P
  %return72 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp71, double %output70, i64 2)
  %output74 = extractvalue { double, <3 x double> } %return72, 1
  store <3 x double> %output74, <3 x double>* %_bound_P
  br label %end
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"chramp@FSF"(i8*, double) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64 %numpt, <3 x double> %P) #3 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca i64
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  store i64 %numpt, i64* %1
  call void @"__vex_snippet_snippet@IIV"(i64* %0, i64* %1, <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @7, i64 0, i64 0), i64 %ptnum) #4
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @8, i64 0, i64 0), i64 %numpt) #4
  %evalue5 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i64 0, i64 0), <3 x double> %evalue5) #4
  store i64 %gvalue, i64* @ptnum
  store i64 %gvalue4, i64* @numpt
  store <3 x double> %gvalue6, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

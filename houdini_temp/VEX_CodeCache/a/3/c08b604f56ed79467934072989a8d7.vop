;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [18 x i8] c"facepts_subdivide\00"
@edgeneighbours = external global i64*
@ptnum = external global i64
@facepts = external global i64*
@2 = private constant [15 x i8] c"edgeneighbours\00"
@3 = private constant [6 x i8] c"ptnum\00"
@4 = private constant [8 x i8] c"facepts\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[II[I"(i64** %_bound_edgeneighbours, i64* %_bound_ptnum, i64** %_bound_facepts) #0 {
__llvm_entry:
  %_bound_edgeneighbours1 = load i64*, i64** %_bound_edgeneighbours
  %_bound_ptnum2 = load i64, i64* %_bound_ptnum
  %return = call i64* @"pointprims@[III"(i64 0, i64 %_bound_ptnum2)
  %return4 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %end20, %__llvm_entry
  %facepts.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %__llvm_entry ], [ %facepts.1, %end20 ]
  %__impl_foreach_index_8.0 = phi i64 [ 0, %__llvm_entry ], [ %output47, %end20 ]
  %return7 = call i64 @"lt@III"(i64 %__impl_foreach_index_8.0, i64 %return4)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return10 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_8.0)
  %return12 = call i64* @"primpoints@[III"(i64 0, i64 %return10)
  %return14 = call i64 @"len@I[I"(i64* %return12)
  br label %cond15

end:                                              ; preds = %cond
  store i64* %facepts.0, i64** %_bound_facepts
  ret void

cond15:                                           ; preds = %end41, %body
  %facepts.1 = phi i64* [ %facepts.0, %body ], [ %facepts.2, %end41 ]
  %__impl_foreach_index_7.0 = phi i64 [ 0, %body ], [ %output45, %end41 ]
  %return19 = call i64 @"lt@III"(i64 %__impl_foreach_index_7.0, i64 %return14)
  %1 = icmp ne i64 %return19, 0
  br i1 %1, label %body16, label %end20

body16:                                           ; preds = %cond15
  %return24 = call i64 @"getcomp@I[II"(i64* %return12, i64 %__impl_foreach_index_7.0)
  %_bound_ptnum26 = load i64, i64* %_bound_ptnum
  %return27 = call i64 @"ne@III"(i64 %return24, i64 %_bound_ptnum26)
  %return30 = call i64 @"find@I[II"(i64* %_bound_edgeneighbours1, i64 %return24)
  %return31 = call i64 @"lt@III"(i64 %return30, i64 0)
  %return32 = call i64 @"and@III"(i64 %return27, i64 %return31)
  %return35 = call i64 @"find@I[II"(i64* %facepts.1, i64 %return24)
  %return36 = call i64 @"lt@III"(i64 %return35, i64 0)
  %return37 = call i64 @"and@III"(i64 %return32, i64 %return36)
  %return39 = call i64 @"inpointgroup@IISI"(i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1, i64 0, i64 0), i64 %return24)
  %return40 = call i64 @"and@III"(i64 %return37, i64 %return39)
  %2 = icmp ne i64 %return40, 0
  br i1 %2, label %true, label %end41

end20:                                            ; preds = %cond15
  %output47 = add i64 %__impl_foreach_index_8.0, 1
  br label %cond

true:                                             ; preds = %body16
  %output = call i64* @"append@[II"(i64* %facepts.1, i64 %return24)
  br label %end41

end41:                                            ; preds = %true, %body16
  %facepts.2 = phi i64* [ %output, %true ], [ %facepts.1, %body16 ]
  %output45 = add i64 %__impl_foreach_index_7.0, 1
  br label %cond15
}

; Function Attrs: nounwind
declare i64* @"pointprims@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"find@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"inpointgroup@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64* %edgeneighbours, i64 %ptnum, i64* %facepts) #1 {
__llvm_entry:
  %"<facepts>" = alloca i64*
  %0 = alloca i64*
  %1 = alloca i64
  store i64* %facepts, i64** %"<facepts>"
  store i64* %edgeneighbours, i64** %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@[II[I"(i64** %0, i64* %1, i64** %"<facepts>")
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i64 0, i64 0), i64* %edgeneighbours) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  %evalue5 = load i64*, i64** %"<facepts>"
  %gvalue6 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), i64* %evalue5) #3
  store i64* %gvalue, i64** @edgeneighbours
  store i64 %gvalue4, i64* @ptnum
  store i64* %gvalue6, i64** @facepts
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

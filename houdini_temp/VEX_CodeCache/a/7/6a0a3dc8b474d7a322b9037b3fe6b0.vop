;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [9 x i8] c"distance\00"
@1 = private constant [10 x i8] c"stiffness\00"
@2 = private constant [8 x i8] c"damping\00"
@3 = private constant [10 x i8] c"restscale\00"
@4 = private constant [1 x i8] zeroinitializer
@type = external global i8*
@stiffness = external global double
@dampingratio = external global double
@restlength = external global double
@5 = private constant [5 x i8] c"type\00"
@6 = private constant [13 x i8] c"dampingratio\00"
@7 = private constant [11 x i8] c"restlength\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SFFF"(i8** %_bound_type, double* %_bound_stiffness, double* %_bound_dampingratio, double* %_bound_restlength) #0 {
__llvm_entry:
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0), i8** %_bound_type
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0))
  store double %return, double* %_bound_stiffness
  %return1 = call double @"chf@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  store double %return1, double* %_bound_dampingratio
  %_bound_restlength2 = load double, double* %_bound_restlength
  %return3 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0))
  %output = fmul double %_bound_restlength2, %return3
  store double %output, double* %_bound_restlength
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %type, double %stiffness, double %dampingratio, double %restlength) #2 {
__llvm_entry:
  %"<stiffness>" = alloca double
  %"<dampingratio>" = alloca double
  %"<restlength>" = alloca double
  %"<type>" = alloca i8*
  store i8* %type, i8** %"<type>"
  store double %stiffness, double* %"<stiffness>"
  store double %dampingratio, double* %"<dampingratio>"
  store double %restlength, double* %"<restlength>"
  call void @"__vex_snippet_snippet@SFFF"(i8** %"<type>", double* %"<stiffness>", double* %"<dampingratio>", double* %"<restlength>")
  %evalue = load i8*, i8** %"<type>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i64 0, i64 0), i8* %evalue) #3
  %evalue1 = load double, double* %"<stiffness>"
  %gvalue2 = call double @"_export@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), double %evalue1) #3
  %evalue3 = load double, double* %"<dampingratio>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @6, i64 0, i64 0), double %evalue3) #3
  %evalue5 = load double, double* %"<restlength>"
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @7, i64 0, i64 0), double %evalue5) #3
  store i8* %gvalue, i8** @type
  store double %gvalue2, double* @stiffness
  store double %gvalue4, double* @dampingratio
  store double %gvalue6, double* @restlength
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @4, i64 0, i64 0), double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

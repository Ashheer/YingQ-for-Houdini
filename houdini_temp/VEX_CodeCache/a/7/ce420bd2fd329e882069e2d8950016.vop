;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [10 x i8] c"RayOffset\00"
@P = external global <3 x double>
@N = external global <3 x double>
@__contour = external global i64
@2 = private constant [2 x i8] c"N\00"
@3 = private constant [10 x i8] c"__contour\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVI"(<3 x double>* %_bound_P, <3 x double>* %_bound_N, i64* %_bound___contour) #0 {
__llvm_entry:
  %return = call <3 x double> @"point@VISI"(i64 2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 0)
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %output = call <3 x double> @"sub@VV"(<3 x double> %return, <3 x double> %_bound_P1)
  %return2 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %return3 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0))
  %_bound_P4 = load <3 x double>, <3 x double>* %_bound_P
  %_bound_N5 = load <3 x double>, <3 x double>* %_bound_N
  %cast = call <3 x double> @"set@VF"(double %return3)
  %output7 = call <3 x double> @"mul@VV"(<3 x double> %_bound_N5, <3 x double> %cast)
  %output8 = call <3 x double> @"add@VV"(<3 x double> %_bound_P4, <3 x double> %output7)
  %return11 = call { i64, <3 x double>, double, double } @"intersect@IIVVVFF"(i64 1, <3 x double> %output8, <3 x double> %return2)
  %return12 = extractvalue { i64, <3 x double>, double, double } %return11, 0
  %return17 = call i64 @"neg@II"(i64 1)
  %return18 = call i64 @"eq@III"(i64 %return12, i64 %return17)
  %0 = icmp ne i64 %return18, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store i64 1, i64* %_bound___contour
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare { i64, <3 x double>, double, double } @"intersect@IIVVVFF"(i64, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, <3 x double> %N, i64 %__contour) #1 {
__llvm_entry:
  %"<__contour>" = alloca i64
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  store i64 %__contour, i64* %"<__contour>"
  store <3 x double> %P, <3 x double>* %0
  store <3 x double> %N, <3 x double>* %1
  call void @"__vex_snippet_snippet@VVI"(<3 x double>* %0, <3 x double>* %1, i64* %"<__contour>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %P) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %N) #3
  %evalue5 = load i64, i64* %"<__contour>"
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), i64 %evalue5) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store <3 x double> %gvalue4, <3 x double>* @N
  store i64 %gvalue6, i64* @__contour
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [15 x i8] c"../outsrcprims\00"
@1 = private constant [0 x i64] zeroinitializer
@nebs = external global i64*
@ptnum = external global i64
@pointprims = external global i64*
@nebprims = external global i64*
@2 = private constant [5 x i8] c"nebs\00"
@3 = private constant [6 x i8] c"ptnum\00"
@4 = private constant [11 x i8] c"pointprims\00"
@5 = private constant [9 x i8] c"nebprims\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[II[I[I"(i64** %_bound_nebs, i64* %_bound_ptnum, i64** %_bound_pointprims, i64** %_bound_nebprims) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64* @"neighbours@[III"(i64 0, i64 %_bound_ptnum1)
  store i64* %return, i64** %_bound_nebs
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i64 0, i64 0))
  %return3 = call i64 @"not@II"(i64 %return2)
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %cond, %end, %__llvm_entry
  ret void

end:                                              ; preds = %__llvm_entry
  %_bound_ptnum4 = load i64, i64* %_bound_ptnum
  %return5 = call i64* @"pointprims@[III"(i64 0, i64 %_bound_ptnum4)
  store i64* %return5, i64** %_bound_pointprims
  %_bound_nebprims6 = load i64*, i64** %_bound_nebprims
  %_bound_nebs7 = load i64*, i64** %_bound_nebs
  %return8 = call i64 @"len@I[I"(i64* %_bound_nebs7)
  %output = call i64* @"resize@[II"(i64* %_bound_nebprims6, i64 %return8)
  store i64* %output, i64** %_bound_nebprims
  %_bound_pointprims9 = load i64*, i64** %_bound_pointprims
  %return10 = call i64 @"len@I[I"(i64* %_bound_pointprims9)
  %return11 = call i64 @"eq@III"(i64 %return10, i64 1)
  %1 = icmp ne i64 %return11, 0
  br i1 %1, label %true12, label %true

true12:                                           ; preds = %end
  %return15 = call i64 @"len@I[I"(i64* %output)
  %output16 = sub i64 %return15, 1
  br label %cond

cond:                                             ; preds = %body, %true12
  %i.0 = phi i64 [ %output16, %true12 ], [ %output28, %body ]
  %return18 = call i64 @"neg@II"(i64 1)
  %return19 = call i64 @"gt@III"(i64 %i.0, i64 %return18)
  %2 = icmp ne i64 %return19, 0
  br i1 %2, label %body, label %true

body:                                             ; preds = %cond
  %_bound_pointprims22 = load i64*, i64** %_bound_pointprims
  %return23 = call i64 @"getcomp@I[II"(i64* %_bound_pointprims22, i64 0)
  %tmp = load i64*, i64** %_bound_nebprims
  %return24 = call { i64, i64* } @"setcomp@I[III"(i64* %tmp, i64 %return23, i64 %i.0)
  %output26 = extractvalue { i64, i64* } %return24, 1
  store i64* %output26, i64** %_bound_nebprims
  %output28 = sub i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind
declare i64* @"pointprims@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64* @"resize@[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64* %nebs, i64 %ptnum, i64* %pointprims, i64* %nebprims) #1 {
__llvm_entry:
  %"<pointprims>" = alloca i64*
  %"<nebprims>" = alloca i64*
  %0 = alloca i64
  %"<nebs>" = alloca i64*
  store i64* %nebs, i64** %"<nebs>"
  store i64* %pointprims, i64** %"<pointprims>"
  store i64* %nebprims, i64** %"<nebprims>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@[II[I[I"(i64** %"<nebs>", i64* %0, i64** %"<pointprims>", i64** %"<nebprims>")
  %evalue = load i64*, i64** %"<nebs>"
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), i64* %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  %evalue4 = load i64*, i64** %"<pointprims>"
  %gvalue5 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0), i64* %evalue4) #3
  %evalue6 = load i64*, i64** %"<nebprims>"
  %gvalue7 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i64 0, i64 0), i64* %evalue6) #3
  store i64* %gvalue, i64** @nebs
  store i64 %gvalue3, i64* @ptnum
  store i64* %gvalue5, i64** @pointprims
  store i64* %gvalue7, i64** @nebprims
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [38 x i8] c"../calcinputsize1/pointdistancescalar\00"
@1 = private constant [5 x i8] c"Core\00"
@2 = private constant [1 x i8] zeroinitializer
@pscale = external global double
@transform = external global <9 x double>
@name = external global i8*
@3 = private constant [7 x i8] c"pscale\00"
@4 = private constant [10 x i8] c"transform\00"
@5 = private constant [5 x i8] c"name\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@F3S"(double* %_bound_pscale, <9 x double>* %_bound_transform, i8** %_bound_name) #0 {
__llvm_entry:
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @0, i64 0, i64 0))
  store double %return, double* %_bound_pscale
  %_bound_name5 = load i8*, i8** %_bound_name
  %return6 = call i64 @"eq@ISS"(i8* %_bound_name5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0))
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %_bound_pscale
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <9 x double> @"scale@3V"(<9 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %pscale, <9 x double> %transform, i8* %name) #2 {
__llvm_entry:
  %0 = alloca <9 x double>
  %1 = alloca i8*
  %"<pscale>" = alloca double
  store double %pscale, double* %"<pscale>"
  store <9 x double> %transform, <9 x double>* %0
  store i8* %name, i8** %1
  call void @"__vex_snippet_snippet@F3S"(double* %"<pscale>", <9 x double>* %0, i8** %1)
  %evalue = load double, double* %"<pscale>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), double %evalue) #3
  %gvalue4 = call <9 x double> @"_export@3S3"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @4, i64 0, i64 0), <9 x double> %transform) #3
  %gvalue6 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i64 0, i64 0), i8* %name) #3
  store double %gvalue, double* @pscale
  store <9 x double> %gvalue4, <9 x double>* @transform
  store i8* %gvalue6, i8** @name
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <9 x double> @"_export@3S3"(i8*, <9 x double>)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, <9 x double> zeroinitializer, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

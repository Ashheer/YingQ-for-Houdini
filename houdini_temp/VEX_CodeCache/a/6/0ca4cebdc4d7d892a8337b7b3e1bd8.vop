;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [5 x i8] c"name\00"
@2 = private constant [5 x i8] c"Core\00"

; Function Attrs: alwaysinline nounwind
define private void @__vex_snippet_snippet() #0 {
__llvm_entry:
  %return = call i64* @"findattribval@[IISSS"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0))
  %return2 = call i64 @"len@I[I"(i64* %return)
  %return3 = call i64 @"gt@III"(i64 %return2, i64 1)
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %cond

end:                                              ; preds = %cond, %__llvm_entry
  ret void

cond:                                             ; preds = %body, %true
  %i.0 = phi i64 [ 0, %true ], [ %output15, %body ]
  %output = sub i64 %return2, 1
  %return7 = call i64 @"lt@III"(i64 %i.0, i64 %output)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %body, label %end

body:                                             ; preds = %cond
  %return11 = call i64 @"getcomp@I[II"(i64* %return, i64 %i.0)
  %return12 = call i64 @"removepoint@III"(i64 0, i64 %return11)
  %output15 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind
declare i64* @"findattribval@[IISSS"(i64, i8*, i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"removepoint@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet() #1 {
__llvm_entry:
  call void @__vex_snippet_snippet()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

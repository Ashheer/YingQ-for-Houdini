;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [3 x i8] c"id\00"
@1 = private constant [13 x i8] c"mops_falloff\00"
@id = external global i64
@ptnum = external global i64
@mops_falloff = external global double
@2 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIF"(i64* %_bound_id, i64* %_bound_ptnum, double* %_bound_mops_falloff) #0 {
__llvm_entry:
  %return = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"not@II"(i64 %return)
  %0 = icmp ne i64 %return1, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_ptnum2 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum2, i64* %_bound_id
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %return3 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0))
  %return4 = call i64 @"not@II"(i64 %return3)
  %1 = icmp ne i64 %return4, 0
  br i1 %1, label %true5, label %end6

true5:                                            ; preds = %end
  store double 0.000000e+00, double* %_bound_mops_falloff
  br label %end6

end6:                                             ; preds = %true5, %end
  ret void
}

; Function Attrs: nounwind
declare i64 @"haspointattrib@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %id, i64 %ptnum, double %mops_falloff) #1 {
__llvm_entry:
  %"<mops_falloff>" = alloca double
  %0 = alloca i64
  %"<id>" = alloca i64
  store i64 %id, i64* %"<id>"
  store double %mops_falloff, double* %"<mops_falloff>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@IIF"(i64* %"<id>", i64* %0, double* %"<mops_falloff>")
  %evalue = load i64, i64* %"<id>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), i64 %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %ptnum) #3
  %evalue4 = load double, double* %"<mops_falloff>"
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0), double %evalue4) #3
  store i64 %gvalue, i64* @id
  store i64 %gvalue3, i64* @ptnum
  store double %gvalue5, double* @mops_falloff
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 -1, i64 0, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

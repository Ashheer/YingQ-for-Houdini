;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [15 x i8] c"attribute_name\00"
@1 = private constant [16 x i8] c"attribute_class\00"
@2 = private constant [11 x i8] c"do_default\00"
@3 = private constant [12 x i8] c"do_typeinfo\00"
@4 = private constant [6 x i8] c"color\00"
@5 = private constant [8 x i8] c"default\00"
@6 = private constant [9 x i8] c"typeinfo\00"

; Function Attrs: alwaysinline nounwind
define private void @__vex_snippet_snippet() #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i64 0, i64 0))
  %return1 = call i8* @"chs@SS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1, i64 0, i64 0))
  %return4 = call i64 @"hasattrib@IISS"(i64 0, i8* %return1, i8* %return)
  %return5 = call i64 @"not@II"(i64 %return4)
  %return6 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0))
  %return7 = call i64 @"not@II"(i64 %return6)
  %return8 = call i64 @"and@III"(i64 %return5, i64 %return7)
  %0 = icmp ne i64 %return8, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return11 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double 1.000000e+00, double 1.000000e+00)
  %return12 = call i64 @"addattrib@IISSV"(i64 0, i8* %return1, i8* %return, <3 x double> %return11)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %return15 = call i64 @"hasattrib@IISS"(i64 0, i8* %return1, i8* %return)
  %return16 = call i64 @"not@II"(i64 %return15)
  %return17 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i64 0, i64 0))
  %return18 = call i64 @"not@II"(i64 %return17)
  %return19 = call i64 @"and@III"(i64 %return16, i64 %return18)
  %1 = icmp ne i64 %return19, 0
  br i1 %1, label %true20, label %end21

true20:                                           ; preds = %end
  %return24 = call i64 @"setattribtypeinfo@IISSS"(i64 0, i8* %return1, i8* %return, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0))
  br label %end21

end21:                                            ; preds = %true20, %end
  %2 = icmp ne i64 %return6, 0
  br i1 %2, label %true26, label %end27

true26:                                           ; preds = %end21
  %return30 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @5, i64 0, i64 0))
  %return31 = call i64 @"addattrib@IISSV"(i64 0, i8* %return1, i8* %return, <3 x double> %return30)
  br label %end27

end27:                                            ; preds = %true26, %end21
  %3 = icmp ne i64 %return17, 0
  br i1 %3, label %true33, label %end34

true33:                                           ; preds = %end27
  %return37 = call i8* @"chs@SS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @6, i64 0, i64 0))
  %return38 = call i64 @"setattribtypeinfo@IISSS"(i64 0, i8* %return1, i8* %return, i8* %return37)
  br label %end34

end34:                                            ; preds = %true33, %end27
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"hasattrib@IISS"(i64, i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind
declare i64 @"addattrib@IISSV"(i64, i8*, i8*, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"setattribtypeinfo@IISSS"(i64, i8*, i8*, i8*) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet() #2 {
__llvm_entry:
  call void @__vex_snippet_snippet()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

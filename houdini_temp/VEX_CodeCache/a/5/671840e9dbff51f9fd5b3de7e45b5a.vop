;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [3 x i8] c"id\00"
@weld = external global i64
@1 = private constant [5 x i8] c"weld\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_weld) #0 {
__llvm_entry:
  %_bound_weld1 = load i64, i64* %_bound_weld
  %return = call i64 @"ge@III"(i64 %_bound_weld1, i64 0)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return3 = call i64 @"idtopoint@III"(i64 1, i64 %_bound_weld1)
  %return4 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0))
  %1 = icmp ne i64 %return4, 0
  br i1 %1, label %true5, label %false

end:                                              ; preds = %true5, %false, %__llvm_entry
  ret void

true5:                                            ; preds = %true
  %return8 = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), i64 %return3)
  store i64 %return8, i64* %_bound_weld
  br label %end

false:                                            ; preds = %true
  %return10 = call i64 @"npoints@II"(i64 2)
  %output = add i64 %return3, %return10
  store i64 %output, i64* %_bound_weld
  br label %end
}

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"idtopoint@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"haspointattrib@IIS"(i64, i8*) #2

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %weld) #2 {
__llvm_entry:
  %"<weld>" = alloca i64
  store i64 %weld, i64* %"<weld>"
  call void @"__vex_snippet_snippet@I"(i64* %"<weld>")
  %evalue = load i64, i64* %"<weld>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %evalue) #3
  store i64 %gvalue, i64* @weld
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

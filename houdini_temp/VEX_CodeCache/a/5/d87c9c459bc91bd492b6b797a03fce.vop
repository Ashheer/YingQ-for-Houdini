;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [19 x i8] c"sortedconnectivity\00"
@1 = private constant [8 x i8] c"../keep\00"
@2 = private constant [10 x i8] c"../invert\00"
@class = external global i64
@group_dpbs_prims = external global i64
@3 = private constant [6 x i8] c"class\00"
@4 = private constant [17 x i8] c"group_dpbs_prims\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound_class, i64* %_bound_group_dpbs_prims) #0 {
__llvm_entry:
  %return = call i64* @"detail@[IIS"(i64 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @0, i64 0, i64 0))
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0))
  %return3 = call i64* @"slice@[I[IIIIIII"(i64* %return, i64 1, i64 0, i64 1, i64 %return2, i64 0, i64 0)
  %_bound_class5 = load i64, i64* %_bound_class
  %return6 = call i64 @"find@I[II"(i64* %return3, i64 %_bound_class5)
  %return7 = call i64 @"lt@III"(i64 %return6, i64 0)
  %return8 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0))
  %return9 = call i64 @"not@II"(i64 %return8)
  %return10 = call i64 @"eq@III"(i64 %return7, i64 %return9)
  %0 = icmp ne i64 %return10, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store i64 1, i64* %_bound_group_dpbs_prims
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind
declare i64* @"detail@[IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind
declare i64* @"slice@[I[IIIIIII"(i64*, i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"find@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %class, i64 %group_dpbs_prims) #1 {
__llvm_entry:
  %"<group_dpbs_prims>" = alloca i64
  %0 = alloca i64
  store i64 %group_dpbs_prims, i64* %"<group_dpbs_prims>"
  store i64 %class, i64* %0
  call void @"__vex_snippet_snippet@II"(i64* %0, i64* %"<group_dpbs_prims>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %class) #3
  %evalue2 = load i64, i64* %"<group_dpbs_prims>"
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @4, i64 0, i64 0), i64 %evalue2) #3
  store i64 %gvalue, i64* @class
  store i64 %gvalue3, i64* @group_dpbs_prims
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"angle\00"
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [6 x i8] c"scale\00"
@3 = private constant [7 x i8] c"height\00"
@primnum = external global i64
@P = external global <3 x double>
@4 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IV"(i64* %_bound_primnum, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum1)
  %return2 = call <16 x double> @"ident@4"()
  %return4 = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0))
  %return5 = call double @"radians@FF"(double %return4)
  %return6 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 1.000000e+00, double 0.000000e+00)
  %output = call <16 x double> @"rotate@4FV"(<16 x double> %return2, double %return5, <3 x double> %return6)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output38, %body ]
  %return9 = call i64 @"len@I[I"(i64* %return)
  %return10 = call i64 @"lt@III"(i64 %i.0, i64 %return9)
  %0 = icmp ne i64 %return10, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return13 = call i64 @"getcomp@I[II"(i64* %return, i64 %i.0)
  %return14 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return13)
  %_bound_P16 = load <3 x double>, <3 x double>* %_bound_P
  %output17 = call <3 x double> @"sub@VV"(<3 x double> %return14, <3 x double> %_bound_P16)
  %return19 = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0))
  %cast = call <3 x double> @"set@VF"(double %return19)
  %output20 = call <3 x double> @"mul@VV"(<3 x double> %output17, <3 x double> %cast)
  %output23 = call <3 x double> @"mul@V4"(<3 x double> %output20, <16 x double> %output)
  %_bound_P25 = load <3 x double>, <3 x double>* %_bound_P
  %output26 = call <3 x double> @"add@VV"(<3 x double> %output23, <3 x double> %_bound_P25)
  %return28 = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0))
  %return29 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double %return28, double 0.000000e+00)
  %output30 = call <3 x double> @"add@VV"(<3 x double> %output26, <3 x double> %return29)
  %return35 = call i64 @"setpointattrib@IISIV"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return13, <3 x double> %output30)
  %output38 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  ret void
}

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind
declare <16 x double> @"ident@4"() #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind
declare double @"radians@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"rotate@4FV"(<16 x double>, double, <3 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"mul@V4"(<3 x double>, <16 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIV"(i64, i8*, i64, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, <3 x double> %P) #1 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca <3 x double>
  store i64 %primnum, i64* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@IV"(i64* %0, <3 x double>* %1)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), i64 %primnum) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %P) #3
  store i64 %gvalue, i64* @primnum
  store <3 x double> %gvalue4, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

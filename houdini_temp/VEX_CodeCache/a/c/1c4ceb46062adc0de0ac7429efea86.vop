;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@__pscale_raw = external global double
@pscale = external global double
@0 = private constant [13 x i8] c"__pscale_raw\00"
@1 = private constant [7 x i8] c"pscale\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FF"(double* %_bound___pscale_raw, double* %_bound_pscale) #0 {
__llvm_entry:
  %_bound_pscale1 = load double, double* %_bound_pscale
  store double %_bound_pscale1, double* %_bound___pscale_raw
  ret void
}

; Function Attrs: nounwind
define void @__vex_snippet(double %__pscale_raw, double %pscale) #1 {
__llvm_entry:
  %0 = alloca double
  %"<__pscale_raw>" = alloca double
  store double %__pscale_raw, double* %"<__pscale_raw>"
  store double %pscale, double* %0
  call void @"__vex_snippet_snippet@FF"(double* %"<__pscale_raw>", double* %0)
  %evalue = load double, double* %"<__pscale_raw>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0), double %evalue) #2
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), double %pscale) #2
  store double %gvalue, double* @__pscale_raw
  store double %gvalue3, double* @pscale
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

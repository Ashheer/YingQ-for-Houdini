;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [2 x i8] c"N\00"
@2 = private constant [9 x i8] c"polyline\00"
@3 = private constant [11 x i8] c"restlength\00"
@4 = private constant [10 x i8] c"__class__\00"
@5 = private constant [16 x i8] c"useconnectivity\00"
@6 = private constant [14 x i8] c"compare_class\00"
@7 = private constant [13 x i8] c"usedirattrib\00"
@8 = private constant [10 x i8] c"dirattrib\00"
@9 = private constant [12 x i8] c"__targetsrc\00"
@10 = private constant [13 x i8] c"invertnormal\00"
@11 = private constant [12 x i8] c"checknormal\00"
@12 = private constant [21 x i8] c"constraint_per_point\00"
@13 = private constant [8 x i8] c"max_rad\00"
@14 = private constant [7 x i8] c"jitter\00"
@15 = private constant [7 x i8] c"rayoff\00"
@16 = private constant [5 x i8] c"seed\00"
@17 = private constant [13 x i8] c"point_chance\00"
@18 = private constant [21 x i8] c"__stretchconstraints\00"
@ptnum = external global i64
@19 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"createStrutConstraints@IISSSIIIFFFFFIS"(i64* %geo, i64* %ptnum, i8** %srcgrp, i8** %classname, i8** %dirattrib, i64* %revnml, i64* %checknml, i64* %numconstraint, double* %maxlen, double* %jitter, double* %rayoff, double* %seed, double* %ptthreshold, i64* %outgeo, i8** %outgrp) #0 {
__llvm_entry:
  %geo1 = load i64, i64* %geo
  %ptnum2 = load i64, i64* %ptnum
  %return = call <3 x double> @"point@VISI"(i64 %geo1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %ptnum2)
  %geo3 = load i64, i64* %geo
  %dirattrib4 = load i8*, i8** %dirattrib
  %ptnum5 = load i64, i64* %ptnum
  %return6 = call <3 x double> @"point@VISI"(i64 %geo3, i8* %dirattrib4, i64 %ptnum5)
  %return7 = call <3 x double> @"neg@VV"(<3 x double> %return6)
  %return9 = call <3 x double> @"normalize@VV"(<3 x double> %return7)
  %revnml10 = load i64, i64* %revnml
  %0 = icmp ne i64 %revnml10, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return12 = call i64 @"neg@II"(i64 1)
  %cast = call <3 x double> @"set@VI"(i64 %return12)
  %output = call <3 x double> @"mul@VV"(<3 x double> %return9, <3 x double> %cast)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %nml.0 = phi <3 x double> [ %output, %true ], [ %return9, %__llvm_entry ]
  %ptnum13 = load i64, i64* %ptnum
  %cast14 = sitofp i64 %ptnum13 to double
  %output16 = call i64 @"div@II"(i64 %ptnum13, i64 1024)
  %cast17 = sitofp i64 %output16 to double
  %seed18 = load double, double* %seed
  %return19 = call <3 x double> @"set@VFFF"(double %cast14, double %cast17, double %seed18)
  %return20 = call double @"rand@FV"(<3 x double> %return19)
  %ptthreshold21 = load double, double* %ptthreshold
  %return22 = fcmp olt double %return20, %ptthreshold21
  br i1 %return22, label %true24, label %end25

true24:                                           ; preds = %cond, %end
  ret void

end25:                                            ; preds = %end
  %geo26 = load i64, i64* %geo
  %classname27 = load i8*, i8** %classname
  %ptnum28 = load i64, i64* %ptnum
  %return29 = call i64 @"point@IISI"(i64 %geo26, i8* %classname27, i64 %ptnum28)
  %geo30 = load i64, i64* %geo
  %classname31 = load i8*, i8** %classname
  %ptnum32 = load i64, i64* %ptnum
  %return33 = call i8* @"point@SISI"(i64 %geo30, i8* %classname31, i64 %ptnum32)
  br label %cond

cond:                                             ; preds = %iter, %end25
  %i.0 = phi i64 [ 0, %end25 ], [ %output180, %iter ]
  %numconstraint35 = load i64, i64* %numconstraint
  %return36 = call i64 @"lt@III"(i64 %i.0, i64 %numconstraint35)
  %1 = icmp ne i64 %return36, 0
  br i1 %1, label %body, label %true24

body:                                             ; preds = %cond
  %cast41 = sitofp i64 %i.0 to double
  %ptnum42 = load i64, i64* %ptnum
  %cast43 = sitofp i64 %ptnum42 to double
  %output45 = call i64 @"div@II"(i64 %ptnum42, i64 1024)
  %cast46 = sitofp i64 %output45 to double
  %seed47 = load double, double* %seed
  %return48 = call <4 x double> @"set@PFFFF"(double %cast41, double %cast43, double %cast46, double %seed47)
  %return49 = call <3 x double> @"rand@VP"(<4 x double> %return48)
  %cast50 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output51 = call <3 x double> @"sub@VV"(<3 x double> %return49, <3 x double> %cast50)
  %jitter52 = load double, double* %jitter
  %cast53 = call <3 x double> @"set@VF"(double %jitter52)
  %output54 = call <3 x double> @"mul@VV"(<3 x double> %output51, <3 x double> %cast53)
  %output55 = call <3 x double> @"add@VV"(<3 x double> %nml.0, <3 x double> %output54)
  %geo56 = load i64, i64* %geo
  %rayoff59 = load double, double* %rayoff
  %cast60 = call <3 x double> @"set@VF"(double %rayoff59)
  %output61 = call <3 x double> @"mul@VV"(<3 x double> %output55, <3 x double> %cast60)
  %output62 = call <3 x double> @"add@VV"(<3 x double> %return, <3 x double> %output61)
  %maxlen64 = load double, double* %maxlen
  %cast65 = call <3 x double> @"set@VF"(double %maxlen64)
  %output66 = call <3 x double> @"mul@VV"(<3 x double> %output55, <3 x double> %cast65)
  %return67 = call { i64, <3 x double>, <3 x double> } @"intersect@IIVVVV"(i64 %geo56, <3 x double> %output62, <3 x double> %output66)
  %return68 = extractvalue { i64, <3 x double>, <3 x double> } %return67, 0
  %return72 = call i64 @"lt@III"(i64 %return68, i64 0)
  %2 = icmp ne i64 %return72, 0
  br i1 %2, label %iter, label %end74

iter:                                             ; preds = %end147, %end91, %end74, %body, %end141
  %output180 = add i64 %i.0, 1
  br label %cond

end74:                                            ; preds = %body
  %geo75 = load i64, i64* %geo
  %return77 = call i64* @"primpoints@[III"(i64 %geo75, i64 %return68)
  %return79 = call i64 @"len@I[I"(i64* %return77)
  %return80 = call i64 @"eq@III"(i64 %return79, i64 0)
  %3 = icmp ne i64 %return80, 0
  br i1 %3, label %iter, label %end82

end82:                                            ; preds = %end74
  %return83 = call i64 @"neg@II"(i64 1)
  br label %cond86

cond86:                                           ; preds = %iter92, %end82
  %bestpt.0 = phi i64 [ %return83, %end82 ], [ %bestpt.1, %iter92 ]
  %bestdist.0 = phi double [ 1.000000e+23, %end82 ], [ %bestdist.1, %iter92 ]
  %__impl_foreach_index_186.0 = phi i64 [ 0, %end82 ], [ %output134, %iter92 ]
  %return90 = call i64 @"lt@III"(i64 %__impl_foreach_index_186.0, i64 %return79)
  %4 = icmp ne i64 %return90, 0
  br i1 %4, label %body87, label %end91

body87:                                           ; preds = %cond86
  %return95 = call i64 @"getcomp@I[II"(i64* %return77, i64 %__impl_foreach_index_186.0)
  %geo96 = load i64, i64* %geo
  %srcgrp97 = load i8*, i8** %srcgrp
  %return99 = call i64 @"inpointgroup@IISI"(i64 %geo96, i8* %srcgrp97, i64 %return95)
  %return100 = call i64 @"not@II"(i64 %return99)
  %5 = icmp ne i64 %return100, 0
  br i1 %5, label %iter92, label %end102

end91:                                            ; preds = %cond86
  %return136 = call i64 @"lt@III"(i64 %bestpt.0, i64 0)
  %6 = icmp ne i64 %return136, 0
  br i1 %6, label %iter, label %end138

iter92:                                           ; preds = %end119, %true129, %end102, %body87
  %bestpt.1 = phi i64 [ %bestpt.0, %body87 ], [ %bestpt.0, %end102 ], [ %return95, %true129 ], [ %bestpt.0, %end119 ]
  %bestdist.1 = phi double [ %bestdist.0, %body87 ], [ %bestdist.0, %end102 ], [ %return124, %true129 ], [ %bestdist.0, %end119 ]
  %output134 = add i64 %__impl_foreach_index_186.0, 1
  br label %cond86

end102:                                           ; preds = %body87
  %geo103 = load i64, i64* %geo
  %classname104 = load i8*, i8** %classname
  %return106 = call i64 @"point@IISI"(i64 %geo103, i8* %classname104, i64 %return95)
  %geo107 = load i64, i64* %geo
  %classname108 = load i8*, i8** %classname
  %return110 = call i8* @"point@SISI"(i64 %geo107, i8* %classname108, i64 %return95)
  %return113 = call i64 @"ne@III"(i64 %return106, i64 %return29)
  %return116 = call i64 @"ne@ISS"(i8* %return110, i8* %return33)
  %return117 = call i64 @"or@III"(i64 %return113, i64 %return116)
  %7 = icmp ne i64 %return117, 0
  br i1 %7, label %iter92, label %end119

end119:                                           ; preds = %end102
  %geo120 = load i64, i64* %geo
  %return122 = call <3 x double> @"point@VISI"(i64 %geo120, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return95)
  %return124 = call double @"distance@FVV"(<3 x double> %return122, <3 x double> %return)
  %return127 = fcmp olt double %return124, %bestdist.0
  br i1 %return127, label %true129, label %iter92

true129:                                          ; preds = %end119
  br label %iter92

end138:                                           ; preds = %end91
  %checknml139 = load i64, i64* %checknml
  %8 = icmp ne i64 %checknml139, 0
  br i1 %8, label %true140, label %end141

true140:                                          ; preds = %end138
  %geo142 = load i64, i64* %geo
  %return144 = call <3 x double> @"point@VISI"(i64 %geo142, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %bestpt.0)
  %revnml145 = load i64, i64* %revnml
  %9 = icmp ne i64 %revnml145, 0
  br i1 %9, label %true146, label %end147

end141:                                           ; preds = %end147, %end138
  %geo159 = load i64, i64* %geo
  %return161 = call <3 x double> @"point@VISI"(i64 %geo159, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %bestpt.0)
  %outgeo162 = load i64, i64* %outgeo
  %ptnum163 = load i64, i64* %ptnum
  %return165 = call i64* @"array@[I:II"(i64 %ptnum163, i64 %bestpt.0)
  %return166 = call i64 @"addprim@IIS[I"(i64 %outgeo162, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), i64* %return165)
  %outgeo167 = load i64, i64* %outgeo
  %outgrp168 = load i8*, i8** %outgrp
  %return170 = call i64 @"setprimgroup@IISII"(i64 %outgeo167, i8* %outgrp168, i64 %return166, i64 1)
  %return173 = call double @"distance@FVV"(<3 x double> %return161, <3 x double> %return)
  %outgeo174 = load i64, i64* %outgeo
  %return177 = call i64 @"setprimattrib@IISIF"(i64 %outgeo174, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0), i64 %return166, double %return173)
  br label %iter

true146:                                          ; preds = %true140
  %cast150 = call <3 x double> @"set@VI"(i64 %return83)
  %output151 = call <3 x double> @"mul@VV"(<3 x double> %return144, <3 x double> %cast150)
  br label %end147

end147:                                           ; preds = %true146, %true140
  %onml.0 = phi <3 x double> [ %output151, %true146 ], [ %return144, %true140 ]
  %return154 = call double @"dot@FVV"(<3 x double> %onml.0, <3 x double> %output55)
  %return155 = fcmp olt double %return154, 0.000000e+00
  br i1 %return155, label %iter, label %end141
}

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"div@II"(i64, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind
declare double @"rand@FV"(<3 x double>) #1

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PFFFF"(double, double, double, double) #2

; Function Attrs: nounwind
declare <3 x double> @"rand@VP"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare { i64, <3 x double>, <3 x double> } @"intersect@IIVVVV"(i64, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"inpointgroup@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #2

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64* @"array@[I:II"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"addprim@IIS[I"(i64, i8*, i64*) #1

; Function Attrs: nounwind
declare i64 @"setprimgroup@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"setprimattrib@IISIF"(i64, i8*, i64, double) #1

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_ptnum) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i8*
  %3 = alloca i8*
  %4 = alloca i8*
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca double
  %9 = alloca double
  %10 = alloca double
  %11 = alloca double
  %12 = alloca double
  %13 = alloca i64
  %14 = alloca i8*
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @5, i64 0, i64 0))
  %return1 = call i64 @"not@II"(i64 %return)
  %15 = icmp ne i64 %return1, 0
  br i1 %15, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return2 = call i8* @"chs@SS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @6, i64 0, i64 0))
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %classname.0 = phi i8* [ %return2, %true ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @4, i64 0, i64 0), %__llvm_entry ]
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @7, i64 0, i64 0))
  %16 = icmp ne i64 %return3, 0
  br i1 %16, label %true4, label %end5

true4:                                            ; preds = %end
  %return6 = call i8* @"chs@SS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @8, i64 0, i64 0))
  br label %end5

end5:                                             ; preds = %true4, %end
  %dirattrib.0 = phi i8* [ %return6, %true4 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), %end ]
  store i64 1, i64* %0
  %_bound_ptnum7 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum7, i64* %1
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @9, i64 0, i64 0), i8** %2
  store i8* %classname.0, i8** %3
  store i8* %dirattrib.0, i8** %4
  %return10 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @10, i64 0, i64 0))
  store i64 %return10, i64* %5
  %return11 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @11, i64 0, i64 0))
  store i64 %return11, i64* %6
  %return12 = call i64 @"chi@IS"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @12, i64 0, i64 0))
  store i64 %return12, i64* %7
  %return13 = call double @"chf@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @13, i64 0, i64 0))
  store double %return13, double* %8
  %return14 = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @14, i64 0, i64 0))
  store double %return14, double* %9
  %return15 = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @15, i64 0, i64 0))
  store double %return15, double* %10
  %return16 = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @16, i64 0, i64 0))
  store double %return16, double* %11
  %return17 = call double @"chf@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @17, i64 0, i64 0))
  store double %return17, double* %12
  %return18 = call i64 @"geoself@I"()
  store i64 %return18, i64* %13
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @18, i64 0, i64 0), i8** %14
  call void @"createStrutConstraints@IISSSIIIFFFFFIS"(i64* %0, i64* %1, i8** %2, i8** %3, i8** %4, i64* %5, i64* %6, i64* %7, double* %8, double* %9, double* %10, double* %11, double* %12, i64* %13, i8** %14)
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind
declare i64 @"geoself@I"() #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum) #1 {
__llvm_entry:
  %0 = alloca i64
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @19, i64 0, i64 0), i64 %ptnum) #3
  store i64 %gvalue, i64* @ptnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

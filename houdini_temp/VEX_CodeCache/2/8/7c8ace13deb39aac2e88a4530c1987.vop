;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [17 x i8] c"usedensityattrib\00"
@1 = private constant [14 x i8] c"densityattrib\00"
@ptnum = external global i64
@__density = external global double
@2 = private constant [6 x i8] c"ptnum\00"
@3 = private constant [10 x i8] c"__density\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IF"(i64* %_bound_ptnum, double* %_bound___density) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return1 = call i8* @"chs@SS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1, i64 0, i64 0))
  %return2 = call i8* @"strip@SS"(i8* %return1)
  %_bound_ptnum4 = load i64, i64* %_bound_ptnum
  %return5 = call double @"point@FISI"(i64 0, i8* %return2, i64 %_bound_ptnum4)
  %_bound___density6 = load double, double* %_bound___density
  %output = fmul double %_bound___density6, %return5
  store double %output, double* %_bound___density
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i8* @"strip@SS"(i8*) #2

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, double %__density) #2 {
__llvm_entry:
  %"<__density>" = alloca double
  %0 = alloca i64
  store double %__density, double* %"<__density>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@IF"(i64* %0, double* %"<__density>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load double, double* %"<__density>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), double %evalue2) #3
  store i64 %gvalue, i64* @ptnum
  store double %gvalue3, double* @__density
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

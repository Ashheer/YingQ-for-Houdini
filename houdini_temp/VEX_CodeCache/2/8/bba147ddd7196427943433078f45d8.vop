;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [11 x i8] c"../up_core\00"
@1 = private constant [9 x i8] c"../input\00"
@2 = private constant [10 x i8] c"../double\00"
@3 = private constant [13 x i8] c"../crossorig\00"
@4 = private constant [13 x i8] c"../normalize\00"
@5 = private constant [11 x i8] c"../reverse\00"
@6 = private constant [14 x i8] c"../usenewname\00"
@up = external global <3 x double>
@attrib = external global <3 x double>
@newattrib = external global <3 x double>
@7 = private constant [3 x i8] c"up\00"
@8 = private constant [7 x i8] c"attrib\00"
@9 = private constant [10 x i8] c"newattrib\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVV"(<3 x double>* %_bound_up, <3 x double>* %_bound_attrib, <3 x double>* %_bound_newattrib) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i64 0, i64 0))
  %_bound_up1 = load <3 x double>, <3 x double>* %_bound_up
  %return2 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  %return3 = select i1 %0, <3 x double> %_bound_up1, <3 x double> %return2
  %_bound_attrib4 = load <3 x double>, <3 x double>* %_bound_attrib
  %return6 = call <3 x double> @"cross@VVV"(<3 x double> %_bound_attrib4, <3 x double> %return3)
  %return7 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0))
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return8 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @3, i64 0, i64 0))
  %2 = icmp ne i64 %return8, 0
  br i1 %2, label %true9, label %false

end:                                              ; preds = %true9, %false, %__llvm_entry
  %result.0 = phi <3 x double> [ %return13, %true9 ], [ %return16, %false ], [ %return6, %__llvm_entry ]
  %return17 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @4, i64 0, i64 0))
  %3 = icmp ne i64 %return17, 0
  br i1 %3, label %true18, label %end19

true9:                                            ; preds = %true
  %_bound_attrib11 = load <3 x double>, <3 x double>* %_bound_attrib
  %return13 = call <3 x double> @"cross@VVV"(<3 x double> %_bound_attrib11, <3 x double> %return6)
  br label %end

false:                                            ; preds = %true
  %return16 = call <3 x double> @"cross@VVV"(<3 x double> %return3, <3 x double> %return6)
  br label %end

true18:                                           ; preds = %end
  %return21 = call <3 x double> @"normalize@VV"(<3 x double> %result.0)
  br label %end19

end19:                                            ; preds = %true18, %end
  %result.1 = phi <3 x double> [ %return21, %true18 ], [ %result.0, %end ]
  %return22 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0))
  %4 = icmp ne i64 %return22, 0
  br i1 %4, label %true23, label %end24

true23:                                           ; preds = %end19
  %return26 = call i64 @"neg@II"(i64 1)
  %cast = call <3 x double> @"set@VI"(i64 %return26)
  %output = call <3 x double> @"mul@VV"(<3 x double> %result.1, <3 x double> %cast)
  br label %end24

end24:                                            ; preds = %true23, %end19
  %result.2 = phi <3 x double> [ %output, %true23 ], [ %result.1, %end19 ]
  %return27 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @6, i64 0, i64 0))
  %5 = icmp ne i64 %return27, 0
  br i1 %5, label %true28, label %false29

true28:                                           ; preds = %end24
  store <3 x double> %result.2, <3 x double>* %_bound_newattrib
  br label %end30

false29:                                          ; preds = %end24
  store <3 x double> %result.2, <3 x double>* %_bound_attrib
  br label %end30

end30:                                            ; preds = %false29, %true28
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %up, <3 x double> %attrib, <3 x double> %newattrib) #2 {
__llvm_entry:
  %"<attrib>" = alloca <3 x double>
  %"<newattrib>" = alloca <3 x double>
  %0 = alloca <3 x double>
  store <3 x double> %attrib, <3 x double>* %"<attrib>"
  store <3 x double> %newattrib, <3 x double>* %"<newattrib>"
  store <3 x double> %up, <3 x double>* %0
  call void @"__vex_snippet_snippet@VVV"(<3 x double>* %0, <3 x double>* %"<attrib>", <3 x double>* %"<newattrib>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @7, i64 0, i64 0), <3 x double> %up) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<attrib>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @8, i64 0, i64 0), <3 x double> %evalue2) #3
  %evalue4 = load <3 x double>, <3 x double>* %"<newattrib>"
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @9, i64 0, i64 0), <3 x double> %evalue4) #3
  store <3 x double> %gvalue, <3 x double>* @up
  store <3 x double> %gvalue3, <3 x double>* @attrib
  store <3 x double> %gvalue5, <3 x double>* @newattrib
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

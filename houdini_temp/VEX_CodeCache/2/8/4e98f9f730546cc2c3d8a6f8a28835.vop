;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [41 x i8] c"../disttocenter_fee1/distname_max_detail\00"
@1 = private constant [10 x i8] c"../radius\00"
@2 = private constant [13 x i8] c"../keepratio\00"
@3 = private constant [41 x i8] c"../disttocenter_fee2/distname_max_detail\00"
@4 = private constant [8 x i8] c"../bias\00"
@P = external global <3 x double>
@5 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@V"(<3 x double>* %_bound_P) #0 {
__llvm_entry:
  %return = call i64 @"npoints@II"(i64 2)
  %return1 = call i64 @"gt@III"(i64 %return, i64 0)
  %0 = icmp ne i64 %return1, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return2 = call i8* @"chs@SS"(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @0, i64 0, i64 0))
  %return3 = call double @"detail@FISI"(i64 2, i8* %return2, i64 0)
  br label %end

false:                                            ; preds = %__llvm_entry
  %return4 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0))
  br label %end

end:                                              ; preds = %false, %true
  %radius.0 = phi double [ %return3, %true ], [ %return4, %false ]
  %return5 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0))
  %1 = icmp ne i64 %return5, 0
  br i1 %1, label %true6, label %false7

true6:                                            ; preds = %end
  %return9 = call i8* @"chs@SS"(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @3, i64 0, i64 0))
  %return10 = call double @"detail@FISI"(i64 1, i8* %return9, i64 0)
  %output = call double @"div@FF"(double %radius.0, double %return10)
  %_bound_P13 = load <3 x double>, <3 x double>* %_bound_P
  %return14 = call double @"chf@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0))
  %output16 = fmul double %return14, %output
  %output17 = fadd double %output16, 1.000000e+00
  %output19 = fsub double %output17, %return14
  %cast = call <3 x double> @"set@VF"(double %output19)
  %output20 = call <3 x double> @"mul@VV"(<3 x double> %_bound_P13, <3 x double> %cast)
  store <3 x double> %output20, <3 x double>* %_bound_P
  br label %end8

false7:                                           ; preds = %end
  %_bound_P21 = load <3 x double>, <3 x double>* %_bound_P
  %return22 = call double @"chf@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0))
  %return26 = call <3 x double> @"normalize@VV"(<3 x double> %_bound_P21)
  %cast27 = call <3 x double> @"set@VF"(double %radius.0)
  %output28 = call <3 x double> @"mul@VV"(<3 x double> %cast27, <3 x double> %return26)
  %output29 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P21, <3 x double> %output28)
  %cast30 = call <3 x double> @"set@VF"(double %return22)
  %output31 = call <3 x double> @"mul@VV"(<3 x double> %cast30, <3 x double> %output29)
  %output32 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P21, <3 x double> %output31)
  store <3 x double> %output32, <3 x double>* %_bound_P
  br label %end8

end8:                                             ; preds = %false7, %true6
  ret void
}

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind
declare double @"detail@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P) #1 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  call void @"__vex_snippet_snippet@V"(<3 x double>* %"<P>")
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), <3 x double> %evalue) #3
  store <3 x double> %gvalue, <3 x double>* @P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

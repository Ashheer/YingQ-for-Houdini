;_name	/obj/geo1/scifi_panels1/NOTCHES/sop_thicken3/attribblur4/find_border_and_init_weight/attribvop1
; ModuleID = 'obj_geo1_scifi_panels1_NOTCHES_sop_thicken3_attribblur4_find_border_and_init_weight_attribvop1'

@0 = private constant [13 x i8] c"../pinborder\00"
@ptnum = external global i64
@__blur_weight__ = external global double
@1 = private constant [6 x i8] c"ptnum\00"
@2 = private constant [16 x i8] c"__blur_weight__\00"

define private void @"_obj_geo1_scifi_panels1_NOTCHES_sop_thicken3_attribblur4_find_border_and_init_weight_attribvop1_snippet1@IF"(i64* %_bound_ptnum, double* %_bound___blur_weight__) nounwind alwaysinline {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_ptnum1 = load i64* %_bound_ptnum
  %return2 = call i64 @"pointhedge@III"(i64 0, i64 %_bound_ptnum1)
  br label %cond

end:                                              ; preds = %cond, %true10, %__llvm_entry
  %is_boundary.0 = phi i64 [ 1, %true10 ], [ 0, %cond ], [ 0, %__llvm_entry ]
  %return15 = call i64 @"not@II"(i64 %is_boundary.0)
  %cast = sitofp i64 %return15 to double
  store double %cast, double* %_bound___blur_weight__
  ret void

cond:                                             ; preds = %end11, %true
  %hout.0 = phi i64 [ %return2, %true ], [ %return13, %end11 ]
  %return4 = call i64 @"neg@II"(i64 1)
  %return5 = call i64 @"ne@III"(i64 %hout.0, i64 %return4)
  %1 = icmp ne i64 %return5, 0
  br i1 %1, label %body, label %end

body:                                             ; preds = %cond
  %return8 = call i64 @"hedge_equivcount@III"(i64 0, i64 %hout.0)
  %return9 = call i64 @"ne@III"(i64 %return8, i64 2)
  %2 = icmp ne i64 %return9, 0
  br i1 %2, label %true10, label %end11

true10:                                           ; preds = %body
  br label %end

end11:                                            ; preds = %body
  %return13 = call i64 @"pointhedgenext@III"(i64 0, i64 %hout.0)
  br label %cond
}

declare i64 @"chi@IS"(i8*) nounwind readnone

declare i64 @"pointhedge@III"(i64, i64) nounwind

declare i64 @"neg@II"(i64) nounwind readnone

declare i64 @"ne@III"(i64, i64) nounwind readnone

declare i64 @"hedge_equivcount@III"(i64, i64) nounwind

declare i64 @"pointhedgenext@III"(i64, i64) nounwind

declare i64 @"not@II"(i64) nounwind readnone

define void @obj_geo1_scifi_panels1_NOTCHES_sop_thicken3_attribblur4_find_border_and_init_weight_attribvop1(i64 %ptnum, double %__blur_weight__) nounwind {
__llvm_entry:
  %"<__blur_weight__>" = alloca double
  %0 = alloca i64
  store double %__blur_weight__, double* %"<__blur_weight__>"
  store i64 %ptnum, i64* %0
  call void @"_obj_geo1_scifi_panels1_NOTCHES_sop_thicken3_attribblur4_find_border_and_init_weight_attribvop1_snippet1@IF"(i64* %0, double* %"<__blur_weight__>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8]* @1, i64 0, i64 0), i64 %ptnum) nounwind readonly
  %evalue2 = load double* %"<__blur_weight__>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([16 x i8]* @2, i64 0, i64 0), double %evalue2) nounwind readonly
  store i64 %gvalue, i64* @ptnum
  store double %gvalue3, double* @__blur_weight__
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_geo1_scifi_panels1_NOTCHES_sop_thicken3_attribblur4_find_border_and_init_weight_attribvop1(i64 0, double 0.000000e+00)
  ret void
}

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"18.5.633"}
!2 = metadata !{metadata !"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [0 x double] zeroinitializer
@ptnum = external global i64
@sourcept_indices = external global i64*
@sourcept_weights = external global double*
@2 = private constant [6 x i8] c"ptnum\00"
@3 = private constant [17 x i8] c"sourcept_indices\00"
@4 = private constant [17 x i8] c"sourcept_weights\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I[I[F"(i64* %_bound_ptnum, i64** %_bound_sourcept_indices, double** %_bound_sourcept_weights) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64* @"neighbours@[III"(i64 0, i64 %_bound_ptnum1)
  %return3 = call i64 @"len@I[I"(i64* %return)
  %cast = sitofp i64 %return3 to double
  %output = call double @"div@FF"(double 1.000000e+00, double %cast)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %weights.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), %__llvm_entry ], [ %output10, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output12, %body ]
  %return7 = call i64 @"lt@III"(i64 %i.0, i64 %return3)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %output10 = call double* @"append@[FF"(double* %weights.0, double %output)
  %output12 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  store i64* %return, i64** %_bound_sourcept_indices
  store double* %weights.0, double** %_bound_sourcept_weights
  ret void
}

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64* %sourcept_indices, double* %sourcept_weights) #1 {
__llvm_entry:
  %"<sourcept_indices>" = alloca i64*
  %"<sourcept_weights>" = alloca double*
  %0 = alloca i64
  store i64* %sourcept_indices, i64** %"<sourcept_indices>"
  store double* %sourcept_weights, double** %"<sourcept_weights>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@I[I[F"(i64* %0, i64** %"<sourcept_indices>", double** %"<sourcept_weights>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load i64*, i64** %"<sourcept_indices>"
  %gvalue3 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @3, i64 0, i64 0), i64* %evalue2) #3
  %evalue4 = load double*, double** %"<sourcept_weights>"
  %gvalue5 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @4, i64 0, i64 0), double* %evalue4) #3
  store i64 %gvalue, i64* @ptnum
  store i64* %gvalue3, i64** @sourcept_indices
  store double* %gvalue5, double** @sourcept_weights
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i64* @"_export@[IS[I"(i8*, i64*)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [3 x i8] c"sc\00"
@2 = private constant [5 x i8] c"seed\00"
@3 = private constant [3 x i8] c"th\00"
@ptnum = external global i64
@4 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"noiseremove@IFFF"(i64* %ptnum, double* %sc, double* %seed, double* %th) #0 {
__llvm_entry:
  %ptnum1 = load i64, i64* %ptnum
  %return = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %ptnum1)
  %sc3 = load double, double* %sc
  %cast = call <3 x double> @"set@VF"(double %sc3)
  %output = call <3 x double> @"mul@VV"(<3 x double> %return, <3 x double> %cast)
  %seed4 = load double, double* %seed
  %cast5 = call <3 x double> @"set@VF"(double %seed4)
  %output6 = call <3 x double> @"add@VV"(<3 x double> %output, <3 x double> %cast5)
  %return7 = call double @"noise@FV"(<3 x double> %output6)
  %th9 = load double, double* %th
  %return10 = fcmp olt double %return7, %th9
  br i1 %return10, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %ptnum12 = load i64, i64* %ptnum
  %return13 = call i64 @"removepoint@III"(i64 0, i64 %ptnum12)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"noise@FV"(<3 x double>) #2

; Function Attrs: nounwind
declare i64 @"removepoint@III"(i64, i64) #1

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_ptnum) #0 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca i64
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum1, i64* %3
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0))
  store double %return, double* %0
  %return2 = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0))
  store double %return2, double* %1
  %return3 = call double @"chf@FS"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0))
  store double %return3, double* %2
  call void @"noiseremove@IFFF"(i64* %3, double* %0, double* %1, double* %2)
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum) #1 {
__llvm_entry:
  %0 = alloca i64
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #3
  store i64 %gvalue, i64* @ptnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

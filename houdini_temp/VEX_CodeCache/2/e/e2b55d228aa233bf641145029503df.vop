;_name	/obj/geo1/solver1/d/s/pointvop1
; ModuleID = 'obj_geo1_solver1_d_s_pointvop1'
source_filename = "obj_geo1_solver1_d_s_pointvop1"

%nsdata = type { i8*, double, double, double, i64 }
%nndata = type { double, double }

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [7 x i8] c"perlin\00"
@2 = private constant [8 x i8] c"pperlin\00"
@3 = private constant [8 x i8] c"simplex\00"
@4 = private constant [9 x i8] c"psimplex\00"
@5 = private constant [11 x i8] c"value_fast\00"
@6 = private constant [12 x i8] c"pvalue_fast\00"
@7 = private constant [7 x i8] c"sparse\00"
@8 = private constant [8 x i8] c"psparse\00"
@9 = private constant [10 x i8] c"alligator\00"
@10 = private constant [11 x i8] c"palligator\00"
@11 = private constant [5 x i8] c"flow\00"
@12 = private constant [6 x i8] c"pflow\00"
@13 = private constant [7 x i8] c"worley\00"
@14 = private constant [10 x i8] c"pworleyFA\00"
@15 = private constant [10 x i8] c"pworleyFB\00"
@16 = private constant [8 x i8] c"mworley\00"
@17 = private constant [11 x i8] c"pmworleyFA\00"
@18 = private constant [11 x i8] c"pmworleyFB\00"
@19 = private constant [8 x i8] c"cworley\00"
@20 = private constant [11 x i8] c"pcworleyFA\00"
@21 = private constant [11 x i8] c"pcworleyFB\00"
@22 = private constant [5 x i8] c"sine\00"
@23 = private constant [9 x i8] c"worleyFA\00"
@24 = private constant [9 x i8] c"worleyFB\00"
@25 = private constant [10 x i8] c"mworleyFA\00"
@26 = private constant [10 x i8] c"mworleyFB\00"
@27 = private constant [10 x i8] c"cworleyFA\00"
@28 = private constant [10 x i8] c"cworleyFB\00"
@29 = private constant [4 x i8] c"fBm\00"
@30 = private constant [4 x i8] c"mfT\00"
@31 = private constant [5 x i8] c"hmfT\00"
@32 = private constant [7 x i8] c"linear\00"
@33 = private constant [2 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @32, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @32, i64 0, i64 0)]
@34 = private constant [2 x double] [double 0.000000e+00, double 1.000000e+00]
@pscale = external global double
@35 = private constant [5 x i8] c"none\00"
@36 = private constant [7 x i8] c"pscale\00"

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #0

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #0

; Function Attrs: nounwind readnone
declare i64* @"array@[I"() #0

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #0

; Function Attrs: nounwind readnone
declare i64 @"min@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i64* @"resize@[II"(i64*, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"max@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #0

; Function Attrs: nounwind readnone
declare double* @"array@[F"() #0

; Function Attrs: nounwind readnone
declare i64 @"len@I[F"(double*) #0

; Function Attrs: nounwind readnone
declare double* @"resize@[FI"(double*, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #0

; Function Attrs: nounwind readnone
declare { double, double* } @"setcomp@F[FFI"(double*, double, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double>* @"array@[V"() #0

; Function Attrs: nounwind readnone
declare i64 @"len@I[V"(<3 x double>*) #0

; Function Attrs: nounwind readnone
declare <3 x double>* @"resize@[VI"(<3 x double>*, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"max@VVV"(<3 x double>, <3 x double>) #0

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>*, <3 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <4 x double>* @"array@[P"() #0

; Function Attrs: nounwind readnone
declare i64 @"len@I[P"(<4 x double>*) #0

; Function Attrs: nounwind readnone
declare <4 x double>* @"resize@[PI"(<4 x double>*, i64) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"getcomp@P[PI"(<4 x double>*, i64) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"max@PPP"(<4 x double>, <4 x double>) #0

; Function Attrs: nounwind readnone
declare { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>*, <4 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PF"(double) #0

; Function Attrs: nounwind readnone
declare double @"min@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FPI"(<4 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PFFFF"(double, double, double, double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"min@VVV"(<3 x double>, <3 x double>) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"min@PPP"(<4 x double>, <4 x double>) #0

; Function Attrs: nounwind readnone
declare double @"pow@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare i64 @"le@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"pow@VVF"(<3 x double>, double) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"pow@PPF"(<4 x double>, double) #0

; Function Attrs: alwaysinline nounwind
define private double @"prod@FV"(<3 x double>* %x) #1 {
__llvm_entry:
  %x1 = load <3 x double>, <3 x double>* %x
  %return = call double @"getcomp@FVI"(<3 x double> %x1, i64 0)
  %return3 = call double @"getcomp@FVI"(<3 x double> %x1, i64 1)
  %output = fmul double %return, %return3
  %return5 = call double @"getcomp@FVI"(<3 x double> %x1, i64 2)
  %output6 = fmul double %output, %return5
  ret double %output6
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PI"(i64) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"mul@PP"(<4 x double>, <4 x double>) #0

; Function Attrs: nounwind readnone
declare double @"log@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"log@VV"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"log@PP"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"div@PP"(<4 x double>, <4 x double>) #0

; Function Attrs: alwaysinline nounwind
define private double @"bias@FFF"(double* %x, double* %b) #1 {
__llvm_entry:
  %b1 = load double, double* %b
  %return = fcmp oeq double %b1, 5.000000e-01
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %x3 = load double, double* %x
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %return5 = call double @"clamp@FFFF"(double %b1, double 1.000000e-06, double 9.999990e-01)
  %x6 = load double, double* %x
  %return8 = call double @"log@FF"(double %return5)
  %return9 = call double @"neg@FF"(double %return8)
  %output = call double @"div@FF"(double %return9, double 0x3FE62E42FEFA39EF)
  %return10 = call double @"pow@FFF"(double %x6, double %output)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end, %true
  %UnifiedRetVal = phi double [ %x3, %true ], [ %return10, %end ]
  ret double %UnifiedRetVal
}

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"eq@IVV"(<3 x double>, <3 x double>) #0

; Function Attrs: alwaysinline nounwind
define private double @"gain@FFF"(double* %x, double* %g) #1 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %g1 = load double, double* %g
  %return = fcmp oeq double %g1, 5.000000e-01
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %x3 = load double, double* %x
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %output = fsub double 1.000000e+00, %g1
  %x5 = load double, double* %x
  %return6 = fcmp olt double %x5, 5.000000e-01
  %output11 = fmul double 2.000000e+00, %x5
  br i1 %return6, label %true8, label %false

true8:                                            ; preds = %end
  store double %output11, double* %0
  store double %output, double* %1
  %bias = call double @"bias@FFF"(double* %0, double* %1)
  %output13 = fmul double %bias, 5.000000e-01
  br label %end9

false:                                            ; preds = %end
  %output16 = fsub double 2.000000e+00, %output11
  store double %output16, double* %0
  store double %output, double* %2
  %bias18 = call double @"bias@FFF"(double* %0, double* %2)
  %output19 = fmul double %bias18, 5.000000e-01
  %output20 = fsub double 1.000000e+00, %output19
  br label %end9

end9:                                             ; preds = %false, %true8
  %phi = phi double [ %output13, %true8 ], [ %output20, %false ]
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end9, %true
  %UnifiedRetVal = phi double [ %x3, %true ], [ %phi, %end9 ]
  ret double %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #0

; Function Attrs: alwaysinline nounwind
define private double @"pyro_vopfw_VOP_CTXT@FV"(<3 x double>* %p) #1 {
__llvm_entry:
  ret double undef
}

; Function Attrs: alwaysinline nounwind
define private %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %name, double* %min, double* %max, double* %avg, i64* %symmetric) #1 {
__llvm_entry:
  %name1 = load i8*, i8** %name
  %0 = insertvalue %nsdata undef, i8* %name1, 0
  %min2 = load double, double* %min
  %1 = insertvalue %nsdata %0, double %min2, 1
  %max4 = load double, double* %max
  %2 = insertvalue %nsdata %1, double %max4, 2
  %avg6 = load double, double* %avg
  %3 = insertvalue %nsdata %2, double %avg6, 3
  %symmetric8 = load i64, i64* %symmetric
  %4 = insertvalue %nsdata %3, i64 %symmetric8, 4
  ret %nsdata %4
}

; Function Attrs: alwaysinline nounwind
define private %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"() #1 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca i64
  %4 = alloca i8*
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8** %4
  store double 0.000000e+00, double* %0
  store double 0.000000e+00, double* %1
  store double 0.000000e+00, double* %2
  store i64 0, i64* %3
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %4, double* %0, double* %1, double* %2, i64* %3)
  ret %nsdata %nsdata
}

; Function Attrs: alwaysinline nounwind
define private double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %stats) #1 {
__llvm_entry:
  %stats1 = load %nsdata, %nsdata* %stats
  %avg = extractvalue %nsdata %stats1, 3
  ret double %avg
}

; Function Attrs: alwaysinline nounwind
define private double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %stats) #1 {
__llvm_entry:
  ret double undef
}

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"sin@VV"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_sine@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %p1 = load <3 x double>, <3 x double>* %p
  %cast = call <3 x double> @"set@VF"(double 0x400921FB54442D18)
  %output = call <3 x double> @"mul@VV"(<3 x double> %p1, <3 x double> %cast)
  %return = call <3 x double> @"sin@VV"(<3 x double> %output)
  %cast2 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output3 = call <3 x double> @"mul@VV"(<3 x double> %return, <3 x double> %cast2)
  %output5 = call <3 x double> @"add@VV"(<3 x double> %output3, <3 x double> %cast2)
  store <3 x double> %output5, <3 x double>* %0
  %prod = call double @"prod@FV"(<3 x double>* %0)
  ret double %prod
}

; Function Attrs: nounwind readnone
declare <4 x double> @"sin@PP"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"add@PP"(<4 x double>, <4 x double>) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UF"(double) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"sub@UU"(<2 x double>, <2 x double>) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"add@UU"(<2 x double>, <2 x double>) #0

; Function Attrs: nounwind
declare <4 x double> @"set@PV"(<3 x double>) #2

; Function Attrs: alwaysinline
define private { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <4 x double> @"setcomp@PFI"(<4 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <4 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <4 x double> } %mrv, <4 x double> %rw16, 1
  ret { double, <4 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <4 x double> @"setcomp@PFI"(<4 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"sub@PP"(<4 x double>, <4 x double>) #0

; Function Attrs: nounwind readnone
declare double @"noise@FF"(double) #0

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #2

; Function Attrs: nounwind readnone
declare double @"noise@FFF"(double, double) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_perlin@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %return = call double @"noise@FV"(<3 x double> %p1)
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8** %0
  store double 8.325870e-02, double* %1
  store double 9.203370e-01, double* %2
  store double 4.977050e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8** %5
  store double 8.325870e-02, double* %6
  store double 9.203370e-01, double* %7
  store double 4.977050e-01, double* %8
  store i64 1, i64* %9
  %nsdata2 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata2, 2
  %return3 = call double @"fit@FFFFFF"(double %return, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return3
}

; Function Attrs: nounwind readnone
declare double @"noise@FV"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare double @"noise@FP"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"noise@VF"(double) #0

; Function Attrs: nounwind
declare <3 x double> @"fit@VVVVVV"(<3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"noise@VFF"(double, double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"noise@VV"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"noise@VP"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare double @"pnoise@FFI"(double, i64) #0

; Function Attrs: nounwind readnone
declare double @"pnoise@FFFII"(double, double, i64, i64) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_pperlin@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %per2 = load <3 x double>, <3 x double>* %per
  %return = call double @"pnoise@FVV"(<3 x double> %p1, <3 x double> %per2)
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i8** %0
  store double 7.776290e-02, double* %1
  store double 9.117340e-01, double* %2
  store double 5.060500e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i8** %5
  store double 7.776290e-02, double* %6
  store double 9.117340e-01, double* %7
  store double 5.060500e-01, double* %8
  store i64 1, i64* %9
  %nsdata3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata3, 2
  %return4 = call double @"fit@FFFFFF"(double %return, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return4
}

; Function Attrs: alwaysinline
define private double @"pnoise@FVV"(<3 x double> %rw11, <3 x double> %rw22) #3 {
__llvm_entry:
  %t_0_ = call double @"getcomp@FVI"(<3 x double> %rw22, i64 0)
  %t_1_ = call double @"getcomp@FVI"(<3 x double> %rw22, i64 1)
  %t_2_ = call double @"getcomp@FVI"(<3 x double> %rw22, i64 2)
  %t_3_ = fptosi double %t_0_ to i64
  %t_4_ = fptosi double %t_1_ to i64
  %t_5_ = fptosi double %t_2_ to i64
  %rw015 = call double @"pnoise@FVIII"(<3 x double> %rw11, i64 %t_3_, i64 %t_4_, i64 %t_5_)
  ret double %rw015
}

; Function Attrs: nounwind readnone
declare double @"pnoise@FVIII"(<3 x double>, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare double @"pnoise@FPIIII"(<4 x double>, i64, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"pnoise@VFI"(double, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"pnoise@VFFII"(double, double, i64, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"pnoise@VVIII"(<3 x double>, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"pnoise@VPIIII"(<4 x double>, i64, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare double @"xnoise@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"xnoise@FFF"(double, double) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_simplex@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %return = call double @"xnoise@FV"(<3 x double> %p1)
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i8** %0
  store double 1.530200e-01, double* %1
  store double 8.507840e-01, double* %2
  store double 4.970380e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i8** %5
  store double 1.530200e-01, double* %6
  store double 8.507840e-01, double* %7
  store double 4.970380e-01, double* %8
  store i64 1, i64* %9
  %nsdata2 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata2, 2
  %return3 = call double @"fit@FFFFFF"(double %return, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return3
}

; Function Attrs: nounwind readnone
declare double @"xnoise@FV"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare double @"xnoise@FP"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VF"(double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VFF"(double, double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VV"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VP"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare double @"pxnoise@FFI"(double, i64) #0

; Function Attrs: nounwind readnone
declare double @"pxnoise@FFFII"(double, double, i64, i64) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_psimplex@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %per2 = load <3 x double>, <3 x double>* %per
  %return = call double @"getcomp@FVI"(<3 x double> %per2, i64 0)
  %cast = fptosi double %return to i64
  %return4 = call double @"getcomp@FVI"(<3 x double> %per2, i64 1)
  %cast5 = fptosi double %return4 to i64
  %return7 = call double @"getcomp@FVI"(<3 x double> %per2, i64 2)
  %cast8 = fptosi double %return7 to i64
  %return9 = call double @"pxnoise@FVIII"(<3 x double> %p1, i64 %cast, i64 %cast5, i64 %cast8)
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0), i8** %0
  store double 1.381340e-01, double* %1
  store double 8.661300e-01, double* %2
  store double 4.965790e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0), i8** %5
  store double 1.381340e-01, double* %6
  store double 8.661300e-01, double* %7
  store double 4.965790e-01, double* %8
  store i64 1, i64* %9
  %nsdata10 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata10, 2
  %return11 = call double @"fit@FFFFFF"(double %return9, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return11
}

; Function Attrs: nounwind readnone
declare double @"pxnoise@FVIII"(<3 x double>, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare double @"pxnoise@FPIIII"(<4 x double>, i64, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"pxnoise@VFI"(double, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"pxnoise@VFFII"(double, double, i64, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"pxnoise@VVIII"(<3 x double>, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"pxnoise@VPIIII"(<4 x double>, i64, i64, i64, i64) #0

; Function Attrs: alwaysinline
define private double @"onoise@FV"(<3 x double> %rw11) #3 {
__llvm_entry:
  %rw05 = call double @"onoise@FVIFF"(<3 x double> %rw11, i64 0, double 5.000000e-01, double 1.000000e+00)
  ret double %rw05
}

; Function Attrs: nounwind readnone
declare double @"onoise@FVIFF"(<3 x double>, i64, double, double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VU"(<2 x double>) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_value_fast@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %cast = call <3 x double> @"set@VF"(double 1.250000e+00)
  %output = call <3 x double> @"mul@VV"(<3 x double> %p1, <3 x double> %cast)
  %return = call double @"onoise@FV"(<3 x double> %output)
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0), i8** %0
  %return3 = call double @"neg@FF"(double 1.004310e+00)
  store double %return3, double* %1
  store double 1.029750e+00, double* %2
  store double 4.937390e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0), i8** %5
  store double %return3, double* %6
  store double 1.029750e+00, double* %7
  store double 4.937390e-01, double* %8
  store i64 1, i64* %9
  %nsdata5 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata5, 2
  %return6 = call double @"fit@FFFFFF"(double %return, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return6
}

; Function Attrs: nounwind
declare <3 x double> @"set@VP"(<4 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"onoise@VVIFF"(<3 x double>, i64, double, double) #0

; Function Attrs: alwaysinline
define private double @"onoise@FVIII"(<3 x double> %rw11, i64 %rw22, i64 %rw33, i64 %rw44) #3 {
__llvm_entry:
  %rw011 = call double @"onoise@FVIIIIFF"(<3 x double> %rw11, i64 %rw22, i64 %rw33, i64 %rw44, i64 0, double 5.000000e-01, double 1.000000e+00)
  ret double %rw011
}

; Function Attrs: nounwind readnone
declare double @"onoise@FVIIIIFF"(<3 x double>, i64, i64, i64, i64, double, double) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_pvalue_fast@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %cast = call <3 x double> @"set@VF"(double 1.250000e+00)
  %output = call <3 x double> @"mul@VV"(<3 x double> %p1, <3 x double> %cast)
  %per2 = load <3 x double>, <3 x double>* %per
  %return = call double @"getcomp@FVI"(<3 x double> %per2, i64 0)
  %cast3 = fptosi double %return to i64
  %return5 = call double @"getcomp@FVI"(<3 x double> %per2, i64 1)
  %cast6 = fptosi double %return5 to i64
  %return8 = call double @"getcomp@FVI"(<3 x double> %per2, i64 2)
  %cast9 = fptosi double %return8 to i64
  %return10 = call double @"onoise@FVIII"(<3 x double> %output, i64 %cast3, i64 %cast6, i64 %cast9)
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i64 0, i64 0), i8** %0
  %return12 = call double @"neg@FF"(double 7.618160e-01)
  store double %return12, double* %1
  store double 8.163580e-01, double* %2
  store double 4.826150e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i64 0, i64 0), i8** %5
  store double %return12, double* %6
  store double 8.163580e-01, double* %7
  store double 4.826150e-01, double* %8
  store i64 1, i64* %9
  %nsdata14 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata14, 2
  %return15 = call double @"fit@FFFFFF"(double %return10, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return15
}

; Function Attrs: nounwind readnone
declare <3 x double> @"onoise@VVIIIIFF"(<3 x double>, i64, i64, i64, i64, double, double) #0

; Function Attrs: alwaysinline
define private double @"snoise@FV"(<3 x double> %rw11) #3 {
__llvm_entry:
  %rw05 = call double @"snoise@FVIFF"(<3 x double> %rw11, i64 0, double 5.000000e-01, double 1.000000e+00)
  ret double %rw05
}

; Function Attrs: nounwind readnone
declare double @"snoise@FVIFF"(<3 x double>, i64, double, double) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_sparse@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %cast = call <3 x double> @"set@VF"(double 1.250000e+00)
  %output = call <3 x double> @"mul@VV"(<3 x double> %p1, <3 x double> %cast)
  %return = call double @"snoise@FV"(<3 x double> %output)
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), i8** %0
  %return3 = call double @"neg@FF"(double 2.343510e+00)
  store double %return3, double* %1
  store double 2.438430e+00, double* %2
  store double 4.960900e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), i8** %5
  store double %return3, double* %6
  store double 2.438430e+00, double* %7
  store double 4.960900e-01, double* %8
  store i64 1, i64* %9
  %nsdata5 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata5, 2
  %return6 = call double @"fit@FFFFFF"(double %return, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return6
}

; Function Attrs: nounwind readnone
declare <3 x double> @"snoise@VVIFF"(<3 x double>, i64, double, double) #0

; Function Attrs: alwaysinline
define private double @"snoise@FVIII"(<3 x double> %rw11, i64 %rw22, i64 %rw33, i64 %rw44) #3 {
__llvm_entry:
  %rw011 = call double @"snoise@FVIIIIFF"(<3 x double> %rw11, i64 %rw22, i64 %rw33, i64 %rw44, i64 0, double 5.000000e-01, double 1.000000e+00)
  ret double %rw011
}

; Function Attrs: nounwind readnone
declare double @"snoise@FVIIIIFF"(<3 x double>, i64, i64, i64, i64, double, double) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_psparse@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %cast = call <3 x double> @"set@VF"(double 1.250000e+00)
  %output = call <3 x double> @"mul@VV"(<3 x double> %p1, <3 x double> %cast)
  %per2 = load <3 x double>, <3 x double>* %per
  %return = call double @"getcomp@FVI"(<3 x double> %per2, i64 0)
  %cast3 = fptosi double %return to i64
  %return5 = call double @"getcomp@FVI"(<3 x double> %per2, i64 1)
  %cast6 = fptosi double %return5 to i64
  %return8 = call double @"getcomp@FVI"(<3 x double> %per2, i64 2)
  %cast9 = fptosi double %return8 to i64
  %return10 = call double @"snoise@FVIII"(<3 x double> %output, i64 %cast3, i64 %cast6, i64 %cast9)
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0), i8** %0
  %return12 = call double @"neg@FF"(double 8.428030e-01)
  store double %return12, double* %1
  store double 1.164690e+00, double* %2
  store double 4.932960e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0), i8** %5
  store double %return12, double* %6
  store double 1.164690e+00, double* %7
  store double 4.932960e-01, double* %8
  store i64 1, i64* %9
  %nsdata14 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata14, 2
  %return15 = call double @"fit@FFFFFF"(double %return10, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return15
}

; Function Attrs: nounwind readnone
declare <3 x double> @"snoise@VVIIIIFF"(<3 x double>, i64, i64, i64, i64, double, double) #0

; Function Attrs: alwaysinline
define private double @"anoise@FV"(<3 x double> %rw11) #3 {
__llvm_entry:
  %rw05 = call double @"anoise@FVIFF"(<3 x double> %rw11, i64 0, double 5.000000e-01, double 1.000000e+00)
  ret double %rw05
}

; Function Attrs: nounwind readnone
declare double @"anoise@FVIFF"(<3 x double>, i64, double, double) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_alligator@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %cast = call <3 x double> @"set@VF"(double 1.640000e+00)
  %output = call <3 x double> @"mul@VV"(<3 x double> %p1, <3 x double> %cast)
  %return = call double @"anoise@FV"(<3 x double> %output)
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @9, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 9.937320e-01, double* %2
  store double 1.179510e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @9, i64 0, i64 0), i8** %5
  store double 0.000000e+00, double* %6
  store double 9.937320e-01, double* %7
  store double 1.179510e-01, double* %8
  store i64 0, i64* %9
  %nsdata2 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata2, 2
  %return3 = call double @"fit@FFFFFF"(double %return, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return3
}

; Function Attrs: nounwind readnone
declare <3 x double> @"anoise@VVIFF"(<3 x double>, i64, double, double) #0

; Function Attrs: alwaysinline
define private double @"anoise@FVIII"(<3 x double> %rw11, i64 %rw22, i64 %rw33, i64 %rw44) #3 {
__llvm_entry:
  %rw011 = call double @"anoise@FVIIIIFF"(<3 x double> %rw11, i64 %rw22, i64 %rw33, i64 %rw44, i64 0, double 5.000000e-01, double 1.000000e+00)
  ret double %rw011
}

; Function Attrs: nounwind readnone
declare double @"anoise@FVIIIIFF"(<3 x double>, i64, i64, i64, i64, double, double) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_palligator@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %cast = call <3 x double> @"set@VF"(double 1.640000e+00)
  %output = call <3 x double> @"mul@VV"(<3 x double> %p1, <3 x double> %cast)
  %per2 = load <3 x double>, <3 x double>* %per
  %return = call double @"getcomp@FVI"(<3 x double> %per2, i64 0)
  %cast3 = fptosi double %return to i64
  %return5 = call double @"getcomp@FVI"(<3 x double> %per2, i64 1)
  %cast6 = fptosi double %return5 to i64
  %return8 = call double @"getcomp@FVI"(<3 x double> %per2, i64 2)
  %cast9 = fptosi double %return8 to i64
  %return10 = call double @"anoise@FVIII"(<3 x double> %output, i64 %cast3, i64 %cast6, i64 %cast9)
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @10, i64 0, i64 0), i8** %0
  %return11 = call double @"neg@FF"(double 2.500000e-03)
  store double %return11, double* %1
  store double 8.173980e-01, double* %2
  store double 1.755280e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @10, i64 0, i64 0), i8** %5
  store double %return11, double* %6
  store double 8.173980e-01, double* %7
  store double 1.755280e-01, double* %8
  store i64 0, i64* %9
  %nsdata13 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata13, 2
  %return14 = call double @"fit@FFFFFF"(double %return10, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return14
}

; Function Attrs: nounwind readnone
declare <3 x double> @"anoise@VVIIIIFF"(<3 x double>, i64, i64, i64, i64, double, double) #0

; Function Attrs: nounwind readnone
declare double @"flownoise@FFFF"(double, double, double) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_flow@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %flow2 = load double, double* %flow
  %return = call double @"flownoise@FVF"(<3 x double> %p1, double %flow2)
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0), i8** %0
  store double 9.726970e-02, double* %1
  store double 8.796630e-01, double* %2
  store double 5.147250e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0), i8** %5
  store double 9.726970e-02, double* %6
  store double 8.796630e-01, double* %7
  store double 5.147250e-01, double* %8
  store i64 1, i64* %9
  %nsdata3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata3, 2
  %return4 = call double @"fit@FFFFFF"(double %return, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return4
}

; Function Attrs: nounwind readnone
declare double @"flownoise@FVF"(<3 x double>, double) #0

; Function Attrs: nounwind readnone
declare double @"flownoise@FPF"(<4 x double>, double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"flownoise@VFFF"(double, double, double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"flownoise@VVF"(<3 x double>, double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"flownoise@VPF"(<4 x double>, double) #0

; Function Attrs: nounwind readnone
declare double @"flowpnoise@FVIIIF"(<3 x double>, i64, i64, i64, double) #0

; Function Attrs: nounwind readnone
declare double @"flowpnoise@FFFIIF"(double, double, i64, i64, double) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_pflow@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %per2 = load <3 x double>, <3 x double>* %per
  %flow3 = load double, double* %flow
  %return = call double @"flowpnoise@FVVF"(<3 x double> %p1, <3 x double> %per2, double %flow3)
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @12, i64 0, i64 0), i8** %0
  store double 9.312730e-02, double* %1
  store double 8.960280e-01, double* %2
  store double 5.065750e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @12, i64 0, i64 0), i8** %5
  store double 9.312730e-02, double* %6
  store double 8.960280e-01, double* %7
  store double 5.065750e-01, double* %8
  store i64 1, i64* %9
  %nsdata4 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata4, 2
  %return5 = call double @"fit@FFFFFF"(double %return, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return5
}

; Function Attrs: alwaysinline
define private double @"flowpnoise@FVVF"(<3 x double> %rw11, <3 x double> %rw22, double %rw33) #3 {
__llvm_entry:
  %t_0_ = call double @"getcomp@FVI"(<3 x double> %rw22, i64 0)
  %t_1_ = call double @"getcomp@FVI"(<3 x double> %rw22, i64 1)
  %t_2_ = call double @"getcomp@FVI"(<3 x double> %rw22, i64 2)
  %t_3_ = fptosi double %t_0_ to i64
  %t_4_ = fptosi double %t_1_ to i64
  %t_5_ = fptosi double %t_2_ to i64
  %rw017 = call double @"flowpnoise@FVIIIF"(<3 x double> %rw11, i64 %t_3_, i64 %t_4_, i64 %t_5_, double %rw33)
  ret double %rw017
}

; Function Attrs: nounwind readnone
declare double @"flowpnoise@FPIIIIF"(<4 x double>, i64, i64, i64, i64, double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"flowpnoise@VVIIIF"(<3 x double>, i64, i64, i64, double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"flowpnoise@VFFIIF"(double, double, i64, i64, double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"flowpnoise@VPIIIIF"(<4 x double>, i64, i64, i64, i64, double) #0

; Function Attrs: nounwind readnone
declare { i64, double, double } @"wnoise@FIFF"(double) #0

; Function Attrs: nounwind readnone
declare { i64, double, double } @"wnoise@FFIFF"(double, double) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_worleyFA@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %output = call { i64, double, double } @"wnoise@VIFF"(<3 x double> %p1)
  %output3 = extractvalue { i64, double, double } %output, 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.188950e+00, double* %2
  store double 1.596840e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i64 0, i64 0), i8** %5
  store double 0.000000e+00, double* %6
  store double 1.188950e+00, double* %7
  store double 1.596840e-01, double* %8
  store i64 0, i64* %9
  %nsdata6 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata6, 2
  %return = call double @"fit@FFFFFF"(double %output3, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return
}

; Function Attrs: nounwind readnone
declare { i64, double, double } @"wnoise@VIFF"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare { i64, double, double } @"wnoise@PIFF"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare { i64, double, double } @"wnoise@FIFFI"(double, i64) #0

; Function Attrs: nounwind readnone
declare { i64, double, double } @"wnoise@FFIFFII"(double, double, i64, i64) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_pworleyFA@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %per2 = load <3 x double>, <3 x double>* %per
  %return = call double @"getcomp@FVI"(<3 x double> %per2, i64 0)
  %cast = fptosi double %return to i64
  %return4 = call double @"getcomp@FVI"(<3 x double> %per2, i64 1)
  %cast5 = fptosi double %return4 to i64
  %return7 = call double @"getcomp@FVI"(<3 x double> %per2, i64 2)
  %cast8 = fptosi double %return7 to i64
  %output = call { i64, double, double } @"wnoise@VIFFIII"(<3 x double> %p1, i64 %cast, i64 %cast5, i64 %cast8)
  %output10 = extractvalue { i64, double, double } %output, 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @14, i64 0, i64 0), i8** %0
  %return13 = call double @"neg@FF"(double 3.455960e-03)
  store double %return13, double* %1
  store double 8.150870e-01, double* %2
  store double 2.367870e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @14, i64 0, i64 0), i8** %5
  store double %return13, double* %6
  store double 8.150870e-01, double* %7
  store double 2.367870e-01, double* %8
  store i64 0, i64* %9
  %nsdata15 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata15, 2
  %return16 = call double @"fit@FFFFFF"(double %output10, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return16
}

; Function Attrs: nounwind readnone
declare { i64, double, double } @"wnoise@VIFFIII"(<3 x double>, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare { i64, double, double } @"wnoise@PIFFIIII"(<4 x double>, i64, i64, i64, i64) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_worleyFB@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %output = call { i64, double, double } @"wnoise@VIFF"(<3 x double> %p1)
  %output3 = extractvalue { i64, double, double } %output, 1
  %output4 = extractvalue { i64, double, double } %output, 2
  %output7 = fsub double %output4, %output3
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.110100e+00, double* %2
  store double 1.180990e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i64 0, i64 0), i8** %5
  store double 0.000000e+00, double* %6
  store double 1.110100e+00, double* %7
  store double 1.180990e-01, double* %8
  store i64 0, i64* %9
  %nsdata8 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata8, 2
  %return = call double @"fit@FFFFFF"(double %output7, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return
}

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_pworleyFB@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %per2 = load <3 x double>, <3 x double>* %per
  %return = call double @"getcomp@FVI"(<3 x double> %per2, i64 0)
  %cast = fptosi double %return to i64
  %return4 = call double @"getcomp@FVI"(<3 x double> %per2, i64 1)
  %cast5 = fptosi double %return4 to i64
  %return7 = call double @"getcomp@FVI"(<3 x double> %per2, i64 2)
  %cast8 = fptosi double %return7 to i64
  %output = call { i64, double, double } @"wnoise@VIFFIII"(<3 x double> %p1, i64 %cast, i64 %cast5, i64 %cast8)
  %output10 = extractvalue { i64, double, double } %output, 1
  %output11 = extractvalue { i64, double, double } %output, 2
  %output14 = fsub double %output11, %output10
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @15, i64 0, i64 0), i8** %0
  %return15 = call double @"neg@FF"(double 2.498330e-03)
  store double %return15, double* %1
  store double 6.078380e-01, double* %2
  store double 2.307210e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @15, i64 0, i64 0), i8** %5
  store double %return15, double* %6
  store double 6.078380e-01, double* %7
  store double 2.307210e-01, double* %8
  store i64 0, i64* %9
  %nsdata17 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata17, 2
  %return18 = call double @"fit@FFFFFF"(double %output14, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return18
}

; Function Attrs: nounwind readnone
declare { i64, double, double } @"mwnoise@FIFF"(double) #0

; Function Attrs: nounwind readnone
declare { i64, double, double } @"mwnoise@FFIFF"(double, double) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_mworleyFA@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %output = call { i64, double, double } @"mwnoise@VIFF"(<3 x double> %p1)
  %output3 = extractvalue { i64, double, double } %output, 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @16, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.566030e+00, double* %2
  store double 3.984810e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @16, i64 0, i64 0), i8** %5
  store double 0.000000e+00, double* %6
  store double 1.566030e+00, double* %7
  store double 3.984810e-01, double* %8
  store i64 0, i64* %9
  %nsdata6 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata6, 2
  %return = call double @"fit@FFFFFF"(double %output3, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return
}

; Function Attrs: nounwind readnone
declare { i64, double, double } @"mwnoise@VIFF"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare { i64, double, double } @"mwnoise@PIFF"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare { i64, double, double } @"mwnoise@FIFFI"(double, i64) #0

; Function Attrs: nounwind readnone
declare { i64, double, double } @"mwnoise@FFIFFII"(double, double, i64, i64) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_pmworleyFA@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %per2 = load <3 x double>, <3 x double>* %per
  %return = call double @"getcomp@FVI"(<3 x double> %per2, i64 0)
  %cast = fptosi double %return to i64
  %return4 = call double @"getcomp@FVI"(<3 x double> %per2, i64 1)
  %cast5 = fptosi double %return4 to i64
  %return7 = call double @"getcomp@FVI"(<3 x double> %per2, i64 2)
  %cast8 = fptosi double %return7 to i64
  %output = call { i64, double, double } @"mwnoise@VIFFIII"(<3 x double> %p1, i64 %cast, i64 %cast5, i64 %cast8)
  %output10 = extractvalue { i64, double, double } %output, 1
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @17, i64 0, i64 0), i8** %0
  %return13 = call double @"neg@FF"(double 6.179570e-03)
  store double %return13, double* %1
  store double 1.365310e+00, double* %2
  store double 4.482700e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @17, i64 0, i64 0), i8** %5
  store double %return13, double* %6
  store double 1.365310e+00, double* %7
  store double 4.482700e-01, double* %8
  store i64 0, i64* %9
  %nsdata15 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata15, 2
  %return16 = call double @"fit@FFFFFF"(double %output10, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return16
}

; Function Attrs: nounwind readnone
declare { i64, double, double } @"mwnoise@VIFFIII"(<3 x double>, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare { i64, double, double } @"mwnoise@PIFFIIII"(<4 x double>, i64, i64, i64, i64) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_mworleyFB@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %output = call { i64, double, double } @"mwnoise@VIFF"(<3 x double> %p1)
  %output3 = extractvalue { i64, double, double } %output, 1
  %output4 = extractvalue { i64, double, double } %output, 2
  %output7 = fsub double %output4, %output3
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @16, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.454660e+00, double* %2
  store double 1.616670e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @16, i64 0, i64 0), i8** %5
  store double 0.000000e+00, double* %6
  store double 1.454660e+00, double* %7
  store double 1.616670e-01, double* %8
  store i64 0, i64* %9
  %nsdata8 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata8, 2
  %return = call double @"fit@FFFFFF"(double %output7, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return
}

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_pmworleyFB@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %per2 = load <3 x double>, <3 x double>* %per
  %return = call double @"getcomp@FVI"(<3 x double> %per2, i64 0)
  %cast = fptosi double %return to i64
  %return4 = call double @"getcomp@FVI"(<3 x double> %per2, i64 1)
  %cast5 = fptosi double %return4 to i64
  %return7 = call double @"getcomp@FVI"(<3 x double> %per2, i64 2)
  %cast8 = fptosi double %return7 to i64
  %output = call { i64, double, double } @"mwnoise@VIFFIII"(<3 x double> %p1, i64 %cast, i64 %cast5, i64 %cast8)
  %output10 = extractvalue { i64, double, double } %output, 1
  %output11 = extractvalue { i64, double, double } %output, 2
  %output14 = fsub double %output11, %output10
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @18, i64 0, i64 0), i8** %0
  %return15 = call double @"neg@FF"(double 9.170050e-03)
  store double %return15, double* %1
  store double 1.062390e+00, double* %2
  store double 2.118230e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @18, i64 0, i64 0), i8** %5
  store double %return15, double* %6
  store double 1.062390e+00, double* %7
  store double 2.118230e-01, double* %8
  store i64 0, i64* %9
  %nsdata17 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata17, 2
  %return18 = call double @"fit@FFFFFF"(double %output14, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return18
}

; Function Attrs: nounwind readnone
declare { i64, double, double } @"cwnoise@FIFF"(double) #0

; Function Attrs: nounwind readnone
declare { i64, double, double } @"cwnoise@FFIFF"(double, double) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_cworleyFA@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %output = call { i64, double, double } @"cwnoise@VIFF"(<3 x double> %p1)
  %output3 = extractvalue { i64, double, double } %output, 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @19, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 8.434530e-01, double* %2
  store double 4.069560e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @19, i64 0, i64 0), i8** %5
  store double 0.000000e+00, double* %6
  store double 8.434530e-01, double* %7
  store double 4.069560e-01, double* %8
  store i64 0, i64* %9
  %nsdata6 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata6, 2
  %return = call double @"fit@FFFFFF"(double %output3, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return
}

; Function Attrs: nounwind readnone
declare { i64, double, double } @"cwnoise@VIFF"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare { i64, double, double } @"cwnoise@PIFF"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare { i64, double, double } @"cwnoise@FIFFI"(double, i64) #0

; Function Attrs: nounwind readnone
declare { i64, double, double } @"cwnoise@FFIFFII"(double, double, i64, i64) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_pcworleyFA@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %per2 = load <3 x double>, <3 x double>* %per
  %return = call double @"getcomp@FVI"(<3 x double> %per2, i64 0)
  %cast = fptosi double %return to i64
  %return4 = call double @"getcomp@FVI"(<3 x double> %per2, i64 1)
  %cast5 = fptosi double %return4 to i64
  %return7 = call double @"getcomp@FVI"(<3 x double> %per2, i64 2)
  %cast8 = fptosi double %return7 to i64
  %output = call { i64, double, double } @"cwnoise@VIFFIII"(<3 x double> %p1, i64 %cast, i64 %cast5, i64 %cast8)
  %output10 = extractvalue { i64, double, double } %output, 1
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @20, i64 0, i64 0), i8** %0
  store double 1.556640e-02, double* %1
  store double 6.781590e-01, double* %2
  store double 4.775260e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @20, i64 0, i64 0), i8** %5
  store double 1.556640e-02, double* %6
  store double 6.781590e-01, double* %7
  store double 4.775260e-01, double* %8
  store i64 0, i64* %9
  %nsdata13 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata13, 2
  %return14 = call double @"fit@FFFFFF"(double %output10, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return14
}

; Function Attrs: nounwind readnone
declare { i64, double, double } @"cwnoise@VIFFIII"(<3 x double>, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare { i64, double, double } @"cwnoise@PIFFIIII"(<4 x double>, i64, i64, i64, i64) #0

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_cworleyFB@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %output = call { i64, double, double } @"cwnoise@VIFF"(<3 x double> %p1)
  %output3 = extractvalue { i64, double, double } %output, 1
  %output4 = extractvalue { i64, double, double } %output, 2
  %output7 = fsub double %output4, %output3
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @19, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 1.142860e-02)
  store double %return, double* %1
  store double 7.765650e-01, double* %2
  store double 1.656610e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @19, i64 0, i64 0), i8** %5
  store double %return, double* %6
  store double 7.765650e-01, double* %7
  store double 1.656610e-01, double* %8
  store i64 0, i64* %9
  %nsdata9 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata9, 2
  %return10 = call double @"fit@FFFFFF"(double %output7, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return10
}

; Function Attrs: alwaysinline nounwind
define private double @"nwrap_pcworleyFB@FVVF"(<3 x double>* %p, <3 x double>* %per, double* %flow) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i8*
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca i64
  %p1 = load <3 x double>, <3 x double>* %p
  %per2 = load <3 x double>, <3 x double>* %per
  %return = call double @"getcomp@FVI"(<3 x double> %per2, i64 0)
  %cast = fptosi double %return to i64
  %return4 = call double @"getcomp@FVI"(<3 x double> %per2, i64 1)
  %cast5 = fptosi double %return4 to i64
  %return7 = call double @"getcomp@FVI"(<3 x double> %per2, i64 2)
  %cast8 = fptosi double %return7 to i64
  %output = call { i64, double, double } @"cwnoise@VIFFIII"(<3 x double> %p1, i64 %cast, i64 %cast5, i64 %cast8)
  %output10 = extractvalue { i64, double, double } %output, 1
  %output11 = extractvalue { i64, double, double } %output, 2
  %output14 = fsub double %output11, %output10
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @21, i64 0, i64 0), i8** %0
  %return15 = call double @"neg@FF"(double 2.500000e-03)
  store double %return15, double* %1
  store double 6.060160e-01, double* %2
  store double 2.027910e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %min = extractvalue %nsdata %nsdata, 1
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @21, i64 0, i64 0), i8** %5
  store double %return15, double* %6
  store double 6.060160e-01, double* %7
  store double 2.027910e-01, double* %8
  store i64 0, i64* %9
  %nsdata17 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %5, double* %6, double* %7, double* %8, i64* %9)
  %max = extractvalue %nsdata %nsdata17, 2
  %return18 = call double @"fit@FFFFFF"(double %output14, double %min, double %max, double 0.000000e+00, double 1.000000e+00)
  ret double %return18
}

; Function Attrs: nounwind
declare double @"abs@FF"(double) #2

; Function Attrs: nounwind
declare double @"set@FP"(<4 x double>) #2

; Function Attrs: nounwind
declare double @"avg@FF"(double) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PU"(<2 x double>) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UP"(<4 x double>) #0

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_sine@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output47, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output50, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %nwrap_sine = call double @"nwrap_sine@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %nwrap_sine36 = call double @"nwrap_sine@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output41 = fsub double %nwrap_sine, %nwrap_sine36
  %return42 = call double @"avg@FF"(double %output41)
  %output43 = fmul double %output4, %return42
  %return45 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output43, i64 %i.0)
  %output47 = extractvalue { double, <4 x double> } %return45, 1
  %output50 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast52 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast52
}

; Function Attrs: nounwind
declare double @"avg@FV"(<3 x double>) #2

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_value_fast@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output47, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output50, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %nwrap_value_fast = call double @"nwrap_value_fast@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %nwrap_value_fast36 = call double @"nwrap_value_fast@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output41 = fsub double %nwrap_value_fast, %nwrap_value_fast36
  %return42 = call double @"avg@FF"(double %output41)
  %output43 = fmul double %output4, %return42
  %return45 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output43, i64 %i.0)
  %output47 = extractvalue { double, <4 x double> } %return45, 1
  %output50 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast52 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast52
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_pvalue_fast@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output49, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output52, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %per35 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per35, <3 x double>* %1
  %nwrap_pvalue_fast = call double @"nwrap_pvalue_fast@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %per37 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per37, <3 x double>* %4
  %nwrap_pvalue_fast38 = call double @"nwrap_pvalue_fast@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output43 = fsub double %nwrap_pvalue_fast, %nwrap_pvalue_fast38
  %return44 = call double @"avg@FF"(double %output43)
  %output45 = fmul double %output4, %return44
  %return47 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output45, i64 %i.0)
  %output49 = extractvalue { double, <4 x double> } %return47, 1
  %output52 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast54 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast54
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_sparse@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output47, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output50, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %nwrap_sparse = call double @"nwrap_sparse@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %nwrap_sparse36 = call double @"nwrap_sparse@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output41 = fsub double %nwrap_sparse, %nwrap_sparse36
  %return42 = call double @"avg@FF"(double %output41)
  %output43 = fmul double %output4, %return42
  %return45 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output43, i64 %i.0)
  %output47 = extractvalue { double, <4 x double> } %return45, 1
  %output50 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast52 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast52
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_psparse@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output49, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output52, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %per35 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per35, <3 x double>* %1
  %nwrap_psparse = call double @"nwrap_psparse@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %per37 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per37, <3 x double>* %4
  %nwrap_psparse38 = call double @"nwrap_psparse@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output43 = fsub double %nwrap_psparse, %nwrap_psparse38
  %return44 = call double @"avg@FF"(double %output43)
  %output45 = fmul double %output4, %return44
  %return47 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output45, i64 %i.0)
  %output49 = extractvalue { double, <4 x double> } %return47, 1
  %output52 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast54 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast54
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_alligator@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output47, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output50, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %nwrap_alligator = call double @"nwrap_alligator@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %nwrap_alligator36 = call double @"nwrap_alligator@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output41 = fsub double %nwrap_alligator, %nwrap_alligator36
  %return42 = call double @"avg@FF"(double %output41)
  %output43 = fmul double %output4, %return42
  %return45 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output43, i64 %i.0)
  %output47 = extractvalue { double, <4 x double> } %return45, 1
  %output50 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast52 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast52
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_palligator@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output49, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output52, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %per35 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per35, <3 x double>* %1
  %nwrap_palligator = call double @"nwrap_palligator@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %per37 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per37, <3 x double>* %4
  %nwrap_palligator38 = call double @"nwrap_palligator@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output43 = fsub double %nwrap_palligator, %nwrap_palligator38
  %return44 = call double @"avg@FF"(double %output43)
  %output45 = fmul double %output4, %return44
  %return47 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output45, i64 %i.0)
  %output49 = extractvalue { double, <4 x double> } %return47, 1
  %output52 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast54 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast54
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_perlin@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output47, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output50, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %nwrap_perlin = call double @"nwrap_perlin@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %nwrap_perlin36 = call double @"nwrap_perlin@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output41 = fsub double %nwrap_perlin, %nwrap_perlin36
  %return42 = call double @"avg@FF"(double %output41)
  %output43 = fmul double %output4, %return42
  %return45 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output43, i64 %i.0)
  %output47 = extractvalue { double, <4 x double> } %return45, 1
  %output50 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast52 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast52
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_pperlin@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output49, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output52, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %per35 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per35, <3 x double>* %1
  %nwrap_pperlin = call double @"nwrap_pperlin@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %per37 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per37, <3 x double>* %4
  %nwrap_pperlin38 = call double @"nwrap_pperlin@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output43 = fsub double %nwrap_pperlin, %nwrap_pperlin38
  %return44 = call double @"avg@FF"(double %output43)
  %output45 = fmul double %output4, %return44
  %return47 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output45, i64 %i.0)
  %output49 = extractvalue { double, <4 x double> } %return47, 1
  %output52 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast54 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast54
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_flow@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output49, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output52, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %flow35 = load double, double* %flow
  store double %flow35, double* %2
  %nwrap_flow = call double @"nwrap_flow@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %flow37 = load double, double* %flow
  store double %flow37, double* %5
  %nwrap_flow38 = call double @"nwrap_flow@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output43 = fsub double %nwrap_flow, %nwrap_flow38
  %return44 = call double @"avg@FF"(double %output43)
  %output45 = fmul double %output4, %return44
  %return47 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output45, i64 %i.0)
  %output49 = extractvalue { double, <4 x double> } %return47, 1
  %output52 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast54 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast54
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_pflow@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output51, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output54, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %per35 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per35, <3 x double>* %1
  %flow36 = load double, double* %flow
  store double %flow36, double* %2
  %nwrap_pflow = call double @"nwrap_pflow@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %per38 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per38, <3 x double>* %4
  %flow39 = load double, double* %flow
  store double %flow39, double* %5
  %nwrap_pflow40 = call double @"nwrap_pflow@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output45 = fsub double %nwrap_pflow, %nwrap_pflow40
  %return46 = call double @"avg@FF"(double %output45)
  %output47 = fmul double %output4, %return46
  %return49 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output47, i64 %i.0)
  %output51 = extractvalue { double, <4 x double> } %return49, 1
  %output54 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast56 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast56
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_worleyFA@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output47, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output50, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %nwrap_worleyFA = call double @"nwrap_worleyFA@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %nwrap_worleyFA36 = call double @"nwrap_worleyFA@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output41 = fsub double %nwrap_worleyFA, %nwrap_worleyFA36
  %return42 = call double @"avg@FF"(double %output41)
  %output43 = fmul double %output4, %return42
  %return45 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output43, i64 %i.0)
  %output47 = extractvalue { double, <4 x double> } %return45, 1
  %output50 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast52 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast52
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_worleyFB@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output47, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output50, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %nwrap_worleyFB = call double @"nwrap_worleyFB@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %nwrap_worleyFB36 = call double @"nwrap_worleyFB@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output41 = fsub double %nwrap_worleyFB, %nwrap_worleyFB36
  %return42 = call double @"avg@FF"(double %output41)
  %output43 = fmul double %output4, %return42
  %return45 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output43, i64 %i.0)
  %output47 = extractvalue { double, <4 x double> } %return45, 1
  %output50 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast52 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast52
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_mworleyFA@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output47, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output50, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %nwrap_mworleyFA = call double @"nwrap_mworleyFA@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %nwrap_mworleyFA36 = call double @"nwrap_mworleyFA@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output41 = fsub double %nwrap_mworleyFA, %nwrap_mworleyFA36
  %return42 = call double @"avg@FF"(double %output41)
  %output43 = fmul double %output4, %return42
  %return45 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output43, i64 %i.0)
  %output47 = extractvalue { double, <4 x double> } %return45, 1
  %output50 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast52 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast52
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_mworleyFB@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output47, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output50, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %nwrap_mworleyFB = call double @"nwrap_mworleyFB@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %nwrap_mworleyFB36 = call double @"nwrap_mworleyFB@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output41 = fsub double %nwrap_mworleyFB, %nwrap_mworleyFB36
  %return42 = call double @"avg@FF"(double %output41)
  %output43 = fmul double %output4, %return42
  %return45 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output43, i64 %i.0)
  %output47 = extractvalue { double, <4 x double> } %return45, 1
  %output50 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast52 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast52
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_cworleyFA@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output47, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output50, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %nwrap_cworleyFA = call double @"nwrap_cworleyFA@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %nwrap_cworleyFA36 = call double @"nwrap_cworleyFA@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output41 = fsub double %nwrap_cworleyFA, %nwrap_cworleyFA36
  %return42 = call double @"avg@FF"(double %output41)
  %output43 = fmul double %output4, %return42
  %return45 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output43, i64 %i.0)
  %output47 = extractvalue { double, <4 x double> } %return45, 1
  %output50 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast52 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast52
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_cworleyFB@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output47, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output50, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %nwrap_cworleyFB = call double @"nwrap_cworleyFB@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %nwrap_cworleyFB36 = call double @"nwrap_cworleyFB@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output41 = fsub double %nwrap_cworleyFB, %nwrap_cworleyFB36
  %return42 = call double @"avg@FF"(double %output41)
  %output43 = fmul double %output4, %return42
  %return45 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output43, i64 %i.0)
  %output47 = extractvalue { double, <4 x double> } %return45, 1
  %output50 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast52 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast52
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_pworleyFA@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output49, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output52, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %per35 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per35, <3 x double>* %1
  %nwrap_pworleyFA = call double @"nwrap_pworleyFA@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %per37 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per37, <3 x double>* %4
  %nwrap_pworleyFA38 = call double @"nwrap_pworleyFA@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output43 = fsub double %nwrap_pworleyFA, %nwrap_pworleyFA38
  %return44 = call double @"avg@FF"(double %output43)
  %output45 = fmul double %output4, %return44
  %return47 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output45, i64 %i.0)
  %output49 = extractvalue { double, <4 x double> } %return47, 1
  %output52 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast54 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast54
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_pworleyFB@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output49, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output52, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %per35 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per35, <3 x double>* %1
  %nwrap_pworleyFB = call double @"nwrap_pworleyFB@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %per37 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per37, <3 x double>* %4
  %nwrap_pworleyFB38 = call double @"nwrap_pworleyFB@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output43 = fsub double %nwrap_pworleyFB, %nwrap_pworleyFB38
  %return44 = call double @"avg@FF"(double %output43)
  %output45 = fmul double %output4, %return44
  %return47 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output45, i64 %i.0)
  %output49 = extractvalue { double, <4 x double> } %return47, 1
  %output52 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast54 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast54
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_pmworleyFA@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output49, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output52, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %per35 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per35, <3 x double>* %1
  %nwrap_pmworleyFA = call double @"nwrap_pmworleyFA@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %per37 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per37, <3 x double>* %4
  %nwrap_pmworleyFA38 = call double @"nwrap_pmworleyFA@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output43 = fsub double %nwrap_pmworleyFA, %nwrap_pmworleyFA38
  %return44 = call double @"avg@FF"(double %output43)
  %output45 = fmul double %output4, %return44
  %return47 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output45, i64 %i.0)
  %output49 = extractvalue { double, <4 x double> } %return47, 1
  %output52 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast54 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast54
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_pmworleyFB@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output49, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output52, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %per35 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per35, <3 x double>* %1
  %nwrap_pmworleyFB = call double @"nwrap_pmworleyFB@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %per37 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per37, <3 x double>* %4
  %nwrap_pmworleyFB38 = call double @"nwrap_pmworleyFB@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output43 = fsub double %nwrap_pmworleyFB, %nwrap_pmworleyFB38
  %return44 = call double @"avg@FF"(double %output43)
  %output45 = fmul double %output4, %return44
  %return47 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output45, i64 %i.0)
  %output49 = extractvalue { double, <4 x double> } %return47, 1
  %output52 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast54 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast54
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_pcworleyFA@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output49, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output52, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %per35 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per35, <3 x double>* %1
  %nwrap_pcworleyFA = call double @"nwrap_pcworleyFA@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %per37 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per37, <3 x double>* %4
  %nwrap_pcworleyFA38 = call double @"nwrap_pcworleyFA@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output43 = fsub double %nwrap_pcworleyFA, %nwrap_pcworleyFA38
  %return44 = call double @"avg@FF"(double %output43)
  %output45 = fmul double %output4, %return44
  %return47 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output45, i64 %i.0)
  %output49 = extractvalue { double, <4 x double> } %return47, 1
  %output52 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast54 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast54
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_pcworleyFB@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  %4 = alloca <3 x double>
  %5 = alloca double
  %delta1 = load double, double* %delta
  %return = call double @"abs@FF"(double %delta1)
  %return2 = call double @"max@FFF"(double 1.000000e-05, double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output)
  %cast = call <4 x double> @"set@PI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %out.0 = phi <4 x double> [ %cast, %__llvm_entry ], [ %output49, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output52, %body ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %6 = icmp ne i64 %return8, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %p9 = load <3 x double>, <3 x double>* %p
  %cast10 = call <4 x double> @"set@PV"(<3 x double> %p9)
  %return14 = call double @"getcomp@FPI"(<4 x double> %cast10, i64 %i.0)
  %output16 = fadd double %return14, %output
  %return17 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output16, i64 %i.0)
  %output19 = extractvalue { double, <4 x double> } %return17, 1
  %output25 = fsub double %return14, %output
  %return27 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %cast10, double %output25, i64 %i.0)
  %output29 = extractvalue { double, <4 x double> } %return27, 1
  %cast31 = call <3 x double> @"set@VP"(<4 x double> %output19)
  %cast33 = call <3 x double> @"set@VP"(<4 x double> %output29)
  store <3 x double> %cast31, <3 x double>* %0
  %per35 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per35, <3 x double>* %1
  %nwrap_pcworleyFB = call double @"nwrap_pcworleyFB@FVVF"(<3 x double>* %0, <3 x double>* %1, double* %2)
  store <3 x double> %cast33, <3 x double>* %3
  %per37 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per37, <3 x double>* %4
  %nwrap_pcworleyFB38 = call double @"nwrap_pcworleyFB@FVVF"(<3 x double>* %3, <3 x double>* %4, double* %5)
  %output43 = fsub double %nwrap_pcworleyFB, %nwrap_pcworleyFB38
  %return44 = call double @"avg@FF"(double %output43)
  %output45 = fmul double %output4, %return44
  %return47 = call { double, <4 x double> } @"setcomp@FPFI"(<4 x double> %out.0, double %output45, i64 %i.0)
  %output49 = extractvalue { double, <4 x double> } %return47, 1
  %output52 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %cast54 = call <3 x double> @"set@VP"(<4 x double> %out.0)
  ret <3 x double> %cast54
}

; Function Attrs: nounwind readnone
declare { double, double } @"xnoised@FFF"(double) #0

; Function Attrs: nounwind readnone
declare { double, double, double } @"xnoised@FFFFF"(double, double) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #0

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_simplex@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %p1 = load <3 x double>, <3 x double>* %p
  %output = call { double, double, double, double } @"xnoised@VFFFF"(<3 x double> %p1)
  %output3 = extractvalue { double, double, double, double } %output, 1
  %output4 = extractvalue { double, double, double, double } %output, 2
  %output5 = extractvalue { double, double, double, double } %output, 3
  %return = call <3 x double> @"set@VFFF"(double %output3, double %output4, double %output5)
  ret <3 x double> %return
}

; Function Attrs: nounwind readnone
declare { double, double, double, double } @"xnoised@VFFFF"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare { double, double, double, double, double } @"xnoised@PFFFFF"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double> } @"xnoised@FVV"(double) #0

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>, <3 x double> } @"xnoised@FFVVV"(double, double) #0

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>, <3 x double>, <3 x double> } @"xnoised@VVVVV"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double> } @"xnoised@PVVVVV"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare { double, double } @"pxnoised@FIFF"(double, i64) #0

; Function Attrs: nounwind readnone
declare { double, double, double } @"pxnoised@FFIIFFF"(double, double, i64, i64) #0

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"fngrad_psimplex@VVVFF"(<3 x double>* %p, <3 x double>* %per, double* %flow, double* %delta) #1 {
__llvm_entry:
  %p1 = load <3 x double>, <3 x double>* %p
  %per2 = load <3 x double>, <3 x double>* %per
  %return = call double @"getcomp@FVI"(<3 x double> %per2, i64 0)
  %cast = fptosi double %return to i64
  %return4 = call double @"getcomp@FVI"(<3 x double> %per2, i64 1)
  %cast5 = fptosi double %return4 to i64
  %return7 = call double @"getcomp@FVI"(<3 x double> %per2, i64 2)
  %cast8 = fptosi double %return7 to i64
  %output = call { double, double, double, double } @"pxnoised@VIIIFFFF"(<3 x double> %p1, i64 %cast, i64 %cast5, i64 %cast8)
  %output10 = extractvalue { double, double, double, double } %output, 1
  %output11 = extractvalue { double, double, double, double } %output, 2
  %output12 = extractvalue { double, double, double, double } %output, 3
  %return16 = call <3 x double> @"set@VFFF"(double %output10, double %output11, double %output12)
  ret <3 x double> %return16
}

; Function Attrs: nounwind readnone
declare { double, double, double, double } @"pxnoised@VIIIFFFF"(<3 x double>, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare { double, double, double, double, double } @"pxnoised@PIIIIFFFFF"(<4 x double>, i64, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double> } @"pxnoised@FIVV"(double, i64) #0

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>, <3 x double> } @"pxnoised@FFIIVVV"(double, double, i64, i64) #0

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>, <3 x double>, <3 x double> } @"pxnoised@VIIIVVVV"(<3 x double>, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double> } @"pxnoised@PIIIIVVVVV"(<4 x double>, i64, i64, i64, i64) #0

; Function Attrs: alwaysinline nounwind
define private double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %val, %nsdata* %stats, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <4 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow) #1 {
__llvm_entry:
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = load %nsdata, %nsdata* %stats
  %avg = extractvalue %nsdata %stats3, 3
  %val4 = load double, double* %val
  %fold5 = load i64, i64* %fold
  %symmetric = extractvalue %nsdata %stats3, 4
  %return7 = call i64 @"and@III"(i64 %fold5, i64 %symmetric)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %true8, label %end9

true8:                                            ; preds = %end
  %output = fsub double %val4, %avg
  %return12 = call double @"abs@FF"(double %output)
  %output15 = fsub double 1.000000e+00, %avg
  %return16 = call double @"max@FFF"(double %avg, double %output15)
  %output17 = call double @"div@FF"(double %return12, double %return16)
  br label %end9

end9:                                             ; preds = %true8, %end
  %out.0 = phi double [ %output17, %true8 ], [ %val4, %end ]
  %inv18 = load i64, i64* %inv
  %1 = icmp ne i64 %inv18, 0
  br i1 %1, label %true19, label %end20

true19:                                           ; preds = %end9
  %output22 = fsub double 1.000000e+00, %out.0
  br label %end20

end20:                                            ; preds = %true19, %end9
  %out.1 = phi double [ %output22, %true19 ], [ %out.0, %end9 ]
  %expon23 = load double, double* %expon
  %return24 = fcmp one double %expon23, 1.000000e+00
  br i1 %return24, label %true26, label %end27

true26:                                           ; preds = %end20
  %return30 = call double @"pow@FFF"(double %out.1, double %expon23)
  br label %end27

end27:                                            ; preds = %true26, %end20
  %out.2 = phi double [ %return30, %true26 ], [ %out.1, %end20 ]
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end27, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %out.2, %end27 ]
  ret double %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"abs@VV"(<3 x double>) #0

; Function Attrs: alwaysinline nounwind
define private double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %stats, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <4 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow) #1 {
__llvm_entry:
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = load %nsdata, %nsdata* %stats
  %avg = extractvalue %nsdata %stats3, 3
  %fold4 = load i64, i64* %fold
  %symmetric = extractvalue %nsdata %stats3, 4
  %return6 = call i64 @"and@III"(i64 %fold4, i64 %symmetric)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %true7, label %end8

true7:                                            ; preds = %end
  %output = fmul double %avg, %avg
  br label %end8

end8:                                             ; preds = %true7, %end
  %navg.0 = phi double [ %output, %true7 ], [ %avg, %end ]
  %inv11 = load i64, i64* %inv
  %1 = icmp ne i64 %inv11, 0
  br i1 %1, label %true12, label %end13

true12:                                           ; preds = %end8
  %output15 = fsub double 1.000000e+00, %navg.0
  br label %end13

end13:                                            ; preds = %true12, %end8
  %navg.1 = phi double [ %output15, %true12 ], [ %navg.0, %end8 ]
  %expon16 = load double, double* %expon
  %return17 = fcmp one double %expon16, 1.000000e+00
  br i1 %return17, label %true19, label %end20

true19:                                           ; preds = %end13
  %return23 = call double @"pow@FFF"(double %navg.1, double %expon16)
  br label %end20

end20:                                            ; preds = %true19, %end13
  %navg.2 = phi double [ %return23, %true19 ], [ %navg.1, %end13 ]
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end20, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %navg.2, %end20 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %tgt, %nsdata* %stats, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <4 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow) #1 {
__llvm_entry:
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %tgt3 = load double, double* %tgt
  %fold4 = load i64, i64* %fold
  %stats5 = load %nsdata, %nsdata* %stats
  %symmetric = extractvalue %nsdata %stats5, 4
  %return6 = call i64 @"and@III"(i64 %fold4, i64 %symmetric)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %true7, label %end8

true7:                                            ; preds = %end
  %output = fmul double %tgt3, %tgt3
  br label %end8

end8:                                             ; preds = %true7, %end
  %navg.0 = phi double [ %output, %true7 ], [ %tgt3, %end ]
  %inv11 = load i64, i64* %inv
  %1 = icmp ne i64 %inv11, 0
  br i1 %1, label %true12, label %end13

true12:                                           ; preds = %end8
  %output15 = fsub double 1.000000e+00, %navg.0
  br label %end13

end13:                                            ; preds = %true12, %end8
  %navg.1 = phi double [ %output15, %true12 ], [ %navg.0, %end8 ]
  %expon16 = load double, double* %expon
  %return17 = fcmp one double %expon16, 1.000000e+00
  br i1 %return17, label %true19, label %end20

true19:                                           ; preds = %end13
  %return23 = call double @"pow@FFF"(double %navg.1, double %expon16)
  br label %end20

end20:                                            ; preds = %true19, %end13
  %navg.2 = phi double [ %return23, %true19 ], [ %navg.1, %end13 ]
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end20, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %navg.2, %end20 ]
  ret double %UnifiedRetVal
}

; Function Attrs: nounwind
declare double @"set@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"smooth@FFFF"(double, double, double) #0

; Function Attrs: nounwind
declare double @"lerp@FFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UI"(i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"mul@UU"(<2 x double>, <2 x double>) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UV"(<3 x double>) #0

; Function Attrs: alwaysinline nounwind
define private double @"noise_sine@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @22, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.000000e+00, double* %2
  store double 5.000000e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast4 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast4, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp6 = load <3 x double>, <3 x double>* %pp
  %disp9 = load double, double* %disp
  %dolw10 = load i64, i64* %dolw
  %cast11 = sitofp i64 %dolw10 to double
  %output = fmul double %disp9, %cast11
  %return12 = fcmp one double %output, 0.000000e+00
  br i1 %return12, label %true14, label %end15

true14:                                           ; preds = %end
  %cast17 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output18 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %cast17)
  %dfreq19 = load double, double* %dfreq
  %cast20 = call <3 x double> @"set@VF"(double %dfreq19)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %output18, <3 x double> %cast20)
  store <3 x double> %output21, <3 x double>* %5
  %nwrap_sine = call double @"nwrap_sine@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp23 = load double, double* %disp
  %output26 = fsub double %nwrap_sine, %nsdata.fca.3.extract
  %output27 = fmul double %disp23, %output26
  %output30 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return31 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output30)
  %output32 = call double @"div@FF"(double %output27, double %return31)
  %cast33 = call <3 x double> @"set@VF"(double %output32)
  br label %end15

end15:                                            ; preds = %true14, %end
  %dpl.0 = phi <3 x double> [ %cast33, %true14 ], [ %cast4, %end ]
  %gflow34 = load double, double* %gflow
  %dogw35 = load i64, i64* %dogw
  %cast36 = sitofp i64 %dogw35 to double
  %output37 = fmul double %gflow34, %cast36
  %return38 = fcmp one double %output37, 0.000000e+00
  br i1 %return38, label %true40, label %end41

true40:                                           ; preds = %end15
  %pp43 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp43, <3 x double>* %8
  store double 5.000000e-02, double* %11
  %fngrad_sine = call <3 x double> @"fngrad_sine@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast44 = call <3 x double> @"set@VF"(double %gflow34)
  %output45 = call <3 x double> @"mul@VV"(<3 x double> %cast44, <3 x double> %fngrad_sine)
  br label %end41

end41:                                            ; preds = %true40, %end15
  %dpg.0 = phi <3 x double> [ %output45, %true40 ], [ %cast4, %end15 ]
  %pp46 = load <3 x double>, <3 x double>* %pp
  %accl47 = load i64, i64* %accl
  %cast49 = call <3 x double> @"set@VI"(i64 %accl47)
  %output50 = call <3 x double> @"mul@VV"(<3 x double> %cast49, <3 x double> %dpl.0)
  %accg51 = load i64, i64* %accg
  %cast53 = call <3 x double> @"set@VI"(i64 %accg51)
  %output54 = call <3 x double> @"mul@VV"(<3 x double> %cast53, <3 x double> %dpg.0)
  %output55 = call <3 x double> @"add@VV"(<3 x double> %output50, <3 x double> %output54)
  %output56 = call <3 x double> @"add@VV"(<3 x double> %pp46, <3 x double> %output55)
  store <3 x double> %output56, <3 x double>* %pp
  %output59 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output59, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off62 = load <3 x double>, <3 x double>* %x_off
  %output63 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %x_off62)
  store <3 x double> %output63, <3 x double>* %12
  %nwrap_sine65 = call double @"nwrap_sine@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_sine65, double* %15
  %stats67.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats67.fca.0.gep
  %stats67.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats67.fca.1.gep
  %stats67.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats67.fca.2.gep
  %stats67.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats67.fca.3.gep
  %stats67.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats67.fca.4.gep
  %inv68 = load i64, i64* %inv
  store i64 %inv68, i64* %17
  %fold69 = load i64, i64* %fold
  store i64 %fold69, i64* %18
  %expon70 = load double, double* %expon
  store double %expon70, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %31
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %32
  %expon74 = load double, double* %expon
  store double %expon74, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw75 = load double, double* %fw
  %disp76 = load double, double* %disp
  %dfreq77 = load double, double* %dfreq
  %output78 = fmul double %disp76, %dfreq77
  %return79 = call double @"abs@FF"(double %output78)
  %output80 = fadd double %return79, 1.000000e+00
  %output81 = fmul double %fw75, %output80
  %x_avg83 = load double, double* %x_avg
  %return85 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output81)
  %return86 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg83, double %return85)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end41, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return86, %end41 ]
  ret double %UnifiedRetVal
}

; Function Attrs: nounwind
declare <3 x double> @"lerp@VVVF"(<3 x double>, <3 x double>, double) #2

; Function Attrs: alwaysinline nounwind
define private double @"noise_value_fast@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0), i8** %0
  %return4 = call double @"neg@FF"(double 1.004310e+00)
  store double %return4, double* %1
  store double 1.029750e+00, double* %2
  store double 4.937390e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast5 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast5, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp7 = load <3 x double>, <3 x double>* %pp
  %disp10 = load double, double* %disp
  %dolw11 = load i64, i64* %dolw
  %cast12 = sitofp i64 %dolw11 to double
  %output = fmul double %disp10, %cast12
  %return13 = fcmp one double %output, 0.000000e+00
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  %cast18 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output19 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %cast18)
  %dfreq20 = load double, double* %dfreq
  %cast21 = call <3 x double> @"set@VF"(double %dfreq20)
  %output22 = call <3 x double> @"mul@VV"(<3 x double> %output19, <3 x double> %cast21)
  store <3 x double> %output22, <3 x double>* %5
  %nwrap_value_fast = call double @"nwrap_value_fast@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp24 = load double, double* %disp
  %output27 = fsub double %nwrap_value_fast, %nsdata.fca.3.extract
  %output28 = fmul double %disp24, %output27
  %output31 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return32 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output31)
  %output33 = call double @"div@FF"(double %output28, double %return32)
  %cast34 = call <3 x double> @"set@VF"(double %output33)
  br label %end16

end16:                                            ; preds = %true15, %end
  %dpl.0 = phi <3 x double> [ %cast34, %true15 ], [ %cast5, %end ]
  %gflow35 = load double, double* %gflow
  %dogw36 = load i64, i64* %dogw
  %cast37 = sitofp i64 %dogw36 to double
  %output38 = fmul double %gflow35, %cast37
  %return39 = fcmp one double %output38, 0.000000e+00
  br i1 %return39, label %true41, label %end42

true41:                                           ; preds = %end16
  %pp44 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp44, <3 x double>* %8
  store double 5.000000e-02, double* %11
  %fngrad_value_fast = call <3 x double> @"fngrad_value_fast@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast45 = call <3 x double> @"set@VF"(double %gflow35)
  %output46 = call <3 x double> @"mul@VV"(<3 x double> %cast45, <3 x double> %fngrad_value_fast)
  br label %end42

end42:                                            ; preds = %true41, %end16
  %dpg.0 = phi <3 x double> [ %output46, %true41 ], [ %cast5, %end16 ]
  %pp47 = load <3 x double>, <3 x double>* %pp
  %accl48 = load i64, i64* %accl
  %cast50 = call <3 x double> @"set@VI"(i64 %accl48)
  %output51 = call <3 x double> @"mul@VV"(<3 x double> %cast50, <3 x double> %dpl.0)
  %accg52 = load i64, i64* %accg
  %cast54 = call <3 x double> @"set@VI"(i64 %accg52)
  %output55 = call <3 x double> @"mul@VV"(<3 x double> %cast54, <3 x double> %dpg.0)
  %output56 = call <3 x double> @"add@VV"(<3 x double> %output51, <3 x double> %output55)
  %output57 = call <3 x double> @"add@VV"(<3 x double> %pp47, <3 x double> %output56)
  store <3 x double> %output57, <3 x double>* %pp
  %output60 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output60, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off63 = load <3 x double>, <3 x double>* %x_off
  %output64 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %x_off63)
  store <3 x double> %output64, <3 x double>* %12
  %nwrap_value_fast66 = call double @"nwrap_value_fast@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_value_fast66, double* %15
  %stats68.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats68.fca.0.gep
  %stats68.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats68.fca.1.gep
  %stats68.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats68.fca.2.gep
  %stats68.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats68.fca.3.gep
  %stats68.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats68.fca.4.gep
  %inv69 = load i64, i64* %inv
  store i64 %inv69, i64* %17
  %fold70 = load i64, i64* %fold
  store i64 %fold70, i64* %18
  %expon71 = load double, double* %expon
  store double %expon71, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats72.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats72.fca.0.gep
  %stats72.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats72.fca.1.gep
  %stats72.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats72.fca.2.gep
  %stats72.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats72.fca.3.gep
  %stats72.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats72.fca.4.gep
  %inv73 = load i64, i64* %inv
  store i64 %inv73, i64* %31
  %fold74 = load i64, i64* %fold
  store i64 %fold74, i64* %32
  %expon75 = load double, double* %expon
  store double %expon75, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw76 = load double, double* %fw
  %disp77 = load double, double* %disp
  %dfreq78 = load double, double* %dfreq
  %output79 = fmul double %disp77, %dfreq78
  %return80 = call double @"abs@FF"(double %output79)
  %output81 = fadd double %return80, 1.000000e+00
  %output82 = fmul double %fw76, %output81
  %x_avg84 = load double, double* %x_avg
  %return86 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output82)
  %return87 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg84, double %return86)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end42, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return87, %end42 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_pvalue_fast@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i64 0, i64 0), i8** %0
  %return4 = call double @"neg@FF"(double 7.618160e-01)
  store double %return4, double* %1
  store double 8.163580e-01, double* %2
  store double 4.826150e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast5 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast5, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp7 = load <3 x double>, <3 x double>* %pp
  %disp10 = load double, double* %disp
  %dolw11 = load i64, i64* %dolw
  %cast12 = sitofp i64 %dolw11 to double
  %output = fmul double %disp10, %cast12
  %return13 = fcmp one double %output, 0.000000e+00
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  %cast18 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output19 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %cast18)
  %dfreq20 = load double, double* %dfreq
  %cast21 = call <3 x double> @"set@VF"(double %dfreq20)
  %output22 = call <3 x double> @"mul@VV"(<3 x double> %output19, <3 x double> %cast21)
  store <3 x double> %output22, <3 x double>* %5
  %per24 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per24, <3 x double>* %6
  %nwrap_pvalue_fast = call double @"nwrap_pvalue_fast@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp25 = load double, double* %disp
  %output28 = fsub double %nwrap_pvalue_fast, %nsdata.fca.3.extract
  %output29 = fmul double %disp25, %output28
  %output32 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return33 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output32)
  %output34 = call double @"div@FF"(double %output29, double %return33)
  %cast35 = call <3 x double> @"set@VF"(double %output34)
  br label %end16

end16:                                            ; preds = %true15, %end
  %dpl.0 = phi <3 x double> [ %cast35, %true15 ], [ %cast5, %end ]
  %gflow36 = load double, double* %gflow
  %dogw37 = load i64, i64* %dogw
  %cast38 = sitofp i64 %dogw37 to double
  %output39 = fmul double %gflow36, %cast38
  %return40 = fcmp one double %output39, 0.000000e+00
  br i1 %return40, label %true42, label %end43

true42:                                           ; preds = %end16
  %pp45 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp45, <3 x double>* %8
  %per46 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per46, <3 x double>* %9
  store double 5.000000e-02, double* %11
  %fngrad_pvalue_fast = call <3 x double> @"fngrad_pvalue_fast@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast47 = call <3 x double> @"set@VF"(double %gflow36)
  %output48 = call <3 x double> @"mul@VV"(<3 x double> %cast47, <3 x double> %fngrad_pvalue_fast)
  br label %end43

end43:                                            ; preds = %true42, %end16
  %dpg.0 = phi <3 x double> [ %output48, %true42 ], [ %cast5, %end16 ]
  %pp49 = load <3 x double>, <3 x double>* %pp
  %accl50 = load i64, i64* %accl
  %cast52 = call <3 x double> @"set@VI"(i64 %accl50)
  %output53 = call <3 x double> @"mul@VV"(<3 x double> %cast52, <3 x double> %dpl.0)
  %accg54 = load i64, i64* %accg
  %cast56 = call <3 x double> @"set@VI"(i64 %accg54)
  %output57 = call <3 x double> @"mul@VV"(<3 x double> %cast56, <3 x double> %dpg.0)
  %output58 = call <3 x double> @"add@VV"(<3 x double> %output53, <3 x double> %output57)
  %output59 = call <3 x double> @"add@VV"(<3 x double> %pp49, <3 x double> %output58)
  store <3 x double> %output59, <3 x double>* %pp
  %output62 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output62, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off65 = load <3 x double>, <3 x double>* %x_off
  %output66 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %x_off65)
  store <3 x double> %output66, <3 x double>* %12
  %per68 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per68, <3 x double>* %13
  %nwrap_pvalue_fast69 = call double @"nwrap_pvalue_fast@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_pvalue_fast69, double* %15
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %17
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %18
  %expon74 = load double, double* %expon
  store double %expon74, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats75.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats75.fca.0.gep
  %stats75.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats75.fca.1.gep
  %stats75.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats75.fca.2.gep
  %stats75.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats75.fca.3.gep
  %stats75.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats75.fca.4.gep
  %inv76 = load i64, i64* %inv
  store i64 %inv76, i64* %31
  %fold77 = load i64, i64* %fold
  store i64 %fold77, i64* %32
  %expon78 = load double, double* %expon
  store double %expon78, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw79 = load double, double* %fw
  %disp80 = load double, double* %disp
  %dfreq81 = load double, double* %dfreq
  %output82 = fmul double %disp80, %dfreq81
  %return83 = call double @"abs@FF"(double %output82)
  %output84 = fadd double %return83, 1.000000e+00
  %output85 = fmul double %fw79, %output84
  %x_avg87 = load double, double* %x_avg
  %return89 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output85)
  %return90 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg87, double %return89)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end43, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return90, %end43 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_sparse@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), i8** %0
  %return4 = call double @"neg@FF"(double 2.343510e+00)
  store double %return4, double* %1
  store double 2.438430e+00, double* %2
  store double 4.960900e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast5 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast5, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp7 = load <3 x double>, <3 x double>* %pp
  %disp10 = load double, double* %disp
  %dolw11 = load i64, i64* %dolw
  %cast12 = sitofp i64 %dolw11 to double
  %output = fmul double %disp10, %cast12
  %return13 = fcmp one double %output, 0.000000e+00
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  %cast18 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output19 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %cast18)
  %dfreq20 = load double, double* %dfreq
  %cast21 = call <3 x double> @"set@VF"(double %dfreq20)
  %output22 = call <3 x double> @"mul@VV"(<3 x double> %output19, <3 x double> %cast21)
  store <3 x double> %output22, <3 x double>* %5
  %nwrap_sparse = call double @"nwrap_sparse@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp24 = load double, double* %disp
  %output27 = fsub double %nwrap_sparse, %nsdata.fca.3.extract
  %output28 = fmul double %disp24, %output27
  %output31 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return32 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output31)
  %output33 = call double @"div@FF"(double %output28, double %return32)
  %cast34 = call <3 x double> @"set@VF"(double %output33)
  br label %end16

end16:                                            ; preds = %true15, %end
  %dpl.0 = phi <3 x double> [ %cast34, %true15 ], [ %cast5, %end ]
  %gflow35 = load double, double* %gflow
  %dogw36 = load i64, i64* %dogw
  %cast37 = sitofp i64 %dogw36 to double
  %output38 = fmul double %gflow35, %cast37
  %return39 = fcmp one double %output38, 0.000000e+00
  br i1 %return39, label %true41, label %end42

true41:                                           ; preds = %end16
  %pp44 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp44, <3 x double>* %8
  store double 5.000000e-02, double* %11
  %fngrad_sparse = call <3 x double> @"fngrad_sparse@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast45 = call <3 x double> @"set@VF"(double %gflow35)
  %output46 = call <3 x double> @"mul@VV"(<3 x double> %cast45, <3 x double> %fngrad_sparse)
  br label %end42

end42:                                            ; preds = %true41, %end16
  %dpg.0 = phi <3 x double> [ %output46, %true41 ], [ %cast5, %end16 ]
  %pp47 = load <3 x double>, <3 x double>* %pp
  %accl48 = load i64, i64* %accl
  %cast50 = call <3 x double> @"set@VI"(i64 %accl48)
  %output51 = call <3 x double> @"mul@VV"(<3 x double> %cast50, <3 x double> %dpl.0)
  %accg52 = load i64, i64* %accg
  %cast54 = call <3 x double> @"set@VI"(i64 %accg52)
  %output55 = call <3 x double> @"mul@VV"(<3 x double> %cast54, <3 x double> %dpg.0)
  %output56 = call <3 x double> @"add@VV"(<3 x double> %output51, <3 x double> %output55)
  %output57 = call <3 x double> @"add@VV"(<3 x double> %pp47, <3 x double> %output56)
  store <3 x double> %output57, <3 x double>* %pp
  %output60 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output60, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off63 = load <3 x double>, <3 x double>* %x_off
  %output64 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %x_off63)
  store <3 x double> %output64, <3 x double>* %12
  %nwrap_sparse66 = call double @"nwrap_sparse@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_sparse66, double* %15
  %stats68.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats68.fca.0.gep
  %stats68.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats68.fca.1.gep
  %stats68.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats68.fca.2.gep
  %stats68.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats68.fca.3.gep
  %stats68.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats68.fca.4.gep
  %inv69 = load i64, i64* %inv
  store i64 %inv69, i64* %17
  %fold70 = load i64, i64* %fold
  store i64 %fold70, i64* %18
  %expon71 = load double, double* %expon
  store double %expon71, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats72.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats72.fca.0.gep
  %stats72.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats72.fca.1.gep
  %stats72.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats72.fca.2.gep
  %stats72.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats72.fca.3.gep
  %stats72.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats72.fca.4.gep
  %inv73 = load i64, i64* %inv
  store i64 %inv73, i64* %31
  %fold74 = load i64, i64* %fold
  store i64 %fold74, i64* %32
  %expon75 = load double, double* %expon
  store double %expon75, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw76 = load double, double* %fw
  %disp77 = load double, double* %disp
  %dfreq78 = load double, double* %dfreq
  %output79 = fmul double %disp77, %dfreq78
  %return80 = call double @"abs@FF"(double %output79)
  %output81 = fadd double %return80, 1.000000e+00
  %output82 = fmul double %fw76, %output81
  %x_avg84 = load double, double* %x_avg
  %return86 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output82)
  %return87 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg84, double %return86)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end42, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return87, %end42 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_psparse@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0), i8** %0
  %return4 = call double @"neg@FF"(double 8.428030e-01)
  store double %return4, double* %1
  store double 1.164690e+00, double* %2
  store double 4.932960e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast5 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast5, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp7 = load <3 x double>, <3 x double>* %pp
  %disp10 = load double, double* %disp
  %dolw11 = load i64, i64* %dolw
  %cast12 = sitofp i64 %dolw11 to double
  %output = fmul double %disp10, %cast12
  %return13 = fcmp one double %output, 0.000000e+00
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  %cast18 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output19 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %cast18)
  %dfreq20 = load double, double* %dfreq
  %cast21 = call <3 x double> @"set@VF"(double %dfreq20)
  %output22 = call <3 x double> @"mul@VV"(<3 x double> %output19, <3 x double> %cast21)
  store <3 x double> %output22, <3 x double>* %5
  %per24 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per24, <3 x double>* %6
  %nwrap_psparse = call double @"nwrap_psparse@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp25 = load double, double* %disp
  %output28 = fsub double %nwrap_psparse, %nsdata.fca.3.extract
  %output29 = fmul double %disp25, %output28
  %output32 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return33 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output32)
  %output34 = call double @"div@FF"(double %output29, double %return33)
  %cast35 = call <3 x double> @"set@VF"(double %output34)
  br label %end16

end16:                                            ; preds = %true15, %end
  %dpl.0 = phi <3 x double> [ %cast35, %true15 ], [ %cast5, %end ]
  %gflow36 = load double, double* %gflow
  %dogw37 = load i64, i64* %dogw
  %cast38 = sitofp i64 %dogw37 to double
  %output39 = fmul double %gflow36, %cast38
  %return40 = fcmp one double %output39, 0.000000e+00
  br i1 %return40, label %true42, label %end43

true42:                                           ; preds = %end16
  %pp45 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp45, <3 x double>* %8
  %per46 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per46, <3 x double>* %9
  store double 5.000000e-02, double* %11
  %fngrad_psparse = call <3 x double> @"fngrad_psparse@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast47 = call <3 x double> @"set@VF"(double %gflow36)
  %output48 = call <3 x double> @"mul@VV"(<3 x double> %cast47, <3 x double> %fngrad_psparse)
  br label %end43

end43:                                            ; preds = %true42, %end16
  %dpg.0 = phi <3 x double> [ %output48, %true42 ], [ %cast5, %end16 ]
  %pp49 = load <3 x double>, <3 x double>* %pp
  %accl50 = load i64, i64* %accl
  %cast52 = call <3 x double> @"set@VI"(i64 %accl50)
  %output53 = call <3 x double> @"mul@VV"(<3 x double> %cast52, <3 x double> %dpl.0)
  %accg54 = load i64, i64* %accg
  %cast56 = call <3 x double> @"set@VI"(i64 %accg54)
  %output57 = call <3 x double> @"mul@VV"(<3 x double> %cast56, <3 x double> %dpg.0)
  %output58 = call <3 x double> @"add@VV"(<3 x double> %output53, <3 x double> %output57)
  %output59 = call <3 x double> @"add@VV"(<3 x double> %pp49, <3 x double> %output58)
  store <3 x double> %output59, <3 x double>* %pp
  %output62 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output62, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off65 = load <3 x double>, <3 x double>* %x_off
  %output66 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %x_off65)
  store <3 x double> %output66, <3 x double>* %12
  %per68 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per68, <3 x double>* %13
  %nwrap_psparse69 = call double @"nwrap_psparse@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_psparse69, double* %15
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %17
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %18
  %expon74 = load double, double* %expon
  store double %expon74, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats75.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats75.fca.0.gep
  %stats75.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats75.fca.1.gep
  %stats75.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats75.fca.2.gep
  %stats75.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats75.fca.3.gep
  %stats75.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats75.fca.4.gep
  %inv76 = load i64, i64* %inv
  store i64 %inv76, i64* %31
  %fold77 = load i64, i64* %fold
  store i64 %fold77, i64* %32
  %expon78 = load double, double* %expon
  store double %expon78, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw79 = load double, double* %fw
  %disp80 = load double, double* %disp
  %dfreq81 = load double, double* %dfreq
  %output82 = fmul double %disp80, %dfreq81
  %return83 = call double @"abs@FF"(double %output82)
  %output84 = fadd double %return83, 1.000000e+00
  %output85 = fmul double %fw79, %output84
  %x_avg87 = load double, double* %x_avg
  %return89 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output85)
  %return90 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg87, double %return89)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end43, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return90, %end43 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_alligator@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @9, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 9.937320e-01, double* %2
  store double 1.179510e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast4 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast4, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp6 = load <3 x double>, <3 x double>* %pp
  %disp9 = load double, double* %disp
  %dolw10 = load i64, i64* %dolw
  %cast11 = sitofp i64 %dolw10 to double
  %output = fmul double %disp9, %cast11
  %return12 = fcmp one double %output, 0.000000e+00
  br i1 %return12, label %true14, label %end15

true14:                                           ; preds = %end
  %cast17 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output18 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %cast17)
  %dfreq19 = load double, double* %dfreq
  %cast20 = call <3 x double> @"set@VF"(double %dfreq19)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %output18, <3 x double> %cast20)
  store <3 x double> %output21, <3 x double>* %5
  %nwrap_alligator = call double @"nwrap_alligator@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp23 = load double, double* %disp
  %output26 = fsub double %nwrap_alligator, %nsdata.fca.3.extract
  %output27 = fmul double %disp23, %output26
  %output30 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return31 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output30)
  %output32 = call double @"div@FF"(double %output27, double %return31)
  %cast33 = call <3 x double> @"set@VF"(double %output32)
  br label %end15

end15:                                            ; preds = %true14, %end
  %dpl.0 = phi <3 x double> [ %cast33, %true14 ], [ %cast4, %end ]
  %gflow34 = load double, double* %gflow
  %dogw35 = load i64, i64* %dogw
  %cast36 = sitofp i64 %dogw35 to double
  %output37 = fmul double %gflow34, %cast36
  %return38 = fcmp one double %output37, 0.000000e+00
  br i1 %return38, label %true40, label %end41

true40:                                           ; preds = %end15
  %pp43 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp43, <3 x double>* %8
  store double 5.000000e-02, double* %11
  %fngrad_alligator = call <3 x double> @"fngrad_alligator@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast44 = call <3 x double> @"set@VF"(double %gflow34)
  %output45 = call <3 x double> @"mul@VV"(<3 x double> %cast44, <3 x double> %fngrad_alligator)
  br label %end41

end41:                                            ; preds = %true40, %end15
  %dpg.0 = phi <3 x double> [ %output45, %true40 ], [ %cast4, %end15 ]
  %pp46 = load <3 x double>, <3 x double>* %pp
  %accl47 = load i64, i64* %accl
  %cast49 = call <3 x double> @"set@VI"(i64 %accl47)
  %output50 = call <3 x double> @"mul@VV"(<3 x double> %cast49, <3 x double> %dpl.0)
  %accg51 = load i64, i64* %accg
  %cast53 = call <3 x double> @"set@VI"(i64 %accg51)
  %output54 = call <3 x double> @"mul@VV"(<3 x double> %cast53, <3 x double> %dpg.0)
  %output55 = call <3 x double> @"add@VV"(<3 x double> %output50, <3 x double> %output54)
  %output56 = call <3 x double> @"add@VV"(<3 x double> %pp46, <3 x double> %output55)
  store <3 x double> %output56, <3 x double>* %pp
  %output59 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output59, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off62 = load <3 x double>, <3 x double>* %x_off
  %output63 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %x_off62)
  store <3 x double> %output63, <3 x double>* %12
  %nwrap_alligator65 = call double @"nwrap_alligator@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_alligator65, double* %15
  %stats67.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats67.fca.0.gep
  %stats67.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats67.fca.1.gep
  %stats67.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats67.fca.2.gep
  %stats67.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats67.fca.3.gep
  %stats67.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats67.fca.4.gep
  %inv68 = load i64, i64* %inv
  store i64 %inv68, i64* %17
  %fold69 = load i64, i64* %fold
  store i64 %fold69, i64* %18
  %expon70 = load double, double* %expon
  store double %expon70, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %31
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %32
  %expon74 = load double, double* %expon
  store double %expon74, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw75 = load double, double* %fw
  %disp76 = load double, double* %disp
  %dfreq77 = load double, double* %dfreq
  %output78 = fmul double %disp76, %dfreq77
  %return79 = call double @"abs@FF"(double %output78)
  %output80 = fadd double %return79, 1.000000e+00
  %output81 = fmul double %fw75, %output80
  %x_avg83 = load double, double* %x_avg
  %return85 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output81)
  %return86 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg83, double %return85)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end41, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return86, %end41 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_palligator@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @10, i64 0, i64 0), i8** %0
  %return4 = call double @"neg@FF"(double 2.500000e-03)
  store double %return4, double* %1
  store double 8.173980e-01, double* %2
  store double 1.755280e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast5 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast5, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp7 = load <3 x double>, <3 x double>* %pp
  %disp10 = load double, double* %disp
  %dolw11 = load i64, i64* %dolw
  %cast12 = sitofp i64 %dolw11 to double
  %output = fmul double %disp10, %cast12
  %return13 = fcmp one double %output, 0.000000e+00
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  %cast18 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output19 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %cast18)
  %dfreq20 = load double, double* %dfreq
  %cast21 = call <3 x double> @"set@VF"(double %dfreq20)
  %output22 = call <3 x double> @"mul@VV"(<3 x double> %output19, <3 x double> %cast21)
  store <3 x double> %output22, <3 x double>* %5
  %per24 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per24, <3 x double>* %6
  %nwrap_palligator = call double @"nwrap_palligator@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp25 = load double, double* %disp
  %output28 = fsub double %nwrap_palligator, %nsdata.fca.3.extract
  %output29 = fmul double %disp25, %output28
  %output32 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return33 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output32)
  %output34 = call double @"div@FF"(double %output29, double %return33)
  %cast35 = call <3 x double> @"set@VF"(double %output34)
  br label %end16

end16:                                            ; preds = %true15, %end
  %dpl.0 = phi <3 x double> [ %cast35, %true15 ], [ %cast5, %end ]
  %gflow36 = load double, double* %gflow
  %dogw37 = load i64, i64* %dogw
  %cast38 = sitofp i64 %dogw37 to double
  %output39 = fmul double %gflow36, %cast38
  %return40 = fcmp one double %output39, 0.000000e+00
  br i1 %return40, label %true42, label %end43

true42:                                           ; preds = %end16
  %pp45 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp45, <3 x double>* %8
  %per46 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per46, <3 x double>* %9
  store double 5.000000e-02, double* %11
  %fngrad_palligator = call <3 x double> @"fngrad_palligator@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast47 = call <3 x double> @"set@VF"(double %gflow36)
  %output48 = call <3 x double> @"mul@VV"(<3 x double> %cast47, <3 x double> %fngrad_palligator)
  br label %end43

end43:                                            ; preds = %true42, %end16
  %dpg.0 = phi <3 x double> [ %output48, %true42 ], [ %cast5, %end16 ]
  %pp49 = load <3 x double>, <3 x double>* %pp
  %accl50 = load i64, i64* %accl
  %cast52 = call <3 x double> @"set@VI"(i64 %accl50)
  %output53 = call <3 x double> @"mul@VV"(<3 x double> %cast52, <3 x double> %dpl.0)
  %accg54 = load i64, i64* %accg
  %cast56 = call <3 x double> @"set@VI"(i64 %accg54)
  %output57 = call <3 x double> @"mul@VV"(<3 x double> %cast56, <3 x double> %dpg.0)
  %output58 = call <3 x double> @"add@VV"(<3 x double> %output53, <3 x double> %output57)
  %output59 = call <3 x double> @"add@VV"(<3 x double> %pp49, <3 x double> %output58)
  store <3 x double> %output59, <3 x double>* %pp
  %output62 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output62, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off65 = load <3 x double>, <3 x double>* %x_off
  %output66 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %x_off65)
  store <3 x double> %output66, <3 x double>* %12
  %per68 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per68, <3 x double>* %13
  %nwrap_palligator69 = call double @"nwrap_palligator@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_palligator69, double* %15
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %17
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %18
  %expon74 = load double, double* %expon
  store double %expon74, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats75.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats75.fca.0.gep
  %stats75.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats75.fca.1.gep
  %stats75.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats75.fca.2.gep
  %stats75.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats75.fca.3.gep
  %stats75.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats75.fca.4.gep
  %inv76 = load i64, i64* %inv
  store i64 %inv76, i64* %31
  %fold77 = load i64, i64* %fold
  store i64 %fold77, i64* %32
  %expon78 = load double, double* %expon
  store double %expon78, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw79 = load double, double* %fw
  %disp80 = load double, double* %disp
  %dfreq81 = load double, double* %dfreq
  %output82 = fmul double %disp80, %dfreq81
  %return83 = call double @"abs@FF"(double %output82)
  %output84 = fadd double %return83, 1.000000e+00
  %output85 = fmul double %fw79, %output84
  %x_avg87 = load double, double* %x_avg
  %return89 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output85)
  %return90 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg87, double %return89)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end43, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return90, %end43 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_perlin@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8** %0
  store double 8.325870e-02, double* %1
  store double 9.203370e-01, double* %2
  store double 4.977050e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast4 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast4, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp6 = load <3 x double>, <3 x double>* %pp
  %disp9 = load double, double* %disp
  %dolw10 = load i64, i64* %dolw
  %cast11 = sitofp i64 %dolw10 to double
  %output = fmul double %disp9, %cast11
  %return12 = fcmp one double %output, 0.000000e+00
  br i1 %return12, label %true14, label %end15

true14:                                           ; preds = %end
  %cast17 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output18 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %cast17)
  %dfreq19 = load double, double* %dfreq
  %cast20 = call <3 x double> @"set@VF"(double %dfreq19)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %output18, <3 x double> %cast20)
  store <3 x double> %output21, <3 x double>* %5
  %nwrap_perlin = call double @"nwrap_perlin@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp23 = load double, double* %disp
  %output26 = fsub double %nwrap_perlin, %nsdata.fca.3.extract
  %output27 = fmul double %disp23, %output26
  %output30 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return31 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output30)
  %output32 = call double @"div@FF"(double %output27, double %return31)
  %cast33 = call <3 x double> @"set@VF"(double %output32)
  br label %end15

end15:                                            ; preds = %true14, %end
  %dpl.0 = phi <3 x double> [ %cast33, %true14 ], [ %cast4, %end ]
  %gflow34 = load double, double* %gflow
  %dogw35 = load i64, i64* %dogw
  %cast36 = sitofp i64 %dogw35 to double
  %output37 = fmul double %gflow34, %cast36
  %return38 = fcmp one double %output37, 0.000000e+00
  br i1 %return38, label %true40, label %end41

true40:                                           ; preds = %end15
  %pp43 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp43, <3 x double>* %8
  store double 5.000000e-02, double* %11
  %fngrad_perlin = call <3 x double> @"fngrad_perlin@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast44 = call <3 x double> @"set@VF"(double %gflow34)
  %output45 = call <3 x double> @"mul@VV"(<3 x double> %cast44, <3 x double> %fngrad_perlin)
  br label %end41

end41:                                            ; preds = %true40, %end15
  %dpg.0 = phi <3 x double> [ %output45, %true40 ], [ %cast4, %end15 ]
  %pp46 = load <3 x double>, <3 x double>* %pp
  %accl47 = load i64, i64* %accl
  %cast49 = call <3 x double> @"set@VI"(i64 %accl47)
  %output50 = call <3 x double> @"mul@VV"(<3 x double> %cast49, <3 x double> %dpl.0)
  %accg51 = load i64, i64* %accg
  %cast53 = call <3 x double> @"set@VI"(i64 %accg51)
  %output54 = call <3 x double> @"mul@VV"(<3 x double> %cast53, <3 x double> %dpg.0)
  %output55 = call <3 x double> @"add@VV"(<3 x double> %output50, <3 x double> %output54)
  %output56 = call <3 x double> @"add@VV"(<3 x double> %pp46, <3 x double> %output55)
  store <3 x double> %output56, <3 x double>* %pp
  %output59 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output59, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off62 = load <3 x double>, <3 x double>* %x_off
  %output63 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %x_off62)
  store <3 x double> %output63, <3 x double>* %12
  %nwrap_perlin65 = call double @"nwrap_perlin@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_perlin65, double* %15
  %stats67.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats67.fca.0.gep
  %stats67.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats67.fca.1.gep
  %stats67.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats67.fca.2.gep
  %stats67.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats67.fca.3.gep
  %stats67.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats67.fca.4.gep
  %inv68 = load i64, i64* %inv
  store i64 %inv68, i64* %17
  %fold69 = load i64, i64* %fold
  store i64 %fold69, i64* %18
  %expon70 = load double, double* %expon
  store double %expon70, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %31
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %32
  %expon74 = load double, double* %expon
  store double %expon74, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw75 = load double, double* %fw
  %disp76 = load double, double* %disp
  %dfreq77 = load double, double* %dfreq
  %output78 = fmul double %disp76, %dfreq77
  %return79 = call double @"abs@FF"(double %output78)
  %output80 = fadd double %return79, 1.000000e+00
  %output81 = fmul double %fw75, %output80
  %x_avg83 = load double, double* %x_avg
  %return85 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output81)
  %return86 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg83, double %return85)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end41, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return86, %end41 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_pperlin@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i8** %0
  store double 7.776290e-02, double* %1
  store double 9.117340e-01, double* %2
  store double 5.060500e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast4 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast4, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp6 = load <3 x double>, <3 x double>* %pp
  %disp9 = load double, double* %disp
  %dolw10 = load i64, i64* %dolw
  %cast11 = sitofp i64 %dolw10 to double
  %output = fmul double %disp9, %cast11
  %return12 = fcmp one double %output, 0.000000e+00
  br i1 %return12, label %true14, label %end15

true14:                                           ; preds = %end
  %cast17 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output18 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %cast17)
  %dfreq19 = load double, double* %dfreq
  %cast20 = call <3 x double> @"set@VF"(double %dfreq19)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %output18, <3 x double> %cast20)
  store <3 x double> %output21, <3 x double>* %5
  %per23 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per23, <3 x double>* %6
  %nwrap_pperlin = call double @"nwrap_pperlin@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp24 = load double, double* %disp
  %output27 = fsub double %nwrap_pperlin, %nsdata.fca.3.extract
  %output28 = fmul double %disp24, %output27
  %output31 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return32 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output31)
  %output33 = call double @"div@FF"(double %output28, double %return32)
  %cast34 = call <3 x double> @"set@VF"(double %output33)
  br label %end15

end15:                                            ; preds = %true14, %end
  %dpl.0 = phi <3 x double> [ %cast34, %true14 ], [ %cast4, %end ]
  %gflow35 = load double, double* %gflow
  %dogw36 = load i64, i64* %dogw
  %cast37 = sitofp i64 %dogw36 to double
  %output38 = fmul double %gflow35, %cast37
  %return39 = fcmp one double %output38, 0.000000e+00
  br i1 %return39, label %true41, label %end42

true41:                                           ; preds = %end15
  %pp44 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp44, <3 x double>* %8
  %per45 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per45, <3 x double>* %9
  store double 5.000000e-02, double* %11
  %fngrad_pperlin = call <3 x double> @"fngrad_pperlin@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast46 = call <3 x double> @"set@VF"(double %gflow35)
  %output47 = call <3 x double> @"mul@VV"(<3 x double> %cast46, <3 x double> %fngrad_pperlin)
  br label %end42

end42:                                            ; preds = %true41, %end15
  %dpg.0 = phi <3 x double> [ %output47, %true41 ], [ %cast4, %end15 ]
  %pp48 = load <3 x double>, <3 x double>* %pp
  %accl49 = load i64, i64* %accl
  %cast51 = call <3 x double> @"set@VI"(i64 %accl49)
  %output52 = call <3 x double> @"mul@VV"(<3 x double> %cast51, <3 x double> %dpl.0)
  %accg53 = load i64, i64* %accg
  %cast55 = call <3 x double> @"set@VI"(i64 %accg53)
  %output56 = call <3 x double> @"mul@VV"(<3 x double> %cast55, <3 x double> %dpg.0)
  %output57 = call <3 x double> @"add@VV"(<3 x double> %output52, <3 x double> %output56)
  %output58 = call <3 x double> @"add@VV"(<3 x double> %pp48, <3 x double> %output57)
  store <3 x double> %output58, <3 x double>* %pp
  %output61 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output61, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off64 = load <3 x double>, <3 x double>* %x_off
  %output65 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %x_off64)
  store <3 x double> %output65, <3 x double>* %12
  %per67 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per67, <3 x double>* %13
  %nwrap_pperlin68 = call double @"nwrap_pperlin@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_pperlin68, double* %15
  %stats70.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats70.fca.0.gep
  %stats70.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats70.fca.1.gep
  %stats70.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats70.fca.2.gep
  %stats70.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats70.fca.3.gep
  %stats70.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats70.fca.4.gep
  %inv71 = load i64, i64* %inv
  store i64 %inv71, i64* %17
  %fold72 = load i64, i64* %fold
  store i64 %fold72, i64* %18
  %expon73 = load double, double* %expon
  store double %expon73, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats74.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats74.fca.0.gep
  %stats74.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats74.fca.1.gep
  %stats74.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats74.fca.2.gep
  %stats74.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats74.fca.3.gep
  %stats74.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats74.fca.4.gep
  %inv75 = load i64, i64* %inv
  store i64 %inv75, i64* %31
  %fold76 = load i64, i64* %fold
  store i64 %fold76, i64* %32
  %expon77 = load double, double* %expon
  store double %expon77, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw78 = load double, double* %fw
  %disp79 = load double, double* %disp
  %dfreq80 = load double, double* %dfreq
  %output81 = fmul double %disp79, %dfreq80
  %return82 = call double @"abs@FF"(double %output81)
  %output83 = fadd double %return82, 1.000000e+00
  %output84 = fmul double %fw78, %output83
  %x_avg86 = load double, double* %x_avg
  %return88 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output84)
  %return89 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg86, double %return88)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end42, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return89, %end42 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_flow@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0), i8** %0
  store double 9.726970e-02, double* %1
  store double 8.796630e-01, double* %2
  store double 5.147250e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast4 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast4, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp6 = load <3 x double>, <3 x double>* %pp
  %disp9 = load double, double* %disp
  %dolw10 = load i64, i64* %dolw
  %cast11 = sitofp i64 %dolw10 to double
  %output = fmul double %disp9, %cast11
  %return12 = fcmp one double %output, 0.000000e+00
  br i1 %return12, label %true14, label %end15

true14:                                           ; preds = %end
  %cast17 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output18 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %cast17)
  %dfreq19 = load double, double* %dfreq
  %cast20 = call <3 x double> @"set@VF"(double %dfreq19)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %output18, <3 x double> %cast20)
  store <3 x double> %output21, <3 x double>* %5
  %flow23 = load double, double* %flow
  store double %flow23, double* %7
  %nwrap_flow = call double @"nwrap_flow@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp24 = load double, double* %disp
  %output27 = fsub double %nwrap_flow, %nsdata.fca.3.extract
  %output28 = fmul double %disp24, %output27
  %output31 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return32 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output31)
  %output33 = call double @"div@FF"(double %output28, double %return32)
  %cast34 = call <3 x double> @"set@VF"(double %output33)
  br label %end15

end15:                                            ; preds = %true14, %end
  %dpl.0 = phi <3 x double> [ %cast34, %true14 ], [ %cast4, %end ]
  %gflow35 = load double, double* %gflow
  %dogw36 = load i64, i64* %dogw
  %cast37 = sitofp i64 %dogw36 to double
  %output38 = fmul double %gflow35, %cast37
  %return39 = fcmp one double %output38, 0.000000e+00
  br i1 %return39, label %true41, label %end42

true41:                                           ; preds = %end15
  %pp44 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp44, <3 x double>* %8
  %flow45 = load double, double* %flow
  store double %flow45, double* %10
  store double 5.000000e-02, double* %11
  %fngrad_flow = call <3 x double> @"fngrad_flow@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast46 = call <3 x double> @"set@VF"(double %gflow35)
  %output47 = call <3 x double> @"mul@VV"(<3 x double> %cast46, <3 x double> %fngrad_flow)
  br label %end42

end42:                                            ; preds = %true41, %end15
  %dpg.0 = phi <3 x double> [ %output47, %true41 ], [ %cast4, %end15 ]
  %pp48 = load <3 x double>, <3 x double>* %pp
  %accl49 = load i64, i64* %accl
  %cast51 = call <3 x double> @"set@VI"(i64 %accl49)
  %output52 = call <3 x double> @"mul@VV"(<3 x double> %cast51, <3 x double> %dpl.0)
  %accg53 = load i64, i64* %accg
  %cast55 = call <3 x double> @"set@VI"(i64 %accg53)
  %output56 = call <3 x double> @"mul@VV"(<3 x double> %cast55, <3 x double> %dpg.0)
  %output57 = call <3 x double> @"add@VV"(<3 x double> %output52, <3 x double> %output56)
  %output58 = call <3 x double> @"add@VV"(<3 x double> %pp48, <3 x double> %output57)
  store <3 x double> %output58, <3 x double>* %pp
  %output61 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output61, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off64 = load <3 x double>, <3 x double>* %x_off
  %output65 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %x_off64)
  store <3 x double> %output65, <3 x double>* %12
  %flow67 = load double, double* %flow
  store double %flow67, double* %14
  %nwrap_flow68 = call double @"nwrap_flow@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_flow68, double* %15
  %stats70.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats70.fca.0.gep
  %stats70.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats70.fca.1.gep
  %stats70.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats70.fca.2.gep
  %stats70.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats70.fca.3.gep
  %stats70.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats70.fca.4.gep
  %inv71 = load i64, i64* %inv
  store i64 %inv71, i64* %17
  %fold72 = load i64, i64* %fold
  store i64 %fold72, i64* %18
  %expon73 = load double, double* %expon
  store double %expon73, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats74.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats74.fca.0.gep
  %stats74.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats74.fca.1.gep
  %stats74.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats74.fca.2.gep
  %stats74.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats74.fca.3.gep
  %stats74.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats74.fca.4.gep
  %inv75 = load i64, i64* %inv
  store i64 %inv75, i64* %31
  %fold76 = load i64, i64* %fold
  store i64 %fold76, i64* %32
  %expon77 = load double, double* %expon
  store double %expon77, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw78 = load double, double* %fw
  %disp79 = load double, double* %disp
  %dfreq80 = load double, double* %dfreq
  %output81 = fmul double %disp79, %dfreq80
  %return82 = call double @"abs@FF"(double %output81)
  %output83 = fadd double %return82, 1.000000e+00
  %output84 = fmul double %fw78, %output83
  %x_avg86 = load double, double* %x_avg
  %return88 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output84)
  %return89 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg86, double %return88)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end42, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return89, %end42 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_pflow@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @12, i64 0, i64 0), i8** %0
  store double 9.312730e-02, double* %1
  store double 8.960280e-01, double* %2
  store double 5.065750e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast4 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast4, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp6 = load <3 x double>, <3 x double>* %pp
  %disp9 = load double, double* %disp
  %dolw10 = load i64, i64* %dolw
  %cast11 = sitofp i64 %dolw10 to double
  %output = fmul double %disp9, %cast11
  %return12 = fcmp one double %output, 0.000000e+00
  br i1 %return12, label %true14, label %end15

true14:                                           ; preds = %end
  %cast17 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output18 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %cast17)
  %dfreq19 = load double, double* %dfreq
  %cast20 = call <3 x double> @"set@VF"(double %dfreq19)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %output18, <3 x double> %cast20)
  store <3 x double> %output21, <3 x double>* %5
  %per23 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per23, <3 x double>* %6
  %flow24 = load double, double* %flow
  store double %flow24, double* %7
  %nwrap_pflow = call double @"nwrap_pflow@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp25 = load double, double* %disp
  %output28 = fsub double %nwrap_pflow, %nsdata.fca.3.extract
  %output29 = fmul double %disp25, %output28
  %output32 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return33 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output32)
  %output34 = call double @"div@FF"(double %output29, double %return33)
  %cast35 = call <3 x double> @"set@VF"(double %output34)
  br label %end15

end15:                                            ; preds = %true14, %end
  %dpl.0 = phi <3 x double> [ %cast35, %true14 ], [ %cast4, %end ]
  %gflow36 = load double, double* %gflow
  %dogw37 = load i64, i64* %dogw
  %cast38 = sitofp i64 %dogw37 to double
  %output39 = fmul double %gflow36, %cast38
  %return40 = fcmp one double %output39, 0.000000e+00
  br i1 %return40, label %true42, label %end43

true42:                                           ; preds = %end15
  %pp45 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp45, <3 x double>* %8
  %per46 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per46, <3 x double>* %9
  %flow47 = load double, double* %flow
  store double %flow47, double* %10
  store double 5.000000e-02, double* %11
  %fngrad_pflow = call <3 x double> @"fngrad_pflow@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast48 = call <3 x double> @"set@VF"(double %gflow36)
  %output49 = call <3 x double> @"mul@VV"(<3 x double> %cast48, <3 x double> %fngrad_pflow)
  br label %end43

end43:                                            ; preds = %true42, %end15
  %dpg.0 = phi <3 x double> [ %output49, %true42 ], [ %cast4, %end15 ]
  %pp50 = load <3 x double>, <3 x double>* %pp
  %accl51 = load i64, i64* %accl
  %cast53 = call <3 x double> @"set@VI"(i64 %accl51)
  %output54 = call <3 x double> @"mul@VV"(<3 x double> %cast53, <3 x double> %dpl.0)
  %accg55 = load i64, i64* %accg
  %cast57 = call <3 x double> @"set@VI"(i64 %accg55)
  %output58 = call <3 x double> @"mul@VV"(<3 x double> %cast57, <3 x double> %dpg.0)
  %output59 = call <3 x double> @"add@VV"(<3 x double> %output54, <3 x double> %output58)
  %output60 = call <3 x double> @"add@VV"(<3 x double> %pp50, <3 x double> %output59)
  store <3 x double> %output60, <3 x double>* %pp
  %output63 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output63, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off66 = load <3 x double>, <3 x double>* %x_off
  %output67 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %x_off66)
  store <3 x double> %output67, <3 x double>* %12
  %per69 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per69, <3 x double>* %13
  %flow70 = load double, double* %flow
  store double %flow70, double* %14
  %nwrap_pflow71 = call double @"nwrap_pflow@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_pflow71, double* %15
  %stats73.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats73.fca.0.gep
  %stats73.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats73.fca.1.gep
  %stats73.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats73.fca.2.gep
  %stats73.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats73.fca.3.gep
  %stats73.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats73.fca.4.gep
  %inv74 = load i64, i64* %inv
  store i64 %inv74, i64* %17
  %fold75 = load i64, i64* %fold
  store i64 %fold75, i64* %18
  %expon76 = load double, double* %expon
  store double %expon76, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats77.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats77.fca.0.gep
  %stats77.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats77.fca.1.gep
  %stats77.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats77.fca.2.gep
  %stats77.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats77.fca.3.gep
  %stats77.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats77.fca.4.gep
  %inv78 = load i64, i64* %inv
  store i64 %inv78, i64* %31
  %fold79 = load i64, i64* %fold
  store i64 %fold79, i64* %32
  %expon80 = load double, double* %expon
  store double %expon80, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw81 = load double, double* %fw
  %disp82 = load double, double* %disp
  %dfreq83 = load double, double* %dfreq
  %output84 = fmul double %disp82, %dfreq83
  %return85 = call double @"abs@FF"(double %output84)
  %output86 = fadd double %return85, 1.000000e+00
  %output87 = fmul double %fw81, %output86
  %x_avg89 = load double, double* %x_avg
  %return91 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output87)
  %return92 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg89, double %return91)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end43, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return92, %end43 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_simplex@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i8** %0
  store double 1.530200e-01, double* %1
  store double 8.507840e-01, double* %2
  store double 4.970380e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast4 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast4, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp6 = load <3 x double>, <3 x double>* %pp
  %disp9 = load double, double* %disp
  %dolw10 = load i64, i64* %dolw
  %cast11 = sitofp i64 %dolw10 to double
  %output = fmul double %disp9, %cast11
  %return12 = fcmp one double %output, 0.000000e+00
  br i1 %return12, label %true14, label %end15

true14:                                           ; preds = %end
  %cast17 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output18 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %cast17)
  %dfreq19 = load double, double* %dfreq
  %cast20 = call <3 x double> @"set@VF"(double %dfreq19)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %output18, <3 x double> %cast20)
  store <3 x double> %output21, <3 x double>* %5
  %nwrap_simplex = call double @"nwrap_simplex@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp23 = load double, double* %disp
  %output26 = fsub double %nwrap_simplex, %nsdata.fca.3.extract
  %output27 = fmul double %disp23, %output26
  %output30 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return31 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output30)
  %output32 = call double @"div@FF"(double %output27, double %return31)
  %cast33 = call <3 x double> @"set@VF"(double %output32)
  br label %end15

end15:                                            ; preds = %true14, %end
  %dpl.0 = phi <3 x double> [ %cast33, %true14 ], [ %cast4, %end ]
  %gflow34 = load double, double* %gflow
  %dogw35 = load i64, i64* %dogw
  %cast36 = sitofp i64 %dogw35 to double
  %output37 = fmul double %gflow34, %cast36
  %return38 = fcmp one double %output37, 0.000000e+00
  br i1 %return38, label %true40, label %end41

true40:                                           ; preds = %end15
  %pp43 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp43, <3 x double>* %8
  %fngrad_simplex = call <3 x double> @"fngrad_simplex@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast44 = call <3 x double> @"set@VF"(double %gflow34)
  %output45 = call <3 x double> @"mul@VV"(<3 x double> %cast44, <3 x double> %fngrad_simplex)
  br label %end41

end41:                                            ; preds = %true40, %end15
  %dpg.0 = phi <3 x double> [ %output45, %true40 ], [ %cast4, %end15 ]
  %pp46 = load <3 x double>, <3 x double>* %pp
  %accl47 = load i64, i64* %accl
  %cast49 = call <3 x double> @"set@VI"(i64 %accl47)
  %output50 = call <3 x double> @"mul@VV"(<3 x double> %cast49, <3 x double> %dpl.0)
  %accg51 = load i64, i64* %accg
  %cast53 = call <3 x double> @"set@VI"(i64 %accg51)
  %output54 = call <3 x double> @"mul@VV"(<3 x double> %cast53, <3 x double> %dpg.0)
  %output55 = call <3 x double> @"add@VV"(<3 x double> %output50, <3 x double> %output54)
  %output56 = call <3 x double> @"add@VV"(<3 x double> %pp46, <3 x double> %output55)
  store <3 x double> %output56, <3 x double>* %pp
  %output59 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output59, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off62 = load <3 x double>, <3 x double>* %x_off
  %output63 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %x_off62)
  store <3 x double> %output63, <3 x double>* %12
  %nwrap_simplex65 = call double @"nwrap_simplex@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_simplex65, double* %15
  %stats67.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats67.fca.0.gep
  %stats67.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats67.fca.1.gep
  %stats67.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats67.fca.2.gep
  %stats67.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats67.fca.3.gep
  %stats67.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats67.fca.4.gep
  %inv68 = load i64, i64* %inv
  store i64 %inv68, i64* %17
  %fold69 = load i64, i64* %fold
  store i64 %fold69, i64* %18
  %expon70 = load double, double* %expon
  store double %expon70, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %31
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %32
  %expon74 = load double, double* %expon
  store double %expon74, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw75 = load double, double* %fw
  %disp76 = load double, double* %disp
  %dfreq77 = load double, double* %dfreq
  %output78 = fmul double %disp76, %dfreq77
  %return79 = call double @"abs@FF"(double %output78)
  %output80 = fadd double %return79, 1.000000e+00
  %output81 = fmul double %fw75, %output80
  %x_avg83 = load double, double* %x_avg
  %return85 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output81)
  %return86 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg83, double %return85)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end41, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return86, %end41 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_psimplex@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0), i8** %0
  store double 1.381340e-01, double* %1
  store double 8.661300e-01, double* %2
  store double 4.965790e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast4 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast4, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp6 = load <3 x double>, <3 x double>* %pp
  %disp9 = load double, double* %disp
  %dolw10 = load i64, i64* %dolw
  %cast11 = sitofp i64 %dolw10 to double
  %output = fmul double %disp9, %cast11
  %return12 = fcmp one double %output, 0.000000e+00
  br i1 %return12, label %true14, label %end15

true14:                                           ; preds = %end
  %cast17 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output18 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %cast17)
  %dfreq19 = load double, double* %dfreq
  %cast20 = call <3 x double> @"set@VF"(double %dfreq19)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %output18, <3 x double> %cast20)
  store <3 x double> %output21, <3 x double>* %5
  %per23 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per23, <3 x double>* %6
  %nwrap_psimplex = call double @"nwrap_psimplex@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp24 = load double, double* %disp
  %output27 = fsub double %nwrap_psimplex, %nsdata.fca.3.extract
  %output28 = fmul double %disp24, %output27
  %output31 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return32 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output31)
  %output33 = call double @"div@FF"(double %output28, double %return32)
  %cast34 = call <3 x double> @"set@VF"(double %output33)
  br label %end15

end15:                                            ; preds = %true14, %end
  %dpl.0 = phi <3 x double> [ %cast34, %true14 ], [ %cast4, %end ]
  %gflow35 = load double, double* %gflow
  %dogw36 = load i64, i64* %dogw
  %cast37 = sitofp i64 %dogw36 to double
  %output38 = fmul double %gflow35, %cast37
  %return39 = fcmp one double %output38, 0.000000e+00
  br i1 %return39, label %true41, label %end42

true41:                                           ; preds = %end15
  %pp44 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp44, <3 x double>* %8
  %per45 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per45, <3 x double>* %9
  %fngrad_psimplex = call <3 x double> @"fngrad_psimplex@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast46 = call <3 x double> @"set@VF"(double %gflow35)
  %output47 = call <3 x double> @"mul@VV"(<3 x double> %cast46, <3 x double> %fngrad_psimplex)
  br label %end42

end42:                                            ; preds = %true41, %end15
  %dpg.0 = phi <3 x double> [ %output47, %true41 ], [ %cast4, %end15 ]
  %pp48 = load <3 x double>, <3 x double>* %pp
  %accl49 = load i64, i64* %accl
  %cast51 = call <3 x double> @"set@VI"(i64 %accl49)
  %output52 = call <3 x double> @"mul@VV"(<3 x double> %cast51, <3 x double> %dpl.0)
  %accg53 = load i64, i64* %accg
  %cast55 = call <3 x double> @"set@VI"(i64 %accg53)
  %output56 = call <3 x double> @"mul@VV"(<3 x double> %cast55, <3 x double> %dpg.0)
  %output57 = call <3 x double> @"add@VV"(<3 x double> %output52, <3 x double> %output56)
  %output58 = call <3 x double> @"add@VV"(<3 x double> %pp48, <3 x double> %output57)
  store <3 x double> %output58, <3 x double>* %pp
  %output61 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output61, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off64 = load <3 x double>, <3 x double>* %x_off
  %output65 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %x_off64)
  store <3 x double> %output65, <3 x double>* %12
  %per67 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per67, <3 x double>* %13
  %nwrap_psimplex68 = call double @"nwrap_psimplex@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_psimplex68, double* %15
  %stats70.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats70.fca.0.gep
  %stats70.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats70.fca.1.gep
  %stats70.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats70.fca.2.gep
  %stats70.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats70.fca.3.gep
  %stats70.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats70.fca.4.gep
  %inv71 = load i64, i64* %inv
  store i64 %inv71, i64* %17
  %fold72 = load i64, i64* %fold
  store i64 %fold72, i64* %18
  %expon73 = load double, double* %expon
  store double %expon73, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats74.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats74.fca.0.gep
  %stats74.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats74.fca.1.gep
  %stats74.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats74.fca.2.gep
  %stats74.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats74.fca.3.gep
  %stats74.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats74.fca.4.gep
  %inv75 = load i64, i64* %inv
  store i64 %inv75, i64* %31
  %fold76 = load i64, i64* %fold
  store i64 %fold76, i64* %32
  %expon77 = load double, double* %expon
  store double %expon77, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw78 = load double, double* %fw
  %disp79 = load double, double* %disp
  %dfreq80 = load double, double* %dfreq
  %output81 = fmul double %disp79, %dfreq80
  %return82 = call double @"abs@FF"(double %output81)
  %output83 = fadd double %return82, 1.000000e+00
  %output84 = fmul double %fw78, %output83
  %x_avg86 = load double, double* %x_avg
  %return88 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output84)
  %return89 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg86, double %return88)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end42, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return89, %end42 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_worleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.188950e+00, double* %2
  store double 1.596840e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast4 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast4, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp6 = load <3 x double>, <3 x double>* %pp
  %disp9 = load double, double* %disp
  %dolw10 = load i64, i64* %dolw
  %cast11 = sitofp i64 %dolw10 to double
  %output = fmul double %disp9, %cast11
  %return12 = fcmp one double %output, 0.000000e+00
  br i1 %return12, label %true14, label %end15

true14:                                           ; preds = %end
  %cast17 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output18 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %cast17)
  %dfreq19 = load double, double* %dfreq
  %cast20 = call <3 x double> @"set@VF"(double %dfreq19)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %output18, <3 x double> %cast20)
  store <3 x double> %output21, <3 x double>* %5
  %nwrap_worleyFA = call double @"nwrap_worleyFA@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp23 = load double, double* %disp
  %output26 = fsub double %nwrap_worleyFA, %nsdata.fca.3.extract
  %output27 = fmul double %disp23, %output26
  %output30 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return31 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output30)
  %output32 = call double @"div@FF"(double %output27, double %return31)
  %cast33 = call <3 x double> @"set@VF"(double %output32)
  br label %end15

end15:                                            ; preds = %true14, %end
  %dpl.0 = phi <3 x double> [ %cast33, %true14 ], [ %cast4, %end ]
  %gflow34 = load double, double* %gflow
  %dogw35 = load i64, i64* %dogw
  %cast36 = sitofp i64 %dogw35 to double
  %output37 = fmul double %gflow34, %cast36
  %return38 = fcmp one double %output37, 0.000000e+00
  br i1 %return38, label %true40, label %end41

true40:                                           ; preds = %end15
  %pp43 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp43, <3 x double>* %8
  store double 5.000000e-02, double* %11
  %fngrad_worleyFA = call <3 x double> @"fngrad_worleyFA@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast44 = call <3 x double> @"set@VF"(double %gflow34)
  %output45 = call <3 x double> @"mul@VV"(<3 x double> %cast44, <3 x double> %fngrad_worleyFA)
  br label %end41

end41:                                            ; preds = %true40, %end15
  %dpg.0 = phi <3 x double> [ %output45, %true40 ], [ %cast4, %end15 ]
  %pp46 = load <3 x double>, <3 x double>* %pp
  %accl47 = load i64, i64* %accl
  %cast49 = call <3 x double> @"set@VI"(i64 %accl47)
  %output50 = call <3 x double> @"mul@VV"(<3 x double> %cast49, <3 x double> %dpl.0)
  %accg51 = load i64, i64* %accg
  %cast53 = call <3 x double> @"set@VI"(i64 %accg51)
  %output54 = call <3 x double> @"mul@VV"(<3 x double> %cast53, <3 x double> %dpg.0)
  %output55 = call <3 x double> @"add@VV"(<3 x double> %output50, <3 x double> %output54)
  %output56 = call <3 x double> @"add@VV"(<3 x double> %pp46, <3 x double> %output55)
  store <3 x double> %output56, <3 x double>* %pp
  %output59 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output59, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off62 = load <3 x double>, <3 x double>* %x_off
  %output63 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %x_off62)
  store <3 x double> %output63, <3 x double>* %12
  %nwrap_worleyFA65 = call double @"nwrap_worleyFA@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_worleyFA65, double* %15
  %stats67.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats67.fca.0.gep
  %stats67.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats67.fca.1.gep
  %stats67.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats67.fca.2.gep
  %stats67.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats67.fca.3.gep
  %stats67.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats67.fca.4.gep
  %inv68 = load i64, i64* %inv
  store i64 %inv68, i64* %17
  %fold69 = load i64, i64* %fold
  store i64 %fold69, i64* %18
  %expon70 = load double, double* %expon
  store double %expon70, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %31
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %32
  %expon74 = load double, double* %expon
  store double %expon74, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw75 = load double, double* %fw
  %disp76 = load double, double* %disp
  %dfreq77 = load double, double* %dfreq
  %output78 = fmul double %disp76, %dfreq77
  %return79 = call double @"abs@FF"(double %output78)
  %output80 = fadd double %return79, 1.000000e+00
  %output81 = fmul double %fw75, %output80
  %x_avg83 = load double, double* %x_avg
  %return85 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output81)
  %return86 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg83, double %return85)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end41, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return86, %end41 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_worleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.110100e+00, double* %2
  store double 1.180990e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast4 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast4, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp6 = load <3 x double>, <3 x double>* %pp
  %disp9 = load double, double* %disp
  %dolw10 = load i64, i64* %dolw
  %cast11 = sitofp i64 %dolw10 to double
  %output = fmul double %disp9, %cast11
  %return12 = fcmp one double %output, 0.000000e+00
  br i1 %return12, label %true14, label %end15

true14:                                           ; preds = %end
  %cast17 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output18 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %cast17)
  %dfreq19 = load double, double* %dfreq
  %cast20 = call <3 x double> @"set@VF"(double %dfreq19)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %output18, <3 x double> %cast20)
  store <3 x double> %output21, <3 x double>* %5
  %nwrap_worleyFB = call double @"nwrap_worleyFB@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp23 = load double, double* %disp
  %output26 = fsub double %nwrap_worleyFB, %nsdata.fca.3.extract
  %output27 = fmul double %disp23, %output26
  %output30 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return31 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output30)
  %output32 = call double @"div@FF"(double %output27, double %return31)
  %cast33 = call <3 x double> @"set@VF"(double %output32)
  br label %end15

end15:                                            ; preds = %true14, %end
  %dpl.0 = phi <3 x double> [ %cast33, %true14 ], [ %cast4, %end ]
  %gflow34 = load double, double* %gflow
  %dogw35 = load i64, i64* %dogw
  %cast36 = sitofp i64 %dogw35 to double
  %output37 = fmul double %gflow34, %cast36
  %return38 = fcmp one double %output37, 0.000000e+00
  br i1 %return38, label %true40, label %end41

true40:                                           ; preds = %end15
  %pp43 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp43, <3 x double>* %8
  store double 5.000000e-02, double* %11
  %fngrad_worleyFB = call <3 x double> @"fngrad_worleyFB@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast44 = call <3 x double> @"set@VF"(double %gflow34)
  %output45 = call <3 x double> @"mul@VV"(<3 x double> %cast44, <3 x double> %fngrad_worleyFB)
  br label %end41

end41:                                            ; preds = %true40, %end15
  %dpg.0 = phi <3 x double> [ %output45, %true40 ], [ %cast4, %end15 ]
  %pp46 = load <3 x double>, <3 x double>* %pp
  %accl47 = load i64, i64* %accl
  %cast49 = call <3 x double> @"set@VI"(i64 %accl47)
  %output50 = call <3 x double> @"mul@VV"(<3 x double> %cast49, <3 x double> %dpl.0)
  %accg51 = load i64, i64* %accg
  %cast53 = call <3 x double> @"set@VI"(i64 %accg51)
  %output54 = call <3 x double> @"mul@VV"(<3 x double> %cast53, <3 x double> %dpg.0)
  %output55 = call <3 x double> @"add@VV"(<3 x double> %output50, <3 x double> %output54)
  %output56 = call <3 x double> @"add@VV"(<3 x double> %pp46, <3 x double> %output55)
  store <3 x double> %output56, <3 x double>* %pp
  %output59 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output59, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off62 = load <3 x double>, <3 x double>* %x_off
  %output63 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %x_off62)
  store <3 x double> %output63, <3 x double>* %12
  %nwrap_worleyFB65 = call double @"nwrap_worleyFB@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_worleyFB65, double* %15
  %stats67.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats67.fca.0.gep
  %stats67.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats67.fca.1.gep
  %stats67.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats67.fca.2.gep
  %stats67.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats67.fca.3.gep
  %stats67.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats67.fca.4.gep
  %inv68 = load i64, i64* %inv
  store i64 %inv68, i64* %17
  %fold69 = load i64, i64* %fold
  store i64 %fold69, i64* %18
  %expon70 = load double, double* %expon
  store double %expon70, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %31
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %32
  %expon74 = load double, double* %expon
  store double %expon74, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw75 = load double, double* %fw
  %disp76 = load double, double* %disp
  %dfreq77 = load double, double* %dfreq
  %output78 = fmul double %disp76, %dfreq77
  %return79 = call double @"abs@FF"(double %output78)
  %output80 = fadd double %return79, 1.000000e+00
  %output81 = fmul double %fw75, %output80
  %x_avg83 = load double, double* %x_avg
  %return85 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output81)
  %return86 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg83, double %return85)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end41, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return86, %end41 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_mworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @16, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.566030e+00, double* %2
  store double 3.984810e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast4 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast4, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp6 = load <3 x double>, <3 x double>* %pp
  %disp9 = load double, double* %disp
  %dolw10 = load i64, i64* %dolw
  %cast11 = sitofp i64 %dolw10 to double
  %output = fmul double %disp9, %cast11
  %return12 = fcmp one double %output, 0.000000e+00
  br i1 %return12, label %true14, label %end15

true14:                                           ; preds = %end
  %cast17 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output18 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %cast17)
  %dfreq19 = load double, double* %dfreq
  %cast20 = call <3 x double> @"set@VF"(double %dfreq19)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %output18, <3 x double> %cast20)
  store <3 x double> %output21, <3 x double>* %5
  %nwrap_mworleyFA = call double @"nwrap_mworleyFA@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp23 = load double, double* %disp
  %output26 = fsub double %nwrap_mworleyFA, %nsdata.fca.3.extract
  %output27 = fmul double %disp23, %output26
  %output30 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return31 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output30)
  %output32 = call double @"div@FF"(double %output27, double %return31)
  %cast33 = call <3 x double> @"set@VF"(double %output32)
  br label %end15

end15:                                            ; preds = %true14, %end
  %dpl.0 = phi <3 x double> [ %cast33, %true14 ], [ %cast4, %end ]
  %gflow34 = load double, double* %gflow
  %dogw35 = load i64, i64* %dogw
  %cast36 = sitofp i64 %dogw35 to double
  %output37 = fmul double %gflow34, %cast36
  %return38 = fcmp one double %output37, 0.000000e+00
  br i1 %return38, label %true40, label %end41

true40:                                           ; preds = %end15
  %pp43 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp43, <3 x double>* %8
  store double 5.000000e-02, double* %11
  %fngrad_mworleyFA = call <3 x double> @"fngrad_mworleyFA@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast44 = call <3 x double> @"set@VF"(double %gflow34)
  %output45 = call <3 x double> @"mul@VV"(<3 x double> %cast44, <3 x double> %fngrad_mworleyFA)
  br label %end41

end41:                                            ; preds = %true40, %end15
  %dpg.0 = phi <3 x double> [ %output45, %true40 ], [ %cast4, %end15 ]
  %pp46 = load <3 x double>, <3 x double>* %pp
  %accl47 = load i64, i64* %accl
  %cast49 = call <3 x double> @"set@VI"(i64 %accl47)
  %output50 = call <3 x double> @"mul@VV"(<3 x double> %cast49, <3 x double> %dpl.0)
  %accg51 = load i64, i64* %accg
  %cast53 = call <3 x double> @"set@VI"(i64 %accg51)
  %output54 = call <3 x double> @"mul@VV"(<3 x double> %cast53, <3 x double> %dpg.0)
  %output55 = call <3 x double> @"add@VV"(<3 x double> %output50, <3 x double> %output54)
  %output56 = call <3 x double> @"add@VV"(<3 x double> %pp46, <3 x double> %output55)
  store <3 x double> %output56, <3 x double>* %pp
  %output59 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output59, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off62 = load <3 x double>, <3 x double>* %x_off
  %output63 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %x_off62)
  store <3 x double> %output63, <3 x double>* %12
  %nwrap_mworleyFA65 = call double @"nwrap_mworleyFA@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_mworleyFA65, double* %15
  %stats67.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats67.fca.0.gep
  %stats67.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats67.fca.1.gep
  %stats67.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats67.fca.2.gep
  %stats67.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats67.fca.3.gep
  %stats67.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats67.fca.4.gep
  %inv68 = load i64, i64* %inv
  store i64 %inv68, i64* %17
  %fold69 = load i64, i64* %fold
  store i64 %fold69, i64* %18
  %expon70 = load double, double* %expon
  store double %expon70, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %31
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %32
  %expon74 = load double, double* %expon
  store double %expon74, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw75 = load double, double* %fw
  %disp76 = load double, double* %disp
  %dfreq77 = load double, double* %dfreq
  %output78 = fmul double %disp76, %dfreq77
  %return79 = call double @"abs@FF"(double %output78)
  %output80 = fadd double %return79, 1.000000e+00
  %output81 = fmul double %fw75, %output80
  %x_avg83 = load double, double* %x_avg
  %return85 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output81)
  %return86 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg83, double %return85)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end41, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return86, %end41 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_mworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @16, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.454660e+00, double* %2
  store double 1.616670e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast4 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast4, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp6 = load <3 x double>, <3 x double>* %pp
  %disp9 = load double, double* %disp
  %dolw10 = load i64, i64* %dolw
  %cast11 = sitofp i64 %dolw10 to double
  %output = fmul double %disp9, %cast11
  %return12 = fcmp one double %output, 0.000000e+00
  br i1 %return12, label %true14, label %end15

true14:                                           ; preds = %end
  %cast17 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output18 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %cast17)
  %dfreq19 = load double, double* %dfreq
  %cast20 = call <3 x double> @"set@VF"(double %dfreq19)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %output18, <3 x double> %cast20)
  store <3 x double> %output21, <3 x double>* %5
  %nwrap_mworleyFB = call double @"nwrap_mworleyFB@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp23 = load double, double* %disp
  %output26 = fsub double %nwrap_mworleyFB, %nsdata.fca.3.extract
  %output27 = fmul double %disp23, %output26
  %output30 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return31 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output30)
  %output32 = call double @"div@FF"(double %output27, double %return31)
  %cast33 = call <3 x double> @"set@VF"(double %output32)
  br label %end15

end15:                                            ; preds = %true14, %end
  %dpl.0 = phi <3 x double> [ %cast33, %true14 ], [ %cast4, %end ]
  %gflow34 = load double, double* %gflow
  %dogw35 = load i64, i64* %dogw
  %cast36 = sitofp i64 %dogw35 to double
  %output37 = fmul double %gflow34, %cast36
  %return38 = fcmp one double %output37, 0.000000e+00
  br i1 %return38, label %true40, label %end41

true40:                                           ; preds = %end15
  %pp43 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp43, <3 x double>* %8
  store double 5.000000e-02, double* %11
  %fngrad_mworleyFB = call <3 x double> @"fngrad_mworleyFB@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast44 = call <3 x double> @"set@VF"(double %gflow34)
  %output45 = call <3 x double> @"mul@VV"(<3 x double> %cast44, <3 x double> %fngrad_mworleyFB)
  br label %end41

end41:                                            ; preds = %true40, %end15
  %dpg.0 = phi <3 x double> [ %output45, %true40 ], [ %cast4, %end15 ]
  %pp46 = load <3 x double>, <3 x double>* %pp
  %accl47 = load i64, i64* %accl
  %cast49 = call <3 x double> @"set@VI"(i64 %accl47)
  %output50 = call <3 x double> @"mul@VV"(<3 x double> %cast49, <3 x double> %dpl.0)
  %accg51 = load i64, i64* %accg
  %cast53 = call <3 x double> @"set@VI"(i64 %accg51)
  %output54 = call <3 x double> @"mul@VV"(<3 x double> %cast53, <3 x double> %dpg.0)
  %output55 = call <3 x double> @"add@VV"(<3 x double> %output50, <3 x double> %output54)
  %output56 = call <3 x double> @"add@VV"(<3 x double> %pp46, <3 x double> %output55)
  store <3 x double> %output56, <3 x double>* %pp
  %output59 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output59, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off62 = load <3 x double>, <3 x double>* %x_off
  %output63 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %x_off62)
  store <3 x double> %output63, <3 x double>* %12
  %nwrap_mworleyFB65 = call double @"nwrap_mworleyFB@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_mworleyFB65, double* %15
  %stats67.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats67.fca.0.gep
  %stats67.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats67.fca.1.gep
  %stats67.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats67.fca.2.gep
  %stats67.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats67.fca.3.gep
  %stats67.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats67.fca.4.gep
  %inv68 = load i64, i64* %inv
  store i64 %inv68, i64* %17
  %fold69 = load i64, i64* %fold
  store i64 %fold69, i64* %18
  %expon70 = load double, double* %expon
  store double %expon70, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %31
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %32
  %expon74 = load double, double* %expon
  store double %expon74, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw75 = load double, double* %fw
  %disp76 = load double, double* %disp
  %dfreq77 = load double, double* %dfreq
  %output78 = fmul double %disp76, %dfreq77
  %return79 = call double @"abs@FF"(double %output78)
  %output80 = fadd double %return79, 1.000000e+00
  %output81 = fmul double %fw75, %output80
  %x_avg83 = load double, double* %x_avg
  %return85 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output81)
  %return86 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg83, double %return85)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end41, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return86, %end41 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_cworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @19, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 8.434530e-01, double* %2
  store double 4.069560e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast4 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast4, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp6 = load <3 x double>, <3 x double>* %pp
  %disp9 = load double, double* %disp
  %dolw10 = load i64, i64* %dolw
  %cast11 = sitofp i64 %dolw10 to double
  %output = fmul double %disp9, %cast11
  %return12 = fcmp one double %output, 0.000000e+00
  br i1 %return12, label %true14, label %end15

true14:                                           ; preds = %end
  %cast17 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output18 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %cast17)
  %dfreq19 = load double, double* %dfreq
  %cast20 = call <3 x double> @"set@VF"(double %dfreq19)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %output18, <3 x double> %cast20)
  store <3 x double> %output21, <3 x double>* %5
  %nwrap_cworleyFA = call double @"nwrap_cworleyFA@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp23 = load double, double* %disp
  %output26 = fsub double %nwrap_cworleyFA, %nsdata.fca.3.extract
  %output27 = fmul double %disp23, %output26
  %output30 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return31 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output30)
  %output32 = call double @"div@FF"(double %output27, double %return31)
  %cast33 = call <3 x double> @"set@VF"(double %output32)
  br label %end15

end15:                                            ; preds = %true14, %end
  %dpl.0 = phi <3 x double> [ %cast33, %true14 ], [ %cast4, %end ]
  %gflow34 = load double, double* %gflow
  %dogw35 = load i64, i64* %dogw
  %cast36 = sitofp i64 %dogw35 to double
  %output37 = fmul double %gflow34, %cast36
  %return38 = fcmp one double %output37, 0.000000e+00
  br i1 %return38, label %true40, label %end41

true40:                                           ; preds = %end15
  %pp43 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp43, <3 x double>* %8
  store double 5.000000e-02, double* %11
  %fngrad_cworleyFA = call <3 x double> @"fngrad_cworleyFA@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast44 = call <3 x double> @"set@VF"(double %gflow34)
  %output45 = call <3 x double> @"mul@VV"(<3 x double> %cast44, <3 x double> %fngrad_cworleyFA)
  br label %end41

end41:                                            ; preds = %true40, %end15
  %dpg.0 = phi <3 x double> [ %output45, %true40 ], [ %cast4, %end15 ]
  %pp46 = load <3 x double>, <3 x double>* %pp
  %accl47 = load i64, i64* %accl
  %cast49 = call <3 x double> @"set@VI"(i64 %accl47)
  %output50 = call <3 x double> @"mul@VV"(<3 x double> %cast49, <3 x double> %dpl.0)
  %accg51 = load i64, i64* %accg
  %cast53 = call <3 x double> @"set@VI"(i64 %accg51)
  %output54 = call <3 x double> @"mul@VV"(<3 x double> %cast53, <3 x double> %dpg.0)
  %output55 = call <3 x double> @"add@VV"(<3 x double> %output50, <3 x double> %output54)
  %output56 = call <3 x double> @"add@VV"(<3 x double> %pp46, <3 x double> %output55)
  store <3 x double> %output56, <3 x double>* %pp
  %output59 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output59, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off62 = load <3 x double>, <3 x double>* %x_off
  %output63 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %x_off62)
  store <3 x double> %output63, <3 x double>* %12
  %nwrap_cworleyFA65 = call double @"nwrap_cworleyFA@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_cworleyFA65, double* %15
  %stats67.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats67.fca.0.gep
  %stats67.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats67.fca.1.gep
  %stats67.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats67.fca.2.gep
  %stats67.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats67.fca.3.gep
  %stats67.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats67.fca.4.gep
  %inv68 = load i64, i64* %inv
  store i64 %inv68, i64* %17
  %fold69 = load i64, i64* %fold
  store i64 %fold69, i64* %18
  %expon70 = load double, double* %expon
  store double %expon70, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %31
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %32
  %expon74 = load double, double* %expon
  store double %expon74, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw75 = load double, double* %fw
  %disp76 = load double, double* %disp
  %dfreq77 = load double, double* %dfreq
  %output78 = fmul double %disp76, %dfreq77
  %return79 = call double @"abs@FF"(double %output78)
  %output80 = fadd double %return79, 1.000000e+00
  %output81 = fmul double %fw75, %output80
  %x_avg83 = load double, double* %x_avg
  %return85 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output81)
  %return86 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg83, double %return85)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end41, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return86, %end41 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_cworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @19, i64 0, i64 0), i8** %0
  %return4 = call double @"neg@FF"(double 1.142860e-02)
  store double %return4, double* %1
  store double 7.765650e-01, double* %2
  store double 1.656610e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast5 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast5, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp7 = load <3 x double>, <3 x double>* %pp
  %disp10 = load double, double* %disp
  %dolw11 = load i64, i64* %dolw
  %cast12 = sitofp i64 %dolw11 to double
  %output = fmul double %disp10, %cast12
  %return13 = fcmp one double %output, 0.000000e+00
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  %cast18 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output19 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %cast18)
  %dfreq20 = load double, double* %dfreq
  %cast21 = call <3 x double> @"set@VF"(double %dfreq20)
  %output22 = call <3 x double> @"mul@VV"(<3 x double> %output19, <3 x double> %cast21)
  store <3 x double> %output22, <3 x double>* %5
  %nwrap_cworleyFB = call double @"nwrap_cworleyFB@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp24 = load double, double* %disp
  %output27 = fsub double %nwrap_cworleyFB, %nsdata.fca.3.extract
  %output28 = fmul double %disp24, %output27
  %output31 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return32 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output31)
  %output33 = call double @"div@FF"(double %output28, double %return32)
  %cast34 = call <3 x double> @"set@VF"(double %output33)
  br label %end16

end16:                                            ; preds = %true15, %end
  %dpl.0 = phi <3 x double> [ %cast34, %true15 ], [ %cast5, %end ]
  %gflow35 = load double, double* %gflow
  %dogw36 = load i64, i64* %dogw
  %cast37 = sitofp i64 %dogw36 to double
  %output38 = fmul double %gflow35, %cast37
  %return39 = fcmp one double %output38, 0.000000e+00
  br i1 %return39, label %true41, label %end42

true41:                                           ; preds = %end16
  %pp44 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp44, <3 x double>* %8
  store double 5.000000e-02, double* %11
  %fngrad_cworleyFB = call <3 x double> @"fngrad_cworleyFB@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast45 = call <3 x double> @"set@VF"(double %gflow35)
  %output46 = call <3 x double> @"mul@VV"(<3 x double> %cast45, <3 x double> %fngrad_cworleyFB)
  br label %end42

end42:                                            ; preds = %true41, %end16
  %dpg.0 = phi <3 x double> [ %output46, %true41 ], [ %cast5, %end16 ]
  %pp47 = load <3 x double>, <3 x double>* %pp
  %accl48 = load i64, i64* %accl
  %cast50 = call <3 x double> @"set@VI"(i64 %accl48)
  %output51 = call <3 x double> @"mul@VV"(<3 x double> %cast50, <3 x double> %dpl.0)
  %accg52 = load i64, i64* %accg
  %cast54 = call <3 x double> @"set@VI"(i64 %accg52)
  %output55 = call <3 x double> @"mul@VV"(<3 x double> %cast54, <3 x double> %dpg.0)
  %output56 = call <3 x double> @"add@VV"(<3 x double> %output51, <3 x double> %output55)
  %output57 = call <3 x double> @"add@VV"(<3 x double> %pp47, <3 x double> %output56)
  store <3 x double> %output57, <3 x double>* %pp
  %output60 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output60, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off63 = load <3 x double>, <3 x double>* %x_off
  %output64 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %x_off63)
  store <3 x double> %output64, <3 x double>* %12
  %nwrap_cworleyFB66 = call double @"nwrap_cworleyFB@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_cworleyFB66, double* %15
  %stats68.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats68.fca.0.gep
  %stats68.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats68.fca.1.gep
  %stats68.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats68.fca.2.gep
  %stats68.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats68.fca.3.gep
  %stats68.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats68.fca.4.gep
  %inv69 = load i64, i64* %inv
  store i64 %inv69, i64* %17
  %fold70 = load i64, i64* %fold
  store i64 %fold70, i64* %18
  %expon71 = load double, double* %expon
  store double %expon71, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats72.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats72.fca.0.gep
  %stats72.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats72.fca.1.gep
  %stats72.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats72.fca.2.gep
  %stats72.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats72.fca.3.gep
  %stats72.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats72.fca.4.gep
  %inv73 = load i64, i64* %inv
  store i64 %inv73, i64* %31
  %fold74 = load i64, i64* %fold
  store i64 %fold74, i64* %32
  %expon75 = load double, double* %expon
  store double %expon75, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw76 = load double, double* %fw
  %disp77 = load double, double* %disp
  %dfreq78 = load double, double* %dfreq
  %output79 = fmul double %disp77, %dfreq78
  %return80 = call double @"abs@FF"(double %output79)
  %output81 = fadd double %return80, 1.000000e+00
  %output82 = fmul double %fw76, %output81
  %x_avg84 = load double, double* %x_avg
  %return86 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output82)
  %return87 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg84, double %return86)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end42, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return87, %end42 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_pworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @14, i64 0, i64 0), i8** %0
  %return4 = call double @"neg@FF"(double 3.455960e-03)
  store double %return4, double* %1
  store double 8.150870e-01, double* %2
  store double 2.367870e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast5 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast5, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp7 = load <3 x double>, <3 x double>* %pp
  %disp10 = load double, double* %disp
  %dolw11 = load i64, i64* %dolw
  %cast12 = sitofp i64 %dolw11 to double
  %output = fmul double %disp10, %cast12
  %return13 = fcmp one double %output, 0.000000e+00
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  %cast18 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output19 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %cast18)
  %dfreq20 = load double, double* %dfreq
  %cast21 = call <3 x double> @"set@VF"(double %dfreq20)
  %output22 = call <3 x double> @"mul@VV"(<3 x double> %output19, <3 x double> %cast21)
  store <3 x double> %output22, <3 x double>* %5
  %per24 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per24, <3 x double>* %6
  %nwrap_pworleyFA = call double @"nwrap_pworleyFA@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp25 = load double, double* %disp
  %output28 = fsub double %nwrap_pworleyFA, %nsdata.fca.3.extract
  %output29 = fmul double %disp25, %output28
  %output32 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return33 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output32)
  %output34 = call double @"div@FF"(double %output29, double %return33)
  %cast35 = call <3 x double> @"set@VF"(double %output34)
  br label %end16

end16:                                            ; preds = %true15, %end
  %dpl.0 = phi <3 x double> [ %cast35, %true15 ], [ %cast5, %end ]
  %gflow36 = load double, double* %gflow
  %dogw37 = load i64, i64* %dogw
  %cast38 = sitofp i64 %dogw37 to double
  %output39 = fmul double %gflow36, %cast38
  %return40 = fcmp one double %output39, 0.000000e+00
  br i1 %return40, label %true42, label %end43

true42:                                           ; preds = %end16
  %pp45 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp45, <3 x double>* %8
  %per46 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per46, <3 x double>* %9
  store double 5.000000e-02, double* %11
  %fngrad_pworleyFA = call <3 x double> @"fngrad_pworleyFA@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast47 = call <3 x double> @"set@VF"(double %gflow36)
  %output48 = call <3 x double> @"mul@VV"(<3 x double> %cast47, <3 x double> %fngrad_pworleyFA)
  br label %end43

end43:                                            ; preds = %true42, %end16
  %dpg.0 = phi <3 x double> [ %output48, %true42 ], [ %cast5, %end16 ]
  %pp49 = load <3 x double>, <3 x double>* %pp
  %accl50 = load i64, i64* %accl
  %cast52 = call <3 x double> @"set@VI"(i64 %accl50)
  %output53 = call <3 x double> @"mul@VV"(<3 x double> %cast52, <3 x double> %dpl.0)
  %accg54 = load i64, i64* %accg
  %cast56 = call <3 x double> @"set@VI"(i64 %accg54)
  %output57 = call <3 x double> @"mul@VV"(<3 x double> %cast56, <3 x double> %dpg.0)
  %output58 = call <3 x double> @"add@VV"(<3 x double> %output53, <3 x double> %output57)
  %output59 = call <3 x double> @"add@VV"(<3 x double> %pp49, <3 x double> %output58)
  store <3 x double> %output59, <3 x double>* %pp
  %output62 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output62, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off65 = load <3 x double>, <3 x double>* %x_off
  %output66 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %x_off65)
  store <3 x double> %output66, <3 x double>* %12
  %per68 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per68, <3 x double>* %13
  %nwrap_pworleyFA69 = call double @"nwrap_pworleyFA@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_pworleyFA69, double* %15
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %17
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %18
  %expon74 = load double, double* %expon
  store double %expon74, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats75.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats75.fca.0.gep
  %stats75.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats75.fca.1.gep
  %stats75.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats75.fca.2.gep
  %stats75.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats75.fca.3.gep
  %stats75.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats75.fca.4.gep
  %inv76 = load i64, i64* %inv
  store i64 %inv76, i64* %31
  %fold77 = load i64, i64* %fold
  store i64 %fold77, i64* %32
  %expon78 = load double, double* %expon
  store double %expon78, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw79 = load double, double* %fw
  %disp80 = load double, double* %disp
  %dfreq81 = load double, double* %dfreq
  %output82 = fmul double %disp80, %dfreq81
  %return83 = call double @"abs@FF"(double %output82)
  %output84 = fadd double %return83, 1.000000e+00
  %output85 = fmul double %fw79, %output84
  %x_avg87 = load double, double* %x_avg
  %return89 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output85)
  %return90 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg87, double %return89)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end43, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return90, %end43 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_pworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @15, i64 0, i64 0), i8** %0
  %return4 = call double @"neg@FF"(double 2.498330e-03)
  store double %return4, double* %1
  store double 6.078380e-01, double* %2
  store double 2.307210e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast5 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast5, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp7 = load <3 x double>, <3 x double>* %pp
  %disp10 = load double, double* %disp
  %dolw11 = load i64, i64* %dolw
  %cast12 = sitofp i64 %dolw11 to double
  %output = fmul double %disp10, %cast12
  %return13 = fcmp one double %output, 0.000000e+00
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  %cast18 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output19 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %cast18)
  %dfreq20 = load double, double* %dfreq
  %cast21 = call <3 x double> @"set@VF"(double %dfreq20)
  %output22 = call <3 x double> @"mul@VV"(<3 x double> %output19, <3 x double> %cast21)
  store <3 x double> %output22, <3 x double>* %5
  %per24 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per24, <3 x double>* %6
  %nwrap_pworleyFB = call double @"nwrap_pworleyFB@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp25 = load double, double* %disp
  %output28 = fsub double %nwrap_pworleyFB, %nsdata.fca.3.extract
  %output29 = fmul double %disp25, %output28
  %output32 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return33 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output32)
  %output34 = call double @"div@FF"(double %output29, double %return33)
  %cast35 = call <3 x double> @"set@VF"(double %output34)
  br label %end16

end16:                                            ; preds = %true15, %end
  %dpl.0 = phi <3 x double> [ %cast35, %true15 ], [ %cast5, %end ]
  %gflow36 = load double, double* %gflow
  %dogw37 = load i64, i64* %dogw
  %cast38 = sitofp i64 %dogw37 to double
  %output39 = fmul double %gflow36, %cast38
  %return40 = fcmp one double %output39, 0.000000e+00
  br i1 %return40, label %true42, label %end43

true42:                                           ; preds = %end16
  %pp45 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp45, <3 x double>* %8
  %per46 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per46, <3 x double>* %9
  store double 5.000000e-02, double* %11
  %fngrad_pworleyFB = call <3 x double> @"fngrad_pworleyFB@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast47 = call <3 x double> @"set@VF"(double %gflow36)
  %output48 = call <3 x double> @"mul@VV"(<3 x double> %cast47, <3 x double> %fngrad_pworleyFB)
  br label %end43

end43:                                            ; preds = %true42, %end16
  %dpg.0 = phi <3 x double> [ %output48, %true42 ], [ %cast5, %end16 ]
  %pp49 = load <3 x double>, <3 x double>* %pp
  %accl50 = load i64, i64* %accl
  %cast52 = call <3 x double> @"set@VI"(i64 %accl50)
  %output53 = call <3 x double> @"mul@VV"(<3 x double> %cast52, <3 x double> %dpl.0)
  %accg54 = load i64, i64* %accg
  %cast56 = call <3 x double> @"set@VI"(i64 %accg54)
  %output57 = call <3 x double> @"mul@VV"(<3 x double> %cast56, <3 x double> %dpg.0)
  %output58 = call <3 x double> @"add@VV"(<3 x double> %output53, <3 x double> %output57)
  %output59 = call <3 x double> @"add@VV"(<3 x double> %pp49, <3 x double> %output58)
  store <3 x double> %output59, <3 x double>* %pp
  %output62 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output62, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off65 = load <3 x double>, <3 x double>* %x_off
  %output66 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %x_off65)
  store <3 x double> %output66, <3 x double>* %12
  %per68 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per68, <3 x double>* %13
  %nwrap_pworleyFB69 = call double @"nwrap_pworleyFB@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_pworleyFB69, double* %15
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %17
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %18
  %expon74 = load double, double* %expon
  store double %expon74, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats75.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats75.fca.0.gep
  %stats75.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats75.fca.1.gep
  %stats75.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats75.fca.2.gep
  %stats75.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats75.fca.3.gep
  %stats75.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats75.fca.4.gep
  %inv76 = load i64, i64* %inv
  store i64 %inv76, i64* %31
  %fold77 = load i64, i64* %fold
  store i64 %fold77, i64* %32
  %expon78 = load double, double* %expon
  store double %expon78, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw79 = load double, double* %fw
  %disp80 = load double, double* %disp
  %dfreq81 = load double, double* %dfreq
  %output82 = fmul double %disp80, %dfreq81
  %return83 = call double @"abs@FF"(double %output82)
  %output84 = fadd double %return83, 1.000000e+00
  %output85 = fmul double %fw79, %output84
  %x_avg87 = load double, double* %x_avg
  %return89 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output85)
  %return90 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg87, double %return89)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end43, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return90, %end43 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_pmworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @17, i64 0, i64 0), i8** %0
  %return4 = call double @"neg@FF"(double 6.179570e-03)
  store double %return4, double* %1
  store double 1.365310e+00, double* %2
  store double 4.482700e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast5 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast5, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp7 = load <3 x double>, <3 x double>* %pp
  %disp10 = load double, double* %disp
  %dolw11 = load i64, i64* %dolw
  %cast12 = sitofp i64 %dolw11 to double
  %output = fmul double %disp10, %cast12
  %return13 = fcmp one double %output, 0.000000e+00
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  %cast18 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output19 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %cast18)
  %dfreq20 = load double, double* %dfreq
  %cast21 = call <3 x double> @"set@VF"(double %dfreq20)
  %output22 = call <3 x double> @"mul@VV"(<3 x double> %output19, <3 x double> %cast21)
  store <3 x double> %output22, <3 x double>* %5
  %per24 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per24, <3 x double>* %6
  %nwrap_pmworleyFA = call double @"nwrap_pmworleyFA@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp25 = load double, double* %disp
  %output28 = fsub double %nwrap_pmworleyFA, %nsdata.fca.3.extract
  %output29 = fmul double %disp25, %output28
  %output32 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return33 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output32)
  %output34 = call double @"div@FF"(double %output29, double %return33)
  %cast35 = call <3 x double> @"set@VF"(double %output34)
  br label %end16

end16:                                            ; preds = %true15, %end
  %dpl.0 = phi <3 x double> [ %cast35, %true15 ], [ %cast5, %end ]
  %gflow36 = load double, double* %gflow
  %dogw37 = load i64, i64* %dogw
  %cast38 = sitofp i64 %dogw37 to double
  %output39 = fmul double %gflow36, %cast38
  %return40 = fcmp one double %output39, 0.000000e+00
  br i1 %return40, label %true42, label %end43

true42:                                           ; preds = %end16
  %pp45 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp45, <3 x double>* %8
  %per46 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per46, <3 x double>* %9
  store double 5.000000e-02, double* %11
  %fngrad_pmworleyFA = call <3 x double> @"fngrad_pmworleyFA@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast47 = call <3 x double> @"set@VF"(double %gflow36)
  %output48 = call <3 x double> @"mul@VV"(<3 x double> %cast47, <3 x double> %fngrad_pmworleyFA)
  br label %end43

end43:                                            ; preds = %true42, %end16
  %dpg.0 = phi <3 x double> [ %output48, %true42 ], [ %cast5, %end16 ]
  %pp49 = load <3 x double>, <3 x double>* %pp
  %accl50 = load i64, i64* %accl
  %cast52 = call <3 x double> @"set@VI"(i64 %accl50)
  %output53 = call <3 x double> @"mul@VV"(<3 x double> %cast52, <3 x double> %dpl.0)
  %accg54 = load i64, i64* %accg
  %cast56 = call <3 x double> @"set@VI"(i64 %accg54)
  %output57 = call <3 x double> @"mul@VV"(<3 x double> %cast56, <3 x double> %dpg.0)
  %output58 = call <3 x double> @"add@VV"(<3 x double> %output53, <3 x double> %output57)
  %output59 = call <3 x double> @"add@VV"(<3 x double> %pp49, <3 x double> %output58)
  store <3 x double> %output59, <3 x double>* %pp
  %output62 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output62, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off65 = load <3 x double>, <3 x double>* %x_off
  %output66 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %x_off65)
  store <3 x double> %output66, <3 x double>* %12
  %per68 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per68, <3 x double>* %13
  %nwrap_pmworleyFA69 = call double @"nwrap_pmworleyFA@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_pmworleyFA69, double* %15
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %17
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %18
  %expon74 = load double, double* %expon
  store double %expon74, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats75.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats75.fca.0.gep
  %stats75.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats75.fca.1.gep
  %stats75.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats75.fca.2.gep
  %stats75.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats75.fca.3.gep
  %stats75.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats75.fca.4.gep
  %inv76 = load i64, i64* %inv
  store i64 %inv76, i64* %31
  %fold77 = load i64, i64* %fold
  store i64 %fold77, i64* %32
  %expon78 = load double, double* %expon
  store double %expon78, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw79 = load double, double* %fw
  %disp80 = load double, double* %disp
  %dfreq81 = load double, double* %dfreq
  %output82 = fmul double %disp80, %dfreq81
  %return83 = call double @"abs@FF"(double %output82)
  %output84 = fadd double %return83, 1.000000e+00
  %output85 = fmul double %fw79, %output84
  %x_avg87 = load double, double* %x_avg
  %return89 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output85)
  %return90 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg87, double %return89)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end43, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return90, %end43 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_pmworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @18, i64 0, i64 0), i8** %0
  %return4 = call double @"neg@FF"(double 9.170050e-03)
  store double %return4, double* %1
  store double 1.062390e+00, double* %2
  store double 2.118230e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast5 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast5, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp7 = load <3 x double>, <3 x double>* %pp
  %disp10 = load double, double* %disp
  %dolw11 = load i64, i64* %dolw
  %cast12 = sitofp i64 %dolw11 to double
  %output = fmul double %disp10, %cast12
  %return13 = fcmp one double %output, 0.000000e+00
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  %cast18 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output19 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %cast18)
  %dfreq20 = load double, double* %dfreq
  %cast21 = call <3 x double> @"set@VF"(double %dfreq20)
  %output22 = call <3 x double> @"mul@VV"(<3 x double> %output19, <3 x double> %cast21)
  store <3 x double> %output22, <3 x double>* %5
  %per24 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per24, <3 x double>* %6
  %nwrap_pmworleyFB = call double @"nwrap_pmworleyFB@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp25 = load double, double* %disp
  %output28 = fsub double %nwrap_pmworleyFB, %nsdata.fca.3.extract
  %output29 = fmul double %disp25, %output28
  %output32 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return33 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output32)
  %output34 = call double @"div@FF"(double %output29, double %return33)
  %cast35 = call <3 x double> @"set@VF"(double %output34)
  br label %end16

end16:                                            ; preds = %true15, %end
  %dpl.0 = phi <3 x double> [ %cast35, %true15 ], [ %cast5, %end ]
  %gflow36 = load double, double* %gflow
  %dogw37 = load i64, i64* %dogw
  %cast38 = sitofp i64 %dogw37 to double
  %output39 = fmul double %gflow36, %cast38
  %return40 = fcmp one double %output39, 0.000000e+00
  br i1 %return40, label %true42, label %end43

true42:                                           ; preds = %end16
  %pp45 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp45, <3 x double>* %8
  %per46 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per46, <3 x double>* %9
  store double 5.000000e-02, double* %11
  %fngrad_pmworleyFB = call <3 x double> @"fngrad_pmworleyFB@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast47 = call <3 x double> @"set@VF"(double %gflow36)
  %output48 = call <3 x double> @"mul@VV"(<3 x double> %cast47, <3 x double> %fngrad_pmworleyFB)
  br label %end43

end43:                                            ; preds = %true42, %end16
  %dpg.0 = phi <3 x double> [ %output48, %true42 ], [ %cast5, %end16 ]
  %pp49 = load <3 x double>, <3 x double>* %pp
  %accl50 = load i64, i64* %accl
  %cast52 = call <3 x double> @"set@VI"(i64 %accl50)
  %output53 = call <3 x double> @"mul@VV"(<3 x double> %cast52, <3 x double> %dpl.0)
  %accg54 = load i64, i64* %accg
  %cast56 = call <3 x double> @"set@VI"(i64 %accg54)
  %output57 = call <3 x double> @"mul@VV"(<3 x double> %cast56, <3 x double> %dpg.0)
  %output58 = call <3 x double> @"add@VV"(<3 x double> %output53, <3 x double> %output57)
  %output59 = call <3 x double> @"add@VV"(<3 x double> %pp49, <3 x double> %output58)
  store <3 x double> %output59, <3 x double>* %pp
  %output62 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output62, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off65 = load <3 x double>, <3 x double>* %x_off
  %output66 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %x_off65)
  store <3 x double> %output66, <3 x double>* %12
  %per68 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per68, <3 x double>* %13
  %nwrap_pmworleyFB69 = call double @"nwrap_pmworleyFB@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_pmworleyFB69, double* %15
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %17
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %18
  %expon74 = load double, double* %expon
  store double %expon74, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats75.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats75.fca.0.gep
  %stats75.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats75.fca.1.gep
  %stats75.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats75.fca.2.gep
  %stats75.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats75.fca.3.gep
  %stats75.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats75.fca.4.gep
  %inv76 = load i64, i64* %inv
  store i64 %inv76, i64* %31
  %fold77 = load i64, i64* %fold
  store i64 %fold77, i64* %32
  %expon78 = load double, double* %expon
  store double %expon78, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw79 = load double, double* %fw
  %disp80 = load double, double* %disp
  %dfreq81 = load double, double* %dfreq
  %output82 = fmul double %disp80, %dfreq81
  %return83 = call double @"abs@FF"(double %output82)
  %output84 = fadd double %return83, 1.000000e+00
  %output85 = fmul double %fw79, %output84
  %x_avg87 = load double, double* %x_avg
  %return89 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output85)
  %return90 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg87, double %return89)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end43, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return90, %end43 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_pcworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @20, i64 0, i64 0), i8** %0
  store double 1.556640e-02, double* %1
  store double 6.781590e-01, double* %2
  store double 4.775260e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast4 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast4, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp6 = load <3 x double>, <3 x double>* %pp
  %disp9 = load double, double* %disp
  %dolw10 = load i64, i64* %dolw
  %cast11 = sitofp i64 %dolw10 to double
  %output = fmul double %disp9, %cast11
  %return12 = fcmp one double %output, 0.000000e+00
  br i1 %return12, label %true14, label %end15

true14:                                           ; preds = %end
  %cast17 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output18 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %cast17)
  %dfreq19 = load double, double* %dfreq
  %cast20 = call <3 x double> @"set@VF"(double %dfreq19)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %output18, <3 x double> %cast20)
  store <3 x double> %output21, <3 x double>* %5
  %per23 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per23, <3 x double>* %6
  %nwrap_pcworleyFA = call double @"nwrap_pcworleyFA@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp24 = load double, double* %disp
  %output27 = fsub double %nwrap_pcworleyFA, %nsdata.fca.3.extract
  %output28 = fmul double %disp24, %output27
  %output31 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return32 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output31)
  %output33 = call double @"div@FF"(double %output28, double %return32)
  %cast34 = call <3 x double> @"set@VF"(double %output33)
  br label %end15

end15:                                            ; preds = %true14, %end
  %dpl.0 = phi <3 x double> [ %cast34, %true14 ], [ %cast4, %end ]
  %gflow35 = load double, double* %gflow
  %dogw36 = load i64, i64* %dogw
  %cast37 = sitofp i64 %dogw36 to double
  %output38 = fmul double %gflow35, %cast37
  %return39 = fcmp one double %output38, 0.000000e+00
  br i1 %return39, label %true41, label %end42

true41:                                           ; preds = %end15
  %pp44 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp44, <3 x double>* %8
  %per45 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per45, <3 x double>* %9
  store double 5.000000e-02, double* %11
  %fngrad_pcworleyFA = call <3 x double> @"fngrad_pcworleyFA@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast46 = call <3 x double> @"set@VF"(double %gflow35)
  %output47 = call <3 x double> @"mul@VV"(<3 x double> %cast46, <3 x double> %fngrad_pcworleyFA)
  br label %end42

end42:                                            ; preds = %true41, %end15
  %dpg.0 = phi <3 x double> [ %output47, %true41 ], [ %cast4, %end15 ]
  %pp48 = load <3 x double>, <3 x double>* %pp
  %accl49 = load i64, i64* %accl
  %cast51 = call <3 x double> @"set@VI"(i64 %accl49)
  %output52 = call <3 x double> @"mul@VV"(<3 x double> %cast51, <3 x double> %dpl.0)
  %accg53 = load i64, i64* %accg
  %cast55 = call <3 x double> @"set@VI"(i64 %accg53)
  %output56 = call <3 x double> @"mul@VV"(<3 x double> %cast55, <3 x double> %dpg.0)
  %output57 = call <3 x double> @"add@VV"(<3 x double> %output52, <3 x double> %output56)
  %output58 = call <3 x double> @"add@VV"(<3 x double> %pp48, <3 x double> %output57)
  store <3 x double> %output58, <3 x double>* %pp
  %output61 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output61, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off64 = load <3 x double>, <3 x double>* %x_off
  %output65 = call <3 x double> @"add@VV"(<3 x double> %pp6, <3 x double> %x_off64)
  store <3 x double> %output65, <3 x double>* %12
  %per67 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per67, <3 x double>* %13
  %nwrap_pcworleyFA68 = call double @"nwrap_pcworleyFA@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_pcworleyFA68, double* %15
  %stats70.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats70.fca.0.gep
  %stats70.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats70.fca.1.gep
  %stats70.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats70.fca.2.gep
  %stats70.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats70.fca.3.gep
  %stats70.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats70.fca.4.gep
  %inv71 = load i64, i64* %inv
  store i64 %inv71, i64* %17
  %fold72 = load i64, i64* %fold
  store i64 %fold72, i64* %18
  %expon73 = load double, double* %expon
  store double %expon73, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats74.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats74.fca.0.gep
  %stats74.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats74.fca.1.gep
  %stats74.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats74.fca.2.gep
  %stats74.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats74.fca.3.gep
  %stats74.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats74.fca.4.gep
  %inv75 = load i64, i64* %inv
  store i64 %inv75, i64* %31
  %fold76 = load i64, i64* %fold
  store i64 %fold76, i64* %32
  %expon77 = load double, double* %expon
  store double %expon77, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw78 = load double, double* %fw
  %disp79 = load double, double* %disp
  %dfreq80 = load double, double* %dfreq
  %output81 = fmul double %disp79, %dfreq80
  %return82 = call double @"abs@FF"(double %output81)
  %output83 = fadd double %return82, 1.000000e+00
  %output84 = fmul double %fw78, %output83
  %x_avg86 = load double, double* %x_avg
  %return88 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output84)
  %return89 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg86, double %return88)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end42, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return89, %end42 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_pcworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca double
  %16 = alloca %nsdata
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca double
  %22 = alloca double
  %23 = alloca <4 x double>
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca %nsdata
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <4 x double>
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %expon1 = load double, double* %expon
  %return = fcmp oeq double %expon1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double 1.000000e+00, double* %x_avg
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %stats3 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @21, i64 0, i64 0), i8** %0
  %return4 = call double @"neg@FF"(double 2.500000e-03)
  store double %return4, double* %1
  store double 6.060160e-01, double* %2
  store double 2.027910e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %cast5 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast5, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %pp7 = load <3 x double>, <3 x double>* %pp
  %disp10 = load double, double* %disp
  %dolw11 = load i64, i64* %dolw
  %cast12 = sitofp i64 %dolw11 to double
  %output = fmul double %disp10, %cast12
  %return13 = fcmp one double %output, 0.000000e+00
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  %cast18 = call <3 x double> @"set@VF"(double 1.234560e+02)
  %output19 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %cast18)
  %dfreq20 = load double, double* %dfreq
  %cast21 = call <3 x double> @"set@VF"(double %dfreq20)
  %output22 = call <3 x double> @"mul@VV"(<3 x double> %output19, <3 x double> %cast21)
  store <3 x double> %output22, <3 x double>* %5
  %per24 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per24, <3 x double>* %6
  %nwrap_pcworleyFB = call double @"nwrap_pcworleyFB@FVVF"(<3 x double>* %5, <3 x double>* %6, double* %7)
  %disp25 = load double, double* %disp
  %output28 = fsub double %nwrap_pcworleyFB, %nsdata.fca.3.extract
  %output29 = fmul double %disp25, %output28
  %output32 = fsub double 1.000000e+00, %nsdata.fca.3.extract
  %return33 = call double @"max@FFF"(double %nsdata.fca.3.extract, double %output32)
  %output34 = call double @"div@FF"(double %output29, double %return33)
  %cast35 = call <3 x double> @"set@VF"(double %output34)
  br label %end16

end16:                                            ; preds = %true15, %end
  %dpl.0 = phi <3 x double> [ %cast35, %true15 ], [ %cast5, %end ]
  %gflow36 = load double, double* %gflow
  %dogw37 = load i64, i64* %dogw
  %cast38 = sitofp i64 %dogw37 to double
  %output39 = fmul double %gflow36, %cast38
  %return40 = fcmp one double %output39, 0.000000e+00
  br i1 %return40, label %true42, label %end43

true42:                                           ; preds = %end16
  %pp45 = load <3 x double>, <3 x double>* %pp
  store <3 x double> %pp45, <3 x double>* %8
  %per46 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per46, <3 x double>* %9
  store double 5.000000e-02, double* %11
  %fngrad_pcworleyFB = call <3 x double> @"fngrad_pcworleyFB@VVVFF"(<3 x double>* %8, <3 x double>* %9, double* %10, double* %11)
  %cast47 = call <3 x double> @"set@VF"(double %gflow36)
  %output48 = call <3 x double> @"mul@VV"(<3 x double> %cast47, <3 x double> %fngrad_pcworleyFB)
  br label %end43

end43:                                            ; preds = %true42, %end16
  %dpg.0 = phi <3 x double> [ %output48, %true42 ], [ %cast5, %end16 ]
  %pp49 = load <3 x double>, <3 x double>* %pp
  %accl50 = load i64, i64* %accl
  %cast52 = call <3 x double> @"set@VI"(i64 %accl50)
  %output53 = call <3 x double> @"mul@VV"(<3 x double> %cast52, <3 x double> %dpl.0)
  %accg54 = load i64, i64* %accg
  %cast56 = call <3 x double> @"set@VI"(i64 %accg54)
  %output57 = call <3 x double> @"mul@VV"(<3 x double> %cast56, <3 x double> %dpg.0)
  %output58 = call <3 x double> @"add@VV"(<3 x double> %output53, <3 x double> %output57)
  %output59 = call <3 x double> @"add@VV"(<3 x double> %pp49, <3 x double> %output58)
  store <3 x double> %output59, <3 x double>* %pp
  %output62 = call <3 x double> @"add@VV"(<3 x double> %dpl.0, <3 x double> %dpg.0)
  store <3 x double> %output62, <3 x double>* %x_off
  store double %nsdata.fca.3.extract, double* %x_avg
  %x_off65 = load <3 x double>, <3 x double>* %x_off
  %output66 = call <3 x double> @"add@VV"(<3 x double> %pp7, <3 x double> %x_off65)
  store <3 x double> %output66, <3 x double>* %12
  %per68 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per68, <3 x double>* %13
  %nwrap_pcworleyFB69 = call double @"nwrap_pcworleyFB@FVVF"(<3 x double>* %12, <3 x double>* %13, double* %14)
  store double %nwrap_pcworleyFB69, double* %15
  %stats71.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats71.fca.0.gep
  %stats71.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats71.fca.1.gep
  %stats71.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats71.fca.2.gep
  %stats71.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats71.fca.3.gep
  %stats71.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %16, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats71.fca.4.gep
  %inv72 = load i64, i64* %inv
  store i64 %inv72, i64* %17
  %fold73 = load i64, i64* %fold
  store i64 %fold73, i64* %18
  %expon74 = load double, double* %expon
  store double %expon74, double* %22
  %noise_correct = call double @"noise_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %15, %nsdata* %16, i64* %17, i64* %18, i64* %19, i64* %20, double* %21, double* %22, <4 x double>* %23, i64* %24, i64* %25, double* %26, double* %27, double* %28, double* %29)
  %stats75.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats75.fca.0.gep
  %stats75.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats75.fca.1.gep
  %stats75.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats75.fca.2.gep
  %stats75.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats75.fca.3.gep
  %stats75.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %30, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats75.fca.4.gep
  %inv76 = load i64, i64* %inv
  store i64 %inv76, i64* %31
  %fold77 = load i64, i64* %fold
  store i64 %fold77, i64* %32
  %expon78 = load double, double* %expon
  store double %expon78, double* %36
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %30, i64* %31, i64* %32, i64* %33, i64* %34, double* %35, double* %36, <4 x double>* %37, i64* %38, i64* %39, double* %40, double* %41, double* %42, double* %43)
  store double %navg_correct, double* %x_avg
  %fw79 = load double, double* %fw
  %disp80 = load double, double* %disp
  %dfreq81 = load double, double* %dfreq
  %output82 = fmul double %disp80, %dfreq81
  %return83 = call double @"abs@FF"(double %output82)
  %output84 = fadd double %return83, 1.000000e+00
  %output85 = fmul double %fw79, %output84
  %x_avg87 = load double, double* %x_avg
  %return89 = call double @"smooth@FFFF"(double 3.500000e-01, double 8.500000e-01, double %output85)
  %return90 = call double @"lerp@FFFF"(double %noise_correct, double %x_avg87, double %return89)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end43, %true
  %UnifiedRetVal = phi double [ 1.000000e+00, %true ], [ %return90, %end43 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %scale, double* %blend) #1 {
__llvm_entry:
  %scale1 = load double, double* %scale
  %0 = insertvalue %nndata undef, double %scale1, 0
  %blend2 = load double, double* %blend
  %1 = insertvalue %nndata %0, double %blend2, 1
  ret %nndata %1
}

; Function Attrs: alwaysinline nounwind
define private %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"() #1 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  store double 0.000000e+00, double* %1
  store double 0.000000e+00, double* %0
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %1, double* %0)
  ret %nndata %nndata
}

; Function Attrs: alwaysinline nounwind
define private double @"nattencomp@FFFF"(double* %x, double* %k, double* %e) #1 {
__llvm_entry:
  %x1 = load double, double* %x
  %output = fmul double %x1, %x1
  %output3 = fsub double 1.000000e+00, %output
  %e4 = load double, double* %e
  %output5 = fmul double %e4, 5.000000e-01
  %return = call double @"pow@FFF"(double %output3, double %output5)
  %k6 = load double, double* %k
  %output7 = fsub double 1.000000e+00, %k6
  %output8 = fmul double %return, %output7
  %output10 = fadd double %output8, %k6
  ret double %output10
}

; Function Attrs: alwaysinline nounwind
define private double @"natten@FFFF"(double* %n, double* %k, double* %e) #1 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %n1 = load double, double* %n
  %output = fmul double %n1, 2.000000e+00
  %output2 = fsub double %output, 1.000000e+00
  store double %output2, double* %0
  %k4 = load double, double* %k
  store double %k4, double* %1
  %e5 = load double, double* %e
  store double %e5, double* %2
  %nattencomp = call double @"nattencomp@FFFF"(double* %0, double* %1, double* %2)
  ret double %nattencomp
}

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare double @"frac@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"ne@IVV"(<3 x double>, <3 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"sqrt@VV"(<3 x double>) #0

; Function Attrs: nounwind
declare <3 x double> @"clamp@VVVV"(<3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: alwaysinline nounwind
define private double @"fBm_sine@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @22, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.000000e+00, double* %2
  store double 5.000000e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 6.000000e+00, double* %5
  store double 2.500000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_sine = call double @"noise_sine@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return = fcmp oge double %fsize26, 1.000000e+00
  %return27 = zext i1 %return to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p41, <3 x double>* %pp
  %output44 = fsub double %noise_sine, %navg_correct14
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output50 = fmul double %gain47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output58 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output58, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return64 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return65 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return64)
  br label %body

body:                                             ; preds = %end103, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end103 ]
  %fw.0 = phi double [ %output54, %end ], [ %output98, %end103 ]
  %out.0 = phi double [ %output44, %end ], [ %output136, %end103 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output143, %end103 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end103 ]
  %output77 = fmul double %w.0, %output50
  %output79 = fadd double %oct.0, 1.000000e+00
  %maxoctaves81 = load double, double* %maxoctaves
  %return82 = fcmp ogt double %output79, %maxoctaves81
  br i1 %return82, label %true84, label %end85

end74:                                            ; preds = %end103
  store double %oct.2, double* %x_oct
  %return146 = fcmp one double %output143, 0.000000e+00
  br i1 %return146, label %true148, label %end149

true84:                                           ; preds = %body
  %return89 = call double @"frac@FF"(double %maxoctaves81)
  store double %return89, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output90 = fmul double %output77, %bias
  br label %end85

end85:                                            ; preds = %true84, %body
  %oct.1 = phi double [ %maxoctaves81, %true84 ], [ %output79, %body ]
  %w.1 = phi double [ %output90, %true84 ], [ %output77, %body ]
  %pp92 = load <3 x double>, <3 x double>* %pp
  %cast94 = call <3 x double> @"set@VF"(double %return46)
  %output95 = call <3 x double> @"mul@VV"(<3 x double> %pp92, <3 x double> %cast94)
  store <3 x double> %output95, <3 x double>* %pp
  %output98 = fmul double %fw.0, %return46
  %return100 = fcmp ogt double %output98, 1.000000e+00
  br i1 %return100, label %true102, label %end103

true102:                                          ; preds = %end85
  %output105 = fsub double 1.000000e+00, %fw.0
  %output108 = fsub double %output98, %fw.0
  %output109 = call double @"div@FF"(double %output105, double %output108)
  %output112 = fsub double 1.000000e+00, %output109
  %output113 = fsub double %oct.1, %output112
  %output116 = fmul double %w.1, %output109
  br label %end103

end103:                                           ; preds = %true102, %end85
  %oct.2 = phi double [ %output113, %true102 ], [ %oct.1, %end85 ]
  %w.2 = phi double [ %output116, %true102 ], [ %w.1, %end85 ]
  %inv117 = load i64, i64* %inv
  store i64 %inv117, i64* %52
  %fold118 = load i64, i64* %fold
  store i64 %fold118, i64* %53
  %accl119 = load i64, i64* %accl
  store i64 %accl119, i64* %54
  %accg120 = load i64, i64* %accg
  store i64 %accg120, i64* %55
  %fsize121 = load double, double* %fsize
  store double %fsize121, double* %56
  %expon122 = load double, double* %expon
  store double %expon122, double* %57
  %dolw123 = load i64, i64* %dolw
  store i64 %dolw123, i64* %59
  %dogw124 = load i64, i64* %dogw
  store i64 %dogw124, i64* %60
  %disp125 = load double, double* %disp
  store double %disp125, double* %61
  %dfreq126 = load double, double* %dfreq
  store double %dfreq126, double* %62
  %gflow127 = load double, double* %gflow
  store double %gflow127, double* %63
  %noise_sine128 = call double @"noise_sine@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output131 = fsub double %noise_sine128, %navg_correct14
  %output135 = fmul double %w.2, %output131
  %output136 = fadd double %out.0, %output135
  %output140 = fmul double %return65, %w.2
  %output142 = fmul double %output140, %w.2
  %output143 = fadd double %wsum.0, %output142
  %maxoctaves67 = load double, double* %maxoctaves
  %return68 = fcmp olt double %oct.2, %maxoctaves67
  %return69 = zext i1 %return68 to i64
  %return71 = fcmp olt double %output98, 1.000000e+00
  %return72 = zext i1 %return71 to i64
  %return73 = call i64 @"and@III"(i64 %return69, i64 %return72)
  %70 = icmp ne i64 %return73, 0
  br i1 %70, label %body, label %end74

true148:                                          ; preds = %end74
  %return152 = call double @"sqrt@FF"(double %output143)
  %output153 = call double @"div@FF"(double %output136, double %return152)
  br label %end149

end149:                                           ; preds = %true148, %end74
  %out.1 = phi double [ %output153, %true148 ], [ %output136, %end74 ]
  %output158 = fadd double %out.1, %navg_correct14
  store double %output158, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return159 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output160 = fmul double %out.1, %return159
  %output162 = fadd double %output160, %navg_correct14
  %return164 = call double @"clamp@FFFF"(double %output162, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end149, %true
  %UnifiedRetVal = phi double [ %noise_sine, %true ], [ %return164, %end149 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_sine@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @22, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.000000e+00, double* %2
  store double 5.000000e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 6.000000e+00, double* %5
  store double 2.500000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_sine = call double @"noise_sine@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return = fcmp oge double %fsize26, 1.000000e+00
  %return27 = zext i1 %return to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p41, <3 x double>* %pp
  %output44 = fsub double %noise_sine, %navg_correct14
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return48 = call double @"abs@FF"(double %gain47)
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output51 = fmul double %return48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output60 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output60, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return66 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return67 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return66)
  br label %body

body:                                             ; preds = %end105, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end105 ]
  %fw.0 = phi double [ %output55, %end ], [ %output100, %end105 ]
  %out.0 = phi double [ %output44, %end ], [ %output138, %end105 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end105 ]
  %w.0 = phi double [ %noise_sine, %end ], [ %w.2, %end105 ]
  %output79 = fmul double %w.0, %output51
  %output81 = fadd double %oct.0, 1.000000e+00
  %maxoctaves83 = load double, double* %maxoctaves
  %return84 = fcmp ogt double %output81, %maxoctaves83
  br i1 %return84, label %true86, label %end87

end76:                                            ; preds = %end105
  store double %oct.2, double* %x_oct
  %return148 = fcmp one double %output145, 0.000000e+00
  br i1 %return148, label %true150, label %end151

true86:                                           ; preds = %body
  %return91 = call double @"frac@FF"(double %maxoctaves83)
  store double %return91, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output92 = fmul double %output79, %bias
  br label %end87

end87:                                            ; preds = %true86, %body
  %oct.1 = phi double [ %maxoctaves83, %true86 ], [ %output81, %body ]
  %w.1 = phi double [ %output92, %true86 ], [ %output79, %body ]
  %pp94 = load <3 x double>, <3 x double>* %pp
  %cast96 = call <3 x double> @"set@VF"(double %return46)
  %output97 = call <3 x double> @"mul@VV"(<3 x double> %pp94, <3 x double> %cast96)
  store <3 x double> %output97, <3 x double>* %pp
  %output100 = fmul double %fw.0, %return46
  %return102 = fcmp ogt double %output100, 1.000000e+00
  br i1 %return102, label %true104, label %end105

true104:                                          ; preds = %end87
  %output107 = fsub double 1.000000e+00, %fw.0
  %output110 = fsub double %output100, %fw.0
  %output111 = call double @"div@FF"(double %output107, double %output110)
  %output114 = fsub double 1.000000e+00, %output111
  %output115 = fsub double %oct.1, %output114
  %output118 = fmul double %w.1, %output111
  br label %end105

end105:                                           ; preds = %true104, %end87
  %oct.2 = phi double [ %output115, %true104 ], [ %oct.1, %end87 ]
  %w.2 = phi double [ %output118, %true104 ], [ %w.1, %end87 ]
  %inv119 = load i64, i64* %inv
  store i64 %inv119, i64* %52
  %fold120 = load i64, i64* %fold
  store i64 %fold120, i64* %53
  %accl121 = load i64, i64* %accl
  store i64 %accl121, i64* %54
  %accg122 = load i64, i64* %accg
  store i64 %accg122, i64* %55
  %fsize123 = load double, double* %fsize
  store double %fsize123, double* %56
  %expon124 = load double, double* %expon
  store double %expon124, double* %57
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_sine130 = call double @"noise_sine@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_sine130, %navg_correct14
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return67, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %maxoctaves69 = load double, double* %maxoctaves
  %return70 = fcmp olt double %oct.2, %maxoctaves69
  %return71 = zext i1 %return70 to i64
  %return73 = fcmp olt double %output100, 1.000000e+00
  %return74 = zext i1 %return73 to i64
  %return75 = call i64 @"and@III"(i64 %return71, i64 %return74)
  %70 = icmp ne i64 %return75, 0
  br i1 %70, label %body, label %end76

true150:                                          ; preds = %end76
  %return154 = call double @"sqrt@FF"(double %output145)
  %output155 = call double @"div@FF"(double %output138, double %return154)
  br label %end151

end151:                                           ; preds = %true150, %end76
  %out.1 = phi double [ %output155, %true150 ], [ %output138, %end76 ]
  %output160 = fadd double %out.1, %navg_correct14
  store double %output160, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return161 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output162 = fmul double %out.1, %return161
  %output164 = fadd double %output162, %navg_correct14
  %return166 = call double @"clamp@FFFF"(double %output164, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end151, %true
  %UnifiedRetVal = phi double [ %noise_sine, %true ], [ %return166, %end151 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_sine@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @22, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.000000e+00, double* %2
  store double 5.000000e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 6.000000e+00, double* %5
  store double 2.500000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_sine = call double @"noise_sine@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return = fcmp oge double %fsize26, 1.000000e+00
  %return27 = zext i1 %return to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p41, <3 x double>* %pp
  %output44 = fsub double %noise_sine, %navg_correct14
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return48 = call double @"abs@FF"(double %gain47)
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output51 = fmul double %return48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output58 = fmul double %noise_sine, 2.000000e+00
  %output61 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  br label %body

body:                                             ; preds = %end106, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end106 ]
  %fw.0 = phi double [ %output55, %end ], [ %output101, %end106 ]
  %out.0 = phi double [ %output44, %end ], [ %output139, %end106 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output146, %end106 ]
  %w.0 = phi double [ %output58, %end ], [ %output152, %end106 ]
  %output80 = fmul double %w.0, %output51
  %output82 = fadd double %oct.0, 1.000000e+00
  %maxoctaves84 = load double, double* %maxoctaves
  %return85 = fcmp ogt double %output82, %maxoctaves84
  br i1 %return85, label %true87, label %end88

end77:                                            ; preds = %end106
  store double %oct.2, double* %x_oct
  %return155 = fcmp one double %output146, 0.000000e+00
  br i1 %return155, label %true157, label %end158

true87:                                           ; preds = %body
  %return92 = call double @"frac@FF"(double %maxoctaves84)
  store double %return92, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output93 = fmul double %output80, %bias
  br label %end88

end88:                                            ; preds = %true87, %body
  %oct.1 = phi double [ %maxoctaves84, %true87 ], [ %output82, %body ]
  %w.1 = phi double [ %output93, %true87 ], [ %output80, %body ]
  %pp95 = load <3 x double>, <3 x double>* %pp
  %cast97 = call <3 x double> @"set@VF"(double %return46)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %pp95, <3 x double> %cast97)
  store <3 x double> %output98, <3 x double>* %pp
  %output101 = fmul double %fw.0, %return46
  %return103 = fcmp ogt double %output101, 1.000000e+00
  br i1 %return103, label %true105, label %end106

true105:                                          ; preds = %end88
  %output108 = fsub double 1.000000e+00, %fw.0
  %output111 = fsub double %output101, %fw.0
  %output112 = call double @"div@FF"(double %output108, double %output111)
  %output115 = fsub double 1.000000e+00, %output112
  %output116 = fsub double %oct.1, %output115
  %output119 = fmul double %w.1, %output112
  br label %end106

end106:                                           ; preds = %true105, %end88
  %oct.2 = phi double [ %output116, %true105 ], [ %oct.1, %end88 ]
  %w.2 = phi double [ %output119, %true105 ], [ %w.1, %end88 ]
  %inv120 = load i64, i64* %inv
  store i64 %inv120, i64* %52
  %fold121 = load i64, i64* %fold
  store i64 %fold121, i64* %53
  %accl122 = load i64, i64* %accl
  store i64 %accl122, i64* %54
  %accg123 = load i64, i64* %accg
  store i64 %accg123, i64* %55
  %fsize124 = load double, double* %fsize
  store double %fsize124, double* %56
  %expon125 = load double, double* %expon
  store double %expon125, double* %57
  %dolw126 = load i64, i64* %dolw
  store i64 %dolw126, i64* %59
  %dogw127 = load i64, i64* %dogw
  store i64 %dogw127, i64* %60
  %disp128 = load double, double* %disp
  store double %disp128, double* %61
  %dfreq129 = load double, double* %dfreq
  store double %dfreq129, double* %62
  %gflow130 = load double, double* %gflow
  store double %gflow130, double* %63
  %noise_sine131 = call double @"noise_sine@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output134 = fsub double %noise_sine131, %navg_correct14
  %output138 = fmul double %w.2, %output134
  %output139 = fadd double %out.0, %output138
  %output143 = fmul double %return68, %w.2
  %output145 = fmul double %output143, %w.2
  %output146 = fadd double %wsum.0, %output145
  %output150 = fadd double %output134, %navg_correct14
  %output151 = fmul double 2.000000e+00, %output150
  %output152 = fmul double %w.2, %output151
  %maxoctaves70 = load double, double* %maxoctaves
  %return71 = fcmp olt double %oct.2, %maxoctaves70
  %return72 = zext i1 %return71 to i64
  %return74 = fcmp olt double %output101, 1.000000e+00
  %return75 = zext i1 %return74 to i64
  %return76 = call i64 @"and@III"(i64 %return72, i64 %return75)
  %70 = icmp ne i64 %return76, 0
  br i1 %70, label %body, label %end77

true157:                                          ; preds = %end77
  %return161 = call double @"sqrt@FF"(double %output146)
  %output162 = call double @"div@FF"(double %output139, double %return161)
  br label %end158

end158:                                           ; preds = %true157, %end77
  %out.1 = phi double [ %output162, %true157 ], [ %output139, %end77 ]
  %output167 = fadd double %out.1, %navg_correct14
  store double %output167, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return168 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output169 = fmul double %out.1, %return168
  %output171 = fadd double %output169, %navg_correct14
  %return173 = call double @"clamp@FFFF"(double %output171, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end158, %true
  %UnifiedRetVal = phi double [ %noise_sine, %true ], [ %return173, %end158 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_value_fast@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 1.004310e+00)
  store double %return, double* %1
  store double 1.029750e+00, double* %2
  store double 4.937390e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_value_fast = call double @"noise_value_fast@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_value_fast, %navg_correct14
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output51 = fmul double %gain48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output59 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output55, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output45, %end ], [ %output137, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output144, %end104 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output51
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return147 = fcmp one double %output144, 0.000000e+00
  br i1 %return147, label %true149, label %end150

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return47)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return47
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %dolw124 = load i64, i64* %dolw
  store i64 %dolw124, i64* %59
  %dogw125 = load i64, i64* %dogw
  store i64 %dogw125, i64* %60
  %disp126 = load double, double* %disp
  store double %disp126, double* %61
  %dfreq127 = load double, double* %dfreq
  store double %dfreq127, double* %62
  %gflow128 = load double, double* %gflow
  store double %gflow128, double* %63
  %noise_value_fast129 = call double @"noise_value_fast@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output132 = fsub double %noise_value_fast129, %navg_correct14
  %output136 = fmul double %w.2, %output132
  %output137 = fadd double %out.0, %output136
  %output141 = fmul double %return66, %w.2
  %output143 = fmul double %output141, %w.2
  %output144 = fadd double %wsum.0, %output143
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true149:                                          ; preds = %end75
  %return153 = call double @"sqrt@FF"(double %output144)
  %output154 = call double @"div@FF"(double %output137, double %return153)
  br label %end150

end150:                                           ; preds = %true149, %end75
  %out.1 = phi double [ %output154, %true149 ], [ %output137, %end75 ]
  %output159 = fadd double %out.1, %navg_correct14
  store double %output159, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return160 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output161 = fmul double %out.1, %return160
  %output163 = fadd double %output161, %navg_correct14
  %return165 = call double @"clamp@FFFF"(double %output163, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end150, %true
  %UnifiedRetVal = phi double [ %noise_value_fast, %true ], [ %return165, %end150 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_value_fast@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 1.004310e+00)
  store double %return, double* %1
  store double 1.029750e+00, double* %2
  store double 4.937390e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_value_fast = call double @"noise_value_fast@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_value_fast, %navg_correct14
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output61 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  br label %body

body:                                             ; preds = %end106, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end106 ]
  %fw.0 = phi double [ %output56, %end ], [ %output101, %end106 ]
  %out.0 = phi double [ %output45, %end ], [ %output139, %end106 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output146, %end106 ]
  %w.0 = phi double [ %noise_value_fast, %end ], [ %w.2, %end106 ]
  %output80 = fmul double %w.0, %output52
  %output82 = fadd double %oct.0, 1.000000e+00
  %maxoctaves84 = load double, double* %maxoctaves
  %return85 = fcmp ogt double %output82, %maxoctaves84
  br i1 %return85, label %true87, label %end88

end77:                                            ; preds = %end106
  store double %oct.2, double* %x_oct
  %return149 = fcmp one double %output146, 0.000000e+00
  br i1 %return149, label %true151, label %end152

true87:                                           ; preds = %body
  %return92 = call double @"frac@FF"(double %maxoctaves84)
  store double %return92, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output93 = fmul double %output80, %bias
  br label %end88

end88:                                            ; preds = %true87, %body
  %oct.1 = phi double [ %maxoctaves84, %true87 ], [ %output82, %body ]
  %w.1 = phi double [ %output93, %true87 ], [ %output80, %body ]
  %pp95 = load <3 x double>, <3 x double>* %pp
  %cast97 = call <3 x double> @"set@VF"(double %return47)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %pp95, <3 x double> %cast97)
  store <3 x double> %output98, <3 x double>* %pp
  %output101 = fmul double %fw.0, %return47
  %return103 = fcmp ogt double %output101, 1.000000e+00
  br i1 %return103, label %true105, label %end106

true105:                                          ; preds = %end88
  %output108 = fsub double 1.000000e+00, %fw.0
  %output111 = fsub double %output101, %fw.0
  %output112 = call double @"div@FF"(double %output108, double %output111)
  %output115 = fsub double 1.000000e+00, %output112
  %output116 = fsub double %oct.1, %output115
  %output119 = fmul double %w.1, %output112
  br label %end106

end106:                                           ; preds = %true105, %end88
  %oct.2 = phi double [ %output116, %true105 ], [ %oct.1, %end88 ]
  %w.2 = phi double [ %output119, %true105 ], [ %w.1, %end88 ]
  %inv120 = load i64, i64* %inv
  store i64 %inv120, i64* %52
  %fold121 = load i64, i64* %fold
  store i64 %fold121, i64* %53
  %accl122 = load i64, i64* %accl
  store i64 %accl122, i64* %54
  %accg123 = load i64, i64* %accg
  store i64 %accg123, i64* %55
  %fsize124 = load double, double* %fsize
  store double %fsize124, double* %56
  %expon125 = load double, double* %expon
  store double %expon125, double* %57
  %dolw126 = load i64, i64* %dolw
  store i64 %dolw126, i64* %59
  %dogw127 = load i64, i64* %dogw
  store i64 %dogw127, i64* %60
  %disp128 = load double, double* %disp
  store double %disp128, double* %61
  %dfreq129 = load double, double* %dfreq
  store double %dfreq129, double* %62
  %gflow130 = load double, double* %gflow
  store double %gflow130, double* %63
  %noise_value_fast131 = call double @"noise_value_fast@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output134 = fsub double %noise_value_fast131, %navg_correct14
  %output138 = fmul double %w.2, %output134
  %output139 = fadd double %out.0, %output138
  %output143 = fmul double %return68, %w.2
  %output145 = fmul double %output143, %w.2
  %output146 = fadd double %wsum.0, %output145
  %maxoctaves70 = load double, double* %maxoctaves
  %return71 = fcmp olt double %oct.2, %maxoctaves70
  %return72 = zext i1 %return71 to i64
  %return74 = fcmp olt double %output101, 1.000000e+00
  %return75 = zext i1 %return74 to i64
  %return76 = call i64 @"and@III"(i64 %return72, i64 %return75)
  %70 = icmp ne i64 %return76, 0
  br i1 %70, label %body, label %end77

true151:                                          ; preds = %end77
  %return155 = call double @"sqrt@FF"(double %output146)
  %output156 = call double @"div@FF"(double %output139, double %return155)
  br label %end152

end152:                                           ; preds = %true151, %end77
  %out.1 = phi double [ %output156, %true151 ], [ %output139, %end77 ]
  %output161 = fadd double %out.1, %navg_correct14
  store double %output161, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return162 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output163 = fmul double %out.1, %return162
  %output165 = fadd double %output163, %navg_correct14
  %return167 = call double @"clamp@FFFF"(double %output165, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end152, %true
  %UnifiedRetVal = phi double [ %noise_value_fast, %true ], [ %return167, %end152 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_value_fast@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 1.004310e+00)
  store double %return, double* %1
  store double 1.029750e+00, double* %2
  store double 4.937390e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_value_fast = call double @"noise_value_fast@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_value_fast, %navg_correct14
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output59 = fmul double %noise_value_fast, 2.000000e+00
  %output62 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output62, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return68 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return69 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return68)
  br label %body

body:                                             ; preds = %end107, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end107 ]
  %fw.0 = phi double [ %output56, %end ], [ %output102, %end107 ]
  %out.0 = phi double [ %output45, %end ], [ %output140, %end107 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output147, %end107 ]
  %w.0 = phi double [ %output59, %end ], [ %output153, %end107 ]
  %output81 = fmul double %w.0, %output52
  %output83 = fadd double %oct.0, 1.000000e+00
  %maxoctaves85 = load double, double* %maxoctaves
  %return86 = fcmp ogt double %output83, %maxoctaves85
  br i1 %return86, label %true88, label %end89

end78:                                            ; preds = %end107
  store double %oct.2, double* %x_oct
  %return156 = fcmp one double %output147, 0.000000e+00
  br i1 %return156, label %true158, label %end159

true88:                                           ; preds = %body
  %return93 = call double @"frac@FF"(double %maxoctaves85)
  store double %return93, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output94 = fmul double %output81, %bias
  br label %end89

end89:                                            ; preds = %true88, %body
  %oct.1 = phi double [ %maxoctaves85, %true88 ], [ %output83, %body ]
  %w.1 = phi double [ %output94, %true88 ], [ %output81, %body ]
  %pp96 = load <3 x double>, <3 x double>* %pp
  %cast98 = call <3 x double> @"set@VF"(double %return47)
  %output99 = call <3 x double> @"mul@VV"(<3 x double> %pp96, <3 x double> %cast98)
  store <3 x double> %output99, <3 x double>* %pp
  %output102 = fmul double %fw.0, %return47
  %return104 = fcmp ogt double %output102, 1.000000e+00
  br i1 %return104, label %true106, label %end107

true106:                                          ; preds = %end89
  %output109 = fsub double 1.000000e+00, %fw.0
  %output112 = fsub double %output102, %fw.0
  %output113 = call double @"div@FF"(double %output109, double %output112)
  %output116 = fsub double 1.000000e+00, %output113
  %output117 = fsub double %oct.1, %output116
  %output120 = fmul double %w.1, %output113
  br label %end107

end107:                                           ; preds = %true106, %end89
  %oct.2 = phi double [ %output117, %true106 ], [ %oct.1, %end89 ]
  %w.2 = phi double [ %output120, %true106 ], [ %w.1, %end89 ]
  %inv121 = load i64, i64* %inv
  store i64 %inv121, i64* %52
  %fold122 = load i64, i64* %fold
  store i64 %fold122, i64* %53
  %accl123 = load i64, i64* %accl
  store i64 %accl123, i64* %54
  %accg124 = load i64, i64* %accg
  store i64 %accg124, i64* %55
  %fsize125 = load double, double* %fsize
  store double %fsize125, double* %56
  %expon126 = load double, double* %expon
  store double %expon126, double* %57
  %dolw127 = load i64, i64* %dolw
  store i64 %dolw127, i64* %59
  %dogw128 = load i64, i64* %dogw
  store i64 %dogw128, i64* %60
  %disp129 = load double, double* %disp
  store double %disp129, double* %61
  %dfreq130 = load double, double* %dfreq
  store double %dfreq130, double* %62
  %gflow131 = load double, double* %gflow
  store double %gflow131, double* %63
  %noise_value_fast132 = call double @"noise_value_fast@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output135 = fsub double %noise_value_fast132, %navg_correct14
  %output139 = fmul double %w.2, %output135
  %output140 = fadd double %out.0, %output139
  %output144 = fmul double %return69, %w.2
  %output146 = fmul double %output144, %w.2
  %output147 = fadd double %wsum.0, %output146
  %output151 = fadd double %output135, %navg_correct14
  %output152 = fmul double 2.000000e+00, %output151
  %output153 = fmul double %w.2, %output152
  %maxoctaves71 = load double, double* %maxoctaves
  %return72 = fcmp olt double %oct.2, %maxoctaves71
  %return73 = zext i1 %return72 to i64
  %return75 = fcmp olt double %output102, 1.000000e+00
  %return76 = zext i1 %return75 to i64
  %return77 = call i64 @"and@III"(i64 %return73, i64 %return76)
  %70 = icmp ne i64 %return77, 0
  br i1 %70, label %body, label %end78

true158:                                          ; preds = %end78
  %return162 = call double @"sqrt@FF"(double %output147)
  %output163 = call double @"div@FF"(double %output140, double %return162)
  br label %end159

end159:                                           ; preds = %true158, %end78
  %out.1 = phi double [ %output163, %true158 ], [ %output140, %end78 ]
  %output168 = fadd double %out.1, %navg_correct14
  store double %output168, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return169 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output170 = fmul double %out.1, %return169
  %output172 = fadd double %output170, %navg_correct14
  %return174 = call double @"clamp@FFFF"(double %output172, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end159, %true
  %UnifiedRetVal = phi double [ %noise_value_fast, %true ], [ %return174, %end159 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_pvalue_fast@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 7.618160e-01)
  store double %return, double* %1
  store double 8.163580e-01, double* %2
  store double 4.826150e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %per21 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per21, <3 x double>* %43
  %dolw22 = load i64, i64* %dolw
  store i64 %dolw22, i64* %44
  %dogw23 = load i64, i64* %dogw
  store i64 %dogw23, i64* %45
  %disp24 = load double, double* %disp
  store double %disp24, double* %46
  %dfreq25 = load double, double* %dfreq
  store double %dfreq25, double* %47
  %gflow26 = load double, double* %gflow
  store double %gflow26, double* %48
  %noise_pvalue_fast = call double @"noise_pvalue_fast@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize27 = load double, double* %fsize
  %return28 = fcmp oge double %fsize27, 1.000000e+00
  %return29 = zext i1 %return28 to i64
  %maxoctaves31 = load double, double* %maxoctaves
  %return32 = fcmp ogt double 0.000000e+00, %maxoctaves31
  %return33 = zext i1 %return32 to i64
  %return34 = call i64 @"or@III"(i64 %return29, i64 %return33)
  %lacunarity35 = load double, double* %lacunarity
  %output = fmul double %lacunarity35, %maxoctaves31
  %gain37 = load double, double* %gain
  %output38 = fmul double %output, %gain37
  %return39 = fcmp oeq double %output38, 0.000000e+00
  %return40 = zext i1 %return39 to i64
  %return41 = call i64 @"or@III"(i64 %return34, i64 %return40)
  %68 = icmp ne i64 %return41, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p43 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p43, <3 x double>* %pp
  %output46 = fsub double %noise_pvalue_fast, %navg_correct14
  %lacunarity47 = load double, double* %lacunarity
  %return48 = call double @"abs@FF"(double %lacunarity47)
  %gain49 = load double, double* %gain
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return48)
  %output52 = fmul double %gain49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output60 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output60, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return66 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return48)
  %return67 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return66)
  br label %body

body:                                             ; preds = %end105, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end105 ]
  %fw.0 = phi double [ %output56, %end ], [ %output100, %end105 ]
  %out.0 = phi double [ %output46, %end ], [ %output139, %end105 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output146, %end105 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end105 ]
  %output79 = fmul double %w.0, %output52
  %output81 = fadd double %oct.0, 1.000000e+00
  %maxoctaves83 = load double, double* %maxoctaves
  %return84 = fcmp ogt double %output81, %maxoctaves83
  br i1 %return84, label %true86, label %end87

end76:                                            ; preds = %end105
  store double %oct.2, double* %x_oct
  %return149 = fcmp one double %output146, 0.000000e+00
  br i1 %return149, label %true151, label %end152

true86:                                           ; preds = %body
  %return91 = call double @"frac@FF"(double %maxoctaves83)
  store double %return91, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output92 = fmul double %output79, %bias
  br label %end87

end87:                                            ; preds = %true86, %body
  %oct.1 = phi double [ %maxoctaves83, %true86 ], [ %output81, %body ]
  %w.1 = phi double [ %output92, %true86 ], [ %output79, %body ]
  %pp94 = load <3 x double>, <3 x double>* %pp
  %cast96 = call <3 x double> @"set@VF"(double %return48)
  %output97 = call <3 x double> @"mul@VV"(<3 x double> %pp94, <3 x double> %cast96)
  store <3 x double> %output97, <3 x double>* %pp
  %output100 = fmul double %fw.0, %return48
  %return102 = fcmp ogt double %output100, 1.000000e+00
  br i1 %return102, label %true104, label %end105

true104:                                          ; preds = %end87
  %output107 = fsub double 1.000000e+00, %fw.0
  %output110 = fsub double %output100, %fw.0
  %output111 = call double @"div@FF"(double %output107, double %output110)
  %output114 = fsub double 1.000000e+00, %output111
  %output115 = fsub double %oct.1, %output114
  %output118 = fmul double %w.1, %output111
  br label %end105

end105:                                           ; preds = %true104, %end87
  %oct.2 = phi double [ %output115, %true104 ], [ %oct.1, %end87 ]
  %w.2 = phi double [ %output118, %true104 ], [ %w.1, %end87 ]
  %inv119 = load i64, i64* %inv
  store i64 %inv119, i64* %52
  %fold120 = load i64, i64* %fold
  store i64 %fold120, i64* %53
  %accl121 = load i64, i64* %accl
  store i64 %accl121, i64* %54
  %accg122 = load i64, i64* %accg
  store i64 %accg122, i64* %55
  %fsize123 = load double, double* %fsize
  store double %fsize123, double* %56
  %expon124 = load double, double* %expon
  store double %expon124, double* %57
  %per125 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per125, <3 x double>* %58
  %dolw126 = load i64, i64* %dolw
  store i64 %dolw126, i64* %59
  %dogw127 = load i64, i64* %dogw
  store i64 %dogw127, i64* %60
  %disp128 = load double, double* %disp
  store double %disp128, double* %61
  %dfreq129 = load double, double* %dfreq
  store double %dfreq129, double* %62
  %gflow130 = load double, double* %gflow
  store double %gflow130, double* %63
  %noise_pvalue_fast131 = call double @"noise_pvalue_fast@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output134 = fsub double %noise_pvalue_fast131, %navg_correct14
  %output138 = fmul double %w.2, %output134
  %output139 = fadd double %out.0, %output138
  %output143 = fmul double %return67, %w.2
  %output145 = fmul double %output143, %w.2
  %output146 = fadd double %wsum.0, %output145
  %maxoctaves69 = load double, double* %maxoctaves
  %return70 = fcmp olt double %oct.2, %maxoctaves69
  %return71 = zext i1 %return70 to i64
  %return73 = fcmp olt double %output100, 1.000000e+00
  %return74 = zext i1 %return73 to i64
  %return75 = call i64 @"and@III"(i64 %return71, i64 %return74)
  %70 = icmp ne i64 %return75, 0
  br i1 %70, label %body, label %end76

true151:                                          ; preds = %end76
  %return155 = call double @"sqrt@FF"(double %output146)
  %output156 = call double @"div@FF"(double %output139, double %return155)
  br label %end152

end152:                                           ; preds = %true151, %end76
  %out.1 = phi double [ %output156, %true151 ], [ %output139, %end76 ]
  %output161 = fadd double %out.1, %navg_correct14
  store double %output161, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return162 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output163 = fmul double %out.1, %return162
  %output165 = fadd double %output163, %navg_correct14
  %return167 = call double @"clamp@FFFF"(double %output165, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end152, %true
  %UnifiedRetVal = phi double [ %noise_pvalue_fast, %true ], [ %return167, %end152 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_pvalue_fast@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 7.618160e-01)
  store double %return, double* %1
  store double 8.163580e-01, double* %2
  store double 4.826150e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %per21 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per21, <3 x double>* %43
  %dolw22 = load i64, i64* %dolw
  store i64 %dolw22, i64* %44
  %dogw23 = load i64, i64* %dogw
  store i64 %dogw23, i64* %45
  %disp24 = load double, double* %disp
  store double %disp24, double* %46
  %dfreq25 = load double, double* %dfreq
  store double %dfreq25, double* %47
  %gflow26 = load double, double* %gflow
  store double %gflow26, double* %48
  %noise_pvalue_fast = call double @"noise_pvalue_fast@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize27 = load double, double* %fsize
  %return28 = fcmp oge double %fsize27, 1.000000e+00
  %return29 = zext i1 %return28 to i64
  %maxoctaves31 = load double, double* %maxoctaves
  %return32 = fcmp ogt double 0.000000e+00, %maxoctaves31
  %return33 = zext i1 %return32 to i64
  %return34 = call i64 @"or@III"(i64 %return29, i64 %return33)
  %lacunarity35 = load double, double* %lacunarity
  %output = fmul double %lacunarity35, %maxoctaves31
  %gain37 = load double, double* %gain
  %output38 = fmul double %output, %gain37
  %return39 = fcmp oeq double %output38, 0.000000e+00
  %return40 = zext i1 %return39 to i64
  %return41 = call i64 @"or@III"(i64 %return34, i64 %return40)
  %68 = icmp ne i64 %return41, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p43 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p43, <3 x double>* %pp
  %output46 = fsub double %noise_pvalue_fast, %navg_correct14
  %lacunarity47 = load double, double* %lacunarity
  %return48 = call double @"abs@FF"(double %lacunarity47)
  %gain49 = load double, double* %gain
  %return50 = call double @"abs@FF"(double %gain49)
  %return52 = call double @"min@FFF"(double 1.000000e+00, double %return48)
  %output53 = fmul double %return50, %return52
  %fsize54 = load double, double* %fsize
  %fold55 = load i64, i64* %fold
  %output56 = add i64 1, %fold55
  %cast = sitofp i64 %output56 to double
  %output57 = fmul double %fsize54, %cast
  %output62 = mul i64 %fold55, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output62, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return68 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return48)
  %return69 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return68)
  br label %body

body:                                             ; preds = %end107, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end107 ]
  %fw.0 = phi double [ %output57, %end ], [ %output102, %end107 ]
  %out.0 = phi double [ %output46, %end ], [ %output141, %end107 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output148, %end107 ]
  %w.0 = phi double [ %noise_pvalue_fast, %end ], [ %w.2, %end107 ]
  %output81 = fmul double %w.0, %output53
  %output83 = fadd double %oct.0, 1.000000e+00
  %maxoctaves85 = load double, double* %maxoctaves
  %return86 = fcmp ogt double %output83, %maxoctaves85
  br i1 %return86, label %true88, label %end89

end78:                                            ; preds = %end107
  store double %oct.2, double* %x_oct
  %return151 = fcmp one double %output148, 0.000000e+00
  br i1 %return151, label %true153, label %end154

true88:                                           ; preds = %body
  %return93 = call double @"frac@FF"(double %maxoctaves85)
  store double %return93, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output94 = fmul double %output81, %bias
  br label %end89

end89:                                            ; preds = %true88, %body
  %oct.1 = phi double [ %maxoctaves85, %true88 ], [ %output83, %body ]
  %w.1 = phi double [ %output94, %true88 ], [ %output81, %body ]
  %pp96 = load <3 x double>, <3 x double>* %pp
  %cast98 = call <3 x double> @"set@VF"(double %return48)
  %output99 = call <3 x double> @"mul@VV"(<3 x double> %pp96, <3 x double> %cast98)
  store <3 x double> %output99, <3 x double>* %pp
  %output102 = fmul double %fw.0, %return48
  %return104 = fcmp ogt double %output102, 1.000000e+00
  br i1 %return104, label %true106, label %end107

true106:                                          ; preds = %end89
  %output109 = fsub double 1.000000e+00, %fw.0
  %output112 = fsub double %output102, %fw.0
  %output113 = call double @"div@FF"(double %output109, double %output112)
  %output116 = fsub double 1.000000e+00, %output113
  %output117 = fsub double %oct.1, %output116
  %output120 = fmul double %w.1, %output113
  br label %end107

end107:                                           ; preds = %true106, %end89
  %oct.2 = phi double [ %output117, %true106 ], [ %oct.1, %end89 ]
  %w.2 = phi double [ %output120, %true106 ], [ %w.1, %end89 ]
  %inv121 = load i64, i64* %inv
  store i64 %inv121, i64* %52
  %fold122 = load i64, i64* %fold
  store i64 %fold122, i64* %53
  %accl123 = load i64, i64* %accl
  store i64 %accl123, i64* %54
  %accg124 = load i64, i64* %accg
  store i64 %accg124, i64* %55
  %fsize125 = load double, double* %fsize
  store double %fsize125, double* %56
  %expon126 = load double, double* %expon
  store double %expon126, double* %57
  %per127 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per127, <3 x double>* %58
  %dolw128 = load i64, i64* %dolw
  store i64 %dolw128, i64* %59
  %dogw129 = load i64, i64* %dogw
  store i64 %dogw129, i64* %60
  %disp130 = load double, double* %disp
  store double %disp130, double* %61
  %dfreq131 = load double, double* %dfreq
  store double %dfreq131, double* %62
  %gflow132 = load double, double* %gflow
  store double %gflow132, double* %63
  %noise_pvalue_fast133 = call double @"noise_pvalue_fast@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output136 = fsub double %noise_pvalue_fast133, %navg_correct14
  %output140 = fmul double %w.2, %output136
  %output141 = fadd double %out.0, %output140
  %output145 = fmul double %return69, %w.2
  %output147 = fmul double %output145, %w.2
  %output148 = fadd double %wsum.0, %output147
  %maxoctaves71 = load double, double* %maxoctaves
  %return72 = fcmp olt double %oct.2, %maxoctaves71
  %return73 = zext i1 %return72 to i64
  %return75 = fcmp olt double %output102, 1.000000e+00
  %return76 = zext i1 %return75 to i64
  %return77 = call i64 @"and@III"(i64 %return73, i64 %return76)
  %70 = icmp ne i64 %return77, 0
  br i1 %70, label %body, label %end78

true153:                                          ; preds = %end78
  %return157 = call double @"sqrt@FF"(double %output148)
  %output158 = call double @"div@FF"(double %output141, double %return157)
  br label %end154

end154:                                           ; preds = %true153, %end78
  %out.1 = phi double [ %output158, %true153 ], [ %output141, %end78 ]
  %output163 = fadd double %out.1, %navg_correct14
  store double %output163, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return164 = call double @"fit@FFFFFF"(double %output53, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output165 = fmul double %out.1, %return164
  %output167 = fadd double %output165, %navg_correct14
  %return169 = call double @"clamp@FFFF"(double %output167, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end154, %true
  %UnifiedRetVal = phi double [ %noise_pvalue_fast, %true ], [ %return169, %end154 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_pvalue_fast@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 7.618160e-01)
  store double %return, double* %1
  store double 8.163580e-01, double* %2
  store double 4.826150e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %per21 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per21, <3 x double>* %43
  %dolw22 = load i64, i64* %dolw
  store i64 %dolw22, i64* %44
  %dogw23 = load i64, i64* %dogw
  store i64 %dogw23, i64* %45
  %disp24 = load double, double* %disp
  store double %disp24, double* %46
  %dfreq25 = load double, double* %dfreq
  store double %dfreq25, double* %47
  %gflow26 = load double, double* %gflow
  store double %gflow26, double* %48
  %noise_pvalue_fast = call double @"noise_pvalue_fast@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize27 = load double, double* %fsize
  %return28 = fcmp oge double %fsize27, 1.000000e+00
  %return29 = zext i1 %return28 to i64
  %maxoctaves31 = load double, double* %maxoctaves
  %return32 = fcmp ogt double 0.000000e+00, %maxoctaves31
  %return33 = zext i1 %return32 to i64
  %return34 = call i64 @"or@III"(i64 %return29, i64 %return33)
  %lacunarity35 = load double, double* %lacunarity
  %output = fmul double %lacunarity35, %maxoctaves31
  %gain37 = load double, double* %gain
  %output38 = fmul double %output, %gain37
  %return39 = fcmp oeq double %output38, 0.000000e+00
  %return40 = zext i1 %return39 to i64
  %return41 = call i64 @"or@III"(i64 %return34, i64 %return40)
  %68 = icmp ne i64 %return41, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p43 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p43, <3 x double>* %pp
  %output46 = fsub double %noise_pvalue_fast, %navg_correct14
  %lacunarity47 = load double, double* %lacunarity
  %return48 = call double @"abs@FF"(double %lacunarity47)
  %gain49 = load double, double* %gain
  %return50 = call double @"abs@FF"(double %gain49)
  %return52 = call double @"min@FFF"(double 1.000000e+00, double %return48)
  %output53 = fmul double %return50, %return52
  %fsize54 = load double, double* %fsize
  %fold55 = load i64, i64* %fold
  %output56 = add i64 1, %fold55
  %cast = sitofp i64 %output56 to double
  %output57 = fmul double %fsize54, %cast
  %output60 = fmul double %noise_pvalue_fast, 2.000000e+00
  %output63 = mul i64 %fold55, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output63, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return69 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return48)
  %return70 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return69)
  br label %body

body:                                             ; preds = %end108, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end108 ]
  %fw.0 = phi double [ %output57, %end ], [ %output103, %end108 ]
  %out.0 = phi double [ %output46, %end ], [ %output142, %end108 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output149, %end108 ]
  %w.0 = phi double [ %output60, %end ], [ %output155, %end108 ]
  %output82 = fmul double %w.0, %output53
  %output84 = fadd double %oct.0, 1.000000e+00
  %maxoctaves86 = load double, double* %maxoctaves
  %return87 = fcmp ogt double %output84, %maxoctaves86
  br i1 %return87, label %true89, label %end90

end79:                                            ; preds = %end108
  store double %oct.2, double* %x_oct
  %return158 = fcmp one double %output149, 0.000000e+00
  br i1 %return158, label %true160, label %end161

true89:                                           ; preds = %body
  %return94 = call double @"frac@FF"(double %maxoctaves86)
  store double %return94, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output95 = fmul double %output82, %bias
  br label %end90

end90:                                            ; preds = %true89, %body
  %oct.1 = phi double [ %maxoctaves86, %true89 ], [ %output84, %body ]
  %w.1 = phi double [ %output95, %true89 ], [ %output82, %body ]
  %pp97 = load <3 x double>, <3 x double>* %pp
  %cast99 = call <3 x double> @"set@VF"(double %return48)
  %output100 = call <3 x double> @"mul@VV"(<3 x double> %pp97, <3 x double> %cast99)
  store <3 x double> %output100, <3 x double>* %pp
  %output103 = fmul double %fw.0, %return48
  %return105 = fcmp ogt double %output103, 1.000000e+00
  br i1 %return105, label %true107, label %end108

true107:                                          ; preds = %end90
  %output110 = fsub double 1.000000e+00, %fw.0
  %output113 = fsub double %output103, %fw.0
  %output114 = call double @"div@FF"(double %output110, double %output113)
  %output117 = fsub double 1.000000e+00, %output114
  %output118 = fsub double %oct.1, %output117
  %output121 = fmul double %w.1, %output114
  br label %end108

end108:                                           ; preds = %true107, %end90
  %oct.2 = phi double [ %output118, %true107 ], [ %oct.1, %end90 ]
  %w.2 = phi double [ %output121, %true107 ], [ %w.1, %end90 ]
  %inv122 = load i64, i64* %inv
  store i64 %inv122, i64* %52
  %fold123 = load i64, i64* %fold
  store i64 %fold123, i64* %53
  %accl124 = load i64, i64* %accl
  store i64 %accl124, i64* %54
  %accg125 = load i64, i64* %accg
  store i64 %accg125, i64* %55
  %fsize126 = load double, double* %fsize
  store double %fsize126, double* %56
  %expon127 = load double, double* %expon
  store double %expon127, double* %57
  %per128 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per128, <3 x double>* %58
  %dolw129 = load i64, i64* %dolw
  store i64 %dolw129, i64* %59
  %dogw130 = load i64, i64* %dogw
  store i64 %dogw130, i64* %60
  %disp131 = load double, double* %disp
  store double %disp131, double* %61
  %dfreq132 = load double, double* %dfreq
  store double %dfreq132, double* %62
  %gflow133 = load double, double* %gflow
  store double %gflow133, double* %63
  %noise_pvalue_fast134 = call double @"noise_pvalue_fast@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output137 = fsub double %noise_pvalue_fast134, %navg_correct14
  %output141 = fmul double %w.2, %output137
  %output142 = fadd double %out.0, %output141
  %output146 = fmul double %return70, %w.2
  %output148 = fmul double %output146, %w.2
  %output149 = fadd double %wsum.0, %output148
  %output153 = fadd double %output137, %navg_correct14
  %output154 = fmul double 2.000000e+00, %output153
  %output155 = fmul double %w.2, %output154
  %maxoctaves72 = load double, double* %maxoctaves
  %return73 = fcmp olt double %oct.2, %maxoctaves72
  %return74 = zext i1 %return73 to i64
  %return76 = fcmp olt double %output103, 1.000000e+00
  %return77 = zext i1 %return76 to i64
  %return78 = call i64 @"and@III"(i64 %return74, i64 %return77)
  %70 = icmp ne i64 %return78, 0
  br i1 %70, label %body, label %end79

true160:                                          ; preds = %end79
  %return164 = call double @"sqrt@FF"(double %output149)
  %output165 = call double @"div@FF"(double %output142, double %return164)
  br label %end161

end161:                                           ; preds = %true160, %end79
  %out.1 = phi double [ %output165, %true160 ], [ %output142, %end79 ]
  %output170 = fadd double %out.1, %navg_correct14
  store double %output170, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return171 = call double @"fit@FFFFFF"(double %output53, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output172 = fmul double %out.1, %return171
  %output174 = fadd double %output172, %navg_correct14
  %return176 = call double @"clamp@FFFF"(double %output174, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end161, %true
  %UnifiedRetVal = phi double [ %noise_pvalue_fast, %true ], [ %return176, %end161 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_sparse@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 2.343510e+00)
  store double %return, double* %1
  store double 2.438430e+00, double* %2
  store double 4.960900e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_sparse = call double @"noise_sparse@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_sparse, %navg_correct14
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output51 = fmul double %gain48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output59 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output55, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output45, %end ], [ %output137, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output144, %end104 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output51
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return147 = fcmp one double %output144, 0.000000e+00
  br i1 %return147, label %true149, label %end150

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return47)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return47
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %dolw124 = load i64, i64* %dolw
  store i64 %dolw124, i64* %59
  %dogw125 = load i64, i64* %dogw
  store i64 %dogw125, i64* %60
  %disp126 = load double, double* %disp
  store double %disp126, double* %61
  %dfreq127 = load double, double* %dfreq
  store double %dfreq127, double* %62
  %gflow128 = load double, double* %gflow
  store double %gflow128, double* %63
  %noise_sparse129 = call double @"noise_sparse@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output132 = fsub double %noise_sparse129, %navg_correct14
  %output136 = fmul double %w.2, %output132
  %output137 = fadd double %out.0, %output136
  %output141 = fmul double %return66, %w.2
  %output143 = fmul double %output141, %w.2
  %output144 = fadd double %wsum.0, %output143
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true149:                                          ; preds = %end75
  %return153 = call double @"sqrt@FF"(double %output144)
  %output154 = call double @"div@FF"(double %output137, double %return153)
  br label %end150

end150:                                           ; preds = %true149, %end75
  %out.1 = phi double [ %output154, %true149 ], [ %output137, %end75 ]
  %output159 = fadd double %out.1, %navg_correct14
  store double %output159, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return160 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output161 = fmul double %out.1, %return160
  %output163 = fadd double %output161, %navg_correct14
  %return165 = call double @"clamp@FFFF"(double %output163, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end150, %true
  %UnifiedRetVal = phi double [ %noise_sparse, %true ], [ %return165, %end150 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_sparse@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 2.343510e+00)
  store double %return, double* %1
  store double 2.438430e+00, double* %2
  store double 4.960900e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_sparse = call double @"noise_sparse@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_sparse, %navg_correct14
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output61 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  br label %body

body:                                             ; preds = %end106, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end106 ]
  %fw.0 = phi double [ %output56, %end ], [ %output101, %end106 ]
  %out.0 = phi double [ %output45, %end ], [ %output139, %end106 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output146, %end106 ]
  %w.0 = phi double [ %noise_sparse, %end ], [ %w.2, %end106 ]
  %output80 = fmul double %w.0, %output52
  %output82 = fadd double %oct.0, 1.000000e+00
  %maxoctaves84 = load double, double* %maxoctaves
  %return85 = fcmp ogt double %output82, %maxoctaves84
  br i1 %return85, label %true87, label %end88

end77:                                            ; preds = %end106
  store double %oct.2, double* %x_oct
  %return149 = fcmp one double %output146, 0.000000e+00
  br i1 %return149, label %true151, label %end152

true87:                                           ; preds = %body
  %return92 = call double @"frac@FF"(double %maxoctaves84)
  store double %return92, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output93 = fmul double %output80, %bias
  br label %end88

end88:                                            ; preds = %true87, %body
  %oct.1 = phi double [ %maxoctaves84, %true87 ], [ %output82, %body ]
  %w.1 = phi double [ %output93, %true87 ], [ %output80, %body ]
  %pp95 = load <3 x double>, <3 x double>* %pp
  %cast97 = call <3 x double> @"set@VF"(double %return47)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %pp95, <3 x double> %cast97)
  store <3 x double> %output98, <3 x double>* %pp
  %output101 = fmul double %fw.0, %return47
  %return103 = fcmp ogt double %output101, 1.000000e+00
  br i1 %return103, label %true105, label %end106

true105:                                          ; preds = %end88
  %output108 = fsub double 1.000000e+00, %fw.0
  %output111 = fsub double %output101, %fw.0
  %output112 = call double @"div@FF"(double %output108, double %output111)
  %output115 = fsub double 1.000000e+00, %output112
  %output116 = fsub double %oct.1, %output115
  %output119 = fmul double %w.1, %output112
  br label %end106

end106:                                           ; preds = %true105, %end88
  %oct.2 = phi double [ %output116, %true105 ], [ %oct.1, %end88 ]
  %w.2 = phi double [ %output119, %true105 ], [ %w.1, %end88 ]
  %inv120 = load i64, i64* %inv
  store i64 %inv120, i64* %52
  %fold121 = load i64, i64* %fold
  store i64 %fold121, i64* %53
  %accl122 = load i64, i64* %accl
  store i64 %accl122, i64* %54
  %accg123 = load i64, i64* %accg
  store i64 %accg123, i64* %55
  %fsize124 = load double, double* %fsize
  store double %fsize124, double* %56
  %expon125 = load double, double* %expon
  store double %expon125, double* %57
  %dolw126 = load i64, i64* %dolw
  store i64 %dolw126, i64* %59
  %dogw127 = load i64, i64* %dogw
  store i64 %dogw127, i64* %60
  %disp128 = load double, double* %disp
  store double %disp128, double* %61
  %dfreq129 = load double, double* %dfreq
  store double %dfreq129, double* %62
  %gflow130 = load double, double* %gflow
  store double %gflow130, double* %63
  %noise_sparse131 = call double @"noise_sparse@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output134 = fsub double %noise_sparse131, %navg_correct14
  %output138 = fmul double %w.2, %output134
  %output139 = fadd double %out.0, %output138
  %output143 = fmul double %return68, %w.2
  %output145 = fmul double %output143, %w.2
  %output146 = fadd double %wsum.0, %output145
  %maxoctaves70 = load double, double* %maxoctaves
  %return71 = fcmp olt double %oct.2, %maxoctaves70
  %return72 = zext i1 %return71 to i64
  %return74 = fcmp olt double %output101, 1.000000e+00
  %return75 = zext i1 %return74 to i64
  %return76 = call i64 @"and@III"(i64 %return72, i64 %return75)
  %70 = icmp ne i64 %return76, 0
  br i1 %70, label %body, label %end77

true151:                                          ; preds = %end77
  %return155 = call double @"sqrt@FF"(double %output146)
  %output156 = call double @"div@FF"(double %output139, double %return155)
  br label %end152

end152:                                           ; preds = %true151, %end77
  %out.1 = phi double [ %output156, %true151 ], [ %output139, %end77 ]
  %output161 = fadd double %out.1, %navg_correct14
  store double %output161, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return162 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output163 = fmul double %out.1, %return162
  %output165 = fadd double %output163, %navg_correct14
  %return167 = call double @"clamp@FFFF"(double %output165, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end152, %true
  %UnifiedRetVal = phi double [ %noise_sparse, %true ], [ %return167, %end152 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_sparse@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 2.343510e+00)
  store double %return, double* %1
  store double 2.438430e+00, double* %2
  store double 4.960900e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_sparse = call double @"noise_sparse@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_sparse, %navg_correct14
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output59 = fmul double %noise_sparse, 2.000000e+00
  %output62 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output62, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return68 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return69 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return68)
  br label %body

body:                                             ; preds = %end107, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end107 ]
  %fw.0 = phi double [ %output56, %end ], [ %output102, %end107 ]
  %out.0 = phi double [ %output45, %end ], [ %output140, %end107 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output147, %end107 ]
  %w.0 = phi double [ %output59, %end ], [ %output153, %end107 ]
  %output81 = fmul double %w.0, %output52
  %output83 = fadd double %oct.0, 1.000000e+00
  %maxoctaves85 = load double, double* %maxoctaves
  %return86 = fcmp ogt double %output83, %maxoctaves85
  br i1 %return86, label %true88, label %end89

end78:                                            ; preds = %end107
  store double %oct.2, double* %x_oct
  %return156 = fcmp one double %output147, 0.000000e+00
  br i1 %return156, label %true158, label %end159

true88:                                           ; preds = %body
  %return93 = call double @"frac@FF"(double %maxoctaves85)
  store double %return93, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output94 = fmul double %output81, %bias
  br label %end89

end89:                                            ; preds = %true88, %body
  %oct.1 = phi double [ %maxoctaves85, %true88 ], [ %output83, %body ]
  %w.1 = phi double [ %output94, %true88 ], [ %output81, %body ]
  %pp96 = load <3 x double>, <3 x double>* %pp
  %cast98 = call <3 x double> @"set@VF"(double %return47)
  %output99 = call <3 x double> @"mul@VV"(<3 x double> %pp96, <3 x double> %cast98)
  store <3 x double> %output99, <3 x double>* %pp
  %output102 = fmul double %fw.0, %return47
  %return104 = fcmp ogt double %output102, 1.000000e+00
  br i1 %return104, label %true106, label %end107

true106:                                          ; preds = %end89
  %output109 = fsub double 1.000000e+00, %fw.0
  %output112 = fsub double %output102, %fw.0
  %output113 = call double @"div@FF"(double %output109, double %output112)
  %output116 = fsub double 1.000000e+00, %output113
  %output117 = fsub double %oct.1, %output116
  %output120 = fmul double %w.1, %output113
  br label %end107

end107:                                           ; preds = %true106, %end89
  %oct.2 = phi double [ %output117, %true106 ], [ %oct.1, %end89 ]
  %w.2 = phi double [ %output120, %true106 ], [ %w.1, %end89 ]
  %inv121 = load i64, i64* %inv
  store i64 %inv121, i64* %52
  %fold122 = load i64, i64* %fold
  store i64 %fold122, i64* %53
  %accl123 = load i64, i64* %accl
  store i64 %accl123, i64* %54
  %accg124 = load i64, i64* %accg
  store i64 %accg124, i64* %55
  %fsize125 = load double, double* %fsize
  store double %fsize125, double* %56
  %expon126 = load double, double* %expon
  store double %expon126, double* %57
  %dolw127 = load i64, i64* %dolw
  store i64 %dolw127, i64* %59
  %dogw128 = load i64, i64* %dogw
  store i64 %dogw128, i64* %60
  %disp129 = load double, double* %disp
  store double %disp129, double* %61
  %dfreq130 = load double, double* %dfreq
  store double %dfreq130, double* %62
  %gflow131 = load double, double* %gflow
  store double %gflow131, double* %63
  %noise_sparse132 = call double @"noise_sparse@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output135 = fsub double %noise_sparse132, %navg_correct14
  %output139 = fmul double %w.2, %output135
  %output140 = fadd double %out.0, %output139
  %output144 = fmul double %return69, %w.2
  %output146 = fmul double %output144, %w.2
  %output147 = fadd double %wsum.0, %output146
  %output151 = fadd double %output135, %navg_correct14
  %output152 = fmul double 2.000000e+00, %output151
  %output153 = fmul double %w.2, %output152
  %maxoctaves71 = load double, double* %maxoctaves
  %return72 = fcmp olt double %oct.2, %maxoctaves71
  %return73 = zext i1 %return72 to i64
  %return75 = fcmp olt double %output102, 1.000000e+00
  %return76 = zext i1 %return75 to i64
  %return77 = call i64 @"and@III"(i64 %return73, i64 %return76)
  %70 = icmp ne i64 %return77, 0
  br i1 %70, label %body, label %end78

true158:                                          ; preds = %end78
  %return162 = call double @"sqrt@FF"(double %output147)
  %output163 = call double @"div@FF"(double %output140, double %return162)
  br label %end159

end159:                                           ; preds = %true158, %end78
  %out.1 = phi double [ %output163, %true158 ], [ %output140, %end78 ]
  %output168 = fadd double %out.1, %navg_correct14
  store double %output168, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return169 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output170 = fmul double %out.1, %return169
  %output172 = fadd double %output170, %navg_correct14
  %return174 = call double @"clamp@FFFF"(double %output172, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end159, %true
  %UnifiedRetVal = phi double [ %noise_sparse, %true ], [ %return174, %end159 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_psparse@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 8.428030e-01)
  store double %return, double* %1
  store double 1.164690e+00, double* %2
  store double 4.932960e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %per21 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per21, <3 x double>* %43
  %dolw22 = load i64, i64* %dolw
  store i64 %dolw22, i64* %44
  %dogw23 = load i64, i64* %dogw
  store i64 %dogw23, i64* %45
  %disp24 = load double, double* %disp
  store double %disp24, double* %46
  %dfreq25 = load double, double* %dfreq
  store double %dfreq25, double* %47
  %gflow26 = load double, double* %gflow
  store double %gflow26, double* %48
  %noise_psparse = call double @"noise_psparse@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize27 = load double, double* %fsize
  %return28 = fcmp oge double %fsize27, 1.000000e+00
  %return29 = zext i1 %return28 to i64
  %maxoctaves31 = load double, double* %maxoctaves
  %return32 = fcmp ogt double 0.000000e+00, %maxoctaves31
  %return33 = zext i1 %return32 to i64
  %return34 = call i64 @"or@III"(i64 %return29, i64 %return33)
  %lacunarity35 = load double, double* %lacunarity
  %output = fmul double %lacunarity35, %maxoctaves31
  %gain37 = load double, double* %gain
  %output38 = fmul double %output, %gain37
  %return39 = fcmp oeq double %output38, 0.000000e+00
  %return40 = zext i1 %return39 to i64
  %return41 = call i64 @"or@III"(i64 %return34, i64 %return40)
  %68 = icmp ne i64 %return41, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p43 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p43, <3 x double>* %pp
  %output46 = fsub double %noise_psparse, %navg_correct14
  %lacunarity47 = load double, double* %lacunarity
  %return48 = call double @"abs@FF"(double %lacunarity47)
  %gain49 = load double, double* %gain
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return48)
  %output52 = fmul double %gain49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output60 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output60, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return66 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return48)
  %return67 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return66)
  br label %body

body:                                             ; preds = %end105, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end105 ]
  %fw.0 = phi double [ %output56, %end ], [ %output100, %end105 ]
  %out.0 = phi double [ %output46, %end ], [ %output139, %end105 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output146, %end105 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end105 ]
  %output79 = fmul double %w.0, %output52
  %output81 = fadd double %oct.0, 1.000000e+00
  %maxoctaves83 = load double, double* %maxoctaves
  %return84 = fcmp ogt double %output81, %maxoctaves83
  br i1 %return84, label %true86, label %end87

end76:                                            ; preds = %end105
  store double %oct.2, double* %x_oct
  %return149 = fcmp one double %output146, 0.000000e+00
  br i1 %return149, label %true151, label %end152

true86:                                           ; preds = %body
  %return91 = call double @"frac@FF"(double %maxoctaves83)
  store double %return91, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output92 = fmul double %output79, %bias
  br label %end87

end87:                                            ; preds = %true86, %body
  %oct.1 = phi double [ %maxoctaves83, %true86 ], [ %output81, %body ]
  %w.1 = phi double [ %output92, %true86 ], [ %output79, %body ]
  %pp94 = load <3 x double>, <3 x double>* %pp
  %cast96 = call <3 x double> @"set@VF"(double %return48)
  %output97 = call <3 x double> @"mul@VV"(<3 x double> %pp94, <3 x double> %cast96)
  store <3 x double> %output97, <3 x double>* %pp
  %output100 = fmul double %fw.0, %return48
  %return102 = fcmp ogt double %output100, 1.000000e+00
  br i1 %return102, label %true104, label %end105

true104:                                          ; preds = %end87
  %output107 = fsub double 1.000000e+00, %fw.0
  %output110 = fsub double %output100, %fw.0
  %output111 = call double @"div@FF"(double %output107, double %output110)
  %output114 = fsub double 1.000000e+00, %output111
  %output115 = fsub double %oct.1, %output114
  %output118 = fmul double %w.1, %output111
  br label %end105

end105:                                           ; preds = %true104, %end87
  %oct.2 = phi double [ %output115, %true104 ], [ %oct.1, %end87 ]
  %w.2 = phi double [ %output118, %true104 ], [ %w.1, %end87 ]
  %inv119 = load i64, i64* %inv
  store i64 %inv119, i64* %52
  %fold120 = load i64, i64* %fold
  store i64 %fold120, i64* %53
  %accl121 = load i64, i64* %accl
  store i64 %accl121, i64* %54
  %accg122 = load i64, i64* %accg
  store i64 %accg122, i64* %55
  %fsize123 = load double, double* %fsize
  store double %fsize123, double* %56
  %expon124 = load double, double* %expon
  store double %expon124, double* %57
  %per125 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per125, <3 x double>* %58
  %dolw126 = load i64, i64* %dolw
  store i64 %dolw126, i64* %59
  %dogw127 = load i64, i64* %dogw
  store i64 %dogw127, i64* %60
  %disp128 = load double, double* %disp
  store double %disp128, double* %61
  %dfreq129 = load double, double* %dfreq
  store double %dfreq129, double* %62
  %gflow130 = load double, double* %gflow
  store double %gflow130, double* %63
  %noise_psparse131 = call double @"noise_psparse@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output134 = fsub double %noise_psparse131, %navg_correct14
  %output138 = fmul double %w.2, %output134
  %output139 = fadd double %out.0, %output138
  %output143 = fmul double %return67, %w.2
  %output145 = fmul double %output143, %w.2
  %output146 = fadd double %wsum.0, %output145
  %maxoctaves69 = load double, double* %maxoctaves
  %return70 = fcmp olt double %oct.2, %maxoctaves69
  %return71 = zext i1 %return70 to i64
  %return73 = fcmp olt double %output100, 1.000000e+00
  %return74 = zext i1 %return73 to i64
  %return75 = call i64 @"and@III"(i64 %return71, i64 %return74)
  %70 = icmp ne i64 %return75, 0
  br i1 %70, label %body, label %end76

true151:                                          ; preds = %end76
  %return155 = call double @"sqrt@FF"(double %output146)
  %output156 = call double @"div@FF"(double %output139, double %return155)
  br label %end152

end152:                                           ; preds = %true151, %end76
  %out.1 = phi double [ %output156, %true151 ], [ %output139, %end76 ]
  %output161 = fadd double %out.1, %navg_correct14
  store double %output161, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return162 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output163 = fmul double %out.1, %return162
  %output165 = fadd double %output163, %navg_correct14
  %return167 = call double @"clamp@FFFF"(double %output165, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end152, %true
  %UnifiedRetVal = phi double [ %noise_psparse, %true ], [ %return167, %end152 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_psparse@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 8.428030e-01)
  store double %return, double* %1
  store double 1.164690e+00, double* %2
  store double 4.932960e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %per21 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per21, <3 x double>* %43
  %dolw22 = load i64, i64* %dolw
  store i64 %dolw22, i64* %44
  %dogw23 = load i64, i64* %dogw
  store i64 %dogw23, i64* %45
  %disp24 = load double, double* %disp
  store double %disp24, double* %46
  %dfreq25 = load double, double* %dfreq
  store double %dfreq25, double* %47
  %gflow26 = load double, double* %gflow
  store double %gflow26, double* %48
  %noise_psparse = call double @"noise_psparse@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize27 = load double, double* %fsize
  %return28 = fcmp oge double %fsize27, 1.000000e+00
  %return29 = zext i1 %return28 to i64
  %maxoctaves31 = load double, double* %maxoctaves
  %return32 = fcmp ogt double 0.000000e+00, %maxoctaves31
  %return33 = zext i1 %return32 to i64
  %return34 = call i64 @"or@III"(i64 %return29, i64 %return33)
  %lacunarity35 = load double, double* %lacunarity
  %output = fmul double %lacunarity35, %maxoctaves31
  %gain37 = load double, double* %gain
  %output38 = fmul double %output, %gain37
  %return39 = fcmp oeq double %output38, 0.000000e+00
  %return40 = zext i1 %return39 to i64
  %return41 = call i64 @"or@III"(i64 %return34, i64 %return40)
  %68 = icmp ne i64 %return41, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p43 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p43, <3 x double>* %pp
  %output46 = fsub double %noise_psparse, %navg_correct14
  %lacunarity47 = load double, double* %lacunarity
  %return48 = call double @"abs@FF"(double %lacunarity47)
  %gain49 = load double, double* %gain
  %return50 = call double @"abs@FF"(double %gain49)
  %return52 = call double @"min@FFF"(double 1.000000e+00, double %return48)
  %output53 = fmul double %return50, %return52
  %fsize54 = load double, double* %fsize
  %fold55 = load i64, i64* %fold
  %output56 = add i64 1, %fold55
  %cast = sitofp i64 %output56 to double
  %output57 = fmul double %fsize54, %cast
  %output62 = mul i64 %fold55, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output62, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return68 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return48)
  %return69 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return68)
  br label %body

body:                                             ; preds = %end107, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end107 ]
  %fw.0 = phi double [ %output57, %end ], [ %output102, %end107 ]
  %out.0 = phi double [ %output46, %end ], [ %output141, %end107 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output148, %end107 ]
  %w.0 = phi double [ %noise_psparse, %end ], [ %w.2, %end107 ]
  %output81 = fmul double %w.0, %output53
  %output83 = fadd double %oct.0, 1.000000e+00
  %maxoctaves85 = load double, double* %maxoctaves
  %return86 = fcmp ogt double %output83, %maxoctaves85
  br i1 %return86, label %true88, label %end89

end78:                                            ; preds = %end107
  store double %oct.2, double* %x_oct
  %return151 = fcmp one double %output148, 0.000000e+00
  br i1 %return151, label %true153, label %end154

true88:                                           ; preds = %body
  %return93 = call double @"frac@FF"(double %maxoctaves85)
  store double %return93, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output94 = fmul double %output81, %bias
  br label %end89

end89:                                            ; preds = %true88, %body
  %oct.1 = phi double [ %maxoctaves85, %true88 ], [ %output83, %body ]
  %w.1 = phi double [ %output94, %true88 ], [ %output81, %body ]
  %pp96 = load <3 x double>, <3 x double>* %pp
  %cast98 = call <3 x double> @"set@VF"(double %return48)
  %output99 = call <3 x double> @"mul@VV"(<3 x double> %pp96, <3 x double> %cast98)
  store <3 x double> %output99, <3 x double>* %pp
  %output102 = fmul double %fw.0, %return48
  %return104 = fcmp ogt double %output102, 1.000000e+00
  br i1 %return104, label %true106, label %end107

true106:                                          ; preds = %end89
  %output109 = fsub double 1.000000e+00, %fw.0
  %output112 = fsub double %output102, %fw.0
  %output113 = call double @"div@FF"(double %output109, double %output112)
  %output116 = fsub double 1.000000e+00, %output113
  %output117 = fsub double %oct.1, %output116
  %output120 = fmul double %w.1, %output113
  br label %end107

end107:                                           ; preds = %true106, %end89
  %oct.2 = phi double [ %output117, %true106 ], [ %oct.1, %end89 ]
  %w.2 = phi double [ %output120, %true106 ], [ %w.1, %end89 ]
  %inv121 = load i64, i64* %inv
  store i64 %inv121, i64* %52
  %fold122 = load i64, i64* %fold
  store i64 %fold122, i64* %53
  %accl123 = load i64, i64* %accl
  store i64 %accl123, i64* %54
  %accg124 = load i64, i64* %accg
  store i64 %accg124, i64* %55
  %fsize125 = load double, double* %fsize
  store double %fsize125, double* %56
  %expon126 = load double, double* %expon
  store double %expon126, double* %57
  %per127 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per127, <3 x double>* %58
  %dolw128 = load i64, i64* %dolw
  store i64 %dolw128, i64* %59
  %dogw129 = load i64, i64* %dogw
  store i64 %dogw129, i64* %60
  %disp130 = load double, double* %disp
  store double %disp130, double* %61
  %dfreq131 = load double, double* %dfreq
  store double %dfreq131, double* %62
  %gflow132 = load double, double* %gflow
  store double %gflow132, double* %63
  %noise_psparse133 = call double @"noise_psparse@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output136 = fsub double %noise_psparse133, %navg_correct14
  %output140 = fmul double %w.2, %output136
  %output141 = fadd double %out.0, %output140
  %output145 = fmul double %return69, %w.2
  %output147 = fmul double %output145, %w.2
  %output148 = fadd double %wsum.0, %output147
  %maxoctaves71 = load double, double* %maxoctaves
  %return72 = fcmp olt double %oct.2, %maxoctaves71
  %return73 = zext i1 %return72 to i64
  %return75 = fcmp olt double %output102, 1.000000e+00
  %return76 = zext i1 %return75 to i64
  %return77 = call i64 @"and@III"(i64 %return73, i64 %return76)
  %70 = icmp ne i64 %return77, 0
  br i1 %70, label %body, label %end78

true153:                                          ; preds = %end78
  %return157 = call double @"sqrt@FF"(double %output148)
  %output158 = call double @"div@FF"(double %output141, double %return157)
  br label %end154

end154:                                           ; preds = %true153, %end78
  %out.1 = phi double [ %output158, %true153 ], [ %output141, %end78 ]
  %output163 = fadd double %out.1, %navg_correct14
  store double %output163, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return164 = call double @"fit@FFFFFF"(double %output53, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output165 = fmul double %out.1, %return164
  %output167 = fadd double %output165, %navg_correct14
  %return169 = call double @"clamp@FFFF"(double %output167, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end154, %true
  %UnifiedRetVal = phi double [ %noise_psparse, %true ], [ %return169, %end154 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_psparse@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 8.428030e-01)
  store double %return, double* %1
  store double 1.164690e+00, double* %2
  store double 4.932960e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %per21 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per21, <3 x double>* %43
  %dolw22 = load i64, i64* %dolw
  store i64 %dolw22, i64* %44
  %dogw23 = load i64, i64* %dogw
  store i64 %dogw23, i64* %45
  %disp24 = load double, double* %disp
  store double %disp24, double* %46
  %dfreq25 = load double, double* %dfreq
  store double %dfreq25, double* %47
  %gflow26 = load double, double* %gflow
  store double %gflow26, double* %48
  %noise_psparse = call double @"noise_psparse@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize27 = load double, double* %fsize
  %return28 = fcmp oge double %fsize27, 1.000000e+00
  %return29 = zext i1 %return28 to i64
  %maxoctaves31 = load double, double* %maxoctaves
  %return32 = fcmp ogt double 0.000000e+00, %maxoctaves31
  %return33 = zext i1 %return32 to i64
  %return34 = call i64 @"or@III"(i64 %return29, i64 %return33)
  %lacunarity35 = load double, double* %lacunarity
  %output = fmul double %lacunarity35, %maxoctaves31
  %gain37 = load double, double* %gain
  %output38 = fmul double %output, %gain37
  %return39 = fcmp oeq double %output38, 0.000000e+00
  %return40 = zext i1 %return39 to i64
  %return41 = call i64 @"or@III"(i64 %return34, i64 %return40)
  %68 = icmp ne i64 %return41, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p43 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p43, <3 x double>* %pp
  %output46 = fsub double %noise_psparse, %navg_correct14
  %lacunarity47 = load double, double* %lacunarity
  %return48 = call double @"abs@FF"(double %lacunarity47)
  %gain49 = load double, double* %gain
  %return50 = call double @"abs@FF"(double %gain49)
  %return52 = call double @"min@FFF"(double 1.000000e+00, double %return48)
  %output53 = fmul double %return50, %return52
  %fsize54 = load double, double* %fsize
  %fold55 = load i64, i64* %fold
  %output56 = add i64 1, %fold55
  %cast = sitofp i64 %output56 to double
  %output57 = fmul double %fsize54, %cast
  %output60 = fmul double %noise_psparse, 2.000000e+00
  %output63 = mul i64 %fold55, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output63, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return69 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return48)
  %return70 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return69)
  br label %body

body:                                             ; preds = %end108, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end108 ]
  %fw.0 = phi double [ %output57, %end ], [ %output103, %end108 ]
  %out.0 = phi double [ %output46, %end ], [ %output142, %end108 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output149, %end108 ]
  %w.0 = phi double [ %output60, %end ], [ %output155, %end108 ]
  %output82 = fmul double %w.0, %output53
  %output84 = fadd double %oct.0, 1.000000e+00
  %maxoctaves86 = load double, double* %maxoctaves
  %return87 = fcmp ogt double %output84, %maxoctaves86
  br i1 %return87, label %true89, label %end90

end79:                                            ; preds = %end108
  store double %oct.2, double* %x_oct
  %return158 = fcmp one double %output149, 0.000000e+00
  br i1 %return158, label %true160, label %end161

true89:                                           ; preds = %body
  %return94 = call double @"frac@FF"(double %maxoctaves86)
  store double %return94, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output95 = fmul double %output82, %bias
  br label %end90

end90:                                            ; preds = %true89, %body
  %oct.1 = phi double [ %maxoctaves86, %true89 ], [ %output84, %body ]
  %w.1 = phi double [ %output95, %true89 ], [ %output82, %body ]
  %pp97 = load <3 x double>, <3 x double>* %pp
  %cast99 = call <3 x double> @"set@VF"(double %return48)
  %output100 = call <3 x double> @"mul@VV"(<3 x double> %pp97, <3 x double> %cast99)
  store <3 x double> %output100, <3 x double>* %pp
  %output103 = fmul double %fw.0, %return48
  %return105 = fcmp ogt double %output103, 1.000000e+00
  br i1 %return105, label %true107, label %end108

true107:                                          ; preds = %end90
  %output110 = fsub double 1.000000e+00, %fw.0
  %output113 = fsub double %output103, %fw.0
  %output114 = call double @"div@FF"(double %output110, double %output113)
  %output117 = fsub double 1.000000e+00, %output114
  %output118 = fsub double %oct.1, %output117
  %output121 = fmul double %w.1, %output114
  br label %end108

end108:                                           ; preds = %true107, %end90
  %oct.2 = phi double [ %output118, %true107 ], [ %oct.1, %end90 ]
  %w.2 = phi double [ %output121, %true107 ], [ %w.1, %end90 ]
  %inv122 = load i64, i64* %inv
  store i64 %inv122, i64* %52
  %fold123 = load i64, i64* %fold
  store i64 %fold123, i64* %53
  %accl124 = load i64, i64* %accl
  store i64 %accl124, i64* %54
  %accg125 = load i64, i64* %accg
  store i64 %accg125, i64* %55
  %fsize126 = load double, double* %fsize
  store double %fsize126, double* %56
  %expon127 = load double, double* %expon
  store double %expon127, double* %57
  %per128 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per128, <3 x double>* %58
  %dolw129 = load i64, i64* %dolw
  store i64 %dolw129, i64* %59
  %dogw130 = load i64, i64* %dogw
  store i64 %dogw130, i64* %60
  %disp131 = load double, double* %disp
  store double %disp131, double* %61
  %dfreq132 = load double, double* %dfreq
  store double %dfreq132, double* %62
  %gflow133 = load double, double* %gflow
  store double %gflow133, double* %63
  %noise_psparse134 = call double @"noise_psparse@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output137 = fsub double %noise_psparse134, %navg_correct14
  %output141 = fmul double %w.2, %output137
  %output142 = fadd double %out.0, %output141
  %output146 = fmul double %return70, %w.2
  %output148 = fmul double %output146, %w.2
  %output149 = fadd double %wsum.0, %output148
  %output153 = fadd double %output137, %navg_correct14
  %output154 = fmul double 2.000000e+00, %output153
  %output155 = fmul double %w.2, %output154
  %maxoctaves72 = load double, double* %maxoctaves
  %return73 = fcmp olt double %oct.2, %maxoctaves72
  %return74 = zext i1 %return73 to i64
  %return76 = fcmp olt double %output103, 1.000000e+00
  %return77 = zext i1 %return76 to i64
  %return78 = call i64 @"and@III"(i64 %return74, i64 %return77)
  %70 = icmp ne i64 %return78, 0
  br i1 %70, label %body, label %end79

true160:                                          ; preds = %end79
  %return164 = call double @"sqrt@FF"(double %output149)
  %output165 = call double @"div@FF"(double %output142, double %return164)
  br label %end161

end161:                                           ; preds = %true160, %end79
  %out.1 = phi double [ %output165, %true160 ], [ %output142, %end79 ]
  %output170 = fadd double %out.1, %navg_correct14
  store double %output170, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return171 = call double @"fit@FFFFFF"(double %output53, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output172 = fmul double %out.1, %return171
  %output174 = fadd double %output172, %navg_correct14
  %return176 = call double @"clamp@FFFF"(double %output174, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end161, %true
  %UnifiedRetVal = phi double [ %noise_psparse, %true ], [ %return176, %end161 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_alligator@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @9, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 9.937320e-01, double* %2
  store double 1.179510e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_alligator = call double @"noise_alligator@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_alligator, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return48 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output49 = fmul double %gain46, %return48
  %fsize50 = load double, double* %fsize
  %fold51 = load i64, i64* %fold
  %output52 = add i64 1, %fold51
  %cast = sitofp i64 %output52 to double
  %output53 = fmul double %fsize50, %cast
  %output57 = mul i64 %fold51, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output57, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return63 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return64 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return63)
  br label %body

body:                                             ; preds = %end102, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end102 ]
  %fw.0 = phi double [ %output53, %end ], [ %output97, %end102 ]
  %out.0 = phi double [ %output43, %end ], [ %output135, %end102 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output142, %end102 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end102 ]
  %output76 = fmul double %w.0, %output49
  %output78 = fadd double %oct.0, 1.000000e+00
  %maxoctaves80 = load double, double* %maxoctaves
  %return81 = fcmp ogt double %output78, %maxoctaves80
  br i1 %return81, label %true83, label %end84

end73:                                            ; preds = %end102
  store double %oct.2, double* %x_oct
  %return145 = fcmp one double %output142, 0.000000e+00
  br i1 %return145, label %true147, label %end148

true83:                                           ; preds = %body
  %return88 = call double @"frac@FF"(double %maxoctaves80)
  store double %return88, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output89 = fmul double %output76, %bias
  br label %end84

end84:                                            ; preds = %true83, %body
  %oct.1 = phi double [ %maxoctaves80, %true83 ], [ %output78, %body ]
  %w.1 = phi double [ %output89, %true83 ], [ %output76, %body ]
  %pp91 = load <3 x double>, <3 x double>* %pp
  %cast93 = call <3 x double> @"set@VF"(double %return45)
  %output94 = call <3 x double> @"mul@VV"(<3 x double> %pp91, <3 x double> %cast93)
  store <3 x double> %output94, <3 x double>* %pp
  %output97 = fmul double %fw.0, %return45
  %return99 = fcmp ogt double %output97, 1.000000e+00
  br i1 %return99, label %true101, label %end102

true101:                                          ; preds = %end84
  %output104 = fsub double 1.000000e+00, %fw.0
  %output107 = fsub double %output97, %fw.0
  %output108 = call double @"div@FF"(double %output104, double %output107)
  %output111 = fsub double 1.000000e+00, %output108
  %output112 = fsub double %oct.1, %output111
  %output115 = fmul double %w.1, %output108
  br label %end102

end102:                                           ; preds = %true101, %end84
  %oct.2 = phi double [ %output112, %true101 ], [ %oct.1, %end84 ]
  %w.2 = phi double [ %output115, %true101 ], [ %w.1, %end84 ]
  %inv116 = load i64, i64* %inv
  store i64 %inv116, i64* %52
  %fold117 = load i64, i64* %fold
  store i64 %fold117, i64* %53
  %accl118 = load i64, i64* %accl
  store i64 %accl118, i64* %54
  %accg119 = load i64, i64* %accg
  store i64 %accg119, i64* %55
  %fsize120 = load double, double* %fsize
  store double %fsize120, double* %56
  %expon121 = load double, double* %expon
  store double %expon121, double* %57
  %dolw122 = load i64, i64* %dolw
  store i64 %dolw122, i64* %59
  %dogw123 = load i64, i64* %dogw
  store i64 %dogw123, i64* %60
  %disp124 = load double, double* %disp
  store double %disp124, double* %61
  %dfreq125 = load double, double* %dfreq
  store double %dfreq125, double* %62
  %gflow126 = load double, double* %gflow
  store double %gflow126, double* %63
  %noise_alligator127 = call double @"noise_alligator@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output130 = fsub double %noise_alligator127, %navg_correct13
  %output134 = fmul double %w.2, %output130
  %output135 = fadd double %out.0, %output134
  %output139 = fmul double %return64, %w.2
  %output141 = fmul double %output139, %w.2
  %output142 = fadd double %wsum.0, %output141
  %maxoctaves66 = load double, double* %maxoctaves
  %return67 = fcmp olt double %oct.2, %maxoctaves66
  %return68 = zext i1 %return67 to i64
  %return70 = fcmp olt double %output97, 1.000000e+00
  %return71 = zext i1 %return70 to i64
  %return72 = call i64 @"and@III"(i64 %return68, i64 %return71)
  %70 = icmp ne i64 %return72, 0
  br i1 %70, label %body, label %end73

true147:                                          ; preds = %end73
  %return151 = call double @"sqrt@FF"(double %output142)
  %output152 = call double @"div@FF"(double %output135, double %return151)
  br label %end148

end148:                                           ; preds = %true147, %end73
  %out.1 = phi double [ %output152, %true147 ], [ %output135, %end73 ]
  %output157 = fadd double %out.1, %navg_correct13
  store double %output157, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return158 = call double @"fit@FFFFFF"(double %output49, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output159 = fmul double %out.1, %return158
  %output161 = fadd double %output159, %navg_correct13
  %return163 = call double @"clamp@FFFF"(double %output161, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end148, %true
  %UnifiedRetVal = phi double [ %noise_alligator, %true ], [ %return163, %end148 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_alligator@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @9, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 9.937320e-01, double* %2
  store double 1.179510e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_alligator = call double @"noise_alligator@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_alligator, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return47 = call double @"abs@FF"(double %gain46)
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output50 = fmul double %return47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output59 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output54, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output43, %end ], [ %output137, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output144, %end104 ]
  %w.0 = phi double [ %noise_alligator, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output50
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return147 = fcmp one double %output144, 0.000000e+00
  br i1 %return147, label %true149, label %end150

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return45)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return45
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %dolw124 = load i64, i64* %dolw
  store i64 %dolw124, i64* %59
  %dogw125 = load i64, i64* %dogw
  store i64 %dogw125, i64* %60
  %disp126 = load double, double* %disp
  store double %disp126, double* %61
  %dfreq127 = load double, double* %dfreq
  store double %dfreq127, double* %62
  %gflow128 = load double, double* %gflow
  store double %gflow128, double* %63
  %noise_alligator129 = call double @"noise_alligator@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output132 = fsub double %noise_alligator129, %navg_correct13
  %output136 = fmul double %w.2, %output132
  %output137 = fadd double %out.0, %output136
  %output141 = fmul double %return66, %w.2
  %output143 = fmul double %output141, %w.2
  %output144 = fadd double %wsum.0, %output143
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true149:                                          ; preds = %end75
  %return153 = call double @"sqrt@FF"(double %output144)
  %output154 = call double @"div@FF"(double %output137, double %return153)
  br label %end150

end150:                                           ; preds = %true149, %end75
  %out.1 = phi double [ %output154, %true149 ], [ %output137, %end75 ]
  %output159 = fadd double %out.1, %navg_correct13
  store double %output159, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return160 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output161 = fmul double %out.1, %return160
  %output163 = fadd double %output161, %navg_correct13
  %return165 = call double @"clamp@FFFF"(double %output163, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end150, %true
  %UnifiedRetVal = phi double [ %noise_alligator, %true ], [ %return165, %end150 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_alligator@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @9, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 9.937320e-01, double* %2
  store double 1.179510e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_alligator = call double @"noise_alligator@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_alligator, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return47 = call double @"abs@FF"(double %gain46)
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output50 = fmul double %return47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output57 = fmul double %noise_alligator, 2.000000e+00
  %output60 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output60, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return66 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return67 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return66)
  br label %body

body:                                             ; preds = %end105, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end105 ]
  %fw.0 = phi double [ %output54, %end ], [ %output100, %end105 ]
  %out.0 = phi double [ %output43, %end ], [ %output138, %end105 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end105 ]
  %w.0 = phi double [ %output57, %end ], [ %output151, %end105 ]
  %output79 = fmul double %w.0, %output50
  %output81 = fadd double %oct.0, 1.000000e+00
  %maxoctaves83 = load double, double* %maxoctaves
  %return84 = fcmp ogt double %output81, %maxoctaves83
  br i1 %return84, label %true86, label %end87

end76:                                            ; preds = %end105
  store double %oct.2, double* %x_oct
  %return154 = fcmp one double %output145, 0.000000e+00
  br i1 %return154, label %true156, label %end157

true86:                                           ; preds = %body
  %return91 = call double @"frac@FF"(double %maxoctaves83)
  store double %return91, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output92 = fmul double %output79, %bias
  br label %end87

end87:                                            ; preds = %true86, %body
  %oct.1 = phi double [ %maxoctaves83, %true86 ], [ %output81, %body ]
  %w.1 = phi double [ %output92, %true86 ], [ %output79, %body ]
  %pp94 = load <3 x double>, <3 x double>* %pp
  %cast96 = call <3 x double> @"set@VF"(double %return45)
  %output97 = call <3 x double> @"mul@VV"(<3 x double> %pp94, <3 x double> %cast96)
  store <3 x double> %output97, <3 x double>* %pp
  %output100 = fmul double %fw.0, %return45
  %return102 = fcmp ogt double %output100, 1.000000e+00
  br i1 %return102, label %true104, label %end105

true104:                                          ; preds = %end87
  %output107 = fsub double 1.000000e+00, %fw.0
  %output110 = fsub double %output100, %fw.0
  %output111 = call double @"div@FF"(double %output107, double %output110)
  %output114 = fsub double 1.000000e+00, %output111
  %output115 = fsub double %oct.1, %output114
  %output118 = fmul double %w.1, %output111
  br label %end105

end105:                                           ; preds = %true104, %end87
  %oct.2 = phi double [ %output115, %true104 ], [ %oct.1, %end87 ]
  %w.2 = phi double [ %output118, %true104 ], [ %w.1, %end87 ]
  %inv119 = load i64, i64* %inv
  store i64 %inv119, i64* %52
  %fold120 = load i64, i64* %fold
  store i64 %fold120, i64* %53
  %accl121 = load i64, i64* %accl
  store i64 %accl121, i64* %54
  %accg122 = load i64, i64* %accg
  store i64 %accg122, i64* %55
  %fsize123 = load double, double* %fsize
  store double %fsize123, double* %56
  %expon124 = load double, double* %expon
  store double %expon124, double* %57
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_alligator130 = call double @"noise_alligator@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_alligator130, %navg_correct13
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return67, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %output149 = fadd double %output133, %navg_correct13
  %output150 = fmul double 2.000000e+00, %output149
  %output151 = fmul double %w.2, %output150
  %maxoctaves69 = load double, double* %maxoctaves
  %return70 = fcmp olt double %oct.2, %maxoctaves69
  %return71 = zext i1 %return70 to i64
  %return73 = fcmp olt double %output100, 1.000000e+00
  %return74 = zext i1 %return73 to i64
  %return75 = call i64 @"and@III"(i64 %return71, i64 %return74)
  %70 = icmp ne i64 %return75, 0
  br i1 %70, label %body, label %end76

true156:                                          ; preds = %end76
  %return160 = call double @"sqrt@FF"(double %output145)
  %output161 = call double @"div@FF"(double %output138, double %return160)
  br label %end157

end157:                                           ; preds = %true156, %end76
  %out.1 = phi double [ %output161, %true156 ], [ %output138, %end76 ]
  %output166 = fadd double %out.1, %navg_correct13
  store double %output166, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return167 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output168 = fmul double %out.1, %return167
  %output170 = fadd double %output168, %navg_correct13
  %return172 = call double @"clamp@FFFF"(double %output170, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end157, %true
  %UnifiedRetVal = phi double [ %noise_alligator, %true ], [ %return172, %end157 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_palligator@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @10, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 2.500000e-03)
  store double %return, double* %1
  store double 8.173980e-01, double* %2
  store double 1.755280e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_palligator = call double @"noise_palligator@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_palligator, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output51 = fmul double %gain48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output59 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output55, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output45, %end ], [ %output138, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end104 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output51
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return148 = fcmp one double %output145, 0.000000e+00
  br i1 %return148, label %true150, label %end151

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return47)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return47
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %per124 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per124, <3 x double>* %58
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_palligator130 = call double @"noise_palligator@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_palligator130, %navg_correct13
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return66, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true150:                                          ; preds = %end75
  %return154 = call double @"sqrt@FF"(double %output145)
  %output155 = call double @"div@FF"(double %output138, double %return154)
  br label %end151

end151:                                           ; preds = %true150, %end75
  %out.1 = phi double [ %output155, %true150 ], [ %output138, %end75 ]
  %output160 = fadd double %out.1, %navg_correct13
  store double %output160, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return161 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output162 = fmul double %out.1, %return161
  %output164 = fadd double %output162, %navg_correct13
  %return166 = call double @"clamp@FFFF"(double %output164, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end151, %true
  %UnifiedRetVal = phi double [ %noise_palligator, %true ], [ %return166, %end151 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_palligator@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @10, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 2.500000e-03)
  store double %return, double* %1
  store double 8.173980e-01, double* %2
  store double 1.755280e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_palligator = call double @"noise_palligator@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_palligator, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output61 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  br label %body

body:                                             ; preds = %end106, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end106 ]
  %fw.0 = phi double [ %output56, %end ], [ %output101, %end106 ]
  %out.0 = phi double [ %output45, %end ], [ %output140, %end106 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output147, %end106 ]
  %w.0 = phi double [ %noise_palligator, %end ], [ %w.2, %end106 ]
  %output80 = fmul double %w.0, %output52
  %output82 = fadd double %oct.0, 1.000000e+00
  %maxoctaves84 = load double, double* %maxoctaves
  %return85 = fcmp ogt double %output82, %maxoctaves84
  br i1 %return85, label %true87, label %end88

end77:                                            ; preds = %end106
  store double %oct.2, double* %x_oct
  %return150 = fcmp one double %output147, 0.000000e+00
  br i1 %return150, label %true152, label %end153

true87:                                           ; preds = %body
  %return92 = call double @"frac@FF"(double %maxoctaves84)
  store double %return92, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output93 = fmul double %output80, %bias
  br label %end88

end88:                                            ; preds = %true87, %body
  %oct.1 = phi double [ %maxoctaves84, %true87 ], [ %output82, %body ]
  %w.1 = phi double [ %output93, %true87 ], [ %output80, %body ]
  %pp95 = load <3 x double>, <3 x double>* %pp
  %cast97 = call <3 x double> @"set@VF"(double %return47)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %pp95, <3 x double> %cast97)
  store <3 x double> %output98, <3 x double>* %pp
  %output101 = fmul double %fw.0, %return47
  %return103 = fcmp ogt double %output101, 1.000000e+00
  br i1 %return103, label %true105, label %end106

true105:                                          ; preds = %end88
  %output108 = fsub double 1.000000e+00, %fw.0
  %output111 = fsub double %output101, %fw.0
  %output112 = call double @"div@FF"(double %output108, double %output111)
  %output115 = fsub double 1.000000e+00, %output112
  %output116 = fsub double %oct.1, %output115
  %output119 = fmul double %w.1, %output112
  br label %end106

end106:                                           ; preds = %true105, %end88
  %oct.2 = phi double [ %output116, %true105 ], [ %oct.1, %end88 ]
  %w.2 = phi double [ %output119, %true105 ], [ %w.1, %end88 ]
  %inv120 = load i64, i64* %inv
  store i64 %inv120, i64* %52
  %fold121 = load i64, i64* %fold
  store i64 %fold121, i64* %53
  %accl122 = load i64, i64* %accl
  store i64 %accl122, i64* %54
  %accg123 = load i64, i64* %accg
  store i64 %accg123, i64* %55
  %fsize124 = load double, double* %fsize
  store double %fsize124, double* %56
  %expon125 = load double, double* %expon
  store double %expon125, double* %57
  %per126 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per126, <3 x double>* %58
  %dolw127 = load i64, i64* %dolw
  store i64 %dolw127, i64* %59
  %dogw128 = load i64, i64* %dogw
  store i64 %dogw128, i64* %60
  %disp129 = load double, double* %disp
  store double %disp129, double* %61
  %dfreq130 = load double, double* %dfreq
  store double %dfreq130, double* %62
  %gflow131 = load double, double* %gflow
  store double %gflow131, double* %63
  %noise_palligator132 = call double @"noise_palligator@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output135 = fsub double %noise_palligator132, %navg_correct13
  %output139 = fmul double %w.2, %output135
  %output140 = fadd double %out.0, %output139
  %output144 = fmul double %return68, %w.2
  %output146 = fmul double %output144, %w.2
  %output147 = fadd double %wsum.0, %output146
  %maxoctaves70 = load double, double* %maxoctaves
  %return71 = fcmp olt double %oct.2, %maxoctaves70
  %return72 = zext i1 %return71 to i64
  %return74 = fcmp olt double %output101, 1.000000e+00
  %return75 = zext i1 %return74 to i64
  %return76 = call i64 @"and@III"(i64 %return72, i64 %return75)
  %70 = icmp ne i64 %return76, 0
  br i1 %70, label %body, label %end77

true152:                                          ; preds = %end77
  %return156 = call double @"sqrt@FF"(double %output147)
  %output157 = call double @"div@FF"(double %output140, double %return156)
  br label %end153

end153:                                           ; preds = %true152, %end77
  %out.1 = phi double [ %output157, %true152 ], [ %output140, %end77 ]
  %output162 = fadd double %out.1, %navg_correct13
  store double %output162, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return163 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output164 = fmul double %out.1, %return163
  %output166 = fadd double %output164, %navg_correct13
  %return168 = call double @"clamp@FFFF"(double %output166, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end153, %true
  %UnifiedRetVal = phi double [ %noise_palligator, %true ], [ %return168, %end153 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_palligator@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @10, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 2.500000e-03)
  store double %return, double* %1
  store double 8.173980e-01, double* %2
  store double 1.755280e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_palligator = call double @"noise_palligator@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_palligator, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output59 = fmul double %noise_palligator, 2.000000e+00
  %output62 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output62, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return68 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return69 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return68)
  br label %body

body:                                             ; preds = %end107, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end107 ]
  %fw.0 = phi double [ %output56, %end ], [ %output102, %end107 ]
  %out.0 = phi double [ %output45, %end ], [ %output141, %end107 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output148, %end107 ]
  %w.0 = phi double [ %output59, %end ], [ %output154, %end107 ]
  %output81 = fmul double %w.0, %output52
  %output83 = fadd double %oct.0, 1.000000e+00
  %maxoctaves85 = load double, double* %maxoctaves
  %return86 = fcmp ogt double %output83, %maxoctaves85
  br i1 %return86, label %true88, label %end89

end78:                                            ; preds = %end107
  store double %oct.2, double* %x_oct
  %return157 = fcmp one double %output148, 0.000000e+00
  br i1 %return157, label %true159, label %end160

true88:                                           ; preds = %body
  %return93 = call double @"frac@FF"(double %maxoctaves85)
  store double %return93, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output94 = fmul double %output81, %bias
  br label %end89

end89:                                            ; preds = %true88, %body
  %oct.1 = phi double [ %maxoctaves85, %true88 ], [ %output83, %body ]
  %w.1 = phi double [ %output94, %true88 ], [ %output81, %body ]
  %pp96 = load <3 x double>, <3 x double>* %pp
  %cast98 = call <3 x double> @"set@VF"(double %return47)
  %output99 = call <3 x double> @"mul@VV"(<3 x double> %pp96, <3 x double> %cast98)
  store <3 x double> %output99, <3 x double>* %pp
  %output102 = fmul double %fw.0, %return47
  %return104 = fcmp ogt double %output102, 1.000000e+00
  br i1 %return104, label %true106, label %end107

true106:                                          ; preds = %end89
  %output109 = fsub double 1.000000e+00, %fw.0
  %output112 = fsub double %output102, %fw.0
  %output113 = call double @"div@FF"(double %output109, double %output112)
  %output116 = fsub double 1.000000e+00, %output113
  %output117 = fsub double %oct.1, %output116
  %output120 = fmul double %w.1, %output113
  br label %end107

end107:                                           ; preds = %true106, %end89
  %oct.2 = phi double [ %output117, %true106 ], [ %oct.1, %end89 ]
  %w.2 = phi double [ %output120, %true106 ], [ %w.1, %end89 ]
  %inv121 = load i64, i64* %inv
  store i64 %inv121, i64* %52
  %fold122 = load i64, i64* %fold
  store i64 %fold122, i64* %53
  %accl123 = load i64, i64* %accl
  store i64 %accl123, i64* %54
  %accg124 = load i64, i64* %accg
  store i64 %accg124, i64* %55
  %fsize125 = load double, double* %fsize
  store double %fsize125, double* %56
  %expon126 = load double, double* %expon
  store double %expon126, double* %57
  %per127 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per127, <3 x double>* %58
  %dolw128 = load i64, i64* %dolw
  store i64 %dolw128, i64* %59
  %dogw129 = load i64, i64* %dogw
  store i64 %dogw129, i64* %60
  %disp130 = load double, double* %disp
  store double %disp130, double* %61
  %dfreq131 = load double, double* %dfreq
  store double %dfreq131, double* %62
  %gflow132 = load double, double* %gflow
  store double %gflow132, double* %63
  %noise_palligator133 = call double @"noise_palligator@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output136 = fsub double %noise_palligator133, %navg_correct13
  %output140 = fmul double %w.2, %output136
  %output141 = fadd double %out.0, %output140
  %output145 = fmul double %return69, %w.2
  %output147 = fmul double %output145, %w.2
  %output148 = fadd double %wsum.0, %output147
  %output152 = fadd double %output136, %navg_correct13
  %output153 = fmul double 2.000000e+00, %output152
  %output154 = fmul double %w.2, %output153
  %maxoctaves71 = load double, double* %maxoctaves
  %return72 = fcmp olt double %oct.2, %maxoctaves71
  %return73 = zext i1 %return72 to i64
  %return75 = fcmp olt double %output102, 1.000000e+00
  %return76 = zext i1 %return75 to i64
  %return77 = call i64 @"and@III"(i64 %return73, i64 %return76)
  %70 = icmp ne i64 %return77, 0
  br i1 %70, label %body, label %end78

true159:                                          ; preds = %end78
  %return163 = call double @"sqrt@FF"(double %output148)
  %output164 = call double @"div@FF"(double %output141, double %return163)
  br label %end160

end160:                                           ; preds = %true159, %end78
  %out.1 = phi double [ %output164, %true159 ], [ %output141, %end78 ]
  %output169 = fadd double %out.1, %navg_correct13
  store double %output169, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return170 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output171 = fmul double %out.1, %return170
  %output173 = fadd double %output171, %navg_correct13
  %return175 = call double @"clamp@FFFF"(double %output173, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end160, %true
  %UnifiedRetVal = phi double [ %noise_palligator, %true ], [ %return175, %end160 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_perlin@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8** %0
  store double 8.325870e-02, double* %1
  store double 9.203370e-01, double* %2
  store double 4.977050e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_perlin = call double @"noise_perlin@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return = fcmp oge double %fsize26, 1.000000e+00
  %return27 = zext i1 %return to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p41, <3 x double>* %pp
  %output44 = fsub double %noise_perlin, %navg_correct14
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output50 = fmul double %gain47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output58 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output58, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return64 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return65 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return64)
  br label %body

body:                                             ; preds = %end103, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end103 ]
  %fw.0 = phi double [ %output54, %end ], [ %output98, %end103 ]
  %out.0 = phi double [ %output44, %end ], [ %output136, %end103 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output143, %end103 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end103 ]
  %output77 = fmul double %w.0, %output50
  %output79 = fadd double %oct.0, 1.000000e+00
  %maxoctaves81 = load double, double* %maxoctaves
  %return82 = fcmp ogt double %output79, %maxoctaves81
  br i1 %return82, label %true84, label %end85

end74:                                            ; preds = %end103
  store double %oct.2, double* %x_oct
  %return146 = fcmp one double %output143, 0.000000e+00
  br i1 %return146, label %true148, label %end149

true84:                                           ; preds = %body
  %return89 = call double @"frac@FF"(double %maxoctaves81)
  store double %return89, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output90 = fmul double %output77, %bias
  br label %end85

end85:                                            ; preds = %true84, %body
  %oct.1 = phi double [ %maxoctaves81, %true84 ], [ %output79, %body ]
  %w.1 = phi double [ %output90, %true84 ], [ %output77, %body ]
  %pp92 = load <3 x double>, <3 x double>* %pp
  %cast94 = call <3 x double> @"set@VF"(double %return46)
  %output95 = call <3 x double> @"mul@VV"(<3 x double> %pp92, <3 x double> %cast94)
  store <3 x double> %output95, <3 x double>* %pp
  %output98 = fmul double %fw.0, %return46
  %return100 = fcmp ogt double %output98, 1.000000e+00
  br i1 %return100, label %true102, label %end103

true102:                                          ; preds = %end85
  %output105 = fsub double 1.000000e+00, %fw.0
  %output108 = fsub double %output98, %fw.0
  %output109 = call double @"div@FF"(double %output105, double %output108)
  %output112 = fsub double 1.000000e+00, %output109
  %output113 = fsub double %oct.1, %output112
  %output116 = fmul double %w.1, %output109
  br label %end103

end103:                                           ; preds = %true102, %end85
  %oct.2 = phi double [ %output113, %true102 ], [ %oct.1, %end85 ]
  %w.2 = phi double [ %output116, %true102 ], [ %w.1, %end85 ]
  %inv117 = load i64, i64* %inv
  store i64 %inv117, i64* %52
  %fold118 = load i64, i64* %fold
  store i64 %fold118, i64* %53
  %accl119 = load i64, i64* %accl
  store i64 %accl119, i64* %54
  %accg120 = load i64, i64* %accg
  store i64 %accg120, i64* %55
  %fsize121 = load double, double* %fsize
  store double %fsize121, double* %56
  %expon122 = load double, double* %expon
  store double %expon122, double* %57
  %dolw123 = load i64, i64* %dolw
  store i64 %dolw123, i64* %59
  %dogw124 = load i64, i64* %dogw
  store i64 %dogw124, i64* %60
  %disp125 = load double, double* %disp
  store double %disp125, double* %61
  %dfreq126 = load double, double* %dfreq
  store double %dfreq126, double* %62
  %gflow127 = load double, double* %gflow
  store double %gflow127, double* %63
  %noise_perlin128 = call double @"noise_perlin@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output131 = fsub double %noise_perlin128, %navg_correct14
  %output135 = fmul double %w.2, %output131
  %output136 = fadd double %out.0, %output135
  %output140 = fmul double %return65, %w.2
  %output142 = fmul double %output140, %w.2
  %output143 = fadd double %wsum.0, %output142
  %maxoctaves67 = load double, double* %maxoctaves
  %return68 = fcmp olt double %oct.2, %maxoctaves67
  %return69 = zext i1 %return68 to i64
  %return71 = fcmp olt double %output98, 1.000000e+00
  %return72 = zext i1 %return71 to i64
  %return73 = call i64 @"and@III"(i64 %return69, i64 %return72)
  %70 = icmp ne i64 %return73, 0
  br i1 %70, label %body, label %end74

true148:                                          ; preds = %end74
  %return152 = call double @"sqrt@FF"(double %output143)
  %output153 = call double @"div@FF"(double %output136, double %return152)
  br label %end149

end149:                                           ; preds = %true148, %end74
  %out.1 = phi double [ %output153, %true148 ], [ %output136, %end74 ]
  %output158 = fadd double %out.1, %navg_correct14
  store double %output158, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return159 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output160 = fmul double %out.1, %return159
  %output162 = fadd double %output160, %navg_correct14
  %return164 = call double @"clamp@FFFF"(double %output162, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end149, %true
  %UnifiedRetVal = phi double [ %noise_perlin, %true ], [ %return164, %end149 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_perlin@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8** %0
  store double 8.325870e-02, double* %1
  store double 9.203370e-01, double* %2
  store double 4.977050e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_perlin = call double @"noise_perlin@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return = fcmp oge double %fsize26, 1.000000e+00
  %return27 = zext i1 %return to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p41, <3 x double>* %pp
  %output44 = fsub double %noise_perlin, %navg_correct14
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return48 = call double @"abs@FF"(double %gain47)
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output51 = fmul double %return48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output60 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output60, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return66 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return67 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return66)
  br label %body

body:                                             ; preds = %end105, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end105 ]
  %fw.0 = phi double [ %output55, %end ], [ %output100, %end105 ]
  %out.0 = phi double [ %output44, %end ], [ %output138, %end105 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end105 ]
  %w.0 = phi double [ %noise_perlin, %end ], [ %w.2, %end105 ]
  %output79 = fmul double %w.0, %output51
  %output81 = fadd double %oct.0, 1.000000e+00
  %maxoctaves83 = load double, double* %maxoctaves
  %return84 = fcmp ogt double %output81, %maxoctaves83
  br i1 %return84, label %true86, label %end87

end76:                                            ; preds = %end105
  store double %oct.2, double* %x_oct
  %return148 = fcmp one double %output145, 0.000000e+00
  br i1 %return148, label %true150, label %end151

true86:                                           ; preds = %body
  %return91 = call double @"frac@FF"(double %maxoctaves83)
  store double %return91, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output92 = fmul double %output79, %bias
  br label %end87

end87:                                            ; preds = %true86, %body
  %oct.1 = phi double [ %maxoctaves83, %true86 ], [ %output81, %body ]
  %w.1 = phi double [ %output92, %true86 ], [ %output79, %body ]
  %pp94 = load <3 x double>, <3 x double>* %pp
  %cast96 = call <3 x double> @"set@VF"(double %return46)
  %output97 = call <3 x double> @"mul@VV"(<3 x double> %pp94, <3 x double> %cast96)
  store <3 x double> %output97, <3 x double>* %pp
  %output100 = fmul double %fw.0, %return46
  %return102 = fcmp ogt double %output100, 1.000000e+00
  br i1 %return102, label %true104, label %end105

true104:                                          ; preds = %end87
  %output107 = fsub double 1.000000e+00, %fw.0
  %output110 = fsub double %output100, %fw.0
  %output111 = call double @"div@FF"(double %output107, double %output110)
  %output114 = fsub double 1.000000e+00, %output111
  %output115 = fsub double %oct.1, %output114
  %output118 = fmul double %w.1, %output111
  br label %end105

end105:                                           ; preds = %true104, %end87
  %oct.2 = phi double [ %output115, %true104 ], [ %oct.1, %end87 ]
  %w.2 = phi double [ %output118, %true104 ], [ %w.1, %end87 ]
  %inv119 = load i64, i64* %inv
  store i64 %inv119, i64* %52
  %fold120 = load i64, i64* %fold
  store i64 %fold120, i64* %53
  %accl121 = load i64, i64* %accl
  store i64 %accl121, i64* %54
  %accg122 = load i64, i64* %accg
  store i64 %accg122, i64* %55
  %fsize123 = load double, double* %fsize
  store double %fsize123, double* %56
  %expon124 = load double, double* %expon
  store double %expon124, double* %57
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_perlin130 = call double @"noise_perlin@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_perlin130, %navg_correct14
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return67, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %maxoctaves69 = load double, double* %maxoctaves
  %return70 = fcmp olt double %oct.2, %maxoctaves69
  %return71 = zext i1 %return70 to i64
  %return73 = fcmp olt double %output100, 1.000000e+00
  %return74 = zext i1 %return73 to i64
  %return75 = call i64 @"and@III"(i64 %return71, i64 %return74)
  %70 = icmp ne i64 %return75, 0
  br i1 %70, label %body, label %end76

true150:                                          ; preds = %end76
  %return154 = call double @"sqrt@FF"(double %output145)
  %output155 = call double @"div@FF"(double %output138, double %return154)
  br label %end151

end151:                                           ; preds = %true150, %end76
  %out.1 = phi double [ %output155, %true150 ], [ %output138, %end76 ]
  %output160 = fadd double %out.1, %navg_correct14
  store double %output160, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return161 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output162 = fmul double %out.1, %return161
  %output164 = fadd double %output162, %navg_correct14
  %return166 = call double @"clamp@FFFF"(double %output164, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end151, %true
  %UnifiedRetVal = phi double [ %noise_perlin, %true ], [ %return166, %end151 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_perlin@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8** %0
  store double 8.325870e-02, double* %1
  store double 9.203370e-01, double* %2
  store double 4.977050e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_perlin = call double @"noise_perlin@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return = fcmp oge double %fsize26, 1.000000e+00
  %return27 = zext i1 %return to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p41, <3 x double>* %pp
  %output44 = fsub double %noise_perlin, %navg_correct14
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return48 = call double @"abs@FF"(double %gain47)
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output51 = fmul double %return48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output58 = fmul double %noise_perlin, 2.000000e+00
  %output61 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  br label %body

body:                                             ; preds = %end106, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end106 ]
  %fw.0 = phi double [ %output55, %end ], [ %output101, %end106 ]
  %out.0 = phi double [ %output44, %end ], [ %output139, %end106 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output146, %end106 ]
  %w.0 = phi double [ %output58, %end ], [ %output152, %end106 ]
  %output80 = fmul double %w.0, %output51
  %output82 = fadd double %oct.0, 1.000000e+00
  %maxoctaves84 = load double, double* %maxoctaves
  %return85 = fcmp ogt double %output82, %maxoctaves84
  br i1 %return85, label %true87, label %end88

end77:                                            ; preds = %end106
  store double %oct.2, double* %x_oct
  %return155 = fcmp one double %output146, 0.000000e+00
  br i1 %return155, label %true157, label %end158

true87:                                           ; preds = %body
  %return92 = call double @"frac@FF"(double %maxoctaves84)
  store double %return92, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output93 = fmul double %output80, %bias
  br label %end88

end88:                                            ; preds = %true87, %body
  %oct.1 = phi double [ %maxoctaves84, %true87 ], [ %output82, %body ]
  %w.1 = phi double [ %output93, %true87 ], [ %output80, %body ]
  %pp95 = load <3 x double>, <3 x double>* %pp
  %cast97 = call <3 x double> @"set@VF"(double %return46)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %pp95, <3 x double> %cast97)
  store <3 x double> %output98, <3 x double>* %pp
  %output101 = fmul double %fw.0, %return46
  %return103 = fcmp ogt double %output101, 1.000000e+00
  br i1 %return103, label %true105, label %end106

true105:                                          ; preds = %end88
  %output108 = fsub double 1.000000e+00, %fw.0
  %output111 = fsub double %output101, %fw.0
  %output112 = call double @"div@FF"(double %output108, double %output111)
  %output115 = fsub double 1.000000e+00, %output112
  %output116 = fsub double %oct.1, %output115
  %output119 = fmul double %w.1, %output112
  br label %end106

end106:                                           ; preds = %true105, %end88
  %oct.2 = phi double [ %output116, %true105 ], [ %oct.1, %end88 ]
  %w.2 = phi double [ %output119, %true105 ], [ %w.1, %end88 ]
  %inv120 = load i64, i64* %inv
  store i64 %inv120, i64* %52
  %fold121 = load i64, i64* %fold
  store i64 %fold121, i64* %53
  %accl122 = load i64, i64* %accl
  store i64 %accl122, i64* %54
  %accg123 = load i64, i64* %accg
  store i64 %accg123, i64* %55
  %fsize124 = load double, double* %fsize
  store double %fsize124, double* %56
  %expon125 = load double, double* %expon
  store double %expon125, double* %57
  %dolw126 = load i64, i64* %dolw
  store i64 %dolw126, i64* %59
  %dogw127 = load i64, i64* %dogw
  store i64 %dogw127, i64* %60
  %disp128 = load double, double* %disp
  store double %disp128, double* %61
  %dfreq129 = load double, double* %dfreq
  store double %dfreq129, double* %62
  %gflow130 = load double, double* %gflow
  store double %gflow130, double* %63
  %noise_perlin131 = call double @"noise_perlin@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output134 = fsub double %noise_perlin131, %navg_correct14
  %output138 = fmul double %w.2, %output134
  %output139 = fadd double %out.0, %output138
  %output143 = fmul double %return68, %w.2
  %output145 = fmul double %output143, %w.2
  %output146 = fadd double %wsum.0, %output145
  %output150 = fadd double %output134, %navg_correct14
  %output151 = fmul double 2.000000e+00, %output150
  %output152 = fmul double %w.2, %output151
  %maxoctaves70 = load double, double* %maxoctaves
  %return71 = fcmp olt double %oct.2, %maxoctaves70
  %return72 = zext i1 %return71 to i64
  %return74 = fcmp olt double %output101, 1.000000e+00
  %return75 = zext i1 %return74 to i64
  %return76 = call i64 @"and@III"(i64 %return72, i64 %return75)
  %70 = icmp ne i64 %return76, 0
  br i1 %70, label %body, label %end77

true157:                                          ; preds = %end77
  %return161 = call double @"sqrt@FF"(double %output146)
  %output162 = call double @"div@FF"(double %output139, double %return161)
  br label %end158

end158:                                           ; preds = %true157, %end77
  %out.1 = phi double [ %output162, %true157 ], [ %output139, %end77 ]
  %output167 = fadd double %out.1, %navg_correct14
  store double %output167, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return168 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output169 = fmul double %out.1, %return168
  %output171 = fadd double %output169, %navg_correct14
  %return173 = call double @"clamp@FFFF"(double %output171, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end158, %true
  %UnifiedRetVal = phi double [ %noise_perlin, %true ], [ %return173, %end158 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_pperlin@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i8** %0
  store double 7.776290e-02, double* %1
  store double 9.117340e-01, double* %2
  store double 5.060500e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %per21 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per21, <3 x double>* %43
  %dolw22 = load i64, i64* %dolw
  store i64 %dolw22, i64* %44
  %dogw23 = load i64, i64* %dogw
  store i64 %dogw23, i64* %45
  %disp24 = load double, double* %disp
  store double %disp24, double* %46
  %dfreq25 = load double, double* %dfreq
  store double %dfreq25, double* %47
  %gflow26 = load double, double* %gflow
  store double %gflow26, double* %48
  %noise_pperlin = call double @"noise_pperlin@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize27 = load double, double* %fsize
  %return = fcmp oge double %fsize27, 1.000000e+00
  %return28 = zext i1 %return to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pperlin, %navg_correct14
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output51 = fmul double %gain48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output59 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output55, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output45, %end ], [ %output138, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end104 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output51
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return148 = fcmp one double %output145, 0.000000e+00
  br i1 %return148, label %true150, label %end151

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return47)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return47
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %per124 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per124, <3 x double>* %58
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_pperlin130 = call double @"noise_pperlin@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_pperlin130, %navg_correct14
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return66, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true150:                                          ; preds = %end75
  %return154 = call double @"sqrt@FF"(double %output145)
  %output155 = call double @"div@FF"(double %output138, double %return154)
  br label %end151

end151:                                           ; preds = %true150, %end75
  %out.1 = phi double [ %output155, %true150 ], [ %output138, %end75 ]
  %output160 = fadd double %out.1, %navg_correct14
  store double %output160, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return161 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output162 = fmul double %out.1, %return161
  %output164 = fadd double %output162, %navg_correct14
  %return166 = call double @"clamp@FFFF"(double %output164, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end151, %true
  %UnifiedRetVal = phi double [ %noise_pperlin, %true ], [ %return166, %end151 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_pperlin@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i8** %0
  store double 7.776290e-02, double* %1
  store double 9.117340e-01, double* %2
  store double 5.060500e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %per21 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per21, <3 x double>* %43
  %dolw22 = load i64, i64* %dolw
  store i64 %dolw22, i64* %44
  %dogw23 = load i64, i64* %dogw
  store i64 %dogw23, i64* %45
  %disp24 = load double, double* %disp
  store double %disp24, double* %46
  %dfreq25 = load double, double* %dfreq
  store double %dfreq25, double* %47
  %gflow26 = load double, double* %gflow
  store double %gflow26, double* %48
  %noise_pperlin = call double @"noise_pperlin@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize27 = load double, double* %fsize
  %return = fcmp oge double %fsize27, 1.000000e+00
  %return28 = zext i1 %return to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pperlin, %navg_correct14
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output61 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  br label %body

body:                                             ; preds = %end106, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end106 ]
  %fw.0 = phi double [ %output56, %end ], [ %output101, %end106 ]
  %out.0 = phi double [ %output45, %end ], [ %output140, %end106 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output147, %end106 ]
  %w.0 = phi double [ %noise_pperlin, %end ], [ %w.2, %end106 ]
  %output80 = fmul double %w.0, %output52
  %output82 = fadd double %oct.0, 1.000000e+00
  %maxoctaves84 = load double, double* %maxoctaves
  %return85 = fcmp ogt double %output82, %maxoctaves84
  br i1 %return85, label %true87, label %end88

end77:                                            ; preds = %end106
  store double %oct.2, double* %x_oct
  %return150 = fcmp one double %output147, 0.000000e+00
  br i1 %return150, label %true152, label %end153

true87:                                           ; preds = %body
  %return92 = call double @"frac@FF"(double %maxoctaves84)
  store double %return92, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output93 = fmul double %output80, %bias
  br label %end88

end88:                                            ; preds = %true87, %body
  %oct.1 = phi double [ %maxoctaves84, %true87 ], [ %output82, %body ]
  %w.1 = phi double [ %output93, %true87 ], [ %output80, %body ]
  %pp95 = load <3 x double>, <3 x double>* %pp
  %cast97 = call <3 x double> @"set@VF"(double %return47)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %pp95, <3 x double> %cast97)
  store <3 x double> %output98, <3 x double>* %pp
  %output101 = fmul double %fw.0, %return47
  %return103 = fcmp ogt double %output101, 1.000000e+00
  br i1 %return103, label %true105, label %end106

true105:                                          ; preds = %end88
  %output108 = fsub double 1.000000e+00, %fw.0
  %output111 = fsub double %output101, %fw.0
  %output112 = call double @"div@FF"(double %output108, double %output111)
  %output115 = fsub double 1.000000e+00, %output112
  %output116 = fsub double %oct.1, %output115
  %output119 = fmul double %w.1, %output112
  br label %end106

end106:                                           ; preds = %true105, %end88
  %oct.2 = phi double [ %output116, %true105 ], [ %oct.1, %end88 ]
  %w.2 = phi double [ %output119, %true105 ], [ %w.1, %end88 ]
  %inv120 = load i64, i64* %inv
  store i64 %inv120, i64* %52
  %fold121 = load i64, i64* %fold
  store i64 %fold121, i64* %53
  %accl122 = load i64, i64* %accl
  store i64 %accl122, i64* %54
  %accg123 = load i64, i64* %accg
  store i64 %accg123, i64* %55
  %fsize124 = load double, double* %fsize
  store double %fsize124, double* %56
  %expon125 = load double, double* %expon
  store double %expon125, double* %57
  %per126 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per126, <3 x double>* %58
  %dolw127 = load i64, i64* %dolw
  store i64 %dolw127, i64* %59
  %dogw128 = load i64, i64* %dogw
  store i64 %dogw128, i64* %60
  %disp129 = load double, double* %disp
  store double %disp129, double* %61
  %dfreq130 = load double, double* %dfreq
  store double %dfreq130, double* %62
  %gflow131 = load double, double* %gflow
  store double %gflow131, double* %63
  %noise_pperlin132 = call double @"noise_pperlin@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output135 = fsub double %noise_pperlin132, %navg_correct14
  %output139 = fmul double %w.2, %output135
  %output140 = fadd double %out.0, %output139
  %output144 = fmul double %return68, %w.2
  %output146 = fmul double %output144, %w.2
  %output147 = fadd double %wsum.0, %output146
  %maxoctaves70 = load double, double* %maxoctaves
  %return71 = fcmp olt double %oct.2, %maxoctaves70
  %return72 = zext i1 %return71 to i64
  %return74 = fcmp olt double %output101, 1.000000e+00
  %return75 = zext i1 %return74 to i64
  %return76 = call i64 @"and@III"(i64 %return72, i64 %return75)
  %70 = icmp ne i64 %return76, 0
  br i1 %70, label %body, label %end77

true152:                                          ; preds = %end77
  %return156 = call double @"sqrt@FF"(double %output147)
  %output157 = call double @"div@FF"(double %output140, double %return156)
  br label %end153

end153:                                           ; preds = %true152, %end77
  %out.1 = phi double [ %output157, %true152 ], [ %output140, %end77 ]
  %output162 = fadd double %out.1, %navg_correct14
  store double %output162, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return163 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output164 = fmul double %out.1, %return163
  %output166 = fadd double %output164, %navg_correct14
  %return168 = call double @"clamp@FFFF"(double %output166, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end153, %true
  %UnifiedRetVal = phi double [ %noise_pperlin, %true ], [ %return168, %end153 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_pperlin@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i8** %0
  store double 7.776290e-02, double* %1
  store double 9.117340e-01, double* %2
  store double 5.060500e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %per21 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per21, <3 x double>* %43
  %dolw22 = load i64, i64* %dolw
  store i64 %dolw22, i64* %44
  %dogw23 = load i64, i64* %dogw
  store i64 %dogw23, i64* %45
  %disp24 = load double, double* %disp
  store double %disp24, double* %46
  %dfreq25 = load double, double* %dfreq
  store double %dfreq25, double* %47
  %gflow26 = load double, double* %gflow
  store double %gflow26, double* %48
  %noise_pperlin = call double @"noise_pperlin@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize27 = load double, double* %fsize
  %return = fcmp oge double %fsize27, 1.000000e+00
  %return28 = zext i1 %return to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pperlin, %navg_correct14
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output59 = fmul double %noise_pperlin, 2.000000e+00
  %output62 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output62, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return68 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return69 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return68)
  br label %body

body:                                             ; preds = %end107, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end107 ]
  %fw.0 = phi double [ %output56, %end ], [ %output102, %end107 ]
  %out.0 = phi double [ %output45, %end ], [ %output141, %end107 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output148, %end107 ]
  %w.0 = phi double [ %output59, %end ], [ %output154, %end107 ]
  %output81 = fmul double %w.0, %output52
  %output83 = fadd double %oct.0, 1.000000e+00
  %maxoctaves85 = load double, double* %maxoctaves
  %return86 = fcmp ogt double %output83, %maxoctaves85
  br i1 %return86, label %true88, label %end89

end78:                                            ; preds = %end107
  store double %oct.2, double* %x_oct
  %return157 = fcmp one double %output148, 0.000000e+00
  br i1 %return157, label %true159, label %end160

true88:                                           ; preds = %body
  %return93 = call double @"frac@FF"(double %maxoctaves85)
  store double %return93, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output94 = fmul double %output81, %bias
  br label %end89

end89:                                            ; preds = %true88, %body
  %oct.1 = phi double [ %maxoctaves85, %true88 ], [ %output83, %body ]
  %w.1 = phi double [ %output94, %true88 ], [ %output81, %body ]
  %pp96 = load <3 x double>, <3 x double>* %pp
  %cast98 = call <3 x double> @"set@VF"(double %return47)
  %output99 = call <3 x double> @"mul@VV"(<3 x double> %pp96, <3 x double> %cast98)
  store <3 x double> %output99, <3 x double>* %pp
  %output102 = fmul double %fw.0, %return47
  %return104 = fcmp ogt double %output102, 1.000000e+00
  br i1 %return104, label %true106, label %end107

true106:                                          ; preds = %end89
  %output109 = fsub double 1.000000e+00, %fw.0
  %output112 = fsub double %output102, %fw.0
  %output113 = call double @"div@FF"(double %output109, double %output112)
  %output116 = fsub double 1.000000e+00, %output113
  %output117 = fsub double %oct.1, %output116
  %output120 = fmul double %w.1, %output113
  br label %end107

end107:                                           ; preds = %true106, %end89
  %oct.2 = phi double [ %output117, %true106 ], [ %oct.1, %end89 ]
  %w.2 = phi double [ %output120, %true106 ], [ %w.1, %end89 ]
  %inv121 = load i64, i64* %inv
  store i64 %inv121, i64* %52
  %fold122 = load i64, i64* %fold
  store i64 %fold122, i64* %53
  %accl123 = load i64, i64* %accl
  store i64 %accl123, i64* %54
  %accg124 = load i64, i64* %accg
  store i64 %accg124, i64* %55
  %fsize125 = load double, double* %fsize
  store double %fsize125, double* %56
  %expon126 = load double, double* %expon
  store double %expon126, double* %57
  %per127 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per127, <3 x double>* %58
  %dolw128 = load i64, i64* %dolw
  store i64 %dolw128, i64* %59
  %dogw129 = load i64, i64* %dogw
  store i64 %dogw129, i64* %60
  %disp130 = load double, double* %disp
  store double %disp130, double* %61
  %dfreq131 = load double, double* %dfreq
  store double %dfreq131, double* %62
  %gflow132 = load double, double* %gflow
  store double %gflow132, double* %63
  %noise_pperlin133 = call double @"noise_pperlin@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output136 = fsub double %noise_pperlin133, %navg_correct14
  %output140 = fmul double %w.2, %output136
  %output141 = fadd double %out.0, %output140
  %output145 = fmul double %return69, %w.2
  %output147 = fmul double %output145, %w.2
  %output148 = fadd double %wsum.0, %output147
  %output152 = fadd double %output136, %navg_correct14
  %output153 = fmul double 2.000000e+00, %output152
  %output154 = fmul double %w.2, %output153
  %maxoctaves71 = load double, double* %maxoctaves
  %return72 = fcmp olt double %oct.2, %maxoctaves71
  %return73 = zext i1 %return72 to i64
  %return75 = fcmp olt double %output102, 1.000000e+00
  %return76 = zext i1 %return75 to i64
  %return77 = call i64 @"and@III"(i64 %return73, i64 %return76)
  %70 = icmp ne i64 %return77, 0
  br i1 %70, label %body, label %end78

true159:                                          ; preds = %end78
  %return163 = call double @"sqrt@FF"(double %output148)
  %output164 = call double @"div@FF"(double %output141, double %return163)
  br label %end160

end160:                                           ; preds = %true159, %end78
  %out.1 = phi double [ %output164, %true159 ], [ %output141, %end78 ]
  %output169 = fadd double %out.1, %navg_correct14
  store double %output169, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return170 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output171 = fmul double %out.1, %return170
  %output173 = fadd double %output171, %navg_correct14
  %return175 = call double @"clamp@FFFF"(double %output173, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end160, %true
  %UnifiedRetVal = phi double [ %noise_pperlin, %true ], [ %return175, %end160 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_flow@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0), i8** %0
  store double 9.726970e-02, double* %1
  store double 8.796630e-01, double* %2
  store double 5.147250e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %flow26 = load double, double* %flow
  store double %flow26, double* %49
  %noise_flow = call double @"noise_flow@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize27 = load double, double* %fsize
  %return = fcmp oge double %fsize27, 1.000000e+00
  %return28 = zext i1 %return to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_flow, %navg_correct14
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output51 = fmul double %gain48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output59 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output55, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output45, %end ], [ %output138, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end104 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output51
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return148 = fcmp one double %output145, 0.000000e+00
  br i1 %return148, label %true150, label %end151

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return47)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return47
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %dolw124 = load i64, i64* %dolw
  store i64 %dolw124, i64* %59
  %dogw125 = load i64, i64* %dogw
  store i64 %dogw125, i64* %60
  %disp126 = load double, double* %disp
  store double %disp126, double* %61
  %dfreq127 = load double, double* %dfreq
  store double %dfreq127, double* %62
  %gflow128 = load double, double* %gflow
  store double %gflow128, double* %63
  %flow129 = load double, double* %flow
  store double %flow129, double* %64
  %noise_flow130 = call double @"noise_flow@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_flow130, %navg_correct14
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return66, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true150:                                          ; preds = %end75
  %return154 = call double @"sqrt@FF"(double %output145)
  %output155 = call double @"div@FF"(double %output138, double %return154)
  br label %end151

end151:                                           ; preds = %true150, %end75
  %out.1 = phi double [ %output155, %true150 ], [ %output138, %end75 ]
  %output160 = fadd double %out.1, %navg_correct14
  store double %output160, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return161 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output162 = fmul double %out.1, %return161
  %output164 = fadd double %output162, %navg_correct14
  %return166 = call double @"clamp@FFFF"(double %output164, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end151, %true
  %UnifiedRetVal = phi double [ %noise_flow, %true ], [ %return166, %end151 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_flow@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0), i8** %0
  store double 9.726970e-02, double* %1
  store double 8.796630e-01, double* %2
  store double 5.147250e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %flow26 = load double, double* %flow
  store double %flow26, double* %49
  %noise_flow = call double @"noise_flow@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize27 = load double, double* %fsize
  %return = fcmp oge double %fsize27, 1.000000e+00
  %return28 = zext i1 %return to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_flow, %navg_correct14
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output61 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  br label %body

body:                                             ; preds = %end106, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end106 ]
  %fw.0 = phi double [ %output56, %end ], [ %output101, %end106 ]
  %out.0 = phi double [ %output45, %end ], [ %output140, %end106 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output147, %end106 ]
  %w.0 = phi double [ %noise_flow, %end ], [ %w.2, %end106 ]
  %output80 = fmul double %w.0, %output52
  %output82 = fadd double %oct.0, 1.000000e+00
  %maxoctaves84 = load double, double* %maxoctaves
  %return85 = fcmp ogt double %output82, %maxoctaves84
  br i1 %return85, label %true87, label %end88

end77:                                            ; preds = %end106
  store double %oct.2, double* %x_oct
  %return150 = fcmp one double %output147, 0.000000e+00
  br i1 %return150, label %true152, label %end153

true87:                                           ; preds = %body
  %return92 = call double @"frac@FF"(double %maxoctaves84)
  store double %return92, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output93 = fmul double %output80, %bias
  br label %end88

end88:                                            ; preds = %true87, %body
  %oct.1 = phi double [ %maxoctaves84, %true87 ], [ %output82, %body ]
  %w.1 = phi double [ %output93, %true87 ], [ %output80, %body ]
  %pp95 = load <3 x double>, <3 x double>* %pp
  %cast97 = call <3 x double> @"set@VF"(double %return47)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %pp95, <3 x double> %cast97)
  store <3 x double> %output98, <3 x double>* %pp
  %output101 = fmul double %fw.0, %return47
  %return103 = fcmp ogt double %output101, 1.000000e+00
  br i1 %return103, label %true105, label %end106

true105:                                          ; preds = %end88
  %output108 = fsub double 1.000000e+00, %fw.0
  %output111 = fsub double %output101, %fw.0
  %output112 = call double @"div@FF"(double %output108, double %output111)
  %output115 = fsub double 1.000000e+00, %output112
  %output116 = fsub double %oct.1, %output115
  %output119 = fmul double %w.1, %output112
  br label %end106

end106:                                           ; preds = %true105, %end88
  %oct.2 = phi double [ %output116, %true105 ], [ %oct.1, %end88 ]
  %w.2 = phi double [ %output119, %true105 ], [ %w.1, %end88 ]
  %inv120 = load i64, i64* %inv
  store i64 %inv120, i64* %52
  %fold121 = load i64, i64* %fold
  store i64 %fold121, i64* %53
  %accl122 = load i64, i64* %accl
  store i64 %accl122, i64* %54
  %accg123 = load i64, i64* %accg
  store i64 %accg123, i64* %55
  %fsize124 = load double, double* %fsize
  store double %fsize124, double* %56
  %expon125 = load double, double* %expon
  store double %expon125, double* %57
  %dolw126 = load i64, i64* %dolw
  store i64 %dolw126, i64* %59
  %dogw127 = load i64, i64* %dogw
  store i64 %dogw127, i64* %60
  %disp128 = load double, double* %disp
  store double %disp128, double* %61
  %dfreq129 = load double, double* %dfreq
  store double %dfreq129, double* %62
  %gflow130 = load double, double* %gflow
  store double %gflow130, double* %63
  %flow131 = load double, double* %flow
  store double %flow131, double* %64
  %noise_flow132 = call double @"noise_flow@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output135 = fsub double %noise_flow132, %navg_correct14
  %output139 = fmul double %w.2, %output135
  %output140 = fadd double %out.0, %output139
  %output144 = fmul double %return68, %w.2
  %output146 = fmul double %output144, %w.2
  %output147 = fadd double %wsum.0, %output146
  %maxoctaves70 = load double, double* %maxoctaves
  %return71 = fcmp olt double %oct.2, %maxoctaves70
  %return72 = zext i1 %return71 to i64
  %return74 = fcmp olt double %output101, 1.000000e+00
  %return75 = zext i1 %return74 to i64
  %return76 = call i64 @"and@III"(i64 %return72, i64 %return75)
  %70 = icmp ne i64 %return76, 0
  br i1 %70, label %body, label %end77

true152:                                          ; preds = %end77
  %return156 = call double @"sqrt@FF"(double %output147)
  %output157 = call double @"div@FF"(double %output140, double %return156)
  br label %end153

end153:                                           ; preds = %true152, %end77
  %out.1 = phi double [ %output157, %true152 ], [ %output140, %end77 ]
  %output162 = fadd double %out.1, %navg_correct14
  store double %output162, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return163 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output164 = fmul double %out.1, %return163
  %output166 = fadd double %output164, %navg_correct14
  %return168 = call double @"clamp@FFFF"(double %output166, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end153, %true
  %UnifiedRetVal = phi double [ %noise_flow, %true ], [ %return168, %end153 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_flow@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0), i8** %0
  store double 9.726970e-02, double* %1
  store double 8.796630e-01, double* %2
  store double 5.147250e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %flow26 = load double, double* %flow
  store double %flow26, double* %49
  %noise_flow = call double @"noise_flow@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize27 = load double, double* %fsize
  %return = fcmp oge double %fsize27, 1.000000e+00
  %return28 = zext i1 %return to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_flow, %navg_correct14
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output59 = fmul double %noise_flow, 2.000000e+00
  %output62 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output62, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return68 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return69 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return68)
  br label %body

body:                                             ; preds = %end107, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end107 ]
  %fw.0 = phi double [ %output56, %end ], [ %output102, %end107 ]
  %out.0 = phi double [ %output45, %end ], [ %output141, %end107 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output148, %end107 ]
  %w.0 = phi double [ %output59, %end ], [ %output154, %end107 ]
  %output81 = fmul double %w.0, %output52
  %output83 = fadd double %oct.0, 1.000000e+00
  %maxoctaves85 = load double, double* %maxoctaves
  %return86 = fcmp ogt double %output83, %maxoctaves85
  br i1 %return86, label %true88, label %end89

end78:                                            ; preds = %end107
  store double %oct.2, double* %x_oct
  %return157 = fcmp one double %output148, 0.000000e+00
  br i1 %return157, label %true159, label %end160

true88:                                           ; preds = %body
  %return93 = call double @"frac@FF"(double %maxoctaves85)
  store double %return93, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output94 = fmul double %output81, %bias
  br label %end89

end89:                                            ; preds = %true88, %body
  %oct.1 = phi double [ %maxoctaves85, %true88 ], [ %output83, %body ]
  %w.1 = phi double [ %output94, %true88 ], [ %output81, %body ]
  %pp96 = load <3 x double>, <3 x double>* %pp
  %cast98 = call <3 x double> @"set@VF"(double %return47)
  %output99 = call <3 x double> @"mul@VV"(<3 x double> %pp96, <3 x double> %cast98)
  store <3 x double> %output99, <3 x double>* %pp
  %output102 = fmul double %fw.0, %return47
  %return104 = fcmp ogt double %output102, 1.000000e+00
  br i1 %return104, label %true106, label %end107

true106:                                          ; preds = %end89
  %output109 = fsub double 1.000000e+00, %fw.0
  %output112 = fsub double %output102, %fw.0
  %output113 = call double @"div@FF"(double %output109, double %output112)
  %output116 = fsub double 1.000000e+00, %output113
  %output117 = fsub double %oct.1, %output116
  %output120 = fmul double %w.1, %output113
  br label %end107

end107:                                           ; preds = %true106, %end89
  %oct.2 = phi double [ %output117, %true106 ], [ %oct.1, %end89 ]
  %w.2 = phi double [ %output120, %true106 ], [ %w.1, %end89 ]
  %inv121 = load i64, i64* %inv
  store i64 %inv121, i64* %52
  %fold122 = load i64, i64* %fold
  store i64 %fold122, i64* %53
  %accl123 = load i64, i64* %accl
  store i64 %accl123, i64* %54
  %accg124 = load i64, i64* %accg
  store i64 %accg124, i64* %55
  %fsize125 = load double, double* %fsize
  store double %fsize125, double* %56
  %expon126 = load double, double* %expon
  store double %expon126, double* %57
  %dolw127 = load i64, i64* %dolw
  store i64 %dolw127, i64* %59
  %dogw128 = load i64, i64* %dogw
  store i64 %dogw128, i64* %60
  %disp129 = load double, double* %disp
  store double %disp129, double* %61
  %dfreq130 = load double, double* %dfreq
  store double %dfreq130, double* %62
  %gflow131 = load double, double* %gflow
  store double %gflow131, double* %63
  %flow132 = load double, double* %flow
  store double %flow132, double* %64
  %noise_flow133 = call double @"noise_flow@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output136 = fsub double %noise_flow133, %navg_correct14
  %output140 = fmul double %w.2, %output136
  %output141 = fadd double %out.0, %output140
  %output145 = fmul double %return69, %w.2
  %output147 = fmul double %output145, %w.2
  %output148 = fadd double %wsum.0, %output147
  %output152 = fadd double %output136, %navg_correct14
  %output153 = fmul double 2.000000e+00, %output152
  %output154 = fmul double %w.2, %output153
  %maxoctaves71 = load double, double* %maxoctaves
  %return72 = fcmp olt double %oct.2, %maxoctaves71
  %return73 = zext i1 %return72 to i64
  %return75 = fcmp olt double %output102, 1.000000e+00
  %return76 = zext i1 %return75 to i64
  %return77 = call i64 @"and@III"(i64 %return73, i64 %return76)
  %70 = icmp ne i64 %return77, 0
  br i1 %70, label %body, label %end78

true159:                                          ; preds = %end78
  %return163 = call double @"sqrt@FF"(double %output148)
  %output164 = call double @"div@FF"(double %output141, double %return163)
  br label %end160

end160:                                           ; preds = %true159, %end78
  %out.1 = phi double [ %output164, %true159 ], [ %output141, %end78 ]
  %output169 = fadd double %out.1, %navg_correct14
  store double %output169, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return170 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output171 = fmul double %out.1, %return170
  %output173 = fadd double %output171, %navg_correct14
  %return175 = call double @"clamp@FFFF"(double %output173, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end160, %true
  %UnifiedRetVal = phi double [ %noise_flow, %true ], [ %return175, %end160 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_pflow@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @12, i64 0, i64 0), i8** %0
  store double 9.312730e-02, double* %1
  store double 8.960280e-01, double* %2
  store double 5.065750e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %per21 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per21, <3 x double>* %43
  %dolw22 = load i64, i64* %dolw
  store i64 %dolw22, i64* %44
  %dogw23 = load i64, i64* %dogw
  store i64 %dogw23, i64* %45
  %disp24 = load double, double* %disp
  store double %disp24, double* %46
  %dfreq25 = load double, double* %dfreq
  store double %dfreq25, double* %47
  %gflow26 = load double, double* %gflow
  store double %gflow26, double* %48
  %flow27 = load double, double* %flow
  store double %flow27, double* %49
  %noise_pflow = call double @"noise_pflow@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize28 = load double, double* %fsize
  %return = fcmp oge double %fsize28, 1.000000e+00
  %return29 = zext i1 %return to i64
  %maxoctaves31 = load double, double* %maxoctaves
  %return32 = fcmp ogt double 0.000000e+00, %maxoctaves31
  %return33 = zext i1 %return32 to i64
  %return34 = call i64 @"or@III"(i64 %return29, i64 %return33)
  %lacunarity35 = load double, double* %lacunarity
  %output = fmul double %lacunarity35, %maxoctaves31
  %gain37 = load double, double* %gain
  %output38 = fmul double %output, %gain37
  %return39 = fcmp oeq double %output38, 0.000000e+00
  %return40 = zext i1 %return39 to i64
  %return41 = call i64 @"or@III"(i64 %return34, i64 %return40)
  %68 = icmp ne i64 %return41, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p43 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p43, <3 x double>* %pp
  %output46 = fsub double %noise_pflow, %navg_correct14
  %lacunarity47 = load double, double* %lacunarity
  %return48 = call double @"abs@FF"(double %lacunarity47)
  %gain49 = load double, double* %gain
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return48)
  %output52 = fmul double %gain49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output60 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output60, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return66 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return48)
  %return67 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return66)
  br label %body

body:                                             ; preds = %end105, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end105 ]
  %fw.0 = phi double [ %output56, %end ], [ %output100, %end105 ]
  %out.0 = phi double [ %output46, %end ], [ %output140, %end105 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output147, %end105 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end105 ]
  %output79 = fmul double %w.0, %output52
  %output81 = fadd double %oct.0, 1.000000e+00
  %maxoctaves83 = load double, double* %maxoctaves
  %return84 = fcmp ogt double %output81, %maxoctaves83
  br i1 %return84, label %true86, label %end87

end76:                                            ; preds = %end105
  store double %oct.2, double* %x_oct
  %return150 = fcmp one double %output147, 0.000000e+00
  br i1 %return150, label %true152, label %end153

true86:                                           ; preds = %body
  %return91 = call double @"frac@FF"(double %maxoctaves83)
  store double %return91, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output92 = fmul double %output79, %bias
  br label %end87

end87:                                            ; preds = %true86, %body
  %oct.1 = phi double [ %maxoctaves83, %true86 ], [ %output81, %body ]
  %w.1 = phi double [ %output92, %true86 ], [ %output79, %body ]
  %pp94 = load <3 x double>, <3 x double>* %pp
  %cast96 = call <3 x double> @"set@VF"(double %return48)
  %output97 = call <3 x double> @"mul@VV"(<3 x double> %pp94, <3 x double> %cast96)
  store <3 x double> %output97, <3 x double>* %pp
  %output100 = fmul double %fw.0, %return48
  %return102 = fcmp ogt double %output100, 1.000000e+00
  br i1 %return102, label %true104, label %end105

true104:                                          ; preds = %end87
  %output107 = fsub double 1.000000e+00, %fw.0
  %output110 = fsub double %output100, %fw.0
  %output111 = call double @"div@FF"(double %output107, double %output110)
  %output114 = fsub double 1.000000e+00, %output111
  %output115 = fsub double %oct.1, %output114
  %output118 = fmul double %w.1, %output111
  br label %end105

end105:                                           ; preds = %true104, %end87
  %oct.2 = phi double [ %output115, %true104 ], [ %oct.1, %end87 ]
  %w.2 = phi double [ %output118, %true104 ], [ %w.1, %end87 ]
  %inv119 = load i64, i64* %inv
  store i64 %inv119, i64* %52
  %fold120 = load i64, i64* %fold
  store i64 %fold120, i64* %53
  %accl121 = load i64, i64* %accl
  store i64 %accl121, i64* %54
  %accg122 = load i64, i64* %accg
  store i64 %accg122, i64* %55
  %fsize123 = load double, double* %fsize
  store double %fsize123, double* %56
  %expon124 = load double, double* %expon
  store double %expon124, double* %57
  %per125 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per125, <3 x double>* %58
  %dolw126 = load i64, i64* %dolw
  store i64 %dolw126, i64* %59
  %dogw127 = load i64, i64* %dogw
  store i64 %dogw127, i64* %60
  %disp128 = load double, double* %disp
  store double %disp128, double* %61
  %dfreq129 = load double, double* %dfreq
  store double %dfreq129, double* %62
  %gflow130 = load double, double* %gflow
  store double %gflow130, double* %63
  %flow131 = load double, double* %flow
  store double %flow131, double* %64
  %noise_pflow132 = call double @"noise_pflow@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output135 = fsub double %noise_pflow132, %navg_correct14
  %output139 = fmul double %w.2, %output135
  %output140 = fadd double %out.0, %output139
  %output144 = fmul double %return67, %w.2
  %output146 = fmul double %output144, %w.2
  %output147 = fadd double %wsum.0, %output146
  %maxoctaves69 = load double, double* %maxoctaves
  %return70 = fcmp olt double %oct.2, %maxoctaves69
  %return71 = zext i1 %return70 to i64
  %return73 = fcmp olt double %output100, 1.000000e+00
  %return74 = zext i1 %return73 to i64
  %return75 = call i64 @"and@III"(i64 %return71, i64 %return74)
  %70 = icmp ne i64 %return75, 0
  br i1 %70, label %body, label %end76

true152:                                          ; preds = %end76
  %return156 = call double @"sqrt@FF"(double %output147)
  %output157 = call double @"div@FF"(double %output140, double %return156)
  br label %end153

end153:                                           ; preds = %true152, %end76
  %out.1 = phi double [ %output157, %true152 ], [ %output140, %end76 ]
  %output162 = fadd double %out.1, %navg_correct14
  store double %output162, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return163 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output164 = fmul double %out.1, %return163
  %output166 = fadd double %output164, %navg_correct14
  %return168 = call double @"clamp@FFFF"(double %output166, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end153, %true
  %UnifiedRetVal = phi double [ %noise_pflow, %true ], [ %return168, %end153 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_pflow@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @12, i64 0, i64 0), i8** %0
  store double 9.312730e-02, double* %1
  store double 8.960280e-01, double* %2
  store double 5.065750e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %per21 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per21, <3 x double>* %43
  %dolw22 = load i64, i64* %dolw
  store i64 %dolw22, i64* %44
  %dogw23 = load i64, i64* %dogw
  store i64 %dogw23, i64* %45
  %disp24 = load double, double* %disp
  store double %disp24, double* %46
  %dfreq25 = load double, double* %dfreq
  store double %dfreq25, double* %47
  %gflow26 = load double, double* %gflow
  store double %gflow26, double* %48
  %flow27 = load double, double* %flow
  store double %flow27, double* %49
  %noise_pflow = call double @"noise_pflow@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize28 = load double, double* %fsize
  %return = fcmp oge double %fsize28, 1.000000e+00
  %return29 = zext i1 %return to i64
  %maxoctaves31 = load double, double* %maxoctaves
  %return32 = fcmp ogt double 0.000000e+00, %maxoctaves31
  %return33 = zext i1 %return32 to i64
  %return34 = call i64 @"or@III"(i64 %return29, i64 %return33)
  %lacunarity35 = load double, double* %lacunarity
  %output = fmul double %lacunarity35, %maxoctaves31
  %gain37 = load double, double* %gain
  %output38 = fmul double %output, %gain37
  %return39 = fcmp oeq double %output38, 0.000000e+00
  %return40 = zext i1 %return39 to i64
  %return41 = call i64 @"or@III"(i64 %return34, i64 %return40)
  %68 = icmp ne i64 %return41, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p43 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p43, <3 x double>* %pp
  %output46 = fsub double %noise_pflow, %navg_correct14
  %lacunarity47 = load double, double* %lacunarity
  %return48 = call double @"abs@FF"(double %lacunarity47)
  %gain49 = load double, double* %gain
  %return50 = call double @"abs@FF"(double %gain49)
  %return52 = call double @"min@FFF"(double 1.000000e+00, double %return48)
  %output53 = fmul double %return50, %return52
  %fsize54 = load double, double* %fsize
  %fold55 = load i64, i64* %fold
  %output56 = add i64 1, %fold55
  %cast = sitofp i64 %output56 to double
  %output57 = fmul double %fsize54, %cast
  %output62 = mul i64 %fold55, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output62, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return68 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return48)
  %return69 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return68)
  br label %body

body:                                             ; preds = %end107, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end107 ]
  %fw.0 = phi double [ %output57, %end ], [ %output102, %end107 ]
  %out.0 = phi double [ %output46, %end ], [ %output142, %end107 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output149, %end107 ]
  %w.0 = phi double [ %noise_pflow, %end ], [ %w.2, %end107 ]
  %output81 = fmul double %w.0, %output53
  %output83 = fadd double %oct.0, 1.000000e+00
  %maxoctaves85 = load double, double* %maxoctaves
  %return86 = fcmp ogt double %output83, %maxoctaves85
  br i1 %return86, label %true88, label %end89

end78:                                            ; preds = %end107
  store double %oct.2, double* %x_oct
  %return152 = fcmp one double %output149, 0.000000e+00
  br i1 %return152, label %true154, label %end155

true88:                                           ; preds = %body
  %return93 = call double @"frac@FF"(double %maxoctaves85)
  store double %return93, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output94 = fmul double %output81, %bias
  br label %end89

end89:                                            ; preds = %true88, %body
  %oct.1 = phi double [ %maxoctaves85, %true88 ], [ %output83, %body ]
  %w.1 = phi double [ %output94, %true88 ], [ %output81, %body ]
  %pp96 = load <3 x double>, <3 x double>* %pp
  %cast98 = call <3 x double> @"set@VF"(double %return48)
  %output99 = call <3 x double> @"mul@VV"(<3 x double> %pp96, <3 x double> %cast98)
  store <3 x double> %output99, <3 x double>* %pp
  %output102 = fmul double %fw.0, %return48
  %return104 = fcmp ogt double %output102, 1.000000e+00
  br i1 %return104, label %true106, label %end107

true106:                                          ; preds = %end89
  %output109 = fsub double 1.000000e+00, %fw.0
  %output112 = fsub double %output102, %fw.0
  %output113 = call double @"div@FF"(double %output109, double %output112)
  %output116 = fsub double 1.000000e+00, %output113
  %output117 = fsub double %oct.1, %output116
  %output120 = fmul double %w.1, %output113
  br label %end107

end107:                                           ; preds = %true106, %end89
  %oct.2 = phi double [ %output117, %true106 ], [ %oct.1, %end89 ]
  %w.2 = phi double [ %output120, %true106 ], [ %w.1, %end89 ]
  %inv121 = load i64, i64* %inv
  store i64 %inv121, i64* %52
  %fold122 = load i64, i64* %fold
  store i64 %fold122, i64* %53
  %accl123 = load i64, i64* %accl
  store i64 %accl123, i64* %54
  %accg124 = load i64, i64* %accg
  store i64 %accg124, i64* %55
  %fsize125 = load double, double* %fsize
  store double %fsize125, double* %56
  %expon126 = load double, double* %expon
  store double %expon126, double* %57
  %per127 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per127, <3 x double>* %58
  %dolw128 = load i64, i64* %dolw
  store i64 %dolw128, i64* %59
  %dogw129 = load i64, i64* %dogw
  store i64 %dogw129, i64* %60
  %disp130 = load double, double* %disp
  store double %disp130, double* %61
  %dfreq131 = load double, double* %dfreq
  store double %dfreq131, double* %62
  %gflow132 = load double, double* %gflow
  store double %gflow132, double* %63
  %flow133 = load double, double* %flow
  store double %flow133, double* %64
  %noise_pflow134 = call double @"noise_pflow@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output137 = fsub double %noise_pflow134, %navg_correct14
  %output141 = fmul double %w.2, %output137
  %output142 = fadd double %out.0, %output141
  %output146 = fmul double %return69, %w.2
  %output148 = fmul double %output146, %w.2
  %output149 = fadd double %wsum.0, %output148
  %maxoctaves71 = load double, double* %maxoctaves
  %return72 = fcmp olt double %oct.2, %maxoctaves71
  %return73 = zext i1 %return72 to i64
  %return75 = fcmp olt double %output102, 1.000000e+00
  %return76 = zext i1 %return75 to i64
  %return77 = call i64 @"and@III"(i64 %return73, i64 %return76)
  %70 = icmp ne i64 %return77, 0
  br i1 %70, label %body, label %end78

true154:                                          ; preds = %end78
  %return158 = call double @"sqrt@FF"(double %output149)
  %output159 = call double @"div@FF"(double %output142, double %return158)
  br label %end155

end155:                                           ; preds = %true154, %end78
  %out.1 = phi double [ %output159, %true154 ], [ %output142, %end78 ]
  %output164 = fadd double %out.1, %navg_correct14
  store double %output164, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return165 = call double @"fit@FFFFFF"(double %output53, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output166 = fmul double %out.1, %return165
  %output168 = fadd double %output166, %navg_correct14
  %return170 = call double @"clamp@FFFF"(double %output168, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end155, %true
  %UnifiedRetVal = phi double [ %noise_pflow, %true ], [ %return170, %end155 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_pflow@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @12, i64 0, i64 0), i8** %0
  store double 9.312730e-02, double* %1
  store double 8.960280e-01, double* %2
  store double 5.065750e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %per21 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per21, <3 x double>* %43
  %dolw22 = load i64, i64* %dolw
  store i64 %dolw22, i64* %44
  %dogw23 = load i64, i64* %dogw
  store i64 %dogw23, i64* %45
  %disp24 = load double, double* %disp
  store double %disp24, double* %46
  %dfreq25 = load double, double* %dfreq
  store double %dfreq25, double* %47
  %gflow26 = load double, double* %gflow
  store double %gflow26, double* %48
  %flow27 = load double, double* %flow
  store double %flow27, double* %49
  %noise_pflow = call double @"noise_pflow@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize28 = load double, double* %fsize
  %return = fcmp oge double %fsize28, 1.000000e+00
  %return29 = zext i1 %return to i64
  %maxoctaves31 = load double, double* %maxoctaves
  %return32 = fcmp ogt double 0.000000e+00, %maxoctaves31
  %return33 = zext i1 %return32 to i64
  %return34 = call i64 @"or@III"(i64 %return29, i64 %return33)
  %lacunarity35 = load double, double* %lacunarity
  %output = fmul double %lacunarity35, %maxoctaves31
  %gain37 = load double, double* %gain
  %output38 = fmul double %output, %gain37
  %return39 = fcmp oeq double %output38, 0.000000e+00
  %return40 = zext i1 %return39 to i64
  %return41 = call i64 @"or@III"(i64 %return34, i64 %return40)
  %68 = icmp ne i64 %return41, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p43 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p43, <3 x double>* %pp
  %output46 = fsub double %noise_pflow, %navg_correct14
  %lacunarity47 = load double, double* %lacunarity
  %return48 = call double @"abs@FF"(double %lacunarity47)
  %gain49 = load double, double* %gain
  %return50 = call double @"abs@FF"(double %gain49)
  %return52 = call double @"min@FFF"(double 1.000000e+00, double %return48)
  %output53 = fmul double %return50, %return52
  %fsize54 = load double, double* %fsize
  %fold55 = load i64, i64* %fold
  %output56 = add i64 1, %fold55
  %cast = sitofp i64 %output56 to double
  %output57 = fmul double %fsize54, %cast
  %output60 = fmul double %noise_pflow, 2.000000e+00
  %output63 = mul i64 %fold55, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output63, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return69 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return48)
  %return70 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return69)
  br label %body

body:                                             ; preds = %end108, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end108 ]
  %fw.0 = phi double [ %output57, %end ], [ %output103, %end108 ]
  %out.0 = phi double [ %output46, %end ], [ %output143, %end108 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output150, %end108 ]
  %w.0 = phi double [ %output60, %end ], [ %output156, %end108 ]
  %output82 = fmul double %w.0, %output53
  %output84 = fadd double %oct.0, 1.000000e+00
  %maxoctaves86 = load double, double* %maxoctaves
  %return87 = fcmp ogt double %output84, %maxoctaves86
  br i1 %return87, label %true89, label %end90

end79:                                            ; preds = %end108
  store double %oct.2, double* %x_oct
  %return159 = fcmp one double %output150, 0.000000e+00
  br i1 %return159, label %true161, label %end162

true89:                                           ; preds = %body
  %return94 = call double @"frac@FF"(double %maxoctaves86)
  store double %return94, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output95 = fmul double %output82, %bias
  br label %end90

end90:                                            ; preds = %true89, %body
  %oct.1 = phi double [ %maxoctaves86, %true89 ], [ %output84, %body ]
  %w.1 = phi double [ %output95, %true89 ], [ %output82, %body ]
  %pp97 = load <3 x double>, <3 x double>* %pp
  %cast99 = call <3 x double> @"set@VF"(double %return48)
  %output100 = call <3 x double> @"mul@VV"(<3 x double> %pp97, <3 x double> %cast99)
  store <3 x double> %output100, <3 x double>* %pp
  %output103 = fmul double %fw.0, %return48
  %return105 = fcmp ogt double %output103, 1.000000e+00
  br i1 %return105, label %true107, label %end108

true107:                                          ; preds = %end90
  %output110 = fsub double 1.000000e+00, %fw.0
  %output113 = fsub double %output103, %fw.0
  %output114 = call double @"div@FF"(double %output110, double %output113)
  %output117 = fsub double 1.000000e+00, %output114
  %output118 = fsub double %oct.1, %output117
  %output121 = fmul double %w.1, %output114
  br label %end108

end108:                                           ; preds = %true107, %end90
  %oct.2 = phi double [ %output118, %true107 ], [ %oct.1, %end90 ]
  %w.2 = phi double [ %output121, %true107 ], [ %w.1, %end90 ]
  %inv122 = load i64, i64* %inv
  store i64 %inv122, i64* %52
  %fold123 = load i64, i64* %fold
  store i64 %fold123, i64* %53
  %accl124 = load i64, i64* %accl
  store i64 %accl124, i64* %54
  %accg125 = load i64, i64* %accg
  store i64 %accg125, i64* %55
  %fsize126 = load double, double* %fsize
  store double %fsize126, double* %56
  %expon127 = load double, double* %expon
  store double %expon127, double* %57
  %per128 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per128, <3 x double>* %58
  %dolw129 = load i64, i64* %dolw
  store i64 %dolw129, i64* %59
  %dogw130 = load i64, i64* %dogw
  store i64 %dogw130, i64* %60
  %disp131 = load double, double* %disp
  store double %disp131, double* %61
  %dfreq132 = load double, double* %dfreq
  store double %dfreq132, double* %62
  %gflow133 = load double, double* %gflow
  store double %gflow133, double* %63
  %flow134 = load double, double* %flow
  store double %flow134, double* %64
  %noise_pflow135 = call double @"noise_pflow@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output138 = fsub double %noise_pflow135, %navg_correct14
  %output142 = fmul double %w.2, %output138
  %output143 = fadd double %out.0, %output142
  %output147 = fmul double %return70, %w.2
  %output149 = fmul double %output147, %w.2
  %output150 = fadd double %wsum.0, %output149
  %output154 = fadd double %output138, %navg_correct14
  %output155 = fmul double 2.000000e+00, %output154
  %output156 = fmul double %w.2, %output155
  %maxoctaves72 = load double, double* %maxoctaves
  %return73 = fcmp olt double %oct.2, %maxoctaves72
  %return74 = zext i1 %return73 to i64
  %return76 = fcmp olt double %output103, 1.000000e+00
  %return77 = zext i1 %return76 to i64
  %return78 = call i64 @"and@III"(i64 %return74, i64 %return77)
  %70 = icmp ne i64 %return78, 0
  br i1 %70, label %body, label %end79

true161:                                          ; preds = %end79
  %return165 = call double @"sqrt@FF"(double %output150)
  %output166 = call double @"div@FF"(double %output143, double %return165)
  br label %end162

end162:                                           ; preds = %true161, %end79
  %out.1 = phi double [ %output166, %true161 ], [ %output143, %end79 ]
  %output171 = fadd double %out.1, %navg_correct14
  store double %output171, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return172 = call double @"fit@FFFFFF"(double %output53, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output173 = fmul double %out.1, %return172
  %output175 = fadd double %output173, %navg_correct14
  %return177 = call double @"clamp@FFFF"(double %output175, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end162, %true
  %UnifiedRetVal = phi double [ %noise_pflow, %true ], [ %return177, %end162 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_simplex@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i8** %0
  store double 1.530200e-01, double* %1
  store double 8.507840e-01, double* %2
  store double 4.970380e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_simplex = call double @"noise_simplex@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return = fcmp oge double %fsize26, 1.000000e+00
  %return27 = zext i1 %return to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p41, <3 x double>* %pp
  %output44 = fsub double %noise_simplex, %navg_correct14
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output50 = fmul double %gain47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output58 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output58, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return64 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return65 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return64)
  br label %body

body:                                             ; preds = %end103, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end103 ]
  %fw.0 = phi double [ %output54, %end ], [ %output98, %end103 ]
  %out.0 = phi double [ %output44, %end ], [ %output136, %end103 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output143, %end103 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end103 ]
  %output77 = fmul double %w.0, %output50
  %output79 = fadd double %oct.0, 1.000000e+00
  %maxoctaves81 = load double, double* %maxoctaves
  %return82 = fcmp ogt double %output79, %maxoctaves81
  br i1 %return82, label %true84, label %end85

end74:                                            ; preds = %end103
  store double %oct.2, double* %x_oct
  %return146 = fcmp one double %output143, 0.000000e+00
  br i1 %return146, label %true148, label %end149

true84:                                           ; preds = %body
  %return89 = call double @"frac@FF"(double %maxoctaves81)
  store double %return89, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output90 = fmul double %output77, %bias
  br label %end85

end85:                                            ; preds = %true84, %body
  %oct.1 = phi double [ %maxoctaves81, %true84 ], [ %output79, %body ]
  %w.1 = phi double [ %output90, %true84 ], [ %output77, %body ]
  %pp92 = load <3 x double>, <3 x double>* %pp
  %cast94 = call <3 x double> @"set@VF"(double %return46)
  %output95 = call <3 x double> @"mul@VV"(<3 x double> %pp92, <3 x double> %cast94)
  store <3 x double> %output95, <3 x double>* %pp
  %output98 = fmul double %fw.0, %return46
  %return100 = fcmp ogt double %output98, 1.000000e+00
  br i1 %return100, label %true102, label %end103

true102:                                          ; preds = %end85
  %output105 = fsub double 1.000000e+00, %fw.0
  %output108 = fsub double %output98, %fw.0
  %output109 = call double @"div@FF"(double %output105, double %output108)
  %output112 = fsub double 1.000000e+00, %output109
  %output113 = fsub double %oct.1, %output112
  %output116 = fmul double %w.1, %output109
  br label %end103

end103:                                           ; preds = %true102, %end85
  %oct.2 = phi double [ %output113, %true102 ], [ %oct.1, %end85 ]
  %w.2 = phi double [ %output116, %true102 ], [ %w.1, %end85 ]
  %inv117 = load i64, i64* %inv
  store i64 %inv117, i64* %52
  %fold118 = load i64, i64* %fold
  store i64 %fold118, i64* %53
  %accl119 = load i64, i64* %accl
  store i64 %accl119, i64* %54
  %accg120 = load i64, i64* %accg
  store i64 %accg120, i64* %55
  %fsize121 = load double, double* %fsize
  store double %fsize121, double* %56
  %expon122 = load double, double* %expon
  store double %expon122, double* %57
  %dolw123 = load i64, i64* %dolw
  store i64 %dolw123, i64* %59
  %dogw124 = load i64, i64* %dogw
  store i64 %dogw124, i64* %60
  %disp125 = load double, double* %disp
  store double %disp125, double* %61
  %dfreq126 = load double, double* %dfreq
  store double %dfreq126, double* %62
  %gflow127 = load double, double* %gflow
  store double %gflow127, double* %63
  %noise_simplex128 = call double @"noise_simplex@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output131 = fsub double %noise_simplex128, %navg_correct14
  %output135 = fmul double %w.2, %output131
  %output136 = fadd double %out.0, %output135
  %output140 = fmul double %return65, %w.2
  %output142 = fmul double %output140, %w.2
  %output143 = fadd double %wsum.0, %output142
  %maxoctaves67 = load double, double* %maxoctaves
  %return68 = fcmp olt double %oct.2, %maxoctaves67
  %return69 = zext i1 %return68 to i64
  %return71 = fcmp olt double %output98, 1.000000e+00
  %return72 = zext i1 %return71 to i64
  %return73 = call i64 @"and@III"(i64 %return69, i64 %return72)
  %70 = icmp ne i64 %return73, 0
  br i1 %70, label %body, label %end74

true148:                                          ; preds = %end74
  %return152 = call double @"sqrt@FF"(double %output143)
  %output153 = call double @"div@FF"(double %output136, double %return152)
  br label %end149

end149:                                           ; preds = %true148, %end74
  %out.1 = phi double [ %output153, %true148 ], [ %output136, %end74 ]
  %output158 = fadd double %out.1, %navg_correct14
  store double %output158, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return159 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output160 = fmul double %out.1, %return159
  %output162 = fadd double %output160, %navg_correct14
  %return164 = call double @"clamp@FFFF"(double %output162, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end149, %true
  %UnifiedRetVal = phi double [ %noise_simplex, %true ], [ %return164, %end149 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_simplex@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i8** %0
  store double 1.530200e-01, double* %1
  store double 8.507840e-01, double* %2
  store double 4.970380e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_simplex = call double @"noise_simplex@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return = fcmp oge double %fsize26, 1.000000e+00
  %return27 = zext i1 %return to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p41, <3 x double>* %pp
  %output44 = fsub double %noise_simplex, %navg_correct14
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return48 = call double @"abs@FF"(double %gain47)
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output51 = fmul double %return48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output60 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output60, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return66 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return67 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return66)
  br label %body

body:                                             ; preds = %end105, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end105 ]
  %fw.0 = phi double [ %output55, %end ], [ %output100, %end105 ]
  %out.0 = phi double [ %output44, %end ], [ %output138, %end105 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end105 ]
  %w.0 = phi double [ %noise_simplex, %end ], [ %w.2, %end105 ]
  %output79 = fmul double %w.0, %output51
  %output81 = fadd double %oct.0, 1.000000e+00
  %maxoctaves83 = load double, double* %maxoctaves
  %return84 = fcmp ogt double %output81, %maxoctaves83
  br i1 %return84, label %true86, label %end87

end76:                                            ; preds = %end105
  store double %oct.2, double* %x_oct
  %return148 = fcmp one double %output145, 0.000000e+00
  br i1 %return148, label %true150, label %end151

true86:                                           ; preds = %body
  %return91 = call double @"frac@FF"(double %maxoctaves83)
  store double %return91, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output92 = fmul double %output79, %bias
  br label %end87

end87:                                            ; preds = %true86, %body
  %oct.1 = phi double [ %maxoctaves83, %true86 ], [ %output81, %body ]
  %w.1 = phi double [ %output92, %true86 ], [ %output79, %body ]
  %pp94 = load <3 x double>, <3 x double>* %pp
  %cast96 = call <3 x double> @"set@VF"(double %return46)
  %output97 = call <3 x double> @"mul@VV"(<3 x double> %pp94, <3 x double> %cast96)
  store <3 x double> %output97, <3 x double>* %pp
  %output100 = fmul double %fw.0, %return46
  %return102 = fcmp ogt double %output100, 1.000000e+00
  br i1 %return102, label %true104, label %end105

true104:                                          ; preds = %end87
  %output107 = fsub double 1.000000e+00, %fw.0
  %output110 = fsub double %output100, %fw.0
  %output111 = call double @"div@FF"(double %output107, double %output110)
  %output114 = fsub double 1.000000e+00, %output111
  %output115 = fsub double %oct.1, %output114
  %output118 = fmul double %w.1, %output111
  br label %end105

end105:                                           ; preds = %true104, %end87
  %oct.2 = phi double [ %output115, %true104 ], [ %oct.1, %end87 ]
  %w.2 = phi double [ %output118, %true104 ], [ %w.1, %end87 ]
  %inv119 = load i64, i64* %inv
  store i64 %inv119, i64* %52
  %fold120 = load i64, i64* %fold
  store i64 %fold120, i64* %53
  %accl121 = load i64, i64* %accl
  store i64 %accl121, i64* %54
  %accg122 = load i64, i64* %accg
  store i64 %accg122, i64* %55
  %fsize123 = load double, double* %fsize
  store double %fsize123, double* %56
  %expon124 = load double, double* %expon
  store double %expon124, double* %57
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_simplex130 = call double @"noise_simplex@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_simplex130, %navg_correct14
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return67, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %maxoctaves69 = load double, double* %maxoctaves
  %return70 = fcmp olt double %oct.2, %maxoctaves69
  %return71 = zext i1 %return70 to i64
  %return73 = fcmp olt double %output100, 1.000000e+00
  %return74 = zext i1 %return73 to i64
  %return75 = call i64 @"and@III"(i64 %return71, i64 %return74)
  %70 = icmp ne i64 %return75, 0
  br i1 %70, label %body, label %end76

true150:                                          ; preds = %end76
  %return154 = call double @"sqrt@FF"(double %output145)
  %output155 = call double @"div@FF"(double %output138, double %return154)
  br label %end151

end151:                                           ; preds = %true150, %end76
  %out.1 = phi double [ %output155, %true150 ], [ %output138, %end76 ]
  %output160 = fadd double %out.1, %navg_correct14
  store double %output160, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return161 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output162 = fmul double %out.1, %return161
  %output164 = fadd double %output162, %navg_correct14
  %return166 = call double @"clamp@FFFF"(double %output164, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end151, %true
  %UnifiedRetVal = phi double [ %noise_simplex, %true ], [ %return166, %end151 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_simplex@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i8** %0
  store double 1.530200e-01, double* %1
  store double 8.507840e-01, double* %2
  store double 4.970380e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_simplex = call double @"noise_simplex@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return = fcmp oge double %fsize26, 1.000000e+00
  %return27 = zext i1 %return to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p41, <3 x double>* %pp
  %output44 = fsub double %noise_simplex, %navg_correct14
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return48 = call double @"abs@FF"(double %gain47)
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output51 = fmul double %return48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output58 = fmul double %noise_simplex, 2.000000e+00
  %output61 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  br label %body

body:                                             ; preds = %end106, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end106 ]
  %fw.0 = phi double [ %output55, %end ], [ %output101, %end106 ]
  %out.0 = phi double [ %output44, %end ], [ %output139, %end106 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output146, %end106 ]
  %w.0 = phi double [ %output58, %end ], [ %output152, %end106 ]
  %output80 = fmul double %w.0, %output51
  %output82 = fadd double %oct.0, 1.000000e+00
  %maxoctaves84 = load double, double* %maxoctaves
  %return85 = fcmp ogt double %output82, %maxoctaves84
  br i1 %return85, label %true87, label %end88

end77:                                            ; preds = %end106
  store double %oct.2, double* %x_oct
  %return155 = fcmp one double %output146, 0.000000e+00
  br i1 %return155, label %true157, label %end158

true87:                                           ; preds = %body
  %return92 = call double @"frac@FF"(double %maxoctaves84)
  store double %return92, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output93 = fmul double %output80, %bias
  br label %end88

end88:                                            ; preds = %true87, %body
  %oct.1 = phi double [ %maxoctaves84, %true87 ], [ %output82, %body ]
  %w.1 = phi double [ %output93, %true87 ], [ %output80, %body ]
  %pp95 = load <3 x double>, <3 x double>* %pp
  %cast97 = call <3 x double> @"set@VF"(double %return46)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %pp95, <3 x double> %cast97)
  store <3 x double> %output98, <3 x double>* %pp
  %output101 = fmul double %fw.0, %return46
  %return103 = fcmp ogt double %output101, 1.000000e+00
  br i1 %return103, label %true105, label %end106

true105:                                          ; preds = %end88
  %output108 = fsub double 1.000000e+00, %fw.0
  %output111 = fsub double %output101, %fw.0
  %output112 = call double @"div@FF"(double %output108, double %output111)
  %output115 = fsub double 1.000000e+00, %output112
  %output116 = fsub double %oct.1, %output115
  %output119 = fmul double %w.1, %output112
  br label %end106

end106:                                           ; preds = %true105, %end88
  %oct.2 = phi double [ %output116, %true105 ], [ %oct.1, %end88 ]
  %w.2 = phi double [ %output119, %true105 ], [ %w.1, %end88 ]
  %inv120 = load i64, i64* %inv
  store i64 %inv120, i64* %52
  %fold121 = load i64, i64* %fold
  store i64 %fold121, i64* %53
  %accl122 = load i64, i64* %accl
  store i64 %accl122, i64* %54
  %accg123 = load i64, i64* %accg
  store i64 %accg123, i64* %55
  %fsize124 = load double, double* %fsize
  store double %fsize124, double* %56
  %expon125 = load double, double* %expon
  store double %expon125, double* %57
  %dolw126 = load i64, i64* %dolw
  store i64 %dolw126, i64* %59
  %dogw127 = load i64, i64* %dogw
  store i64 %dogw127, i64* %60
  %disp128 = load double, double* %disp
  store double %disp128, double* %61
  %dfreq129 = load double, double* %dfreq
  store double %dfreq129, double* %62
  %gflow130 = load double, double* %gflow
  store double %gflow130, double* %63
  %noise_simplex131 = call double @"noise_simplex@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output134 = fsub double %noise_simplex131, %navg_correct14
  %output138 = fmul double %w.2, %output134
  %output139 = fadd double %out.0, %output138
  %output143 = fmul double %return68, %w.2
  %output145 = fmul double %output143, %w.2
  %output146 = fadd double %wsum.0, %output145
  %output150 = fadd double %output134, %navg_correct14
  %output151 = fmul double 2.000000e+00, %output150
  %output152 = fmul double %w.2, %output151
  %maxoctaves70 = load double, double* %maxoctaves
  %return71 = fcmp olt double %oct.2, %maxoctaves70
  %return72 = zext i1 %return71 to i64
  %return74 = fcmp olt double %output101, 1.000000e+00
  %return75 = zext i1 %return74 to i64
  %return76 = call i64 @"and@III"(i64 %return72, i64 %return75)
  %70 = icmp ne i64 %return76, 0
  br i1 %70, label %body, label %end77

true157:                                          ; preds = %end77
  %return161 = call double @"sqrt@FF"(double %output146)
  %output162 = call double @"div@FF"(double %output139, double %return161)
  br label %end158

end158:                                           ; preds = %true157, %end77
  %out.1 = phi double [ %output162, %true157 ], [ %output139, %end77 ]
  %output167 = fadd double %out.1, %navg_correct14
  store double %output167, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return168 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output169 = fmul double %out.1, %return168
  %output171 = fadd double %output169, %navg_correct14
  %return173 = call double @"clamp@FFFF"(double %output171, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end158, %true
  %UnifiedRetVal = phi double [ %noise_simplex, %true ], [ %return173, %end158 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_psimplex@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0), i8** %0
  store double 1.381340e-01, double* %1
  store double 8.661300e-01, double* %2
  store double 4.965790e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %per21 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per21, <3 x double>* %43
  %dolw22 = load i64, i64* %dolw
  store i64 %dolw22, i64* %44
  %dogw23 = load i64, i64* %dogw
  store i64 %dogw23, i64* %45
  %disp24 = load double, double* %disp
  store double %disp24, double* %46
  %dfreq25 = load double, double* %dfreq
  store double %dfreq25, double* %47
  %gflow26 = load double, double* %gflow
  store double %gflow26, double* %48
  %noise_psimplex = call double @"noise_psimplex@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize27 = load double, double* %fsize
  %return = fcmp oge double %fsize27, 1.000000e+00
  %return28 = zext i1 %return to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_psimplex, %navg_correct14
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output51 = fmul double %gain48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output59 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output55, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output45, %end ], [ %output138, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end104 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output51
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return148 = fcmp one double %output145, 0.000000e+00
  br i1 %return148, label %true150, label %end151

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return47)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return47
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %per124 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per124, <3 x double>* %58
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_psimplex130 = call double @"noise_psimplex@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_psimplex130, %navg_correct14
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return66, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true150:                                          ; preds = %end75
  %return154 = call double @"sqrt@FF"(double %output145)
  %output155 = call double @"div@FF"(double %output138, double %return154)
  br label %end151

end151:                                           ; preds = %true150, %end75
  %out.1 = phi double [ %output155, %true150 ], [ %output138, %end75 ]
  %output160 = fadd double %out.1, %navg_correct14
  store double %output160, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return161 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output162 = fmul double %out.1, %return161
  %output164 = fadd double %output162, %navg_correct14
  %return166 = call double @"clamp@FFFF"(double %output164, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end151, %true
  %UnifiedRetVal = phi double [ %noise_psimplex, %true ], [ %return166, %end151 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_psimplex@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0), i8** %0
  store double 1.381340e-01, double* %1
  store double 8.661300e-01, double* %2
  store double 4.965790e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %per21 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per21, <3 x double>* %43
  %dolw22 = load i64, i64* %dolw
  store i64 %dolw22, i64* %44
  %dogw23 = load i64, i64* %dogw
  store i64 %dogw23, i64* %45
  %disp24 = load double, double* %disp
  store double %disp24, double* %46
  %dfreq25 = load double, double* %dfreq
  store double %dfreq25, double* %47
  %gflow26 = load double, double* %gflow
  store double %gflow26, double* %48
  %noise_psimplex = call double @"noise_psimplex@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize27 = load double, double* %fsize
  %return = fcmp oge double %fsize27, 1.000000e+00
  %return28 = zext i1 %return to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_psimplex, %navg_correct14
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output61 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  br label %body

body:                                             ; preds = %end106, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end106 ]
  %fw.0 = phi double [ %output56, %end ], [ %output101, %end106 ]
  %out.0 = phi double [ %output45, %end ], [ %output140, %end106 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output147, %end106 ]
  %w.0 = phi double [ %noise_psimplex, %end ], [ %w.2, %end106 ]
  %output80 = fmul double %w.0, %output52
  %output82 = fadd double %oct.0, 1.000000e+00
  %maxoctaves84 = load double, double* %maxoctaves
  %return85 = fcmp ogt double %output82, %maxoctaves84
  br i1 %return85, label %true87, label %end88

end77:                                            ; preds = %end106
  store double %oct.2, double* %x_oct
  %return150 = fcmp one double %output147, 0.000000e+00
  br i1 %return150, label %true152, label %end153

true87:                                           ; preds = %body
  %return92 = call double @"frac@FF"(double %maxoctaves84)
  store double %return92, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output93 = fmul double %output80, %bias
  br label %end88

end88:                                            ; preds = %true87, %body
  %oct.1 = phi double [ %maxoctaves84, %true87 ], [ %output82, %body ]
  %w.1 = phi double [ %output93, %true87 ], [ %output80, %body ]
  %pp95 = load <3 x double>, <3 x double>* %pp
  %cast97 = call <3 x double> @"set@VF"(double %return47)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %pp95, <3 x double> %cast97)
  store <3 x double> %output98, <3 x double>* %pp
  %output101 = fmul double %fw.0, %return47
  %return103 = fcmp ogt double %output101, 1.000000e+00
  br i1 %return103, label %true105, label %end106

true105:                                          ; preds = %end88
  %output108 = fsub double 1.000000e+00, %fw.0
  %output111 = fsub double %output101, %fw.0
  %output112 = call double @"div@FF"(double %output108, double %output111)
  %output115 = fsub double 1.000000e+00, %output112
  %output116 = fsub double %oct.1, %output115
  %output119 = fmul double %w.1, %output112
  br label %end106

end106:                                           ; preds = %true105, %end88
  %oct.2 = phi double [ %output116, %true105 ], [ %oct.1, %end88 ]
  %w.2 = phi double [ %output119, %true105 ], [ %w.1, %end88 ]
  %inv120 = load i64, i64* %inv
  store i64 %inv120, i64* %52
  %fold121 = load i64, i64* %fold
  store i64 %fold121, i64* %53
  %accl122 = load i64, i64* %accl
  store i64 %accl122, i64* %54
  %accg123 = load i64, i64* %accg
  store i64 %accg123, i64* %55
  %fsize124 = load double, double* %fsize
  store double %fsize124, double* %56
  %expon125 = load double, double* %expon
  store double %expon125, double* %57
  %per126 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per126, <3 x double>* %58
  %dolw127 = load i64, i64* %dolw
  store i64 %dolw127, i64* %59
  %dogw128 = load i64, i64* %dogw
  store i64 %dogw128, i64* %60
  %disp129 = load double, double* %disp
  store double %disp129, double* %61
  %dfreq130 = load double, double* %dfreq
  store double %dfreq130, double* %62
  %gflow131 = load double, double* %gflow
  store double %gflow131, double* %63
  %noise_psimplex132 = call double @"noise_psimplex@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output135 = fsub double %noise_psimplex132, %navg_correct14
  %output139 = fmul double %w.2, %output135
  %output140 = fadd double %out.0, %output139
  %output144 = fmul double %return68, %w.2
  %output146 = fmul double %output144, %w.2
  %output147 = fadd double %wsum.0, %output146
  %maxoctaves70 = load double, double* %maxoctaves
  %return71 = fcmp olt double %oct.2, %maxoctaves70
  %return72 = zext i1 %return71 to i64
  %return74 = fcmp olt double %output101, 1.000000e+00
  %return75 = zext i1 %return74 to i64
  %return76 = call i64 @"and@III"(i64 %return72, i64 %return75)
  %70 = icmp ne i64 %return76, 0
  br i1 %70, label %body, label %end77

true152:                                          ; preds = %end77
  %return156 = call double @"sqrt@FF"(double %output147)
  %output157 = call double @"div@FF"(double %output140, double %return156)
  br label %end153

end153:                                           ; preds = %true152, %end77
  %out.1 = phi double [ %output157, %true152 ], [ %output140, %end77 ]
  %output162 = fadd double %out.1, %navg_correct14
  store double %output162, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return163 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output164 = fmul double %out.1, %return163
  %output166 = fadd double %output164, %navg_correct14
  %return168 = call double @"clamp@FFFF"(double %output166, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end153, %true
  %UnifiedRetVal = phi double [ %noise_psimplex, %true ], [ %return168, %end153 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_psimplex@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0), i8** %0
  store double 1.381340e-01, double* %1
  store double 8.661300e-01, double* %2
  store double 4.965790e-01, double* %3
  store i64 1, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %22, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %npivot_symmetric = call double @"npivot_symmetric@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double %npivot_symmetric, double* %21
  %stats10.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats10.fca.4.insert.fca.0.gep
  %stats10.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats10.fca.4.insert.fca.1.gep
  %stats10.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats10.fca.4.insert.fca.2.gep
  %stats10.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats10.fca.4.insert.fca.3.gep
  %stats10.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats10.fca.4.insert.fca.4.gep
  %inv11 = load i64, i64* %inv
  store i64 %inv11, i64* %24
  %fold12 = load i64, i64* %fold
  store i64 %fold12, i64* %25
  %expon13 = load double, double* %expon
  store double %expon13, double* %29
  %navg_correct14 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv15 = load i64, i64* %inv
  store i64 %inv15, i64* %37
  %fold16 = load i64, i64* %fold
  store i64 %fold16, i64* %38
  %accl17 = load i64, i64* %accl
  store i64 %accl17, i64* %39
  %accg18 = load i64, i64* %accg
  store i64 %accg18, i64* %40
  %fsize19 = load double, double* %fsize
  store double %fsize19, double* %41
  %expon20 = load double, double* %expon
  store double %expon20, double* %42
  %per21 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per21, <3 x double>* %43
  %dolw22 = load i64, i64* %dolw
  store i64 %dolw22, i64* %44
  %dogw23 = load i64, i64* %dogw
  store i64 %dogw23, i64* %45
  %disp24 = load double, double* %disp
  store double %disp24, double* %46
  %dfreq25 = load double, double* %dfreq
  store double %dfreq25, double* %47
  %gflow26 = load double, double* %gflow
  store double %gflow26, double* %48
  %noise_psimplex = call double @"noise_psimplex@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize27 = load double, double* %fsize
  %return = fcmp oge double %fsize27, 1.000000e+00
  %return28 = zext i1 %return to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_psimplex, %navg_correct14
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output59 = fmul double %noise_psimplex, 2.000000e+00
  %output62 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output62, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return68 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return69 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return68)
  br label %body

body:                                             ; preds = %end107, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end107 ]
  %fw.0 = phi double [ %output56, %end ], [ %output102, %end107 ]
  %out.0 = phi double [ %output45, %end ], [ %output141, %end107 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output148, %end107 ]
  %w.0 = phi double [ %output59, %end ], [ %output154, %end107 ]
  %output81 = fmul double %w.0, %output52
  %output83 = fadd double %oct.0, 1.000000e+00
  %maxoctaves85 = load double, double* %maxoctaves
  %return86 = fcmp ogt double %output83, %maxoctaves85
  br i1 %return86, label %true88, label %end89

end78:                                            ; preds = %end107
  store double %oct.2, double* %x_oct
  %return157 = fcmp one double %output148, 0.000000e+00
  br i1 %return157, label %true159, label %end160

true88:                                           ; preds = %body
  %return93 = call double @"frac@FF"(double %maxoctaves85)
  store double %return93, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output94 = fmul double %output81, %bias
  br label %end89

end89:                                            ; preds = %true88, %body
  %oct.1 = phi double [ %maxoctaves85, %true88 ], [ %output83, %body ]
  %w.1 = phi double [ %output94, %true88 ], [ %output81, %body ]
  %pp96 = load <3 x double>, <3 x double>* %pp
  %cast98 = call <3 x double> @"set@VF"(double %return47)
  %output99 = call <3 x double> @"mul@VV"(<3 x double> %pp96, <3 x double> %cast98)
  store <3 x double> %output99, <3 x double>* %pp
  %output102 = fmul double %fw.0, %return47
  %return104 = fcmp ogt double %output102, 1.000000e+00
  br i1 %return104, label %true106, label %end107

true106:                                          ; preds = %end89
  %output109 = fsub double 1.000000e+00, %fw.0
  %output112 = fsub double %output102, %fw.0
  %output113 = call double @"div@FF"(double %output109, double %output112)
  %output116 = fsub double 1.000000e+00, %output113
  %output117 = fsub double %oct.1, %output116
  %output120 = fmul double %w.1, %output113
  br label %end107

end107:                                           ; preds = %true106, %end89
  %oct.2 = phi double [ %output117, %true106 ], [ %oct.1, %end89 ]
  %w.2 = phi double [ %output120, %true106 ], [ %w.1, %end89 ]
  %inv121 = load i64, i64* %inv
  store i64 %inv121, i64* %52
  %fold122 = load i64, i64* %fold
  store i64 %fold122, i64* %53
  %accl123 = load i64, i64* %accl
  store i64 %accl123, i64* %54
  %accg124 = load i64, i64* %accg
  store i64 %accg124, i64* %55
  %fsize125 = load double, double* %fsize
  store double %fsize125, double* %56
  %expon126 = load double, double* %expon
  store double %expon126, double* %57
  %per127 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per127, <3 x double>* %58
  %dolw128 = load i64, i64* %dolw
  store i64 %dolw128, i64* %59
  %dogw129 = load i64, i64* %dogw
  store i64 %dogw129, i64* %60
  %disp130 = load double, double* %disp
  store double %disp130, double* %61
  %dfreq131 = load double, double* %dfreq
  store double %dfreq131, double* %62
  %gflow132 = load double, double* %gflow
  store double %gflow132, double* %63
  %noise_psimplex133 = call double @"noise_psimplex@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output136 = fsub double %noise_psimplex133, %navg_correct14
  %output140 = fmul double %w.2, %output136
  %output141 = fadd double %out.0, %output140
  %output145 = fmul double %return69, %w.2
  %output147 = fmul double %output145, %w.2
  %output148 = fadd double %wsum.0, %output147
  %output152 = fadd double %output136, %navg_correct14
  %output153 = fmul double 2.000000e+00, %output152
  %output154 = fmul double %w.2, %output153
  %maxoctaves71 = load double, double* %maxoctaves
  %return72 = fcmp olt double %oct.2, %maxoctaves71
  %return73 = zext i1 %return72 to i64
  %return75 = fcmp olt double %output102, 1.000000e+00
  %return76 = zext i1 %return75 to i64
  %return77 = call i64 @"and@III"(i64 %return73, i64 %return76)
  %70 = icmp ne i64 %return77, 0
  br i1 %70, label %body, label %end78

true159:                                          ; preds = %end78
  %return163 = call double @"sqrt@FF"(double %output148)
  %output164 = call double @"div@FF"(double %output141, double %return163)
  br label %end160

end160:                                           ; preds = %true159, %end78
  %out.1 = phi double [ %output164, %true159 ], [ %output141, %end78 ]
  %output169 = fadd double %out.1, %navg_correct14
  store double %output169, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return170 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output171 = fmul double %out.1, %return170
  %output173 = fadd double %output171, %navg_correct14
  %return175 = call double @"clamp@FFFF"(double %output173, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end160, %true
  %UnifiedRetVal = phi double [ %noise_psimplex, %true ], [ %return175, %end160 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_worleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.188950e+00, double* %2
  store double 1.596840e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_worleyFA = call double @"noise_worleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_worleyFA, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return48 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output49 = fmul double %gain46, %return48
  %fsize50 = load double, double* %fsize
  %fold51 = load i64, i64* %fold
  %output52 = add i64 1, %fold51
  %cast = sitofp i64 %output52 to double
  %output53 = fmul double %fsize50, %cast
  %output57 = mul i64 %fold51, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output57, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return63 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return64 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return63)
  br label %body

body:                                             ; preds = %end102, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end102 ]
  %fw.0 = phi double [ %output53, %end ], [ %output97, %end102 ]
  %out.0 = phi double [ %output43, %end ], [ %output135, %end102 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output142, %end102 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end102 ]
  %output76 = fmul double %w.0, %output49
  %output78 = fadd double %oct.0, 1.000000e+00
  %maxoctaves80 = load double, double* %maxoctaves
  %return81 = fcmp ogt double %output78, %maxoctaves80
  br i1 %return81, label %true83, label %end84

end73:                                            ; preds = %end102
  store double %oct.2, double* %x_oct
  %return145 = fcmp one double %output142, 0.000000e+00
  br i1 %return145, label %true147, label %end148

true83:                                           ; preds = %body
  %return88 = call double @"frac@FF"(double %maxoctaves80)
  store double %return88, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output89 = fmul double %output76, %bias
  br label %end84

end84:                                            ; preds = %true83, %body
  %oct.1 = phi double [ %maxoctaves80, %true83 ], [ %output78, %body ]
  %w.1 = phi double [ %output89, %true83 ], [ %output76, %body ]
  %pp91 = load <3 x double>, <3 x double>* %pp
  %cast93 = call <3 x double> @"set@VF"(double %return45)
  %output94 = call <3 x double> @"mul@VV"(<3 x double> %pp91, <3 x double> %cast93)
  store <3 x double> %output94, <3 x double>* %pp
  %output97 = fmul double %fw.0, %return45
  %return99 = fcmp ogt double %output97, 1.000000e+00
  br i1 %return99, label %true101, label %end102

true101:                                          ; preds = %end84
  %output104 = fsub double 1.000000e+00, %fw.0
  %output107 = fsub double %output97, %fw.0
  %output108 = call double @"div@FF"(double %output104, double %output107)
  %output111 = fsub double 1.000000e+00, %output108
  %output112 = fsub double %oct.1, %output111
  %output115 = fmul double %w.1, %output108
  br label %end102

end102:                                           ; preds = %true101, %end84
  %oct.2 = phi double [ %output112, %true101 ], [ %oct.1, %end84 ]
  %w.2 = phi double [ %output115, %true101 ], [ %w.1, %end84 ]
  %inv116 = load i64, i64* %inv
  store i64 %inv116, i64* %52
  %fold117 = load i64, i64* %fold
  store i64 %fold117, i64* %53
  %accl118 = load i64, i64* %accl
  store i64 %accl118, i64* %54
  %accg119 = load i64, i64* %accg
  store i64 %accg119, i64* %55
  %fsize120 = load double, double* %fsize
  store double %fsize120, double* %56
  %expon121 = load double, double* %expon
  store double %expon121, double* %57
  %dolw122 = load i64, i64* %dolw
  store i64 %dolw122, i64* %59
  %dogw123 = load i64, i64* %dogw
  store i64 %dogw123, i64* %60
  %disp124 = load double, double* %disp
  store double %disp124, double* %61
  %dfreq125 = load double, double* %dfreq
  store double %dfreq125, double* %62
  %gflow126 = load double, double* %gflow
  store double %gflow126, double* %63
  %noise_worleyFA127 = call double @"noise_worleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output130 = fsub double %noise_worleyFA127, %navg_correct13
  %output134 = fmul double %w.2, %output130
  %output135 = fadd double %out.0, %output134
  %output139 = fmul double %return64, %w.2
  %output141 = fmul double %output139, %w.2
  %output142 = fadd double %wsum.0, %output141
  %maxoctaves66 = load double, double* %maxoctaves
  %return67 = fcmp olt double %oct.2, %maxoctaves66
  %return68 = zext i1 %return67 to i64
  %return70 = fcmp olt double %output97, 1.000000e+00
  %return71 = zext i1 %return70 to i64
  %return72 = call i64 @"and@III"(i64 %return68, i64 %return71)
  %70 = icmp ne i64 %return72, 0
  br i1 %70, label %body, label %end73

true147:                                          ; preds = %end73
  %return151 = call double @"sqrt@FF"(double %output142)
  %output152 = call double @"div@FF"(double %output135, double %return151)
  br label %end148

end148:                                           ; preds = %true147, %end73
  %out.1 = phi double [ %output152, %true147 ], [ %output135, %end73 ]
  %output157 = fadd double %out.1, %navg_correct13
  store double %output157, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return158 = call double @"fit@FFFFFF"(double %output49, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output159 = fmul double %out.1, %return158
  %output161 = fadd double %output159, %navg_correct13
  %return163 = call double @"clamp@FFFF"(double %output161, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end148, %true
  %UnifiedRetVal = phi double [ %noise_worleyFA, %true ], [ %return163, %end148 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_worleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.188950e+00, double* %2
  store double 1.596840e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_worleyFA = call double @"noise_worleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_worleyFA, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return47 = call double @"abs@FF"(double %gain46)
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output50 = fmul double %return47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output59 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output54, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output43, %end ], [ %output137, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output144, %end104 ]
  %w.0 = phi double [ %noise_worleyFA, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output50
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return147 = fcmp one double %output144, 0.000000e+00
  br i1 %return147, label %true149, label %end150

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return45)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return45
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %dolw124 = load i64, i64* %dolw
  store i64 %dolw124, i64* %59
  %dogw125 = load i64, i64* %dogw
  store i64 %dogw125, i64* %60
  %disp126 = load double, double* %disp
  store double %disp126, double* %61
  %dfreq127 = load double, double* %dfreq
  store double %dfreq127, double* %62
  %gflow128 = load double, double* %gflow
  store double %gflow128, double* %63
  %noise_worleyFA129 = call double @"noise_worleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output132 = fsub double %noise_worleyFA129, %navg_correct13
  %output136 = fmul double %w.2, %output132
  %output137 = fadd double %out.0, %output136
  %output141 = fmul double %return66, %w.2
  %output143 = fmul double %output141, %w.2
  %output144 = fadd double %wsum.0, %output143
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true149:                                          ; preds = %end75
  %return153 = call double @"sqrt@FF"(double %output144)
  %output154 = call double @"div@FF"(double %output137, double %return153)
  br label %end150

end150:                                           ; preds = %true149, %end75
  %out.1 = phi double [ %output154, %true149 ], [ %output137, %end75 ]
  %output159 = fadd double %out.1, %navg_correct13
  store double %output159, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return160 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output161 = fmul double %out.1, %return160
  %output163 = fadd double %output161, %navg_correct13
  %return165 = call double @"clamp@FFFF"(double %output163, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end150, %true
  %UnifiedRetVal = phi double [ %noise_worleyFA, %true ], [ %return165, %end150 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_worleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.188950e+00, double* %2
  store double 1.596840e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_worleyFA = call double @"noise_worleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_worleyFA, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return47 = call double @"abs@FF"(double %gain46)
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output50 = fmul double %return47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output57 = fmul double %noise_worleyFA, 2.000000e+00
  %output60 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output60, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return66 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return67 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return66)
  br label %body

body:                                             ; preds = %end105, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end105 ]
  %fw.0 = phi double [ %output54, %end ], [ %output100, %end105 ]
  %out.0 = phi double [ %output43, %end ], [ %output138, %end105 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end105 ]
  %w.0 = phi double [ %output57, %end ], [ %output151, %end105 ]
  %output79 = fmul double %w.0, %output50
  %output81 = fadd double %oct.0, 1.000000e+00
  %maxoctaves83 = load double, double* %maxoctaves
  %return84 = fcmp ogt double %output81, %maxoctaves83
  br i1 %return84, label %true86, label %end87

end76:                                            ; preds = %end105
  store double %oct.2, double* %x_oct
  %return154 = fcmp one double %output145, 0.000000e+00
  br i1 %return154, label %true156, label %end157

true86:                                           ; preds = %body
  %return91 = call double @"frac@FF"(double %maxoctaves83)
  store double %return91, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output92 = fmul double %output79, %bias
  br label %end87

end87:                                            ; preds = %true86, %body
  %oct.1 = phi double [ %maxoctaves83, %true86 ], [ %output81, %body ]
  %w.1 = phi double [ %output92, %true86 ], [ %output79, %body ]
  %pp94 = load <3 x double>, <3 x double>* %pp
  %cast96 = call <3 x double> @"set@VF"(double %return45)
  %output97 = call <3 x double> @"mul@VV"(<3 x double> %pp94, <3 x double> %cast96)
  store <3 x double> %output97, <3 x double>* %pp
  %output100 = fmul double %fw.0, %return45
  %return102 = fcmp ogt double %output100, 1.000000e+00
  br i1 %return102, label %true104, label %end105

true104:                                          ; preds = %end87
  %output107 = fsub double 1.000000e+00, %fw.0
  %output110 = fsub double %output100, %fw.0
  %output111 = call double @"div@FF"(double %output107, double %output110)
  %output114 = fsub double 1.000000e+00, %output111
  %output115 = fsub double %oct.1, %output114
  %output118 = fmul double %w.1, %output111
  br label %end105

end105:                                           ; preds = %true104, %end87
  %oct.2 = phi double [ %output115, %true104 ], [ %oct.1, %end87 ]
  %w.2 = phi double [ %output118, %true104 ], [ %w.1, %end87 ]
  %inv119 = load i64, i64* %inv
  store i64 %inv119, i64* %52
  %fold120 = load i64, i64* %fold
  store i64 %fold120, i64* %53
  %accl121 = load i64, i64* %accl
  store i64 %accl121, i64* %54
  %accg122 = load i64, i64* %accg
  store i64 %accg122, i64* %55
  %fsize123 = load double, double* %fsize
  store double %fsize123, double* %56
  %expon124 = load double, double* %expon
  store double %expon124, double* %57
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_worleyFA130 = call double @"noise_worleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_worleyFA130, %navg_correct13
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return67, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %output149 = fadd double %output133, %navg_correct13
  %output150 = fmul double 2.000000e+00, %output149
  %output151 = fmul double %w.2, %output150
  %maxoctaves69 = load double, double* %maxoctaves
  %return70 = fcmp olt double %oct.2, %maxoctaves69
  %return71 = zext i1 %return70 to i64
  %return73 = fcmp olt double %output100, 1.000000e+00
  %return74 = zext i1 %return73 to i64
  %return75 = call i64 @"and@III"(i64 %return71, i64 %return74)
  %70 = icmp ne i64 %return75, 0
  br i1 %70, label %body, label %end76

true156:                                          ; preds = %end76
  %return160 = call double @"sqrt@FF"(double %output145)
  %output161 = call double @"div@FF"(double %output138, double %return160)
  br label %end157

end157:                                           ; preds = %true156, %end76
  %out.1 = phi double [ %output161, %true156 ], [ %output138, %end76 ]
  %output166 = fadd double %out.1, %navg_correct13
  store double %output166, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return167 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output168 = fmul double %out.1, %return167
  %output170 = fadd double %output168, %navg_correct13
  %return172 = call double @"clamp@FFFF"(double %output170, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end157, %true
  %UnifiedRetVal = phi double [ %noise_worleyFA, %true ], [ %return172, %end157 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_worleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.110100e+00, double* %2
  store double 1.180990e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_worleyFB = call double @"noise_worleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_worleyFB, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return48 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output49 = fmul double %gain46, %return48
  %fsize50 = load double, double* %fsize
  %fold51 = load i64, i64* %fold
  %output52 = add i64 1, %fold51
  %cast = sitofp i64 %output52 to double
  %output53 = fmul double %fsize50, %cast
  %output57 = mul i64 %fold51, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output57, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return63 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return64 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return63)
  br label %body

body:                                             ; preds = %end102, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end102 ]
  %fw.0 = phi double [ %output53, %end ], [ %output97, %end102 ]
  %out.0 = phi double [ %output43, %end ], [ %output135, %end102 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output142, %end102 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end102 ]
  %output76 = fmul double %w.0, %output49
  %output78 = fadd double %oct.0, 1.000000e+00
  %maxoctaves80 = load double, double* %maxoctaves
  %return81 = fcmp ogt double %output78, %maxoctaves80
  br i1 %return81, label %true83, label %end84

end73:                                            ; preds = %end102
  store double %oct.2, double* %x_oct
  %return145 = fcmp one double %output142, 0.000000e+00
  br i1 %return145, label %true147, label %end148

true83:                                           ; preds = %body
  %return88 = call double @"frac@FF"(double %maxoctaves80)
  store double %return88, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output89 = fmul double %output76, %bias
  br label %end84

end84:                                            ; preds = %true83, %body
  %oct.1 = phi double [ %maxoctaves80, %true83 ], [ %output78, %body ]
  %w.1 = phi double [ %output89, %true83 ], [ %output76, %body ]
  %pp91 = load <3 x double>, <3 x double>* %pp
  %cast93 = call <3 x double> @"set@VF"(double %return45)
  %output94 = call <3 x double> @"mul@VV"(<3 x double> %pp91, <3 x double> %cast93)
  store <3 x double> %output94, <3 x double>* %pp
  %output97 = fmul double %fw.0, %return45
  %return99 = fcmp ogt double %output97, 1.000000e+00
  br i1 %return99, label %true101, label %end102

true101:                                          ; preds = %end84
  %output104 = fsub double 1.000000e+00, %fw.0
  %output107 = fsub double %output97, %fw.0
  %output108 = call double @"div@FF"(double %output104, double %output107)
  %output111 = fsub double 1.000000e+00, %output108
  %output112 = fsub double %oct.1, %output111
  %output115 = fmul double %w.1, %output108
  br label %end102

end102:                                           ; preds = %true101, %end84
  %oct.2 = phi double [ %output112, %true101 ], [ %oct.1, %end84 ]
  %w.2 = phi double [ %output115, %true101 ], [ %w.1, %end84 ]
  %inv116 = load i64, i64* %inv
  store i64 %inv116, i64* %52
  %fold117 = load i64, i64* %fold
  store i64 %fold117, i64* %53
  %accl118 = load i64, i64* %accl
  store i64 %accl118, i64* %54
  %accg119 = load i64, i64* %accg
  store i64 %accg119, i64* %55
  %fsize120 = load double, double* %fsize
  store double %fsize120, double* %56
  %expon121 = load double, double* %expon
  store double %expon121, double* %57
  %dolw122 = load i64, i64* %dolw
  store i64 %dolw122, i64* %59
  %dogw123 = load i64, i64* %dogw
  store i64 %dogw123, i64* %60
  %disp124 = load double, double* %disp
  store double %disp124, double* %61
  %dfreq125 = load double, double* %dfreq
  store double %dfreq125, double* %62
  %gflow126 = load double, double* %gflow
  store double %gflow126, double* %63
  %noise_worleyFB127 = call double @"noise_worleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output130 = fsub double %noise_worleyFB127, %navg_correct13
  %output134 = fmul double %w.2, %output130
  %output135 = fadd double %out.0, %output134
  %output139 = fmul double %return64, %w.2
  %output141 = fmul double %output139, %w.2
  %output142 = fadd double %wsum.0, %output141
  %maxoctaves66 = load double, double* %maxoctaves
  %return67 = fcmp olt double %oct.2, %maxoctaves66
  %return68 = zext i1 %return67 to i64
  %return70 = fcmp olt double %output97, 1.000000e+00
  %return71 = zext i1 %return70 to i64
  %return72 = call i64 @"and@III"(i64 %return68, i64 %return71)
  %70 = icmp ne i64 %return72, 0
  br i1 %70, label %body, label %end73

true147:                                          ; preds = %end73
  %return151 = call double @"sqrt@FF"(double %output142)
  %output152 = call double @"div@FF"(double %output135, double %return151)
  br label %end148

end148:                                           ; preds = %true147, %end73
  %out.1 = phi double [ %output152, %true147 ], [ %output135, %end73 ]
  %output157 = fadd double %out.1, %navg_correct13
  store double %output157, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return158 = call double @"fit@FFFFFF"(double %output49, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output159 = fmul double %out.1, %return158
  %output161 = fadd double %output159, %navg_correct13
  %return163 = call double @"clamp@FFFF"(double %output161, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end148, %true
  %UnifiedRetVal = phi double [ %noise_worleyFB, %true ], [ %return163, %end148 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_worleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.110100e+00, double* %2
  store double 1.180990e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_worleyFB = call double @"noise_worleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_worleyFB, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return47 = call double @"abs@FF"(double %gain46)
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output50 = fmul double %return47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output59 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output54, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output43, %end ], [ %output137, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output144, %end104 ]
  %w.0 = phi double [ %noise_worleyFB, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output50
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return147 = fcmp one double %output144, 0.000000e+00
  br i1 %return147, label %true149, label %end150

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return45)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return45
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %dolw124 = load i64, i64* %dolw
  store i64 %dolw124, i64* %59
  %dogw125 = load i64, i64* %dogw
  store i64 %dogw125, i64* %60
  %disp126 = load double, double* %disp
  store double %disp126, double* %61
  %dfreq127 = load double, double* %dfreq
  store double %dfreq127, double* %62
  %gflow128 = load double, double* %gflow
  store double %gflow128, double* %63
  %noise_worleyFB129 = call double @"noise_worleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output132 = fsub double %noise_worleyFB129, %navg_correct13
  %output136 = fmul double %w.2, %output132
  %output137 = fadd double %out.0, %output136
  %output141 = fmul double %return66, %w.2
  %output143 = fmul double %output141, %w.2
  %output144 = fadd double %wsum.0, %output143
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true149:                                          ; preds = %end75
  %return153 = call double @"sqrt@FF"(double %output144)
  %output154 = call double @"div@FF"(double %output137, double %return153)
  br label %end150

end150:                                           ; preds = %true149, %end75
  %out.1 = phi double [ %output154, %true149 ], [ %output137, %end75 ]
  %output159 = fadd double %out.1, %navg_correct13
  store double %output159, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return160 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output161 = fmul double %out.1, %return160
  %output163 = fadd double %output161, %navg_correct13
  %return165 = call double @"clamp@FFFF"(double %output163, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end150, %true
  %UnifiedRetVal = phi double [ %noise_worleyFB, %true ], [ %return165, %end150 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_worleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.110100e+00, double* %2
  store double 1.180990e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_worleyFB = call double @"noise_worleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_worleyFB, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return47 = call double @"abs@FF"(double %gain46)
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output50 = fmul double %return47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output57 = fmul double %noise_worleyFB, 2.000000e+00
  %output60 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output60, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return66 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return67 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return66)
  br label %body

body:                                             ; preds = %end105, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end105 ]
  %fw.0 = phi double [ %output54, %end ], [ %output100, %end105 ]
  %out.0 = phi double [ %output43, %end ], [ %output138, %end105 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end105 ]
  %w.0 = phi double [ %output57, %end ], [ %output151, %end105 ]
  %output79 = fmul double %w.0, %output50
  %output81 = fadd double %oct.0, 1.000000e+00
  %maxoctaves83 = load double, double* %maxoctaves
  %return84 = fcmp ogt double %output81, %maxoctaves83
  br i1 %return84, label %true86, label %end87

end76:                                            ; preds = %end105
  store double %oct.2, double* %x_oct
  %return154 = fcmp one double %output145, 0.000000e+00
  br i1 %return154, label %true156, label %end157

true86:                                           ; preds = %body
  %return91 = call double @"frac@FF"(double %maxoctaves83)
  store double %return91, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output92 = fmul double %output79, %bias
  br label %end87

end87:                                            ; preds = %true86, %body
  %oct.1 = phi double [ %maxoctaves83, %true86 ], [ %output81, %body ]
  %w.1 = phi double [ %output92, %true86 ], [ %output79, %body ]
  %pp94 = load <3 x double>, <3 x double>* %pp
  %cast96 = call <3 x double> @"set@VF"(double %return45)
  %output97 = call <3 x double> @"mul@VV"(<3 x double> %pp94, <3 x double> %cast96)
  store <3 x double> %output97, <3 x double>* %pp
  %output100 = fmul double %fw.0, %return45
  %return102 = fcmp ogt double %output100, 1.000000e+00
  br i1 %return102, label %true104, label %end105

true104:                                          ; preds = %end87
  %output107 = fsub double 1.000000e+00, %fw.0
  %output110 = fsub double %output100, %fw.0
  %output111 = call double @"div@FF"(double %output107, double %output110)
  %output114 = fsub double 1.000000e+00, %output111
  %output115 = fsub double %oct.1, %output114
  %output118 = fmul double %w.1, %output111
  br label %end105

end105:                                           ; preds = %true104, %end87
  %oct.2 = phi double [ %output115, %true104 ], [ %oct.1, %end87 ]
  %w.2 = phi double [ %output118, %true104 ], [ %w.1, %end87 ]
  %inv119 = load i64, i64* %inv
  store i64 %inv119, i64* %52
  %fold120 = load i64, i64* %fold
  store i64 %fold120, i64* %53
  %accl121 = load i64, i64* %accl
  store i64 %accl121, i64* %54
  %accg122 = load i64, i64* %accg
  store i64 %accg122, i64* %55
  %fsize123 = load double, double* %fsize
  store double %fsize123, double* %56
  %expon124 = load double, double* %expon
  store double %expon124, double* %57
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_worleyFB130 = call double @"noise_worleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_worleyFB130, %navg_correct13
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return67, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %output149 = fadd double %output133, %navg_correct13
  %output150 = fmul double 2.000000e+00, %output149
  %output151 = fmul double %w.2, %output150
  %maxoctaves69 = load double, double* %maxoctaves
  %return70 = fcmp olt double %oct.2, %maxoctaves69
  %return71 = zext i1 %return70 to i64
  %return73 = fcmp olt double %output100, 1.000000e+00
  %return74 = zext i1 %return73 to i64
  %return75 = call i64 @"and@III"(i64 %return71, i64 %return74)
  %70 = icmp ne i64 %return75, 0
  br i1 %70, label %body, label %end76

true156:                                          ; preds = %end76
  %return160 = call double @"sqrt@FF"(double %output145)
  %output161 = call double @"div@FF"(double %output138, double %return160)
  br label %end157

end157:                                           ; preds = %true156, %end76
  %out.1 = phi double [ %output161, %true156 ], [ %output138, %end76 ]
  %output166 = fadd double %out.1, %navg_correct13
  store double %output166, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return167 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output168 = fmul double %out.1, %return167
  %output170 = fadd double %output168, %navg_correct13
  %return172 = call double @"clamp@FFFF"(double %output170, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end157, %true
  %UnifiedRetVal = phi double [ %noise_worleyFB, %true ], [ %return172, %end157 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_mworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @16, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.566030e+00, double* %2
  store double 3.984810e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_mworleyFA = call double @"noise_mworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_mworleyFA, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return48 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output49 = fmul double %gain46, %return48
  %fsize50 = load double, double* %fsize
  %fold51 = load i64, i64* %fold
  %output52 = add i64 1, %fold51
  %cast = sitofp i64 %output52 to double
  %output53 = fmul double %fsize50, %cast
  %output57 = mul i64 %fold51, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output57, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return63 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return64 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return63)
  br label %body

body:                                             ; preds = %end102, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end102 ]
  %fw.0 = phi double [ %output53, %end ], [ %output97, %end102 ]
  %out.0 = phi double [ %output43, %end ], [ %output135, %end102 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output142, %end102 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end102 ]
  %output76 = fmul double %w.0, %output49
  %output78 = fadd double %oct.0, 1.000000e+00
  %maxoctaves80 = load double, double* %maxoctaves
  %return81 = fcmp ogt double %output78, %maxoctaves80
  br i1 %return81, label %true83, label %end84

end73:                                            ; preds = %end102
  store double %oct.2, double* %x_oct
  %return145 = fcmp one double %output142, 0.000000e+00
  br i1 %return145, label %true147, label %end148

true83:                                           ; preds = %body
  %return88 = call double @"frac@FF"(double %maxoctaves80)
  store double %return88, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output89 = fmul double %output76, %bias
  br label %end84

end84:                                            ; preds = %true83, %body
  %oct.1 = phi double [ %maxoctaves80, %true83 ], [ %output78, %body ]
  %w.1 = phi double [ %output89, %true83 ], [ %output76, %body ]
  %pp91 = load <3 x double>, <3 x double>* %pp
  %cast93 = call <3 x double> @"set@VF"(double %return45)
  %output94 = call <3 x double> @"mul@VV"(<3 x double> %pp91, <3 x double> %cast93)
  store <3 x double> %output94, <3 x double>* %pp
  %output97 = fmul double %fw.0, %return45
  %return99 = fcmp ogt double %output97, 1.000000e+00
  br i1 %return99, label %true101, label %end102

true101:                                          ; preds = %end84
  %output104 = fsub double 1.000000e+00, %fw.0
  %output107 = fsub double %output97, %fw.0
  %output108 = call double @"div@FF"(double %output104, double %output107)
  %output111 = fsub double 1.000000e+00, %output108
  %output112 = fsub double %oct.1, %output111
  %output115 = fmul double %w.1, %output108
  br label %end102

end102:                                           ; preds = %true101, %end84
  %oct.2 = phi double [ %output112, %true101 ], [ %oct.1, %end84 ]
  %w.2 = phi double [ %output115, %true101 ], [ %w.1, %end84 ]
  %inv116 = load i64, i64* %inv
  store i64 %inv116, i64* %52
  %fold117 = load i64, i64* %fold
  store i64 %fold117, i64* %53
  %accl118 = load i64, i64* %accl
  store i64 %accl118, i64* %54
  %accg119 = load i64, i64* %accg
  store i64 %accg119, i64* %55
  %fsize120 = load double, double* %fsize
  store double %fsize120, double* %56
  %expon121 = load double, double* %expon
  store double %expon121, double* %57
  %dolw122 = load i64, i64* %dolw
  store i64 %dolw122, i64* %59
  %dogw123 = load i64, i64* %dogw
  store i64 %dogw123, i64* %60
  %disp124 = load double, double* %disp
  store double %disp124, double* %61
  %dfreq125 = load double, double* %dfreq
  store double %dfreq125, double* %62
  %gflow126 = load double, double* %gflow
  store double %gflow126, double* %63
  %noise_mworleyFA127 = call double @"noise_mworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output130 = fsub double %noise_mworleyFA127, %navg_correct13
  %output134 = fmul double %w.2, %output130
  %output135 = fadd double %out.0, %output134
  %output139 = fmul double %return64, %w.2
  %output141 = fmul double %output139, %w.2
  %output142 = fadd double %wsum.0, %output141
  %maxoctaves66 = load double, double* %maxoctaves
  %return67 = fcmp olt double %oct.2, %maxoctaves66
  %return68 = zext i1 %return67 to i64
  %return70 = fcmp olt double %output97, 1.000000e+00
  %return71 = zext i1 %return70 to i64
  %return72 = call i64 @"and@III"(i64 %return68, i64 %return71)
  %70 = icmp ne i64 %return72, 0
  br i1 %70, label %body, label %end73

true147:                                          ; preds = %end73
  %return151 = call double @"sqrt@FF"(double %output142)
  %output152 = call double @"div@FF"(double %output135, double %return151)
  br label %end148

end148:                                           ; preds = %true147, %end73
  %out.1 = phi double [ %output152, %true147 ], [ %output135, %end73 ]
  %output157 = fadd double %out.1, %navg_correct13
  store double %output157, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return158 = call double @"fit@FFFFFF"(double %output49, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output159 = fmul double %out.1, %return158
  %output161 = fadd double %output159, %navg_correct13
  %return163 = call double @"clamp@FFFF"(double %output161, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end148, %true
  %UnifiedRetVal = phi double [ %noise_mworleyFA, %true ], [ %return163, %end148 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_mworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @16, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.566030e+00, double* %2
  store double 3.984810e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_mworleyFA = call double @"noise_mworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_mworleyFA, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return47 = call double @"abs@FF"(double %gain46)
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output50 = fmul double %return47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output59 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output54, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output43, %end ], [ %output137, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output144, %end104 ]
  %w.0 = phi double [ %noise_mworleyFA, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output50
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return147 = fcmp one double %output144, 0.000000e+00
  br i1 %return147, label %true149, label %end150

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return45)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return45
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %dolw124 = load i64, i64* %dolw
  store i64 %dolw124, i64* %59
  %dogw125 = load i64, i64* %dogw
  store i64 %dogw125, i64* %60
  %disp126 = load double, double* %disp
  store double %disp126, double* %61
  %dfreq127 = load double, double* %dfreq
  store double %dfreq127, double* %62
  %gflow128 = load double, double* %gflow
  store double %gflow128, double* %63
  %noise_mworleyFA129 = call double @"noise_mworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output132 = fsub double %noise_mworleyFA129, %navg_correct13
  %output136 = fmul double %w.2, %output132
  %output137 = fadd double %out.0, %output136
  %output141 = fmul double %return66, %w.2
  %output143 = fmul double %output141, %w.2
  %output144 = fadd double %wsum.0, %output143
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true149:                                          ; preds = %end75
  %return153 = call double @"sqrt@FF"(double %output144)
  %output154 = call double @"div@FF"(double %output137, double %return153)
  br label %end150

end150:                                           ; preds = %true149, %end75
  %out.1 = phi double [ %output154, %true149 ], [ %output137, %end75 ]
  %output159 = fadd double %out.1, %navg_correct13
  store double %output159, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return160 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output161 = fmul double %out.1, %return160
  %output163 = fadd double %output161, %navg_correct13
  %return165 = call double @"clamp@FFFF"(double %output163, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end150, %true
  %UnifiedRetVal = phi double [ %noise_mworleyFA, %true ], [ %return165, %end150 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_mworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @16, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.566030e+00, double* %2
  store double 3.984810e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_mworleyFA = call double @"noise_mworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_mworleyFA, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return47 = call double @"abs@FF"(double %gain46)
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output50 = fmul double %return47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output57 = fmul double %noise_mworleyFA, 2.000000e+00
  %output60 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output60, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return66 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return67 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return66)
  br label %body

body:                                             ; preds = %end105, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end105 ]
  %fw.0 = phi double [ %output54, %end ], [ %output100, %end105 ]
  %out.0 = phi double [ %output43, %end ], [ %output138, %end105 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end105 ]
  %w.0 = phi double [ %output57, %end ], [ %output151, %end105 ]
  %output79 = fmul double %w.0, %output50
  %output81 = fadd double %oct.0, 1.000000e+00
  %maxoctaves83 = load double, double* %maxoctaves
  %return84 = fcmp ogt double %output81, %maxoctaves83
  br i1 %return84, label %true86, label %end87

end76:                                            ; preds = %end105
  store double %oct.2, double* %x_oct
  %return154 = fcmp one double %output145, 0.000000e+00
  br i1 %return154, label %true156, label %end157

true86:                                           ; preds = %body
  %return91 = call double @"frac@FF"(double %maxoctaves83)
  store double %return91, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output92 = fmul double %output79, %bias
  br label %end87

end87:                                            ; preds = %true86, %body
  %oct.1 = phi double [ %maxoctaves83, %true86 ], [ %output81, %body ]
  %w.1 = phi double [ %output92, %true86 ], [ %output79, %body ]
  %pp94 = load <3 x double>, <3 x double>* %pp
  %cast96 = call <3 x double> @"set@VF"(double %return45)
  %output97 = call <3 x double> @"mul@VV"(<3 x double> %pp94, <3 x double> %cast96)
  store <3 x double> %output97, <3 x double>* %pp
  %output100 = fmul double %fw.0, %return45
  %return102 = fcmp ogt double %output100, 1.000000e+00
  br i1 %return102, label %true104, label %end105

true104:                                          ; preds = %end87
  %output107 = fsub double 1.000000e+00, %fw.0
  %output110 = fsub double %output100, %fw.0
  %output111 = call double @"div@FF"(double %output107, double %output110)
  %output114 = fsub double 1.000000e+00, %output111
  %output115 = fsub double %oct.1, %output114
  %output118 = fmul double %w.1, %output111
  br label %end105

end105:                                           ; preds = %true104, %end87
  %oct.2 = phi double [ %output115, %true104 ], [ %oct.1, %end87 ]
  %w.2 = phi double [ %output118, %true104 ], [ %w.1, %end87 ]
  %inv119 = load i64, i64* %inv
  store i64 %inv119, i64* %52
  %fold120 = load i64, i64* %fold
  store i64 %fold120, i64* %53
  %accl121 = load i64, i64* %accl
  store i64 %accl121, i64* %54
  %accg122 = load i64, i64* %accg
  store i64 %accg122, i64* %55
  %fsize123 = load double, double* %fsize
  store double %fsize123, double* %56
  %expon124 = load double, double* %expon
  store double %expon124, double* %57
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_mworleyFA130 = call double @"noise_mworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_mworleyFA130, %navg_correct13
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return67, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %output149 = fadd double %output133, %navg_correct13
  %output150 = fmul double 2.000000e+00, %output149
  %output151 = fmul double %w.2, %output150
  %maxoctaves69 = load double, double* %maxoctaves
  %return70 = fcmp olt double %oct.2, %maxoctaves69
  %return71 = zext i1 %return70 to i64
  %return73 = fcmp olt double %output100, 1.000000e+00
  %return74 = zext i1 %return73 to i64
  %return75 = call i64 @"and@III"(i64 %return71, i64 %return74)
  %70 = icmp ne i64 %return75, 0
  br i1 %70, label %body, label %end76

true156:                                          ; preds = %end76
  %return160 = call double @"sqrt@FF"(double %output145)
  %output161 = call double @"div@FF"(double %output138, double %return160)
  br label %end157

end157:                                           ; preds = %true156, %end76
  %out.1 = phi double [ %output161, %true156 ], [ %output138, %end76 ]
  %output166 = fadd double %out.1, %navg_correct13
  store double %output166, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return167 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output168 = fmul double %out.1, %return167
  %output170 = fadd double %output168, %navg_correct13
  %return172 = call double @"clamp@FFFF"(double %output170, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end157, %true
  %UnifiedRetVal = phi double [ %noise_mworleyFA, %true ], [ %return172, %end157 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_mworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @16, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.454660e+00, double* %2
  store double 1.616670e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_mworleyFB = call double @"noise_mworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_mworleyFB, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return48 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output49 = fmul double %gain46, %return48
  %fsize50 = load double, double* %fsize
  %fold51 = load i64, i64* %fold
  %output52 = add i64 1, %fold51
  %cast = sitofp i64 %output52 to double
  %output53 = fmul double %fsize50, %cast
  %output57 = mul i64 %fold51, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output57, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return63 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return64 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return63)
  br label %body

body:                                             ; preds = %end102, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end102 ]
  %fw.0 = phi double [ %output53, %end ], [ %output97, %end102 ]
  %out.0 = phi double [ %output43, %end ], [ %output135, %end102 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output142, %end102 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end102 ]
  %output76 = fmul double %w.0, %output49
  %output78 = fadd double %oct.0, 1.000000e+00
  %maxoctaves80 = load double, double* %maxoctaves
  %return81 = fcmp ogt double %output78, %maxoctaves80
  br i1 %return81, label %true83, label %end84

end73:                                            ; preds = %end102
  store double %oct.2, double* %x_oct
  %return145 = fcmp one double %output142, 0.000000e+00
  br i1 %return145, label %true147, label %end148

true83:                                           ; preds = %body
  %return88 = call double @"frac@FF"(double %maxoctaves80)
  store double %return88, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output89 = fmul double %output76, %bias
  br label %end84

end84:                                            ; preds = %true83, %body
  %oct.1 = phi double [ %maxoctaves80, %true83 ], [ %output78, %body ]
  %w.1 = phi double [ %output89, %true83 ], [ %output76, %body ]
  %pp91 = load <3 x double>, <3 x double>* %pp
  %cast93 = call <3 x double> @"set@VF"(double %return45)
  %output94 = call <3 x double> @"mul@VV"(<3 x double> %pp91, <3 x double> %cast93)
  store <3 x double> %output94, <3 x double>* %pp
  %output97 = fmul double %fw.0, %return45
  %return99 = fcmp ogt double %output97, 1.000000e+00
  br i1 %return99, label %true101, label %end102

true101:                                          ; preds = %end84
  %output104 = fsub double 1.000000e+00, %fw.0
  %output107 = fsub double %output97, %fw.0
  %output108 = call double @"div@FF"(double %output104, double %output107)
  %output111 = fsub double 1.000000e+00, %output108
  %output112 = fsub double %oct.1, %output111
  %output115 = fmul double %w.1, %output108
  br label %end102

end102:                                           ; preds = %true101, %end84
  %oct.2 = phi double [ %output112, %true101 ], [ %oct.1, %end84 ]
  %w.2 = phi double [ %output115, %true101 ], [ %w.1, %end84 ]
  %inv116 = load i64, i64* %inv
  store i64 %inv116, i64* %52
  %fold117 = load i64, i64* %fold
  store i64 %fold117, i64* %53
  %accl118 = load i64, i64* %accl
  store i64 %accl118, i64* %54
  %accg119 = load i64, i64* %accg
  store i64 %accg119, i64* %55
  %fsize120 = load double, double* %fsize
  store double %fsize120, double* %56
  %expon121 = load double, double* %expon
  store double %expon121, double* %57
  %dolw122 = load i64, i64* %dolw
  store i64 %dolw122, i64* %59
  %dogw123 = load i64, i64* %dogw
  store i64 %dogw123, i64* %60
  %disp124 = load double, double* %disp
  store double %disp124, double* %61
  %dfreq125 = load double, double* %dfreq
  store double %dfreq125, double* %62
  %gflow126 = load double, double* %gflow
  store double %gflow126, double* %63
  %noise_mworleyFB127 = call double @"noise_mworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output130 = fsub double %noise_mworleyFB127, %navg_correct13
  %output134 = fmul double %w.2, %output130
  %output135 = fadd double %out.0, %output134
  %output139 = fmul double %return64, %w.2
  %output141 = fmul double %output139, %w.2
  %output142 = fadd double %wsum.0, %output141
  %maxoctaves66 = load double, double* %maxoctaves
  %return67 = fcmp olt double %oct.2, %maxoctaves66
  %return68 = zext i1 %return67 to i64
  %return70 = fcmp olt double %output97, 1.000000e+00
  %return71 = zext i1 %return70 to i64
  %return72 = call i64 @"and@III"(i64 %return68, i64 %return71)
  %70 = icmp ne i64 %return72, 0
  br i1 %70, label %body, label %end73

true147:                                          ; preds = %end73
  %return151 = call double @"sqrt@FF"(double %output142)
  %output152 = call double @"div@FF"(double %output135, double %return151)
  br label %end148

end148:                                           ; preds = %true147, %end73
  %out.1 = phi double [ %output152, %true147 ], [ %output135, %end73 ]
  %output157 = fadd double %out.1, %navg_correct13
  store double %output157, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return158 = call double @"fit@FFFFFF"(double %output49, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output159 = fmul double %out.1, %return158
  %output161 = fadd double %output159, %navg_correct13
  %return163 = call double @"clamp@FFFF"(double %output161, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end148, %true
  %UnifiedRetVal = phi double [ %noise_mworleyFB, %true ], [ %return163, %end148 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_mworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @16, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.454660e+00, double* %2
  store double 1.616670e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_mworleyFB = call double @"noise_mworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_mworleyFB, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return47 = call double @"abs@FF"(double %gain46)
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output50 = fmul double %return47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output59 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output54, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output43, %end ], [ %output137, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output144, %end104 ]
  %w.0 = phi double [ %noise_mworleyFB, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output50
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return147 = fcmp one double %output144, 0.000000e+00
  br i1 %return147, label %true149, label %end150

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return45)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return45
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %dolw124 = load i64, i64* %dolw
  store i64 %dolw124, i64* %59
  %dogw125 = load i64, i64* %dogw
  store i64 %dogw125, i64* %60
  %disp126 = load double, double* %disp
  store double %disp126, double* %61
  %dfreq127 = load double, double* %dfreq
  store double %dfreq127, double* %62
  %gflow128 = load double, double* %gflow
  store double %gflow128, double* %63
  %noise_mworleyFB129 = call double @"noise_mworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output132 = fsub double %noise_mworleyFB129, %navg_correct13
  %output136 = fmul double %w.2, %output132
  %output137 = fadd double %out.0, %output136
  %output141 = fmul double %return66, %w.2
  %output143 = fmul double %output141, %w.2
  %output144 = fadd double %wsum.0, %output143
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true149:                                          ; preds = %end75
  %return153 = call double @"sqrt@FF"(double %output144)
  %output154 = call double @"div@FF"(double %output137, double %return153)
  br label %end150

end150:                                           ; preds = %true149, %end75
  %out.1 = phi double [ %output154, %true149 ], [ %output137, %end75 ]
  %output159 = fadd double %out.1, %navg_correct13
  store double %output159, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return160 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output161 = fmul double %out.1, %return160
  %output163 = fadd double %output161, %navg_correct13
  %return165 = call double @"clamp@FFFF"(double %output163, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end150, %true
  %UnifiedRetVal = phi double [ %noise_mworleyFB, %true ], [ %return165, %end150 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_mworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @16, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 1.454660e+00, double* %2
  store double 1.616670e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_mworleyFB = call double @"noise_mworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_mworleyFB, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return47 = call double @"abs@FF"(double %gain46)
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output50 = fmul double %return47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output57 = fmul double %noise_mworleyFB, 2.000000e+00
  %output60 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output60, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return66 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return67 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return66)
  br label %body

body:                                             ; preds = %end105, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end105 ]
  %fw.0 = phi double [ %output54, %end ], [ %output100, %end105 ]
  %out.0 = phi double [ %output43, %end ], [ %output138, %end105 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end105 ]
  %w.0 = phi double [ %output57, %end ], [ %output151, %end105 ]
  %output79 = fmul double %w.0, %output50
  %output81 = fadd double %oct.0, 1.000000e+00
  %maxoctaves83 = load double, double* %maxoctaves
  %return84 = fcmp ogt double %output81, %maxoctaves83
  br i1 %return84, label %true86, label %end87

end76:                                            ; preds = %end105
  store double %oct.2, double* %x_oct
  %return154 = fcmp one double %output145, 0.000000e+00
  br i1 %return154, label %true156, label %end157

true86:                                           ; preds = %body
  %return91 = call double @"frac@FF"(double %maxoctaves83)
  store double %return91, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output92 = fmul double %output79, %bias
  br label %end87

end87:                                            ; preds = %true86, %body
  %oct.1 = phi double [ %maxoctaves83, %true86 ], [ %output81, %body ]
  %w.1 = phi double [ %output92, %true86 ], [ %output79, %body ]
  %pp94 = load <3 x double>, <3 x double>* %pp
  %cast96 = call <3 x double> @"set@VF"(double %return45)
  %output97 = call <3 x double> @"mul@VV"(<3 x double> %pp94, <3 x double> %cast96)
  store <3 x double> %output97, <3 x double>* %pp
  %output100 = fmul double %fw.0, %return45
  %return102 = fcmp ogt double %output100, 1.000000e+00
  br i1 %return102, label %true104, label %end105

true104:                                          ; preds = %end87
  %output107 = fsub double 1.000000e+00, %fw.0
  %output110 = fsub double %output100, %fw.0
  %output111 = call double @"div@FF"(double %output107, double %output110)
  %output114 = fsub double 1.000000e+00, %output111
  %output115 = fsub double %oct.1, %output114
  %output118 = fmul double %w.1, %output111
  br label %end105

end105:                                           ; preds = %true104, %end87
  %oct.2 = phi double [ %output115, %true104 ], [ %oct.1, %end87 ]
  %w.2 = phi double [ %output118, %true104 ], [ %w.1, %end87 ]
  %inv119 = load i64, i64* %inv
  store i64 %inv119, i64* %52
  %fold120 = load i64, i64* %fold
  store i64 %fold120, i64* %53
  %accl121 = load i64, i64* %accl
  store i64 %accl121, i64* %54
  %accg122 = load i64, i64* %accg
  store i64 %accg122, i64* %55
  %fsize123 = load double, double* %fsize
  store double %fsize123, double* %56
  %expon124 = load double, double* %expon
  store double %expon124, double* %57
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_mworleyFB130 = call double @"noise_mworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_mworleyFB130, %navg_correct13
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return67, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %output149 = fadd double %output133, %navg_correct13
  %output150 = fmul double 2.000000e+00, %output149
  %output151 = fmul double %w.2, %output150
  %maxoctaves69 = load double, double* %maxoctaves
  %return70 = fcmp olt double %oct.2, %maxoctaves69
  %return71 = zext i1 %return70 to i64
  %return73 = fcmp olt double %output100, 1.000000e+00
  %return74 = zext i1 %return73 to i64
  %return75 = call i64 @"and@III"(i64 %return71, i64 %return74)
  %70 = icmp ne i64 %return75, 0
  br i1 %70, label %body, label %end76

true156:                                          ; preds = %end76
  %return160 = call double @"sqrt@FF"(double %output145)
  %output161 = call double @"div@FF"(double %output138, double %return160)
  br label %end157

end157:                                           ; preds = %true156, %end76
  %out.1 = phi double [ %output161, %true156 ], [ %output138, %end76 ]
  %output166 = fadd double %out.1, %navg_correct13
  store double %output166, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return167 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output168 = fmul double %out.1, %return167
  %output170 = fadd double %output168, %navg_correct13
  %return172 = call double @"clamp@FFFF"(double %output170, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end157, %true
  %UnifiedRetVal = phi double [ %noise_mworleyFB, %true ], [ %return172, %end157 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_cworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @19, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 8.434530e-01, double* %2
  store double 4.069560e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_cworleyFA = call double @"noise_cworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_cworleyFA, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return48 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output49 = fmul double %gain46, %return48
  %fsize50 = load double, double* %fsize
  %fold51 = load i64, i64* %fold
  %output52 = add i64 1, %fold51
  %cast = sitofp i64 %output52 to double
  %output53 = fmul double %fsize50, %cast
  %output57 = mul i64 %fold51, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output57, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return63 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return64 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return63)
  br label %body

body:                                             ; preds = %end102, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end102 ]
  %fw.0 = phi double [ %output53, %end ], [ %output97, %end102 ]
  %out.0 = phi double [ %output43, %end ], [ %output135, %end102 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output142, %end102 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end102 ]
  %output76 = fmul double %w.0, %output49
  %output78 = fadd double %oct.0, 1.000000e+00
  %maxoctaves80 = load double, double* %maxoctaves
  %return81 = fcmp ogt double %output78, %maxoctaves80
  br i1 %return81, label %true83, label %end84

end73:                                            ; preds = %end102
  store double %oct.2, double* %x_oct
  %return145 = fcmp one double %output142, 0.000000e+00
  br i1 %return145, label %true147, label %end148

true83:                                           ; preds = %body
  %return88 = call double @"frac@FF"(double %maxoctaves80)
  store double %return88, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output89 = fmul double %output76, %bias
  br label %end84

end84:                                            ; preds = %true83, %body
  %oct.1 = phi double [ %maxoctaves80, %true83 ], [ %output78, %body ]
  %w.1 = phi double [ %output89, %true83 ], [ %output76, %body ]
  %pp91 = load <3 x double>, <3 x double>* %pp
  %cast93 = call <3 x double> @"set@VF"(double %return45)
  %output94 = call <3 x double> @"mul@VV"(<3 x double> %pp91, <3 x double> %cast93)
  store <3 x double> %output94, <3 x double>* %pp
  %output97 = fmul double %fw.0, %return45
  %return99 = fcmp ogt double %output97, 1.000000e+00
  br i1 %return99, label %true101, label %end102

true101:                                          ; preds = %end84
  %output104 = fsub double 1.000000e+00, %fw.0
  %output107 = fsub double %output97, %fw.0
  %output108 = call double @"div@FF"(double %output104, double %output107)
  %output111 = fsub double 1.000000e+00, %output108
  %output112 = fsub double %oct.1, %output111
  %output115 = fmul double %w.1, %output108
  br label %end102

end102:                                           ; preds = %true101, %end84
  %oct.2 = phi double [ %output112, %true101 ], [ %oct.1, %end84 ]
  %w.2 = phi double [ %output115, %true101 ], [ %w.1, %end84 ]
  %inv116 = load i64, i64* %inv
  store i64 %inv116, i64* %52
  %fold117 = load i64, i64* %fold
  store i64 %fold117, i64* %53
  %accl118 = load i64, i64* %accl
  store i64 %accl118, i64* %54
  %accg119 = load i64, i64* %accg
  store i64 %accg119, i64* %55
  %fsize120 = load double, double* %fsize
  store double %fsize120, double* %56
  %expon121 = load double, double* %expon
  store double %expon121, double* %57
  %dolw122 = load i64, i64* %dolw
  store i64 %dolw122, i64* %59
  %dogw123 = load i64, i64* %dogw
  store i64 %dogw123, i64* %60
  %disp124 = load double, double* %disp
  store double %disp124, double* %61
  %dfreq125 = load double, double* %dfreq
  store double %dfreq125, double* %62
  %gflow126 = load double, double* %gflow
  store double %gflow126, double* %63
  %noise_cworleyFA127 = call double @"noise_cworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output130 = fsub double %noise_cworleyFA127, %navg_correct13
  %output134 = fmul double %w.2, %output130
  %output135 = fadd double %out.0, %output134
  %output139 = fmul double %return64, %w.2
  %output141 = fmul double %output139, %w.2
  %output142 = fadd double %wsum.0, %output141
  %maxoctaves66 = load double, double* %maxoctaves
  %return67 = fcmp olt double %oct.2, %maxoctaves66
  %return68 = zext i1 %return67 to i64
  %return70 = fcmp olt double %output97, 1.000000e+00
  %return71 = zext i1 %return70 to i64
  %return72 = call i64 @"and@III"(i64 %return68, i64 %return71)
  %70 = icmp ne i64 %return72, 0
  br i1 %70, label %body, label %end73

true147:                                          ; preds = %end73
  %return151 = call double @"sqrt@FF"(double %output142)
  %output152 = call double @"div@FF"(double %output135, double %return151)
  br label %end148

end148:                                           ; preds = %true147, %end73
  %out.1 = phi double [ %output152, %true147 ], [ %output135, %end73 ]
  %output157 = fadd double %out.1, %navg_correct13
  store double %output157, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return158 = call double @"fit@FFFFFF"(double %output49, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output159 = fmul double %out.1, %return158
  %output161 = fadd double %output159, %navg_correct13
  %return163 = call double @"clamp@FFFF"(double %output161, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end148, %true
  %UnifiedRetVal = phi double [ %noise_cworleyFA, %true ], [ %return163, %end148 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_cworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @19, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 8.434530e-01, double* %2
  store double 4.069560e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_cworleyFA = call double @"noise_cworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_cworleyFA, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return47 = call double @"abs@FF"(double %gain46)
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output50 = fmul double %return47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output59 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output54, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output43, %end ], [ %output137, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output144, %end104 ]
  %w.0 = phi double [ %noise_cworleyFA, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output50
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return147 = fcmp one double %output144, 0.000000e+00
  br i1 %return147, label %true149, label %end150

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return45)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return45
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %dolw124 = load i64, i64* %dolw
  store i64 %dolw124, i64* %59
  %dogw125 = load i64, i64* %dogw
  store i64 %dogw125, i64* %60
  %disp126 = load double, double* %disp
  store double %disp126, double* %61
  %dfreq127 = load double, double* %dfreq
  store double %dfreq127, double* %62
  %gflow128 = load double, double* %gflow
  store double %gflow128, double* %63
  %noise_cworleyFA129 = call double @"noise_cworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output132 = fsub double %noise_cworleyFA129, %navg_correct13
  %output136 = fmul double %w.2, %output132
  %output137 = fadd double %out.0, %output136
  %output141 = fmul double %return66, %w.2
  %output143 = fmul double %output141, %w.2
  %output144 = fadd double %wsum.0, %output143
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true149:                                          ; preds = %end75
  %return153 = call double @"sqrt@FF"(double %output144)
  %output154 = call double @"div@FF"(double %output137, double %return153)
  br label %end150

end150:                                           ; preds = %true149, %end75
  %out.1 = phi double [ %output154, %true149 ], [ %output137, %end75 ]
  %output159 = fadd double %out.1, %navg_correct13
  store double %output159, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return160 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output161 = fmul double %out.1, %return160
  %output163 = fadd double %output161, %navg_correct13
  %return165 = call double @"clamp@FFFF"(double %output163, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end150, %true
  %UnifiedRetVal = phi double [ %noise_cworleyFA, %true ], [ %return165, %end150 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_cworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @19, i64 0, i64 0), i8** %0
  store double 0.000000e+00, double* %1
  store double 8.434530e-01, double* %2
  store double 4.069560e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_cworleyFA = call double @"noise_cworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return = fcmp oge double %fsize25, 1.000000e+00
  %return26 = zext i1 %return to i64
  %maxoctaves28 = load double, double* %maxoctaves
  %return29 = fcmp ogt double 0.000000e+00, %maxoctaves28
  %return30 = zext i1 %return29 to i64
  %return31 = call i64 @"or@III"(i64 %return26, i64 %return30)
  %lacunarity32 = load double, double* %lacunarity
  %output = fmul double %lacunarity32, %maxoctaves28
  %gain34 = load double, double* %gain
  %output35 = fmul double %output, %gain34
  %return36 = fcmp oeq double %output35, 0.000000e+00
  %return37 = zext i1 %return36 to i64
  %return38 = call i64 @"or@III"(i64 %return31, i64 %return37)
  %68 = icmp ne i64 %return38, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p40 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p40, <3 x double>* %pp
  %output43 = fsub double %noise_cworleyFA, %navg_correct13
  %lacunarity44 = load double, double* %lacunarity
  %return45 = call double @"abs@FF"(double %lacunarity44)
  %gain46 = load double, double* %gain
  %return47 = call double @"abs@FF"(double %gain46)
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return45)
  %output50 = fmul double %return47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output57 = fmul double %noise_cworleyFA, 2.000000e+00
  %output60 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output60, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return66 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return45)
  %return67 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return66)
  br label %body

body:                                             ; preds = %end105, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end105 ]
  %fw.0 = phi double [ %output54, %end ], [ %output100, %end105 ]
  %out.0 = phi double [ %output43, %end ], [ %output138, %end105 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end105 ]
  %w.0 = phi double [ %output57, %end ], [ %output151, %end105 ]
  %output79 = fmul double %w.0, %output50
  %output81 = fadd double %oct.0, 1.000000e+00
  %maxoctaves83 = load double, double* %maxoctaves
  %return84 = fcmp ogt double %output81, %maxoctaves83
  br i1 %return84, label %true86, label %end87

end76:                                            ; preds = %end105
  store double %oct.2, double* %x_oct
  %return154 = fcmp one double %output145, 0.000000e+00
  br i1 %return154, label %true156, label %end157

true86:                                           ; preds = %body
  %return91 = call double @"frac@FF"(double %maxoctaves83)
  store double %return91, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output92 = fmul double %output79, %bias
  br label %end87

end87:                                            ; preds = %true86, %body
  %oct.1 = phi double [ %maxoctaves83, %true86 ], [ %output81, %body ]
  %w.1 = phi double [ %output92, %true86 ], [ %output79, %body ]
  %pp94 = load <3 x double>, <3 x double>* %pp
  %cast96 = call <3 x double> @"set@VF"(double %return45)
  %output97 = call <3 x double> @"mul@VV"(<3 x double> %pp94, <3 x double> %cast96)
  store <3 x double> %output97, <3 x double>* %pp
  %output100 = fmul double %fw.0, %return45
  %return102 = fcmp ogt double %output100, 1.000000e+00
  br i1 %return102, label %true104, label %end105

true104:                                          ; preds = %end87
  %output107 = fsub double 1.000000e+00, %fw.0
  %output110 = fsub double %output100, %fw.0
  %output111 = call double @"div@FF"(double %output107, double %output110)
  %output114 = fsub double 1.000000e+00, %output111
  %output115 = fsub double %oct.1, %output114
  %output118 = fmul double %w.1, %output111
  br label %end105

end105:                                           ; preds = %true104, %end87
  %oct.2 = phi double [ %output115, %true104 ], [ %oct.1, %end87 ]
  %w.2 = phi double [ %output118, %true104 ], [ %w.1, %end87 ]
  %inv119 = load i64, i64* %inv
  store i64 %inv119, i64* %52
  %fold120 = load i64, i64* %fold
  store i64 %fold120, i64* %53
  %accl121 = load i64, i64* %accl
  store i64 %accl121, i64* %54
  %accg122 = load i64, i64* %accg
  store i64 %accg122, i64* %55
  %fsize123 = load double, double* %fsize
  store double %fsize123, double* %56
  %expon124 = load double, double* %expon
  store double %expon124, double* %57
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_cworleyFA130 = call double @"noise_cworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_cworleyFA130, %navg_correct13
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return67, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %output149 = fadd double %output133, %navg_correct13
  %output150 = fmul double 2.000000e+00, %output149
  %output151 = fmul double %w.2, %output150
  %maxoctaves69 = load double, double* %maxoctaves
  %return70 = fcmp olt double %oct.2, %maxoctaves69
  %return71 = zext i1 %return70 to i64
  %return73 = fcmp olt double %output100, 1.000000e+00
  %return74 = zext i1 %return73 to i64
  %return75 = call i64 @"and@III"(i64 %return71, i64 %return74)
  %70 = icmp ne i64 %return75, 0
  br i1 %70, label %body, label %end76

true156:                                          ; preds = %end76
  %return160 = call double @"sqrt@FF"(double %output145)
  %output161 = call double @"div@FF"(double %output138, double %return160)
  br label %end157

end157:                                           ; preds = %true156, %end76
  %out.1 = phi double [ %output161, %true156 ], [ %output138, %end76 ]
  %output166 = fadd double %out.1, %navg_correct13
  store double %output166, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return167 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output168 = fmul double %out.1, %return167
  %output170 = fadd double %output168, %navg_correct13
  %return172 = call double @"clamp@FFFF"(double %output170, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end157, %true
  %UnifiedRetVal = phi double [ %noise_cworleyFA, %true ], [ %return172, %end157 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_cworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @19, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 1.142860e-02)
  store double %return, double* %1
  store double 7.765650e-01, double* %2
  store double 1.656610e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_cworleyFB = call double @"noise_cworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return26 = fcmp oge double %fsize25, 1.000000e+00
  %return27 = zext i1 %return26 to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p41, <3 x double>* %pp
  %output44 = fsub double %noise_cworleyFB, %navg_correct13
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output50 = fmul double %gain47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output58 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output58, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return64 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return65 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return64)
  br label %body

body:                                             ; preds = %end103, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end103 ]
  %fw.0 = phi double [ %output54, %end ], [ %output98, %end103 ]
  %out.0 = phi double [ %output44, %end ], [ %output136, %end103 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output143, %end103 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end103 ]
  %output77 = fmul double %w.0, %output50
  %output79 = fadd double %oct.0, 1.000000e+00
  %maxoctaves81 = load double, double* %maxoctaves
  %return82 = fcmp ogt double %output79, %maxoctaves81
  br i1 %return82, label %true84, label %end85

end74:                                            ; preds = %end103
  store double %oct.2, double* %x_oct
  %return146 = fcmp one double %output143, 0.000000e+00
  br i1 %return146, label %true148, label %end149

true84:                                           ; preds = %body
  %return89 = call double @"frac@FF"(double %maxoctaves81)
  store double %return89, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output90 = fmul double %output77, %bias
  br label %end85

end85:                                            ; preds = %true84, %body
  %oct.1 = phi double [ %maxoctaves81, %true84 ], [ %output79, %body ]
  %w.1 = phi double [ %output90, %true84 ], [ %output77, %body ]
  %pp92 = load <3 x double>, <3 x double>* %pp
  %cast94 = call <3 x double> @"set@VF"(double %return46)
  %output95 = call <3 x double> @"mul@VV"(<3 x double> %pp92, <3 x double> %cast94)
  store <3 x double> %output95, <3 x double>* %pp
  %output98 = fmul double %fw.0, %return46
  %return100 = fcmp ogt double %output98, 1.000000e+00
  br i1 %return100, label %true102, label %end103

true102:                                          ; preds = %end85
  %output105 = fsub double 1.000000e+00, %fw.0
  %output108 = fsub double %output98, %fw.0
  %output109 = call double @"div@FF"(double %output105, double %output108)
  %output112 = fsub double 1.000000e+00, %output109
  %output113 = fsub double %oct.1, %output112
  %output116 = fmul double %w.1, %output109
  br label %end103

end103:                                           ; preds = %true102, %end85
  %oct.2 = phi double [ %output113, %true102 ], [ %oct.1, %end85 ]
  %w.2 = phi double [ %output116, %true102 ], [ %w.1, %end85 ]
  %inv117 = load i64, i64* %inv
  store i64 %inv117, i64* %52
  %fold118 = load i64, i64* %fold
  store i64 %fold118, i64* %53
  %accl119 = load i64, i64* %accl
  store i64 %accl119, i64* %54
  %accg120 = load i64, i64* %accg
  store i64 %accg120, i64* %55
  %fsize121 = load double, double* %fsize
  store double %fsize121, double* %56
  %expon122 = load double, double* %expon
  store double %expon122, double* %57
  %dolw123 = load i64, i64* %dolw
  store i64 %dolw123, i64* %59
  %dogw124 = load i64, i64* %dogw
  store i64 %dogw124, i64* %60
  %disp125 = load double, double* %disp
  store double %disp125, double* %61
  %dfreq126 = load double, double* %dfreq
  store double %dfreq126, double* %62
  %gflow127 = load double, double* %gflow
  store double %gflow127, double* %63
  %noise_cworleyFB128 = call double @"noise_cworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output131 = fsub double %noise_cworleyFB128, %navg_correct13
  %output135 = fmul double %w.2, %output131
  %output136 = fadd double %out.0, %output135
  %output140 = fmul double %return65, %w.2
  %output142 = fmul double %output140, %w.2
  %output143 = fadd double %wsum.0, %output142
  %maxoctaves67 = load double, double* %maxoctaves
  %return68 = fcmp olt double %oct.2, %maxoctaves67
  %return69 = zext i1 %return68 to i64
  %return71 = fcmp olt double %output98, 1.000000e+00
  %return72 = zext i1 %return71 to i64
  %return73 = call i64 @"and@III"(i64 %return69, i64 %return72)
  %70 = icmp ne i64 %return73, 0
  br i1 %70, label %body, label %end74

true148:                                          ; preds = %end74
  %return152 = call double @"sqrt@FF"(double %output143)
  %output153 = call double @"div@FF"(double %output136, double %return152)
  br label %end149

end149:                                           ; preds = %true148, %end74
  %out.1 = phi double [ %output153, %true148 ], [ %output136, %end74 ]
  %output158 = fadd double %out.1, %navg_correct13
  store double %output158, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return159 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output160 = fmul double %out.1, %return159
  %output162 = fadd double %output160, %navg_correct13
  %return164 = call double @"clamp@FFFF"(double %output162, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end149, %true
  %UnifiedRetVal = phi double [ %noise_cworleyFB, %true ], [ %return164, %end149 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_cworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @19, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 1.142860e-02)
  store double %return, double* %1
  store double 7.765650e-01, double* %2
  store double 1.656610e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_cworleyFB = call double @"noise_cworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return26 = fcmp oge double %fsize25, 1.000000e+00
  %return27 = zext i1 %return26 to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p41, <3 x double>* %pp
  %output44 = fsub double %noise_cworleyFB, %navg_correct13
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return48 = call double @"abs@FF"(double %gain47)
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output51 = fmul double %return48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output60 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output60, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return66 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return67 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return66)
  br label %body

body:                                             ; preds = %end105, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end105 ]
  %fw.0 = phi double [ %output55, %end ], [ %output100, %end105 ]
  %out.0 = phi double [ %output44, %end ], [ %output138, %end105 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end105 ]
  %w.0 = phi double [ %noise_cworleyFB, %end ], [ %w.2, %end105 ]
  %output79 = fmul double %w.0, %output51
  %output81 = fadd double %oct.0, 1.000000e+00
  %maxoctaves83 = load double, double* %maxoctaves
  %return84 = fcmp ogt double %output81, %maxoctaves83
  br i1 %return84, label %true86, label %end87

end76:                                            ; preds = %end105
  store double %oct.2, double* %x_oct
  %return148 = fcmp one double %output145, 0.000000e+00
  br i1 %return148, label %true150, label %end151

true86:                                           ; preds = %body
  %return91 = call double @"frac@FF"(double %maxoctaves83)
  store double %return91, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output92 = fmul double %output79, %bias
  br label %end87

end87:                                            ; preds = %true86, %body
  %oct.1 = phi double [ %maxoctaves83, %true86 ], [ %output81, %body ]
  %w.1 = phi double [ %output92, %true86 ], [ %output79, %body ]
  %pp94 = load <3 x double>, <3 x double>* %pp
  %cast96 = call <3 x double> @"set@VF"(double %return46)
  %output97 = call <3 x double> @"mul@VV"(<3 x double> %pp94, <3 x double> %cast96)
  store <3 x double> %output97, <3 x double>* %pp
  %output100 = fmul double %fw.0, %return46
  %return102 = fcmp ogt double %output100, 1.000000e+00
  br i1 %return102, label %true104, label %end105

true104:                                          ; preds = %end87
  %output107 = fsub double 1.000000e+00, %fw.0
  %output110 = fsub double %output100, %fw.0
  %output111 = call double @"div@FF"(double %output107, double %output110)
  %output114 = fsub double 1.000000e+00, %output111
  %output115 = fsub double %oct.1, %output114
  %output118 = fmul double %w.1, %output111
  br label %end105

end105:                                           ; preds = %true104, %end87
  %oct.2 = phi double [ %output115, %true104 ], [ %oct.1, %end87 ]
  %w.2 = phi double [ %output118, %true104 ], [ %w.1, %end87 ]
  %inv119 = load i64, i64* %inv
  store i64 %inv119, i64* %52
  %fold120 = load i64, i64* %fold
  store i64 %fold120, i64* %53
  %accl121 = load i64, i64* %accl
  store i64 %accl121, i64* %54
  %accg122 = load i64, i64* %accg
  store i64 %accg122, i64* %55
  %fsize123 = load double, double* %fsize
  store double %fsize123, double* %56
  %expon124 = load double, double* %expon
  store double %expon124, double* %57
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_cworleyFB130 = call double @"noise_cworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_cworleyFB130, %navg_correct13
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return67, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %maxoctaves69 = load double, double* %maxoctaves
  %return70 = fcmp olt double %oct.2, %maxoctaves69
  %return71 = zext i1 %return70 to i64
  %return73 = fcmp olt double %output100, 1.000000e+00
  %return74 = zext i1 %return73 to i64
  %return75 = call i64 @"and@III"(i64 %return71, i64 %return74)
  %70 = icmp ne i64 %return75, 0
  br i1 %70, label %body, label %end76

true150:                                          ; preds = %end76
  %return154 = call double @"sqrt@FF"(double %output145)
  %output155 = call double @"div@FF"(double %output138, double %return154)
  br label %end151

end151:                                           ; preds = %true150, %end76
  %out.1 = phi double [ %output155, %true150 ], [ %output138, %end76 ]
  %output160 = fadd double %out.1, %navg_correct13
  store double %output160, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return161 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output162 = fmul double %out.1, %return161
  %output164 = fadd double %output162, %navg_correct13
  %return166 = call double @"clamp@FFFF"(double %output164, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end151, %true
  %UnifiedRetVal = phi double [ %noise_cworleyFB, %true ], [ %return166, %end151 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_cworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @19, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 1.142860e-02)
  store double %return, double* %1
  store double 7.765650e-01, double* %2
  store double 1.656610e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %dolw20 = load i64, i64* %dolw
  store i64 %dolw20, i64* %44
  %dogw21 = load i64, i64* %dogw
  store i64 %dogw21, i64* %45
  %disp22 = load double, double* %disp
  store double %disp22, double* %46
  %dfreq23 = load double, double* %dfreq
  store double %dfreq23, double* %47
  %gflow24 = load double, double* %gflow
  store double %gflow24, double* %48
  %noise_cworleyFB = call double @"noise_cworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize25 = load double, double* %fsize
  %return26 = fcmp oge double %fsize25, 1.000000e+00
  %return27 = zext i1 %return26 to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p41, <3 x double>* %pp
  %output44 = fsub double %noise_cworleyFB, %navg_correct13
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return48 = call double @"abs@FF"(double %gain47)
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output51 = fmul double %return48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output58 = fmul double %noise_cworleyFB, 2.000000e+00
  %output61 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  br label %body

body:                                             ; preds = %end106, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end106 ]
  %fw.0 = phi double [ %output55, %end ], [ %output101, %end106 ]
  %out.0 = phi double [ %output44, %end ], [ %output139, %end106 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output146, %end106 ]
  %w.0 = phi double [ %output58, %end ], [ %output152, %end106 ]
  %output80 = fmul double %w.0, %output51
  %output82 = fadd double %oct.0, 1.000000e+00
  %maxoctaves84 = load double, double* %maxoctaves
  %return85 = fcmp ogt double %output82, %maxoctaves84
  br i1 %return85, label %true87, label %end88

end77:                                            ; preds = %end106
  store double %oct.2, double* %x_oct
  %return155 = fcmp one double %output146, 0.000000e+00
  br i1 %return155, label %true157, label %end158

true87:                                           ; preds = %body
  %return92 = call double @"frac@FF"(double %maxoctaves84)
  store double %return92, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output93 = fmul double %output80, %bias
  br label %end88

end88:                                            ; preds = %true87, %body
  %oct.1 = phi double [ %maxoctaves84, %true87 ], [ %output82, %body ]
  %w.1 = phi double [ %output93, %true87 ], [ %output80, %body ]
  %pp95 = load <3 x double>, <3 x double>* %pp
  %cast97 = call <3 x double> @"set@VF"(double %return46)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %pp95, <3 x double> %cast97)
  store <3 x double> %output98, <3 x double>* %pp
  %output101 = fmul double %fw.0, %return46
  %return103 = fcmp ogt double %output101, 1.000000e+00
  br i1 %return103, label %true105, label %end106

true105:                                          ; preds = %end88
  %output108 = fsub double 1.000000e+00, %fw.0
  %output111 = fsub double %output101, %fw.0
  %output112 = call double @"div@FF"(double %output108, double %output111)
  %output115 = fsub double 1.000000e+00, %output112
  %output116 = fsub double %oct.1, %output115
  %output119 = fmul double %w.1, %output112
  br label %end106

end106:                                           ; preds = %true105, %end88
  %oct.2 = phi double [ %output116, %true105 ], [ %oct.1, %end88 ]
  %w.2 = phi double [ %output119, %true105 ], [ %w.1, %end88 ]
  %inv120 = load i64, i64* %inv
  store i64 %inv120, i64* %52
  %fold121 = load i64, i64* %fold
  store i64 %fold121, i64* %53
  %accl122 = load i64, i64* %accl
  store i64 %accl122, i64* %54
  %accg123 = load i64, i64* %accg
  store i64 %accg123, i64* %55
  %fsize124 = load double, double* %fsize
  store double %fsize124, double* %56
  %expon125 = load double, double* %expon
  store double %expon125, double* %57
  %dolw126 = load i64, i64* %dolw
  store i64 %dolw126, i64* %59
  %dogw127 = load i64, i64* %dogw
  store i64 %dogw127, i64* %60
  %disp128 = load double, double* %disp
  store double %disp128, double* %61
  %dfreq129 = load double, double* %dfreq
  store double %dfreq129, double* %62
  %gflow130 = load double, double* %gflow
  store double %gflow130, double* %63
  %noise_cworleyFB131 = call double @"noise_cworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output134 = fsub double %noise_cworleyFB131, %navg_correct13
  %output138 = fmul double %w.2, %output134
  %output139 = fadd double %out.0, %output138
  %output143 = fmul double %return68, %w.2
  %output145 = fmul double %output143, %w.2
  %output146 = fadd double %wsum.0, %output145
  %output150 = fadd double %output134, %navg_correct13
  %output151 = fmul double 2.000000e+00, %output150
  %output152 = fmul double %w.2, %output151
  %maxoctaves70 = load double, double* %maxoctaves
  %return71 = fcmp olt double %oct.2, %maxoctaves70
  %return72 = zext i1 %return71 to i64
  %return74 = fcmp olt double %output101, 1.000000e+00
  %return75 = zext i1 %return74 to i64
  %return76 = call i64 @"and@III"(i64 %return72, i64 %return75)
  %70 = icmp ne i64 %return76, 0
  br i1 %70, label %body, label %end77

true157:                                          ; preds = %end77
  %return161 = call double @"sqrt@FF"(double %output146)
  %output162 = call double @"div@FF"(double %output139, double %return161)
  br label %end158

end158:                                           ; preds = %true157, %end77
  %out.1 = phi double [ %output162, %true157 ], [ %output139, %end77 ]
  %output167 = fadd double %out.1, %navg_correct13
  store double %output167, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return168 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output169 = fmul double %out.1, %return168
  %output171 = fadd double %output169, %navg_correct13
  %return173 = call double @"clamp@FFFF"(double %output171, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end158, %true
  %UnifiedRetVal = phi double [ %noise_cworleyFB, %true ], [ %return173, %end158 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_pworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @14, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 3.455960e-03)
  store double %return, double* %1
  store double 8.150870e-01, double* %2
  store double 2.367870e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pworleyFA = call double @"noise_pworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pworleyFA, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output51 = fmul double %gain48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output59 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output55, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output45, %end ], [ %output138, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end104 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output51
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return148 = fcmp one double %output145, 0.000000e+00
  br i1 %return148, label %true150, label %end151

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return47)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return47
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %per124 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per124, <3 x double>* %58
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_pworleyFA130 = call double @"noise_pworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_pworleyFA130, %navg_correct13
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return66, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true150:                                          ; preds = %end75
  %return154 = call double @"sqrt@FF"(double %output145)
  %output155 = call double @"div@FF"(double %output138, double %return154)
  br label %end151

end151:                                           ; preds = %true150, %end75
  %out.1 = phi double [ %output155, %true150 ], [ %output138, %end75 ]
  %output160 = fadd double %out.1, %navg_correct13
  store double %output160, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return161 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output162 = fmul double %out.1, %return161
  %output164 = fadd double %output162, %navg_correct13
  %return166 = call double @"clamp@FFFF"(double %output164, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end151, %true
  %UnifiedRetVal = phi double [ %noise_pworleyFA, %true ], [ %return166, %end151 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_pworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @14, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 3.455960e-03)
  store double %return, double* %1
  store double 8.150870e-01, double* %2
  store double 2.367870e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pworleyFA = call double @"noise_pworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pworleyFA, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output61 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  br label %body

body:                                             ; preds = %end106, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end106 ]
  %fw.0 = phi double [ %output56, %end ], [ %output101, %end106 ]
  %out.0 = phi double [ %output45, %end ], [ %output140, %end106 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output147, %end106 ]
  %w.0 = phi double [ %noise_pworleyFA, %end ], [ %w.2, %end106 ]
  %output80 = fmul double %w.0, %output52
  %output82 = fadd double %oct.0, 1.000000e+00
  %maxoctaves84 = load double, double* %maxoctaves
  %return85 = fcmp ogt double %output82, %maxoctaves84
  br i1 %return85, label %true87, label %end88

end77:                                            ; preds = %end106
  store double %oct.2, double* %x_oct
  %return150 = fcmp one double %output147, 0.000000e+00
  br i1 %return150, label %true152, label %end153

true87:                                           ; preds = %body
  %return92 = call double @"frac@FF"(double %maxoctaves84)
  store double %return92, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output93 = fmul double %output80, %bias
  br label %end88

end88:                                            ; preds = %true87, %body
  %oct.1 = phi double [ %maxoctaves84, %true87 ], [ %output82, %body ]
  %w.1 = phi double [ %output93, %true87 ], [ %output80, %body ]
  %pp95 = load <3 x double>, <3 x double>* %pp
  %cast97 = call <3 x double> @"set@VF"(double %return47)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %pp95, <3 x double> %cast97)
  store <3 x double> %output98, <3 x double>* %pp
  %output101 = fmul double %fw.0, %return47
  %return103 = fcmp ogt double %output101, 1.000000e+00
  br i1 %return103, label %true105, label %end106

true105:                                          ; preds = %end88
  %output108 = fsub double 1.000000e+00, %fw.0
  %output111 = fsub double %output101, %fw.0
  %output112 = call double @"div@FF"(double %output108, double %output111)
  %output115 = fsub double 1.000000e+00, %output112
  %output116 = fsub double %oct.1, %output115
  %output119 = fmul double %w.1, %output112
  br label %end106

end106:                                           ; preds = %true105, %end88
  %oct.2 = phi double [ %output116, %true105 ], [ %oct.1, %end88 ]
  %w.2 = phi double [ %output119, %true105 ], [ %w.1, %end88 ]
  %inv120 = load i64, i64* %inv
  store i64 %inv120, i64* %52
  %fold121 = load i64, i64* %fold
  store i64 %fold121, i64* %53
  %accl122 = load i64, i64* %accl
  store i64 %accl122, i64* %54
  %accg123 = load i64, i64* %accg
  store i64 %accg123, i64* %55
  %fsize124 = load double, double* %fsize
  store double %fsize124, double* %56
  %expon125 = load double, double* %expon
  store double %expon125, double* %57
  %per126 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per126, <3 x double>* %58
  %dolw127 = load i64, i64* %dolw
  store i64 %dolw127, i64* %59
  %dogw128 = load i64, i64* %dogw
  store i64 %dogw128, i64* %60
  %disp129 = load double, double* %disp
  store double %disp129, double* %61
  %dfreq130 = load double, double* %dfreq
  store double %dfreq130, double* %62
  %gflow131 = load double, double* %gflow
  store double %gflow131, double* %63
  %noise_pworleyFA132 = call double @"noise_pworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output135 = fsub double %noise_pworleyFA132, %navg_correct13
  %output139 = fmul double %w.2, %output135
  %output140 = fadd double %out.0, %output139
  %output144 = fmul double %return68, %w.2
  %output146 = fmul double %output144, %w.2
  %output147 = fadd double %wsum.0, %output146
  %maxoctaves70 = load double, double* %maxoctaves
  %return71 = fcmp olt double %oct.2, %maxoctaves70
  %return72 = zext i1 %return71 to i64
  %return74 = fcmp olt double %output101, 1.000000e+00
  %return75 = zext i1 %return74 to i64
  %return76 = call i64 @"and@III"(i64 %return72, i64 %return75)
  %70 = icmp ne i64 %return76, 0
  br i1 %70, label %body, label %end77

true152:                                          ; preds = %end77
  %return156 = call double @"sqrt@FF"(double %output147)
  %output157 = call double @"div@FF"(double %output140, double %return156)
  br label %end153

end153:                                           ; preds = %true152, %end77
  %out.1 = phi double [ %output157, %true152 ], [ %output140, %end77 ]
  %output162 = fadd double %out.1, %navg_correct13
  store double %output162, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return163 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output164 = fmul double %out.1, %return163
  %output166 = fadd double %output164, %navg_correct13
  %return168 = call double @"clamp@FFFF"(double %output166, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end153, %true
  %UnifiedRetVal = phi double [ %noise_pworleyFA, %true ], [ %return168, %end153 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_pworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @14, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 3.455960e-03)
  store double %return, double* %1
  store double 8.150870e-01, double* %2
  store double 2.367870e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pworleyFA = call double @"noise_pworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pworleyFA, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output59 = fmul double %noise_pworleyFA, 2.000000e+00
  %output62 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output62, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return68 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return69 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return68)
  br label %body

body:                                             ; preds = %end107, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end107 ]
  %fw.0 = phi double [ %output56, %end ], [ %output102, %end107 ]
  %out.0 = phi double [ %output45, %end ], [ %output141, %end107 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output148, %end107 ]
  %w.0 = phi double [ %output59, %end ], [ %output154, %end107 ]
  %output81 = fmul double %w.0, %output52
  %output83 = fadd double %oct.0, 1.000000e+00
  %maxoctaves85 = load double, double* %maxoctaves
  %return86 = fcmp ogt double %output83, %maxoctaves85
  br i1 %return86, label %true88, label %end89

end78:                                            ; preds = %end107
  store double %oct.2, double* %x_oct
  %return157 = fcmp one double %output148, 0.000000e+00
  br i1 %return157, label %true159, label %end160

true88:                                           ; preds = %body
  %return93 = call double @"frac@FF"(double %maxoctaves85)
  store double %return93, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output94 = fmul double %output81, %bias
  br label %end89

end89:                                            ; preds = %true88, %body
  %oct.1 = phi double [ %maxoctaves85, %true88 ], [ %output83, %body ]
  %w.1 = phi double [ %output94, %true88 ], [ %output81, %body ]
  %pp96 = load <3 x double>, <3 x double>* %pp
  %cast98 = call <3 x double> @"set@VF"(double %return47)
  %output99 = call <3 x double> @"mul@VV"(<3 x double> %pp96, <3 x double> %cast98)
  store <3 x double> %output99, <3 x double>* %pp
  %output102 = fmul double %fw.0, %return47
  %return104 = fcmp ogt double %output102, 1.000000e+00
  br i1 %return104, label %true106, label %end107

true106:                                          ; preds = %end89
  %output109 = fsub double 1.000000e+00, %fw.0
  %output112 = fsub double %output102, %fw.0
  %output113 = call double @"div@FF"(double %output109, double %output112)
  %output116 = fsub double 1.000000e+00, %output113
  %output117 = fsub double %oct.1, %output116
  %output120 = fmul double %w.1, %output113
  br label %end107

end107:                                           ; preds = %true106, %end89
  %oct.2 = phi double [ %output117, %true106 ], [ %oct.1, %end89 ]
  %w.2 = phi double [ %output120, %true106 ], [ %w.1, %end89 ]
  %inv121 = load i64, i64* %inv
  store i64 %inv121, i64* %52
  %fold122 = load i64, i64* %fold
  store i64 %fold122, i64* %53
  %accl123 = load i64, i64* %accl
  store i64 %accl123, i64* %54
  %accg124 = load i64, i64* %accg
  store i64 %accg124, i64* %55
  %fsize125 = load double, double* %fsize
  store double %fsize125, double* %56
  %expon126 = load double, double* %expon
  store double %expon126, double* %57
  %per127 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per127, <3 x double>* %58
  %dolw128 = load i64, i64* %dolw
  store i64 %dolw128, i64* %59
  %dogw129 = load i64, i64* %dogw
  store i64 %dogw129, i64* %60
  %disp130 = load double, double* %disp
  store double %disp130, double* %61
  %dfreq131 = load double, double* %dfreq
  store double %dfreq131, double* %62
  %gflow132 = load double, double* %gflow
  store double %gflow132, double* %63
  %noise_pworleyFA133 = call double @"noise_pworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output136 = fsub double %noise_pworleyFA133, %navg_correct13
  %output140 = fmul double %w.2, %output136
  %output141 = fadd double %out.0, %output140
  %output145 = fmul double %return69, %w.2
  %output147 = fmul double %output145, %w.2
  %output148 = fadd double %wsum.0, %output147
  %output152 = fadd double %output136, %navg_correct13
  %output153 = fmul double 2.000000e+00, %output152
  %output154 = fmul double %w.2, %output153
  %maxoctaves71 = load double, double* %maxoctaves
  %return72 = fcmp olt double %oct.2, %maxoctaves71
  %return73 = zext i1 %return72 to i64
  %return75 = fcmp olt double %output102, 1.000000e+00
  %return76 = zext i1 %return75 to i64
  %return77 = call i64 @"and@III"(i64 %return73, i64 %return76)
  %70 = icmp ne i64 %return77, 0
  br i1 %70, label %body, label %end78

true159:                                          ; preds = %end78
  %return163 = call double @"sqrt@FF"(double %output148)
  %output164 = call double @"div@FF"(double %output141, double %return163)
  br label %end160

end160:                                           ; preds = %true159, %end78
  %out.1 = phi double [ %output164, %true159 ], [ %output141, %end78 ]
  %output169 = fadd double %out.1, %navg_correct13
  store double %output169, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return170 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output171 = fmul double %out.1, %return170
  %output173 = fadd double %output171, %navg_correct13
  %return175 = call double @"clamp@FFFF"(double %output173, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end160, %true
  %UnifiedRetVal = phi double [ %noise_pworleyFA, %true ], [ %return175, %end160 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_pworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @15, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 2.498330e-03)
  store double %return, double* %1
  store double 6.078380e-01, double* %2
  store double 2.307210e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pworleyFB = call double @"noise_pworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pworleyFB, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output51 = fmul double %gain48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output59 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output55, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output45, %end ], [ %output138, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end104 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output51
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return148 = fcmp one double %output145, 0.000000e+00
  br i1 %return148, label %true150, label %end151

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return47)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return47
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %per124 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per124, <3 x double>* %58
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_pworleyFB130 = call double @"noise_pworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_pworleyFB130, %navg_correct13
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return66, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true150:                                          ; preds = %end75
  %return154 = call double @"sqrt@FF"(double %output145)
  %output155 = call double @"div@FF"(double %output138, double %return154)
  br label %end151

end151:                                           ; preds = %true150, %end75
  %out.1 = phi double [ %output155, %true150 ], [ %output138, %end75 ]
  %output160 = fadd double %out.1, %navg_correct13
  store double %output160, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return161 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output162 = fmul double %out.1, %return161
  %output164 = fadd double %output162, %navg_correct13
  %return166 = call double @"clamp@FFFF"(double %output164, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end151, %true
  %UnifiedRetVal = phi double [ %noise_pworleyFB, %true ], [ %return166, %end151 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_pworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @15, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 2.498330e-03)
  store double %return, double* %1
  store double 6.078380e-01, double* %2
  store double 2.307210e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pworleyFB = call double @"noise_pworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pworleyFB, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output61 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  br label %body

body:                                             ; preds = %end106, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end106 ]
  %fw.0 = phi double [ %output56, %end ], [ %output101, %end106 ]
  %out.0 = phi double [ %output45, %end ], [ %output140, %end106 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output147, %end106 ]
  %w.0 = phi double [ %noise_pworleyFB, %end ], [ %w.2, %end106 ]
  %output80 = fmul double %w.0, %output52
  %output82 = fadd double %oct.0, 1.000000e+00
  %maxoctaves84 = load double, double* %maxoctaves
  %return85 = fcmp ogt double %output82, %maxoctaves84
  br i1 %return85, label %true87, label %end88

end77:                                            ; preds = %end106
  store double %oct.2, double* %x_oct
  %return150 = fcmp one double %output147, 0.000000e+00
  br i1 %return150, label %true152, label %end153

true87:                                           ; preds = %body
  %return92 = call double @"frac@FF"(double %maxoctaves84)
  store double %return92, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output93 = fmul double %output80, %bias
  br label %end88

end88:                                            ; preds = %true87, %body
  %oct.1 = phi double [ %maxoctaves84, %true87 ], [ %output82, %body ]
  %w.1 = phi double [ %output93, %true87 ], [ %output80, %body ]
  %pp95 = load <3 x double>, <3 x double>* %pp
  %cast97 = call <3 x double> @"set@VF"(double %return47)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %pp95, <3 x double> %cast97)
  store <3 x double> %output98, <3 x double>* %pp
  %output101 = fmul double %fw.0, %return47
  %return103 = fcmp ogt double %output101, 1.000000e+00
  br i1 %return103, label %true105, label %end106

true105:                                          ; preds = %end88
  %output108 = fsub double 1.000000e+00, %fw.0
  %output111 = fsub double %output101, %fw.0
  %output112 = call double @"div@FF"(double %output108, double %output111)
  %output115 = fsub double 1.000000e+00, %output112
  %output116 = fsub double %oct.1, %output115
  %output119 = fmul double %w.1, %output112
  br label %end106

end106:                                           ; preds = %true105, %end88
  %oct.2 = phi double [ %output116, %true105 ], [ %oct.1, %end88 ]
  %w.2 = phi double [ %output119, %true105 ], [ %w.1, %end88 ]
  %inv120 = load i64, i64* %inv
  store i64 %inv120, i64* %52
  %fold121 = load i64, i64* %fold
  store i64 %fold121, i64* %53
  %accl122 = load i64, i64* %accl
  store i64 %accl122, i64* %54
  %accg123 = load i64, i64* %accg
  store i64 %accg123, i64* %55
  %fsize124 = load double, double* %fsize
  store double %fsize124, double* %56
  %expon125 = load double, double* %expon
  store double %expon125, double* %57
  %per126 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per126, <3 x double>* %58
  %dolw127 = load i64, i64* %dolw
  store i64 %dolw127, i64* %59
  %dogw128 = load i64, i64* %dogw
  store i64 %dogw128, i64* %60
  %disp129 = load double, double* %disp
  store double %disp129, double* %61
  %dfreq130 = load double, double* %dfreq
  store double %dfreq130, double* %62
  %gflow131 = load double, double* %gflow
  store double %gflow131, double* %63
  %noise_pworleyFB132 = call double @"noise_pworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output135 = fsub double %noise_pworleyFB132, %navg_correct13
  %output139 = fmul double %w.2, %output135
  %output140 = fadd double %out.0, %output139
  %output144 = fmul double %return68, %w.2
  %output146 = fmul double %output144, %w.2
  %output147 = fadd double %wsum.0, %output146
  %maxoctaves70 = load double, double* %maxoctaves
  %return71 = fcmp olt double %oct.2, %maxoctaves70
  %return72 = zext i1 %return71 to i64
  %return74 = fcmp olt double %output101, 1.000000e+00
  %return75 = zext i1 %return74 to i64
  %return76 = call i64 @"and@III"(i64 %return72, i64 %return75)
  %70 = icmp ne i64 %return76, 0
  br i1 %70, label %body, label %end77

true152:                                          ; preds = %end77
  %return156 = call double @"sqrt@FF"(double %output147)
  %output157 = call double @"div@FF"(double %output140, double %return156)
  br label %end153

end153:                                           ; preds = %true152, %end77
  %out.1 = phi double [ %output157, %true152 ], [ %output140, %end77 ]
  %output162 = fadd double %out.1, %navg_correct13
  store double %output162, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return163 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output164 = fmul double %out.1, %return163
  %output166 = fadd double %output164, %navg_correct13
  %return168 = call double @"clamp@FFFF"(double %output166, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end153, %true
  %UnifiedRetVal = phi double [ %noise_pworleyFB, %true ], [ %return168, %end153 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_pworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @15, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 2.498330e-03)
  store double %return, double* %1
  store double 6.078380e-01, double* %2
  store double 2.307210e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pworleyFB = call double @"noise_pworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pworleyFB, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output59 = fmul double %noise_pworleyFB, 2.000000e+00
  %output62 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output62, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return68 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return69 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return68)
  br label %body

body:                                             ; preds = %end107, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end107 ]
  %fw.0 = phi double [ %output56, %end ], [ %output102, %end107 ]
  %out.0 = phi double [ %output45, %end ], [ %output141, %end107 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output148, %end107 ]
  %w.0 = phi double [ %output59, %end ], [ %output154, %end107 ]
  %output81 = fmul double %w.0, %output52
  %output83 = fadd double %oct.0, 1.000000e+00
  %maxoctaves85 = load double, double* %maxoctaves
  %return86 = fcmp ogt double %output83, %maxoctaves85
  br i1 %return86, label %true88, label %end89

end78:                                            ; preds = %end107
  store double %oct.2, double* %x_oct
  %return157 = fcmp one double %output148, 0.000000e+00
  br i1 %return157, label %true159, label %end160

true88:                                           ; preds = %body
  %return93 = call double @"frac@FF"(double %maxoctaves85)
  store double %return93, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output94 = fmul double %output81, %bias
  br label %end89

end89:                                            ; preds = %true88, %body
  %oct.1 = phi double [ %maxoctaves85, %true88 ], [ %output83, %body ]
  %w.1 = phi double [ %output94, %true88 ], [ %output81, %body ]
  %pp96 = load <3 x double>, <3 x double>* %pp
  %cast98 = call <3 x double> @"set@VF"(double %return47)
  %output99 = call <3 x double> @"mul@VV"(<3 x double> %pp96, <3 x double> %cast98)
  store <3 x double> %output99, <3 x double>* %pp
  %output102 = fmul double %fw.0, %return47
  %return104 = fcmp ogt double %output102, 1.000000e+00
  br i1 %return104, label %true106, label %end107

true106:                                          ; preds = %end89
  %output109 = fsub double 1.000000e+00, %fw.0
  %output112 = fsub double %output102, %fw.0
  %output113 = call double @"div@FF"(double %output109, double %output112)
  %output116 = fsub double 1.000000e+00, %output113
  %output117 = fsub double %oct.1, %output116
  %output120 = fmul double %w.1, %output113
  br label %end107

end107:                                           ; preds = %true106, %end89
  %oct.2 = phi double [ %output117, %true106 ], [ %oct.1, %end89 ]
  %w.2 = phi double [ %output120, %true106 ], [ %w.1, %end89 ]
  %inv121 = load i64, i64* %inv
  store i64 %inv121, i64* %52
  %fold122 = load i64, i64* %fold
  store i64 %fold122, i64* %53
  %accl123 = load i64, i64* %accl
  store i64 %accl123, i64* %54
  %accg124 = load i64, i64* %accg
  store i64 %accg124, i64* %55
  %fsize125 = load double, double* %fsize
  store double %fsize125, double* %56
  %expon126 = load double, double* %expon
  store double %expon126, double* %57
  %per127 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per127, <3 x double>* %58
  %dolw128 = load i64, i64* %dolw
  store i64 %dolw128, i64* %59
  %dogw129 = load i64, i64* %dogw
  store i64 %dogw129, i64* %60
  %disp130 = load double, double* %disp
  store double %disp130, double* %61
  %dfreq131 = load double, double* %dfreq
  store double %dfreq131, double* %62
  %gflow132 = load double, double* %gflow
  store double %gflow132, double* %63
  %noise_pworleyFB133 = call double @"noise_pworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output136 = fsub double %noise_pworleyFB133, %navg_correct13
  %output140 = fmul double %w.2, %output136
  %output141 = fadd double %out.0, %output140
  %output145 = fmul double %return69, %w.2
  %output147 = fmul double %output145, %w.2
  %output148 = fadd double %wsum.0, %output147
  %output152 = fadd double %output136, %navg_correct13
  %output153 = fmul double 2.000000e+00, %output152
  %output154 = fmul double %w.2, %output153
  %maxoctaves71 = load double, double* %maxoctaves
  %return72 = fcmp olt double %oct.2, %maxoctaves71
  %return73 = zext i1 %return72 to i64
  %return75 = fcmp olt double %output102, 1.000000e+00
  %return76 = zext i1 %return75 to i64
  %return77 = call i64 @"and@III"(i64 %return73, i64 %return76)
  %70 = icmp ne i64 %return77, 0
  br i1 %70, label %body, label %end78

true159:                                          ; preds = %end78
  %return163 = call double @"sqrt@FF"(double %output148)
  %output164 = call double @"div@FF"(double %output141, double %return163)
  br label %end160

end160:                                           ; preds = %true159, %end78
  %out.1 = phi double [ %output164, %true159 ], [ %output141, %end78 ]
  %output169 = fadd double %out.1, %navg_correct13
  store double %output169, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return170 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output171 = fmul double %out.1, %return170
  %output173 = fadd double %output171, %navg_correct13
  %return175 = call double @"clamp@FFFF"(double %output173, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end160, %true
  %UnifiedRetVal = phi double [ %noise_pworleyFB, %true ], [ %return175, %end160 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_pmworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @17, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 6.179570e-03)
  store double %return, double* %1
  store double 1.365310e+00, double* %2
  store double 4.482700e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pmworleyFA = call double @"noise_pmworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pmworleyFA, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output51 = fmul double %gain48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output59 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output55, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output45, %end ], [ %output138, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end104 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output51
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return148 = fcmp one double %output145, 0.000000e+00
  br i1 %return148, label %true150, label %end151

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return47)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return47
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %per124 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per124, <3 x double>* %58
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_pmworleyFA130 = call double @"noise_pmworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_pmworleyFA130, %navg_correct13
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return66, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true150:                                          ; preds = %end75
  %return154 = call double @"sqrt@FF"(double %output145)
  %output155 = call double @"div@FF"(double %output138, double %return154)
  br label %end151

end151:                                           ; preds = %true150, %end75
  %out.1 = phi double [ %output155, %true150 ], [ %output138, %end75 ]
  %output160 = fadd double %out.1, %navg_correct13
  store double %output160, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return161 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output162 = fmul double %out.1, %return161
  %output164 = fadd double %output162, %navg_correct13
  %return166 = call double @"clamp@FFFF"(double %output164, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end151, %true
  %UnifiedRetVal = phi double [ %noise_pmworleyFA, %true ], [ %return166, %end151 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_pmworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @17, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 6.179570e-03)
  store double %return, double* %1
  store double 1.365310e+00, double* %2
  store double 4.482700e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pmworleyFA = call double @"noise_pmworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pmworleyFA, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output61 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  br label %body

body:                                             ; preds = %end106, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end106 ]
  %fw.0 = phi double [ %output56, %end ], [ %output101, %end106 ]
  %out.0 = phi double [ %output45, %end ], [ %output140, %end106 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output147, %end106 ]
  %w.0 = phi double [ %noise_pmworleyFA, %end ], [ %w.2, %end106 ]
  %output80 = fmul double %w.0, %output52
  %output82 = fadd double %oct.0, 1.000000e+00
  %maxoctaves84 = load double, double* %maxoctaves
  %return85 = fcmp ogt double %output82, %maxoctaves84
  br i1 %return85, label %true87, label %end88

end77:                                            ; preds = %end106
  store double %oct.2, double* %x_oct
  %return150 = fcmp one double %output147, 0.000000e+00
  br i1 %return150, label %true152, label %end153

true87:                                           ; preds = %body
  %return92 = call double @"frac@FF"(double %maxoctaves84)
  store double %return92, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output93 = fmul double %output80, %bias
  br label %end88

end88:                                            ; preds = %true87, %body
  %oct.1 = phi double [ %maxoctaves84, %true87 ], [ %output82, %body ]
  %w.1 = phi double [ %output93, %true87 ], [ %output80, %body ]
  %pp95 = load <3 x double>, <3 x double>* %pp
  %cast97 = call <3 x double> @"set@VF"(double %return47)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %pp95, <3 x double> %cast97)
  store <3 x double> %output98, <3 x double>* %pp
  %output101 = fmul double %fw.0, %return47
  %return103 = fcmp ogt double %output101, 1.000000e+00
  br i1 %return103, label %true105, label %end106

true105:                                          ; preds = %end88
  %output108 = fsub double 1.000000e+00, %fw.0
  %output111 = fsub double %output101, %fw.0
  %output112 = call double @"div@FF"(double %output108, double %output111)
  %output115 = fsub double 1.000000e+00, %output112
  %output116 = fsub double %oct.1, %output115
  %output119 = fmul double %w.1, %output112
  br label %end106

end106:                                           ; preds = %true105, %end88
  %oct.2 = phi double [ %output116, %true105 ], [ %oct.1, %end88 ]
  %w.2 = phi double [ %output119, %true105 ], [ %w.1, %end88 ]
  %inv120 = load i64, i64* %inv
  store i64 %inv120, i64* %52
  %fold121 = load i64, i64* %fold
  store i64 %fold121, i64* %53
  %accl122 = load i64, i64* %accl
  store i64 %accl122, i64* %54
  %accg123 = load i64, i64* %accg
  store i64 %accg123, i64* %55
  %fsize124 = load double, double* %fsize
  store double %fsize124, double* %56
  %expon125 = load double, double* %expon
  store double %expon125, double* %57
  %per126 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per126, <3 x double>* %58
  %dolw127 = load i64, i64* %dolw
  store i64 %dolw127, i64* %59
  %dogw128 = load i64, i64* %dogw
  store i64 %dogw128, i64* %60
  %disp129 = load double, double* %disp
  store double %disp129, double* %61
  %dfreq130 = load double, double* %dfreq
  store double %dfreq130, double* %62
  %gflow131 = load double, double* %gflow
  store double %gflow131, double* %63
  %noise_pmworleyFA132 = call double @"noise_pmworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output135 = fsub double %noise_pmworleyFA132, %navg_correct13
  %output139 = fmul double %w.2, %output135
  %output140 = fadd double %out.0, %output139
  %output144 = fmul double %return68, %w.2
  %output146 = fmul double %output144, %w.2
  %output147 = fadd double %wsum.0, %output146
  %maxoctaves70 = load double, double* %maxoctaves
  %return71 = fcmp olt double %oct.2, %maxoctaves70
  %return72 = zext i1 %return71 to i64
  %return74 = fcmp olt double %output101, 1.000000e+00
  %return75 = zext i1 %return74 to i64
  %return76 = call i64 @"and@III"(i64 %return72, i64 %return75)
  %70 = icmp ne i64 %return76, 0
  br i1 %70, label %body, label %end77

true152:                                          ; preds = %end77
  %return156 = call double @"sqrt@FF"(double %output147)
  %output157 = call double @"div@FF"(double %output140, double %return156)
  br label %end153

end153:                                           ; preds = %true152, %end77
  %out.1 = phi double [ %output157, %true152 ], [ %output140, %end77 ]
  %output162 = fadd double %out.1, %navg_correct13
  store double %output162, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return163 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output164 = fmul double %out.1, %return163
  %output166 = fadd double %output164, %navg_correct13
  %return168 = call double @"clamp@FFFF"(double %output166, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end153, %true
  %UnifiedRetVal = phi double [ %noise_pmworleyFA, %true ], [ %return168, %end153 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_pmworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @17, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 6.179570e-03)
  store double %return, double* %1
  store double 1.365310e+00, double* %2
  store double 4.482700e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pmworleyFA = call double @"noise_pmworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pmworleyFA, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output59 = fmul double %noise_pmworleyFA, 2.000000e+00
  %output62 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output62, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return68 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return69 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return68)
  br label %body

body:                                             ; preds = %end107, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end107 ]
  %fw.0 = phi double [ %output56, %end ], [ %output102, %end107 ]
  %out.0 = phi double [ %output45, %end ], [ %output141, %end107 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output148, %end107 ]
  %w.0 = phi double [ %output59, %end ], [ %output154, %end107 ]
  %output81 = fmul double %w.0, %output52
  %output83 = fadd double %oct.0, 1.000000e+00
  %maxoctaves85 = load double, double* %maxoctaves
  %return86 = fcmp ogt double %output83, %maxoctaves85
  br i1 %return86, label %true88, label %end89

end78:                                            ; preds = %end107
  store double %oct.2, double* %x_oct
  %return157 = fcmp one double %output148, 0.000000e+00
  br i1 %return157, label %true159, label %end160

true88:                                           ; preds = %body
  %return93 = call double @"frac@FF"(double %maxoctaves85)
  store double %return93, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output94 = fmul double %output81, %bias
  br label %end89

end89:                                            ; preds = %true88, %body
  %oct.1 = phi double [ %maxoctaves85, %true88 ], [ %output83, %body ]
  %w.1 = phi double [ %output94, %true88 ], [ %output81, %body ]
  %pp96 = load <3 x double>, <3 x double>* %pp
  %cast98 = call <3 x double> @"set@VF"(double %return47)
  %output99 = call <3 x double> @"mul@VV"(<3 x double> %pp96, <3 x double> %cast98)
  store <3 x double> %output99, <3 x double>* %pp
  %output102 = fmul double %fw.0, %return47
  %return104 = fcmp ogt double %output102, 1.000000e+00
  br i1 %return104, label %true106, label %end107

true106:                                          ; preds = %end89
  %output109 = fsub double 1.000000e+00, %fw.0
  %output112 = fsub double %output102, %fw.0
  %output113 = call double @"div@FF"(double %output109, double %output112)
  %output116 = fsub double 1.000000e+00, %output113
  %output117 = fsub double %oct.1, %output116
  %output120 = fmul double %w.1, %output113
  br label %end107

end107:                                           ; preds = %true106, %end89
  %oct.2 = phi double [ %output117, %true106 ], [ %oct.1, %end89 ]
  %w.2 = phi double [ %output120, %true106 ], [ %w.1, %end89 ]
  %inv121 = load i64, i64* %inv
  store i64 %inv121, i64* %52
  %fold122 = load i64, i64* %fold
  store i64 %fold122, i64* %53
  %accl123 = load i64, i64* %accl
  store i64 %accl123, i64* %54
  %accg124 = load i64, i64* %accg
  store i64 %accg124, i64* %55
  %fsize125 = load double, double* %fsize
  store double %fsize125, double* %56
  %expon126 = load double, double* %expon
  store double %expon126, double* %57
  %per127 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per127, <3 x double>* %58
  %dolw128 = load i64, i64* %dolw
  store i64 %dolw128, i64* %59
  %dogw129 = load i64, i64* %dogw
  store i64 %dogw129, i64* %60
  %disp130 = load double, double* %disp
  store double %disp130, double* %61
  %dfreq131 = load double, double* %dfreq
  store double %dfreq131, double* %62
  %gflow132 = load double, double* %gflow
  store double %gflow132, double* %63
  %noise_pmworleyFA133 = call double @"noise_pmworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output136 = fsub double %noise_pmworleyFA133, %navg_correct13
  %output140 = fmul double %w.2, %output136
  %output141 = fadd double %out.0, %output140
  %output145 = fmul double %return69, %w.2
  %output147 = fmul double %output145, %w.2
  %output148 = fadd double %wsum.0, %output147
  %output152 = fadd double %output136, %navg_correct13
  %output153 = fmul double 2.000000e+00, %output152
  %output154 = fmul double %w.2, %output153
  %maxoctaves71 = load double, double* %maxoctaves
  %return72 = fcmp olt double %oct.2, %maxoctaves71
  %return73 = zext i1 %return72 to i64
  %return75 = fcmp olt double %output102, 1.000000e+00
  %return76 = zext i1 %return75 to i64
  %return77 = call i64 @"and@III"(i64 %return73, i64 %return76)
  %70 = icmp ne i64 %return77, 0
  br i1 %70, label %body, label %end78

true159:                                          ; preds = %end78
  %return163 = call double @"sqrt@FF"(double %output148)
  %output164 = call double @"div@FF"(double %output141, double %return163)
  br label %end160

end160:                                           ; preds = %true159, %end78
  %out.1 = phi double [ %output164, %true159 ], [ %output141, %end78 ]
  %output169 = fadd double %out.1, %navg_correct13
  store double %output169, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return170 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output171 = fmul double %out.1, %return170
  %output173 = fadd double %output171, %navg_correct13
  %return175 = call double @"clamp@FFFF"(double %output173, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end160, %true
  %UnifiedRetVal = phi double [ %noise_pmworleyFA, %true ], [ %return175, %end160 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_pmworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @18, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 9.170050e-03)
  store double %return, double* %1
  store double 1.062390e+00, double* %2
  store double 2.118230e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pmworleyFB = call double @"noise_pmworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pmworleyFB, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output51 = fmul double %gain48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output59 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output55, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output45, %end ], [ %output138, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end104 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output51
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return148 = fcmp one double %output145, 0.000000e+00
  br i1 %return148, label %true150, label %end151

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return47)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return47
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %per124 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per124, <3 x double>* %58
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_pmworleyFB130 = call double @"noise_pmworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_pmworleyFB130, %navg_correct13
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return66, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true150:                                          ; preds = %end75
  %return154 = call double @"sqrt@FF"(double %output145)
  %output155 = call double @"div@FF"(double %output138, double %return154)
  br label %end151

end151:                                           ; preds = %true150, %end75
  %out.1 = phi double [ %output155, %true150 ], [ %output138, %end75 ]
  %output160 = fadd double %out.1, %navg_correct13
  store double %output160, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return161 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output162 = fmul double %out.1, %return161
  %output164 = fadd double %output162, %navg_correct13
  %return166 = call double @"clamp@FFFF"(double %output164, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end151, %true
  %UnifiedRetVal = phi double [ %noise_pmworleyFB, %true ], [ %return166, %end151 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_pmworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @18, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 9.170050e-03)
  store double %return, double* %1
  store double 1.062390e+00, double* %2
  store double 2.118230e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pmworleyFB = call double @"noise_pmworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pmworleyFB, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output61 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  br label %body

body:                                             ; preds = %end106, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end106 ]
  %fw.0 = phi double [ %output56, %end ], [ %output101, %end106 ]
  %out.0 = phi double [ %output45, %end ], [ %output140, %end106 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output147, %end106 ]
  %w.0 = phi double [ %noise_pmworleyFB, %end ], [ %w.2, %end106 ]
  %output80 = fmul double %w.0, %output52
  %output82 = fadd double %oct.0, 1.000000e+00
  %maxoctaves84 = load double, double* %maxoctaves
  %return85 = fcmp ogt double %output82, %maxoctaves84
  br i1 %return85, label %true87, label %end88

end77:                                            ; preds = %end106
  store double %oct.2, double* %x_oct
  %return150 = fcmp one double %output147, 0.000000e+00
  br i1 %return150, label %true152, label %end153

true87:                                           ; preds = %body
  %return92 = call double @"frac@FF"(double %maxoctaves84)
  store double %return92, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output93 = fmul double %output80, %bias
  br label %end88

end88:                                            ; preds = %true87, %body
  %oct.1 = phi double [ %maxoctaves84, %true87 ], [ %output82, %body ]
  %w.1 = phi double [ %output93, %true87 ], [ %output80, %body ]
  %pp95 = load <3 x double>, <3 x double>* %pp
  %cast97 = call <3 x double> @"set@VF"(double %return47)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %pp95, <3 x double> %cast97)
  store <3 x double> %output98, <3 x double>* %pp
  %output101 = fmul double %fw.0, %return47
  %return103 = fcmp ogt double %output101, 1.000000e+00
  br i1 %return103, label %true105, label %end106

true105:                                          ; preds = %end88
  %output108 = fsub double 1.000000e+00, %fw.0
  %output111 = fsub double %output101, %fw.0
  %output112 = call double @"div@FF"(double %output108, double %output111)
  %output115 = fsub double 1.000000e+00, %output112
  %output116 = fsub double %oct.1, %output115
  %output119 = fmul double %w.1, %output112
  br label %end106

end106:                                           ; preds = %true105, %end88
  %oct.2 = phi double [ %output116, %true105 ], [ %oct.1, %end88 ]
  %w.2 = phi double [ %output119, %true105 ], [ %w.1, %end88 ]
  %inv120 = load i64, i64* %inv
  store i64 %inv120, i64* %52
  %fold121 = load i64, i64* %fold
  store i64 %fold121, i64* %53
  %accl122 = load i64, i64* %accl
  store i64 %accl122, i64* %54
  %accg123 = load i64, i64* %accg
  store i64 %accg123, i64* %55
  %fsize124 = load double, double* %fsize
  store double %fsize124, double* %56
  %expon125 = load double, double* %expon
  store double %expon125, double* %57
  %per126 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per126, <3 x double>* %58
  %dolw127 = load i64, i64* %dolw
  store i64 %dolw127, i64* %59
  %dogw128 = load i64, i64* %dogw
  store i64 %dogw128, i64* %60
  %disp129 = load double, double* %disp
  store double %disp129, double* %61
  %dfreq130 = load double, double* %dfreq
  store double %dfreq130, double* %62
  %gflow131 = load double, double* %gflow
  store double %gflow131, double* %63
  %noise_pmworleyFB132 = call double @"noise_pmworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output135 = fsub double %noise_pmworleyFB132, %navg_correct13
  %output139 = fmul double %w.2, %output135
  %output140 = fadd double %out.0, %output139
  %output144 = fmul double %return68, %w.2
  %output146 = fmul double %output144, %w.2
  %output147 = fadd double %wsum.0, %output146
  %maxoctaves70 = load double, double* %maxoctaves
  %return71 = fcmp olt double %oct.2, %maxoctaves70
  %return72 = zext i1 %return71 to i64
  %return74 = fcmp olt double %output101, 1.000000e+00
  %return75 = zext i1 %return74 to i64
  %return76 = call i64 @"and@III"(i64 %return72, i64 %return75)
  %70 = icmp ne i64 %return76, 0
  br i1 %70, label %body, label %end77

true152:                                          ; preds = %end77
  %return156 = call double @"sqrt@FF"(double %output147)
  %output157 = call double @"div@FF"(double %output140, double %return156)
  br label %end153

end153:                                           ; preds = %true152, %end77
  %out.1 = phi double [ %output157, %true152 ], [ %output140, %end77 ]
  %output162 = fadd double %out.1, %navg_correct13
  store double %output162, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return163 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output164 = fmul double %out.1, %return163
  %output166 = fadd double %output164, %navg_correct13
  %return168 = call double @"clamp@FFFF"(double %output166, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end153, %true
  %UnifiedRetVal = phi double [ %noise_pmworleyFB, %true ], [ %return168, %end153 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_pmworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @18, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 9.170050e-03)
  store double %return, double* %1
  store double 1.062390e+00, double* %2
  store double 2.118230e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pmworleyFB = call double @"noise_pmworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pmworleyFB, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output59 = fmul double %noise_pmworleyFB, 2.000000e+00
  %output62 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output62, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return68 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return69 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return68)
  br label %body

body:                                             ; preds = %end107, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end107 ]
  %fw.0 = phi double [ %output56, %end ], [ %output102, %end107 ]
  %out.0 = phi double [ %output45, %end ], [ %output141, %end107 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output148, %end107 ]
  %w.0 = phi double [ %output59, %end ], [ %output154, %end107 ]
  %output81 = fmul double %w.0, %output52
  %output83 = fadd double %oct.0, 1.000000e+00
  %maxoctaves85 = load double, double* %maxoctaves
  %return86 = fcmp ogt double %output83, %maxoctaves85
  br i1 %return86, label %true88, label %end89

end78:                                            ; preds = %end107
  store double %oct.2, double* %x_oct
  %return157 = fcmp one double %output148, 0.000000e+00
  br i1 %return157, label %true159, label %end160

true88:                                           ; preds = %body
  %return93 = call double @"frac@FF"(double %maxoctaves85)
  store double %return93, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output94 = fmul double %output81, %bias
  br label %end89

end89:                                            ; preds = %true88, %body
  %oct.1 = phi double [ %maxoctaves85, %true88 ], [ %output83, %body ]
  %w.1 = phi double [ %output94, %true88 ], [ %output81, %body ]
  %pp96 = load <3 x double>, <3 x double>* %pp
  %cast98 = call <3 x double> @"set@VF"(double %return47)
  %output99 = call <3 x double> @"mul@VV"(<3 x double> %pp96, <3 x double> %cast98)
  store <3 x double> %output99, <3 x double>* %pp
  %output102 = fmul double %fw.0, %return47
  %return104 = fcmp ogt double %output102, 1.000000e+00
  br i1 %return104, label %true106, label %end107

true106:                                          ; preds = %end89
  %output109 = fsub double 1.000000e+00, %fw.0
  %output112 = fsub double %output102, %fw.0
  %output113 = call double @"div@FF"(double %output109, double %output112)
  %output116 = fsub double 1.000000e+00, %output113
  %output117 = fsub double %oct.1, %output116
  %output120 = fmul double %w.1, %output113
  br label %end107

end107:                                           ; preds = %true106, %end89
  %oct.2 = phi double [ %output117, %true106 ], [ %oct.1, %end89 ]
  %w.2 = phi double [ %output120, %true106 ], [ %w.1, %end89 ]
  %inv121 = load i64, i64* %inv
  store i64 %inv121, i64* %52
  %fold122 = load i64, i64* %fold
  store i64 %fold122, i64* %53
  %accl123 = load i64, i64* %accl
  store i64 %accl123, i64* %54
  %accg124 = load i64, i64* %accg
  store i64 %accg124, i64* %55
  %fsize125 = load double, double* %fsize
  store double %fsize125, double* %56
  %expon126 = load double, double* %expon
  store double %expon126, double* %57
  %per127 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per127, <3 x double>* %58
  %dolw128 = load i64, i64* %dolw
  store i64 %dolw128, i64* %59
  %dogw129 = load i64, i64* %dogw
  store i64 %dogw129, i64* %60
  %disp130 = load double, double* %disp
  store double %disp130, double* %61
  %dfreq131 = load double, double* %dfreq
  store double %dfreq131, double* %62
  %gflow132 = load double, double* %gflow
  store double %gflow132, double* %63
  %noise_pmworleyFB133 = call double @"noise_pmworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output136 = fsub double %noise_pmworleyFB133, %navg_correct13
  %output140 = fmul double %w.2, %output136
  %output141 = fadd double %out.0, %output140
  %output145 = fmul double %return69, %w.2
  %output147 = fmul double %output145, %w.2
  %output148 = fadd double %wsum.0, %output147
  %output152 = fadd double %output136, %navg_correct13
  %output153 = fmul double 2.000000e+00, %output152
  %output154 = fmul double %w.2, %output153
  %maxoctaves71 = load double, double* %maxoctaves
  %return72 = fcmp olt double %oct.2, %maxoctaves71
  %return73 = zext i1 %return72 to i64
  %return75 = fcmp olt double %output102, 1.000000e+00
  %return76 = zext i1 %return75 to i64
  %return77 = call i64 @"and@III"(i64 %return73, i64 %return76)
  %70 = icmp ne i64 %return77, 0
  br i1 %70, label %body, label %end78

true159:                                          ; preds = %end78
  %return163 = call double @"sqrt@FF"(double %output148)
  %output164 = call double @"div@FF"(double %output141, double %return163)
  br label %end160

end160:                                           ; preds = %true159, %end78
  %out.1 = phi double [ %output164, %true159 ], [ %output141, %end78 ]
  %output169 = fadd double %out.1, %navg_correct13
  store double %output169, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return170 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output171 = fmul double %out.1, %return170
  %output173 = fadd double %output171, %navg_correct13
  %return175 = call double @"clamp@FFFF"(double %output173, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end160, %true
  %UnifiedRetVal = phi double [ %noise_pmworleyFB, %true ], [ %return175, %end160 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_pcworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @20, i64 0, i64 0), i8** %0
  store double 1.556640e-02, double* %1
  store double 6.781590e-01, double* %2
  store double 4.775260e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pcworleyFA = call double @"noise_pcworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return = fcmp oge double %fsize26, 1.000000e+00
  %return27 = zext i1 %return to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p41, <3 x double>* %pp
  %output44 = fsub double %noise_pcworleyFA, %navg_correct13
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return49 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output50 = fmul double %gain47, %return49
  %fsize51 = load double, double* %fsize
  %fold52 = load i64, i64* %fold
  %output53 = add i64 1, %fold52
  %cast = sitofp i64 %output53 to double
  %output54 = fmul double %fsize51, %cast
  %output58 = mul i64 %fold52, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output58, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return64 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return65 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return64)
  br label %body

body:                                             ; preds = %end103, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end103 ]
  %fw.0 = phi double [ %output54, %end ], [ %output98, %end103 ]
  %out.0 = phi double [ %output44, %end ], [ %output137, %end103 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output144, %end103 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end103 ]
  %output77 = fmul double %w.0, %output50
  %output79 = fadd double %oct.0, 1.000000e+00
  %maxoctaves81 = load double, double* %maxoctaves
  %return82 = fcmp ogt double %output79, %maxoctaves81
  br i1 %return82, label %true84, label %end85

end74:                                            ; preds = %end103
  store double %oct.2, double* %x_oct
  %return147 = fcmp one double %output144, 0.000000e+00
  br i1 %return147, label %true149, label %end150

true84:                                           ; preds = %body
  %return89 = call double @"frac@FF"(double %maxoctaves81)
  store double %return89, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output90 = fmul double %output77, %bias
  br label %end85

end85:                                            ; preds = %true84, %body
  %oct.1 = phi double [ %maxoctaves81, %true84 ], [ %output79, %body ]
  %w.1 = phi double [ %output90, %true84 ], [ %output77, %body ]
  %pp92 = load <3 x double>, <3 x double>* %pp
  %cast94 = call <3 x double> @"set@VF"(double %return46)
  %output95 = call <3 x double> @"mul@VV"(<3 x double> %pp92, <3 x double> %cast94)
  store <3 x double> %output95, <3 x double>* %pp
  %output98 = fmul double %fw.0, %return46
  %return100 = fcmp ogt double %output98, 1.000000e+00
  br i1 %return100, label %true102, label %end103

true102:                                          ; preds = %end85
  %output105 = fsub double 1.000000e+00, %fw.0
  %output108 = fsub double %output98, %fw.0
  %output109 = call double @"div@FF"(double %output105, double %output108)
  %output112 = fsub double 1.000000e+00, %output109
  %output113 = fsub double %oct.1, %output112
  %output116 = fmul double %w.1, %output109
  br label %end103

end103:                                           ; preds = %true102, %end85
  %oct.2 = phi double [ %output113, %true102 ], [ %oct.1, %end85 ]
  %w.2 = phi double [ %output116, %true102 ], [ %w.1, %end85 ]
  %inv117 = load i64, i64* %inv
  store i64 %inv117, i64* %52
  %fold118 = load i64, i64* %fold
  store i64 %fold118, i64* %53
  %accl119 = load i64, i64* %accl
  store i64 %accl119, i64* %54
  %accg120 = load i64, i64* %accg
  store i64 %accg120, i64* %55
  %fsize121 = load double, double* %fsize
  store double %fsize121, double* %56
  %expon122 = load double, double* %expon
  store double %expon122, double* %57
  %per123 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per123, <3 x double>* %58
  %dolw124 = load i64, i64* %dolw
  store i64 %dolw124, i64* %59
  %dogw125 = load i64, i64* %dogw
  store i64 %dogw125, i64* %60
  %disp126 = load double, double* %disp
  store double %disp126, double* %61
  %dfreq127 = load double, double* %dfreq
  store double %dfreq127, double* %62
  %gflow128 = load double, double* %gflow
  store double %gflow128, double* %63
  %noise_pcworleyFA129 = call double @"noise_pcworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output132 = fsub double %noise_pcworleyFA129, %navg_correct13
  %output136 = fmul double %w.2, %output132
  %output137 = fadd double %out.0, %output136
  %output141 = fmul double %return65, %w.2
  %output143 = fmul double %output141, %w.2
  %output144 = fadd double %wsum.0, %output143
  %maxoctaves67 = load double, double* %maxoctaves
  %return68 = fcmp olt double %oct.2, %maxoctaves67
  %return69 = zext i1 %return68 to i64
  %return71 = fcmp olt double %output98, 1.000000e+00
  %return72 = zext i1 %return71 to i64
  %return73 = call i64 @"and@III"(i64 %return69, i64 %return72)
  %70 = icmp ne i64 %return73, 0
  br i1 %70, label %body, label %end74

true149:                                          ; preds = %end74
  %return153 = call double @"sqrt@FF"(double %output144)
  %output154 = call double @"div@FF"(double %output137, double %return153)
  br label %end150

end150:                                           ; preds = %true149, %end74
  %out.1 = phi double [ %output154, %true149 ], [ %output137, %end74 ]
  %output159 = fadd double %out.1, %navg_correct13
  store double %output159, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return160 = call double @"fit@FFFFFF"(double %output50, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output161 = fmul double %out.1, %return160
  %output163 = fadd double %output161, %navg_correct13
  %return165 = call double @"clamp@FFFF"(double %output163, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end150, %true
  %UnifiedRetVal = phi double [ %noise_pcworleyFA, %true ], [ %return165, %end150 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_pcworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @20, i64 0, i64 0), i8** %0
  store double 1.556640e-02, double* %1
  store double 6.781590e-01, double* %2
  store double 4.775260e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pcworleyFA = call double @"noise_pcworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return = fcmp oge double %fsize26, 1.000000e+00
  %return27 = zext i1 %return to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p41, <3 x double>* %pp
  %output44 = fsub double %noise_pcworleyFA, %navg_correct13
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return48 = call double @"abs@FF"(double %gain47)
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output51 = fmul double %return48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output60 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output60, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return66 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return67 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return66)
  br label %body

body:                                             ; preds = %end105, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end105 ]
  %fw.0 = phi double [ %output55, %end ], [ %output100, %end105 ]
  %out.0 = phi double [ %output44, %end ], [ %output139, %end105 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output146, %end105 ]
  %w.0 = phi double [ %noise_pcworleyFA, %end ], [ %w.2, %end105 ]
  %output79 = fmul double %w.0, %output51
  %output81 = fadd double %oct.0, 1.000000e+00
  %maxoctaves83 = load double, double* %maxoctaves
  %return84 = fcmp ogt double %output81, %maxoctaves83
  br i1 %return84, label %true86, label %end87

end76:                                            ; preds = %end105
  store double %oct.2, double* %x_oct
  %return149 = fcmp one double %output146, 0.000000e+00
  br i1 %return149, label %true151, label %end152

true86:                                           ; preds = %body
  %return91 = call double @"frac@FF"(double %maxoctaves83)
  store double %return91, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output92 = fmul double %output79, %bias
  br label %end87

end87:                                            ; preds = %true86, %body
  %oct.1 = phi double [ %maxoctaves83, %true86 ], [ %output81, %body ]
  %w.1 = phi double [ %output92, %true86 ], [ %output79, %body ]
  %pp94 = load <3 x double>, <3 x double>* %pp
  %cast96 = call <3 x double> @"set@VF"(double %return46)
  %output97 = call <3 x double> @"mul@VV"(<3 x double> %pp94, <3 x double> %cast96)
  store <3 x double> %output97, <3 x double>* %pp
  %output100 = fmul double %fw.0, %return46
  %return102 = fcmp ogt double %output100, 1.000000e+00
  br i1 %return102, label %true104, label %end105

true104:                                          ; preds = %end87
  %output107 = fsub double 1.000000e+00, %fw.0
  %output110 = fsub double %output100, %fw.0
  %output111 = call double @"div@FF"(double %output107, double %output110)
  %output114 = fsub double 1.000000e+00, %output111
  %output115 = fsub double %oct.1, %output114
  %output118 = fmul double %w.1, %output111
  br label %end105

end105:                                           ; preds = %true104, %end87
  %oct.2 = phi double [ %output115, %true104 ], [ %oct.1, %end87 ]
  %w.2 = phi double [ %output118, %true104 ], [ %w.1, %end87 ]
  %inv119 = load i64, i64* %inv
  store i64 %inv119, i64* %52
  %fold120 = load i64, i64* %fold
  store i64 %fold120, i64* %53
  %accl121 = load i64, i64* %accl
  store i64 %accl121, i64* %54
  %accg122 = load i64, i64* %accg
  store i64 %accg122, i64* %55
  %fsize123 = load double, double* %fsize
  store double %fsize123, double* %56
  %expon124 = load double, double* %expon
  store double %expon124, double* %57
  %per125 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per125, <3 x double>* %58
  %dolw126 = load i64, i64* %dolw
  store i64 %dolw126, i64* %59
  %dogw127 = load i64, i64* %dogw
  store i64 %dogw127, i64* %60
  %disp128 = load double, double* %disp
  store double %disp128, double* %61
  %dfreq129 = load double, double* %dfreq
  store double %dfreq129, double* %62
  %gflow130 = load double, double* %gflow
  store double %gflow130, double* %63
  %noise_pcworleyFA131 = call double @"noise_pcworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output134 = fsub double %noise_pcworleyFA131, %navg_correct13
  %output138 = fmul double %w.2, %output134
  %output139 = fadd double %out.0, %output138
  %output143 = fmul double %return67, %w.2
  %output145 = fmul double %output143, %w.2
  %output146 = fadd double %wsum.0, %output145
  %maxoctaves69 = load double, double* %maxoctaves
  %return70 = fcmp olt double %oct.2, %maxoctaves69
  %return71 = zext i1 %return70 to i64
  %return73 = fcmp olt double %output100, 1.000000e+00
  %return74 = zext i1 %return73 to i64
  %return75 = call i64 @"and@III"(i64 %return71, i64 %return74)
  %70 = icmp ne i64 %return75, 0
  br i1 %70, label %body, label %end76

true151:                                          ; preds = %end76
  %return155 = call double @"sqrt@FF"(double %output146)
  %output156 = call double @"div@FF"(double %output139, double %return155)
  br label %end152

end152:                                           ; preds = %true151, %end76
  %out.1 = phi double [ %output156, %true151 ], [ %output139, %end76 ]
  %output161 = fadd double %out.1, %navg_correct13
  store double %output161, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return162 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output163 = fmul double %out.1, %return162
  %output165 = fadd double %output163, %navg_correct13
  %return167 = call double @"clamp@FFFF"(double %output165, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end152, %true
  %UnifiedRetVal = phi double [ %noise_pcworleyFA, %true ], [ %return167, %end152 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_pcworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @20, i64 0, i64 0), i8** %0
  store double 1.556640e-02, double* %1
  store double 6.781590e-01, double* %2
  store double 4.775260e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pcworleyFA = call double @"noise_pcworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return = fcmp oge double %fsize26, 1.000000e+00
  %return27 = zext i1 %return to i64
  %maxoctaves29 = load double, double* %maxoctaves
  %return30 = fcmp ogt double 0.000000e+00, %maxoctaves29
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %lacunarity33 = load double, double* %lacunarity
  %output = fmul double %lacunarity33, %maxoctaves29
  %gain35 = load double, double* %gain
  %output36 = fmul double %output, %gain35
  %return37 = fcmp oeq double %output36, 0.000000e+00
  %return38 = zext i1 %return37 to i64
  %return39 = call i64 @"or@III"(i64 %return32, i64 %return38)
  %68 = icmp ne i64 %return39, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p41 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p41, <3 x double>* %pp
  %output44 = fsub double %noise_pcworleyFA, %navg_correct13
  %lacunarity45 = load double, double* %lacunarity
  %return46 = call double @"abs@FF"(double %lacunarity45)
  %gain47 = load double, double* %gain
  %return48 = call double @"abs@FF"(double %gain47)
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return46)
  %output51 = fmul double %return48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output58 = fmul double %noise_pcworleyFA, 2.000000e+00
  %output61 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return46)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  br label %body

body:                                             ; preds = %end106, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end106 ]
  %fw.0 = phi double [ %output55, %end ], [ %output101, %end106 ]
  %out.0 = phi double [ %output44, %end ], [ %output140, %end106 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output147, %end106 ]
  %w.0 = phi double [ %output58, %end ], [ %output153, %end106 ]
  %output80 = fmul double %w.0, %output51
  %output82 = fadd double %oct.0, 1.000000e+00
  %maxoctaves84 = load double, double* %maxoctaves
  %return85 = fcmp ogt double %output82, %maxoctaves84
  br i1 %return85, label %true87, label %end88

end77:                                            ; preds = %end106
  store double %oct.2, double* %x_oct
  %return156 = fcmp one double %output147, 0.000000e+00
  br i1 %return156, label %true158, label %end159

true87:                                           ; preds = %body
  %return92 = call double @"frac@FF"(double %maxoctaves84)
  store double %return92, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output93 = fmul double %output80, %bias
  br label %end88

end88:                                            ; preds = %true87, %body
  %oct.1 = phi double [ %maxoctaves84, %true87 ], [ %output82, %body ]
  %w.1 = phi double [ %output93, %true87 ], [ %output80, %body ]
  %pp95 = load <3 x double>, <3 x double>* %pp
  %cast97 = call <3 x double> @"set@VF"(double %return46)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %pp95, <3 x double> %cast97)
  store <3 x double> %output98, <3 x double>* %pp
  %output101 = fmul double %fw.0, %return46
  %return103 = fcmp ogt double %output101, 1.000000e+00
  br i1 %return103, label %true105, label %end106

true105:                                          ; preds = %end88
  %output108 = fsub double 1.000000e+00, %fw.0
  %output111 = fsub double %output101, %fw.0
  %output112 = call double @"div@FF"(double %output108, double %output111)
  %output115 = fsub double 1.000000e+00, %output112
  %output116 = fsub double %oct.1, %output115
  %output119 = fmul double %w.1, %output112
  br label %end106

end106:                                           ; preds = %true105, %end88
  %oct.2 = phi double [ %output116, %true105 ], [ %oct.1, %end88 ]
  %w.2 = phi double [ %output119, %true105 ], [ %w.1, %end88 ]
  %inv120 = load i64, i64* %inv
  store i64 %inv120, i64* %52
  %fold121 = load i64, i64* %fold
  store i64 %fold121, i64* %53
  %accl122 = load i64, i64* %accl
  store i64 %accl122, i64* %54
  %accg123 = load i64, i64* %accg
  store i64 %accg123, i64* %55
  %fsize124 = load double, double* %fsize
  store double %fsize124, double* %56
  %expon125 = load double, double* %expon
  store double %expon125, double* %57
  %per126 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per126, <3 x double>* %58
  %dolw127 = load i64, i64* %dolw
  store i64 %dolw127, i64* %59
  %dogw128 = load i64, i64* %dogw
  store i64 %dogw128, i64* %60
  %disp129 = load double, double* %disp
  store double %disp129, double* %61
  %dfreq130 = load double, double* %dfreq
  store double %dfreq130, double* %62
  %gflow131 = load double, double* %gflow
  store double %gflow131, double* %63
  %noise_pcworleyFA132 = call double @"noise_pcworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output135 = fsub double %noise_pcworleyFA132, %navg_correct13
  %output139 = fmul double %w.2, %output135
  %output140 = fadd double %out.0, %output139
  %output144 = fmul double %return68, %w.2
  %output146 = fmul double %output144, %w.2
  %output147 = fadd double %wsum.0, %output146
  %output151 = fadd double %output135, %navg_correct13
  %output152 = fmul double 2.000000e+00, %output151
  %output153 = fmul double %w.2, %output152
  %maxoctaves70 = load double, double* %maxoctaves
  %return71 = fcmp olt double %oct.2, %maxoctaves70
  %return72 = zext i1 %return71 to i64
  %return74 = fcmp olt double %output101, 1.000000e+00
  %return75 = zext i1 %return74 to i64
  %return76 = call i64 @"and@III"(i64 %return72, i64 %return75)
  %70 = icmp ne i64 %return76, 0
  br i1 %70, label %body, label %end77

true158:                                          ; preds = %end77
  %return162 = call double @"sqrt@FF"(double %output147)
  %output163 = call double @"div@FF"(double %output140, double %return162)
  br label %end159

end159:                                           ; preds = %true158, %end77
  %out.1 = phi double [ %output163, %true158 ], [ %output140, %end77 ]
  %output168 = fadd double %out.1, %navg_correct13
  store double %output168, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return169 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output170 = fmul double %out.1, %return169
  %output172 = fadd double %output170, %navg_correct13
  %return174 = call double @"clamp@FFFF"(double %output172, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end159, %true
  %UnifiedRetVal = phi double [ %noise_pcworleyFA, %true ], [ %return174, %end159 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"fBm_pcworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @21, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 2.500000e-03)
  store double %return, double* %1
  store double 6.060160e-01, double* %2
  store double 2.027910e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pcworleyFB = call double @"noise_pcworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pcworleyFB, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return50 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output51 = fmul double %gain48, %return50
  %fsize52 = load double, double* %fsize
  %fold53 = load i64, i64* %fold
  %output54 = add i64 1, %fold53
  %cast = sitofp i64 %output54 to double
  %output55 = fmul double %fsize52, %cast
  %output59 = mul i64 %fold53, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output59, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return65 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return66 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return65)
  br label %body

body:                                             ; preds = %end104, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end104 ]
  %fw.0 = phi double [ %output55, %end ], [ %output99, %end104 ]
  %out.0 = phi double [ %output45, %end ], [ %output138, %end104 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output145, %end104 ]
  %w.0 = phi double [ 1.000000e+00, %end ], [ %w.2, %end104 ]
  %output78 = fmul double %w.0, %output51
  %output80 = fadd double %oct.0, 1.000000e+00
  %maxoctaves82 = load double, double* %maxoctaves
  %return83 = fcmp ogt double %output80, %maxoctaves82
  br i1 %return83, label %true85, label %end86

end75:                                            ; preds = %end104
  store double %oct.2, double* %x_oct
  %return148 = fcmp one double %output145, 0.000000e+00
  br i1 %return148, label %true150, label %end151

true85:                                           ; preds = %body
  %return90 = call double @"frac@FF"(double %maxoctaves82)
  store double %return90, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output91 = fmul double %output78, %bias
  br label %end86

end86:                                            ; preds = %true85, %body
  %oct.1 = phi double [ %maxoctaves82, %true85 ], [ %output80, %body ]
  %w.1 = phi double [ %output91, %true85 ], [ %output78, %body ]
  %pp93 = load <3 x double>, <3 x double>* %pp
  %cast95 = call <3 x double> @"set@VF"(double %return47)
  %output96 = call <3 x double> @"mul@VV"(<3 x double> %pp93, <3 x double> %cast95)
  store <3 x double> %output96, <3 x double>* %pp
  %output99 = fmul double %fw.0, %return47
  %return101 = fcmp ogt double %output99, 1.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end86
  %output106 = fsub double 1.000000e+00, %fw.0
  %output109 = fsub double %output99, %fw.0
  %output110 = call double @"div@FF"(double %output106, double %output109)
  %output113 = fsub double 1.000000e+00, %output110
  %output114 = fsub double %oct.1, %output113
  %output117 = fmul double %w.1, %output110
  br label %end104

end104:                                           ; preds = %true103, %end86
  %oct.2 = phi double [ %output114, %true103 ], [ %oct.1, %end86 ]
  %w.2 = phi double [ %output117, %true103 ], [ %w.1, %end86 ]
  %inv118 = load i64, i64* %inv
  store i64 %inv118, i64* %52
  %fold119 = load i64, i64* %fold
  store i64 %fold119, i64* %53
  %accl120 = load i64, i64* %accl
  store i64 %accl120, i64* %54
  %accg121 = load i64, i64* %accg
  store i64 %accg121, i64* %55
  %fsize122 = load double, double* %fsize
  store double %fsize122, double* %56
  %expon123 = load double, double* %expon
  store double %expon123, double* %57
  %per124 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per124, <3 x double>* %58
  %dolw125 = load i64, i64* %dolw
  store i64 %dolw125, i64* %59
  %dogw126 = load i64, i64* %dogw
  store i64 %dogw126, i64* %60
  %disp127 = load double, double* %disp
  store double %disp127, double* %61
  %dfreq128 = load double, double* %dfreq
  store double %dfreq128, double* %62
  %gflow129 = load double, double* %gflow
  store double %gflow129, double* %63
  %noise_pcworleyFB130 = call double @"noise_pcworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output133 = fsub double %noise_pcworleyFB130, %navg_correct13
  %output137 = fmul double %w.2, %output133
  %output138 = fadd double %out.0, %output137
  %output142 = fmul double %return66, %w.2
  %output144 = fmul double %output142, %w.2
  %output145 = fadd double %wsum.0, %output144
  %maxoctaves68 = load double, double* %maxoctaves
  %return69 = fcmp olt double %oct.2, %maxoctaves68
  %return70 = zext i1 %return69 to i64
  %return72 = fcmp olt double %output99, 1.000000e+00
  %return73 = zext i1 %return72 to i64
  %return74 = call i64 @"and@III"(i64 %return70, i64 %return73)
  %70 = icmp ne i64 %return74, 0
  br i1 %70, label %body, label %end75

true150:                                          ; preds = %end75
  %return154 = call double @"sqrt@FF"(double %output145)
  %output155 = call double @"div@FF"(double %output138, double %return154)
  br label %end151

end151:                                           ; preds = %true150, %end75
  %out.1 = phi double [ %output155, %true150 ], [ %output138, %end75 ]
  %output160 = fadd double %out.1, %navg_correct13
  store double %output160, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return161 = call double @"fit@FFFFFF"(double %output51, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output162 = fmul double %out.1, %return161
  %output164 = fadd double %output162, %navg_correct13
  %return166 = call double @"clamp@FFFF"(double %output164, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end151, %true
  %UnifiedRetVal = phi double [ %noise_pcworleyFB, %true ], [ %return166, %end151 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"mfT_pcworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @21, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 2.500000e-03)
  store double %return, double* %1
  store double 6.060160e-01, double* %2
  store double 2.027910e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pcworleyFB = call double @"noise_pcworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pcworleyFB, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output61 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output61, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return67 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return68 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return67)
  br label %body

body:                                             ; preds = %end106, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end106 ]
  %fw.0 = phi double [ %output56, %end ], [ %output101, %end106 ]
  %out.0 = phi double [ %output45, %end ], [ %output140, %end106 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output147, %end106 ]
  %w.0 = phi double [ %noise_pcworleyFB, %end ], [ %w.2, %end106 ]
  %output80 = fmul double %w.0, %output52
  %output82 = fadd double %oct.0, 1.000000e+00
  %maxoctaves84 = load double, double* %maxoctaves
  %return85 = fcmp ogt double %output82, %maxoctaves84
  br i1 %return85, label %true87, label %end88

end77:                                            ; preds = %end106
  store double %oct.2, double* %x_oct
  %return150 = fcmp one double %output147, 0.000000e+00
  br i1 %return150, label %true152, label %end153

true87:                                           ; preds = %body
  %return92 = call double @"frac@FF"(double %maxoctaves84)
  store double %return92, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output93 = fmul double %output80, %bias
  br label %end88

end88:                                            ; preds = %true87, %body
  %oct.1 = phi double [ %maxoctaves84, %true87 ], [ %output82, %body ]
  %w.1 = phi double [ %output93, %true87 ], [ %output80, %body ]
  %pp95 = load <3 x double>, <3 x double>* %pp
  %cast97 = call <3 x double> @"set@VF"(double %return47)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %pp95, <3 x double> %cast97)
  store <3 x double> %output98, <3 x double>* %pp
  %output101 = fmul double %fw.0, %return47
  %return103 = fcmp ogt double %output101, 1.000000e+00
  br i1 %return103, label %true105, label %end106

true105:                                          ; preds = %end88
  %output108 = fsub double 1.000000e+00, %fw.0
  %output111 = fsub double %output101, %fw.0
  %output112 = call double @"div@FF"(double %output108, double %output111)
  %output115 = fsub double 1.000000e+00, %output112
  %output116 = fsub double %oct.1, %output115
  %output119 = fmul double %w.1, %output112
  br label %end106

end106:                                           ; preds = %true105, %end88
  %oct.2 = phi double [ %output116, %true105 ], [ %oct.1, %end88 ]
  %w.2 = phi double [ %output119, %true105 ], [ %w.1, %end88 ]
  %inv120 = load i64, i64* %inv
  store i64 %inv120, i64* %52
  %fold121 = load i64, i64* %fold
  store i64 %fold121, i64* %53
  %accl122 = load i64, i64* %accl
  store i64 %accl122, i64* %54
  %accg123 = load i64, i64* %accg
  store i64 %accg123, i64* %55
  %fsize124 = load double, double* %fsize
  store double %fsize124, double* %56
  %expon125 = load double, double* %expon
  store double %expon125, double* %57
  %per126 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per126, <3 x double>* %58
  %dolw127 = load i64, i64* %dolw
  store i64 %dolw127, i64* %59
  %dogw128 = load i64, i64* %dogw
  store i64 %dogw128, i64* %60
  %disp129 = load double, double* %disp
  store double %disp129, double* %61
  %dfreq130 = load double, double* %dfreq
  store double %dfreq130, double* %62
  %gflow131 = load double, double* %gflow
  store double %gflow131, double* %63
  %noise_pcworleyFB132 = call double @"noise_pcworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output135 = fsub double %noise_pcworleyFB132, %navg_correct13
  %output139 = fmul double %w.2, %output135
  %output140 = fadd double %out.0, %output139
  %output144 = fmul double %return68, %w.2
  %output146 = fmul double %output144, %w.2
  %output147 = fadd double %wsum.0, %output146
  %maxoctaves70 = load double, double* %maxoctaves
  %return71 = fcmp olt double %oct.2, %maxoctaves70
  %return72 = zext i1 %return71 to i64
  %return74 = fcmp olt double %output101, 1.000000e+00
  %return75 = zext i1 %return74 to i64
  %return76 = call i64 @"and@III"(i64 %return72, i64 %return75)
  %70 = icmp ne i64 %return76, 0
  br i1 %70, label %body, label %end77

true152:                                          ; preds = %end77
  %return156 = call double @"sqrt@FF"(double %output147)
  %output157 = call double @"div@FF"(double %output140, double %return156)
  br label %end153

end153:                                           ; preds = %true152, %end77
  %out.1 = phi double [ %output157, %true152 ], [ %output140, %end77 ]
  %output162 = fadd double %out.1, %navg_correct13
  store double %output162, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return163 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output164 = fmul double %out.1, %return163
  %output166 = fadd double %output164, %navg_correct13
  %return168 = call double @"clamp@FFFF"(double %output166, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end153, %true
  %UnifiedRetVal = phi double [ %noise_pcworleyFB, %true ], [ %return168, %end153 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"hmfT_pcworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fsize, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca double
  %6 = alloca double
  %7 = alloca %nsdata
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca <4 x double>
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca double
  %21 = alloca double
  %22 = alloca %nsdata
  %23 = alloca %nsdata
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca double
  %29 = alloca double
  %30 = alloca <4 x double>
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %pp = alloca <3 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %stats1 = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"()
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @21, i64 0, i64 0), i8** %0
  %return = call double @"neg@FF"(double 2.500000e-03)
  store double %return, double* %1
  store double 6.060160e-01, double* %2
  store double 2.027910e-01, double* %3
  store i64 0, i64* %4
  %nsdata = call %nsdata @"nsdata@Z6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricISFFFI"(i8** %0, double* %1, double* %2, double* %3, i64* %4)
  %nsdata.fca.0.extract = extractvalue %nsdata %nsdata, 0
  %nsdata.fca.1.extract = extractvalue %nsdata %nsdata, 1
  %nsdata.fca.2.extract = extractvalue %nsdata %nsdata, 2
  %nsdata.fca.3.extract = extractvalue %nsdata %nsdata, 3
  %nsdata.fca.4.extract = extractvalue %nsdata %nsdata, 4
  %norm2 = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendF"()
  store double 1.600000e+00, double* %5
  store double 1.800000e+00, double* %6
  %nndata = call %nndata @"nndata@Z6nndataM2N5scaleFN5blendFFF"(double* %5, double* %6)
  %nndata.fca.0.extract = extractvalue %nndata %nndata, 0
  %nndata.fca.1.extract = extractvalue %nndata %nndata, 1
  store double 0.000000e+00, double* %x_oct
  %stats5.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats5.fca.4.insert.fca.0.gep
  %stats5.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats5.fca.4.insert.fca.1.gep
  %stats5.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats5.fca.4.insert.fca.2.gep
  %stats5.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats5.fca.4.insert.fca.3.gep
  %stats5.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %7, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats5.fca.4.insert.fca.4.gep
  %inv6 = load i64, i64* %inv
  store i64 %inv6, i64* %8
  %fold7 = load i64, i64* %fold
  store i64 %fold7, i64* %9
  %expon8 = load double, double* %expon
  store double %expon8, double* %13
  %navg_correct = call double @"navg_correct@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(%nsdata* %7, i64* %8, i64* %9, i64* %10, i64* %11, double* %12, double* %13, <4 x double>* %14, i64* %15, i64* %16, double* %17, double* %18, double* %19, double* %20)
  store double %navg_correct, double* %x_avg
  %npivot_positive = call double @"npivot_positive@FZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricI"(%nsdata* %22)
  store double 1.250000e-02, double* %21
  %stats9.fca.4.insert.fca.0.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 0
  store i8* %nsdata.fca.0.extract, i8** %stats9.fca.4.insert.fca.0.gep
  %stats9.fca.4.insert.fca.1.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 1
  store double %nsdata.fca.1.extract, double* %stats9.fca.4.insert.fca.1.gep
  %stats9.fca.4.insert.fca.2.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 2
  store double %nsdata.fca.2.extract, double* %stats9.fca.4.insert.fca.2.gep
  %stats9.fca.4.insert.fca.3.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 3
  store double %nsdata.fca.3.extract, double* %stats9.fca.4.insert.fca.3.gep
  %stats9.fca.4.insert.fca.4.gep = getelementptr inbounds %nsdata, %nsdata* %23, i32 0, i32 4
  store i64 %nsdata.fca.4.extract, i64* %stats9.fca.4.insert.fca.4.gep
  %inv10 = load i64, i64* %inv
  store i64 %inv10, i64* %24
  %fold11 = load i64, i64* %fold
  store i64 %fold11, i64* %25
  %expon12 = load double, double* %expon
  store double %expon12, double* %29
  %navg_correct13 = call double @"navg_correct@FFZ6nsdataM5N4nameSN3minFN3maxFN3avgFN9symmetricIIIIIFFPIIFFFF"(double* %21, %nsdata* %23, i64* %24, i64* %25, i64* %26, i64* %27, double* %28, double* %29, <4 x double>* %30, i64* %31, i64* %32, double* %33, double* %34, double* %35, double* %36)
  %inv14 = load i64, i64* %inv
  store i64 %inv14, i64* %37
  %fold15 = load i64, i64* %fold
  store i64 %fold15, i64* %38
  %accl16 = load i64, i64* %accl
  store i64 %accl16, i64* %39
  %accg17 = load i64, i64* %accg
  store i64 %accg17, i64* %40
  %fsize18 = load double, double* %fsize
  store double %fsize18, double* %41
  %expon19 = load double, double* %expon
  store double %expon19, double* %42
  %per20 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per20, <3 x double>* %43
  %dolw21 = load i64, i64* %dolw
  store i64 %dolw21, i64* %44
  %dogw22 = load i64, i64* %dogw
  store i64 %dogw22, i64* %45
  %disp23 = load double, double* %disp
  store double %disp23, double* %46
  %dfreq24 = load double, double* %dfreq
  store double %dfreq24, double* %47
  %gflow25 = load double, double* %gflow
  store double %gflow25, double* %48
  %noise_pcworleyFB = call double @"noise_pcworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %37, i64* %38, i64* %39, i64* %40, double* %41, double* %42, <3 x double>* %43, i64* %44, i64* %45, double* %46, double* %47, double* %48, double* %49, double* %x_avg, <3 x double>* %x_off)
  %fsize26 = load double, double* %fsize
  %return27 = fcmp oge double %fsize26, 1.000000e+00
  %return28 = zext i1 %return27 to i64
  %maxoctaves30 = load double, double* %maxoctaves
  %return31 = fcmp ogt double 0.000000e+00, %maxoctaves30
  %return32 = zext i1 %return31 to i64
  %return33 = call i64 @"or@III"(i64 %return28, i64 %return32)
  %lacunarity34 = load double, double* %lacunarity
  %output = fmul double %lacunarity34, %maxoctaves30
  %gain36 = load double, double* %gain
  %output37 = fmul double %output, %gain36
  %return38 = fcmp oeq double %output37, 0.000000e+00
  %return39 = zext i1 %return38 to i64
  %return40 = call i64 @"or@III"(i64 %return33, i64 %return39)
  %68 = icmp ne i64 %return40, 0
  br i1 %68, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %p42 = load <3 x double>, <3 x double>* %p
  store <3 x double> %p42, <3 x double>* %pp
  %output45 = fsub double %noise_pcworleyFB, %navg_correct13
  %lacunarity46 = load double, double* %lacunarity
  %return47 = call double @"abs@FF"(double %lacunarity46)
  %gain48 = load double, double* %gain
  %return49 = call double @"abs@FF"(double %gain48)
  %return51 = call double @"min@FFF"(double 1.000000e+00, double %return47)
  %output52 = fmul double %return49, %return51
  %fsize53 = load double, double* %fsize
  %fold54 = load i64, i64* %fold
  %output55 = add i64 1, %fold54
  %cast = sitofp i64 %output55 to double
  %output56 = fmul double %fsize53, %cast
  %output59 = fmul double %noise_pcworleyFB, 2.000000e+00
  %output62 = mul i64 %fold54, %nsdata.fca.4.extract
  %69 = icmp ne i64 %output62, 0
  %phi = select i1 %69, double 1.000000e+01, double %nndata.fca.0.extract
  %return68 = call double @"smooth@FFFF"(double 1.000000e+00, double %nndata.fca.1.extract, double %return47)
  %return69 = call double @"lerp@FFFF"(double 1.000000e+01, double %phi, double %return68)
  br label %body

body:                                             ; preds = %end107, %end
  %oct.0 = phi double [ 0.000000e+00, %end ], [ %oct.2, %end107 ]
  %fw.0 = phi double [ %output56, %end ], [ %output102, %end107 ]
  %out.0 = phi double [ %output45, %end ], [ %output141, %end107 ]
  %wsum.0 = phi double [ 1.000000e+00, %end ], [ %output148, %end107 ]
  %w.0 = phi double [ %output59, %end ], [ %output154, %end107 ]
  %output81 = fmul double %w.0, %output52
  %output83 = fadd double %oct.0, 1.000000e+00
  %maxoctaves85 = load double, double* %maxoctaves
  %return86 = fcmp ogt double %output83, %maxoctaves85
  br i1 %return86, label %true88, label %end89

end78:                                            ; preds = %end107
  store double %oct.2, double* %x_oct
  %return157 = fcmp one double %output148, 0.000000e+00
  br i1 %return157, label %true159, label %end160

true88:                                           ; preds = %body
  %return93 = call double @"frac@FF"(double %maxoctaves85)
  store double %return93, double* %50
  store double 4.500000e-01, double* %51
  %bias = call double @"bias@FFF"(double* %50, double* %51)
  %output94 = fmul double %output81, %bias
  br label %end89

end89:                                            ; preds = %true88, %body
  %oct.1 = phi double [ %maxoctaves85, %true88 ], [ %output83, %body ]
  %w.1 = phi double [ %output94, %true88 ], [ %output81, %body ]
  %pp96 = load <3 x double>, <3 x double>* %pp
  %cast98 = call <3 x double> @"set@VF"(double %return47)
  %output99 = call <3 x double> @"mul@VV"(<3 x double> %pp96, <3 x double> %cast98)
  store <3 x double> %output99, <3 x double>* %pp
  %output102 = fmul double %fw.0, %return47
  %return104 = fcmp ogt double %output102, 1.000000e+00
  br i1 %return104, label %true106, label %end107

true106:                                          ; preds = %end89
  %output109 = fsub double 1.000000e+00, %fw.0
  %output112 = fsub double %output102, %fw.0
  %output113 = call double @"div@FF"(double %output109, double %output112)
  %output116 = fsub double 1.000000e+00, %output113
  %output117 = fsub double %oct.1, %output116
  %output120 = fmul double %w.1, %output113
  br label %end107

end107:                                           ; preds = %true106, %end89
  %oct.2 = phi double [ %output117, %true106 ], [ %oct.1, %end89 ]
  %w.2 = phi double [ %output120, %true106 ], [ %w.1, %end89 ]
  %inv121 = load i64, i64* %inv
  store i64 %inv121, i64* %52
  %fold122 = load i64, i64* %fold
  store i64 %fold122, i64* %53
  %accl123 = load i64, i64* %accl
  store i64 %accl123, i64* %54
  %accg124 = load i64, i64* %accg
  store i64 %accg124, i64* %55
  %fsize125 = load double, double* %fsize
  store double %fsize125, double* %56
  %expon126 = load double, double* %expon
  store double %expon126, double* %57
  %per127 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per127, <3 x double>* %58
  %dolw128 = load i64, i64* %dolw
  store i64 %dolw128, i64* %59
  %dogw129 = load i64, i64* %dogw
  store i64 %dogw129, i64* %60
  %disp130 = load double, double* %disp
  store double %disp130, double* %61
  %dfreq131 = load double, double* %dfreq
  store double %dfreq131, double* %62
  %gflow132 = load double, double* %gflow
  store double %gflow132, double* %63
  %noise_pcworleyFB133 = call double @"noise_pcworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %pp, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  %output136 = fsub double %noise_pcworleyFB133, %navg_correct13
  %output140 = fmul double %w.2, %output136
  %output141 = fadd double %out.0, %output140
  %output145 = fmul double %return69, %w.2
  %output147 = fmul double %output145, %w.2
  %output148 = fadd double %wsum.0, %output147
  %output152 = fadd double %output136, %navg_correct13
  %output153 = fmul double 2.000000e+00, %output152
  %output154 = fmul double %w.2, %output153
  %maxoctaves71 = load double, double* %maxoctaves
  %return72 = fcmp olt double %oct.2, %maxoctaves71
  %return73 = zext i1 %return72 to i64
  %return75 = fcmp olt double %output102, 1.000000e+00
  %return76 = zext i1 %return75 to i64
  %return77 = call i64 @"and@III"(i64 %return73, i64 %return76)
  %70 = icmp ne i64 %return77, 0
  br i1 %70, label %body, label %end78

true159:                                          ; preds = %end78
  %return163 = call double @"sqrt@FF"(double %output148)
  %output164 = call double @"div@FF"(double %output141, double %return163)
  br label %end160

end160:                                           ; preds = %true159, %end78
  %out.1 = phi double [ %output164, %true159 ], [ %output141, %end78 ]
  %output169 = fadd double %out.1, %navg_correct13
  store double %output169, double* %65
  store double 9.000000e-01, double* %66
  store double 2.000000e+00, double* %67
  %natten = call double @"natten@FFFF"(double* %65, double* %66, double* %67)
  %return170 = call double @"fit@FFFFFF"(double %output52, double 0.000000e+00, double 1.000000e-01, double 1.000000e+00, double %natten)
  %output171 = fmul double %out.1, %return170
  %output173 = fadd double %output171, %navg_correct13
  %return175 = call double @"clamp@FFFF"(double %output173, double 0.000000e+00, double 1.000000e+00)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end160, %true
  %UnifiedRetVal = phi double [ %noise_pcworleyFB, %true ], [ %return175, %end160 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"noise_cc@FFIIVIVIVVV"(double* %chaos, i64* %inv, i64* %dobias, <3 x double>* %ccbias, i64* %dogain, <3 x double>* %ccgain, i64* %dorng, <3 x double>* %rnglo, <3 x double>* %rnghi, <3 x double>* %amp) #1 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %chaos1 = load double, double* %chaos
  %dobias2 = load i64, i64* %dobias
  %4 = icmp ne i64 %dobias2, 0
  br i1 %4, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store double %chaos1, double* %0
  %ccbias4 = load <3 x double>, <3 x double>* %ccbias
  %return = call double @"getcomp@FVI"(<3 x double> %ccbias4, i64 0)
  %return5 = call double @"clamp@FFFF"(double %return, double 1.000000e-05, double 9.999900e-01)
  store double %return5, double* %1
  %bias = call double @"bias@FFF"(double* %0, double* %1)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %out.0 = phi double [ %bias, %true ], [ %chaos1, %__llvm_entry ]
  %dogain6 = load i64, i64* %dogain
  %5 = icmp ne i64 %dogain6, 0
  br i1 %5, label %true7, label %end8

true7:                                            ; preds = %end
  store double %out.0, double* %2
  %ccgain10 = load <3 x double>, <3 x double>* %ccgain
  %return11 = call double @"getcomp@FVI"(<3 x double> %ccgain10, i64 0)
  %return12 = call double @"clamp@FFFF"(double %return11, double 1.000000e-05, double 9.999900e-01)
  store double %return12, double* %3
  %gain = call double @"gain@FFF"(double* %2, double* %3)
  br label %end8

end8:                                             ; preds = %true7, %end
  %out.1 = phi double [ %gain, %true7 ], [ %out.0, %end ]
  %inv13 = load i64, i64* %inv
  %6 = icmp ne i64 %inv13, 0
  br i1 %6, label %true14, label %end15

true14:                                           ; preds = %end8
  %output = fsub double 1.000000e+00, %out.1
  br label %end15

end15:                                            ; preds = %true14, %end8
  %out.2 = phi double [ %output, %true14 ], [ %out.1, %end8 ]
  %dorng17 = load i64, i64* %dorng
  %7 = icmp ne i64 %dorng17, 0
  br i1 %7, label %true18, label %end19

true18:                                           ; preds = %end15
  %rnglo21 = load <3 x double>, <3 x double>* %rnglo
  %return22 = call double @"getcomp@FVI"(<3 x double> %rnglo21, i64 0)
  %rnghi23 = load <3 x double>, <3 x double>* %rnghi
  %return24 = call double @"getcomp@FVI"(<3 x double> %rnghi23, i64 0)
  %return25 = call double @"fit@FFFFFF"(double %out.2, double 0.000000e+00, double 1.000000e+00, double %return22, double %return24)
  br label %end19

end19:                                            ; preds = %true18, %end15
  %out.3 = phi double [ %return25, %true18 ], [ %out.2, %end15 ]
  %amp27 = load <3 x double>, <3 x double>* %amp
  %return28 = call double @"getcomp@FVI"(<3 x double> %amp27, i64 0)
  %output29 = fmul double %out.3, %return28
  ret double %output29
}

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #0

; Function Attrs: alwaysinline nounwind
define private double @"unified_noise@FSVIIIIFFVIIFFFFFV"(i8** %basis, <3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off) #1 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca double
  %5 = alloca double
  %6 = alloca <3 x double>
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca double
  %10 = alloca double
  %11 = alloca double
  %12 = alloca double
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca <3 x double>
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca double
  %23 = alloca double
  %24 = alloca double
  %25 = alloca double
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca double
  %31 = alloca double
  %32 = alloca <3 x double>
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca double
  %36 = alloca double
  %37 = alloca double
  %38 = alloca double
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca i64
  %42 = alloca i64
  %43 = alloca double
  %44 = alloca double
  %45 = alloca <3 x double>
  %46 = alloca i64
  %47 = alloca i64
  %48 = alloca double
  %49 = alloca double
  %50 = alloca double
  %51 = alloca double
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca <3 x double>
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca i64
  %66 = alloca i64
  %67 = alloca i64
  %68 = alloca i64
  %69 = alloca double
  %70 = alloca double
  %71 = alloca <3 x double>
  %72 = alloca i64
  %73 = alloca i64
  %74 = alloca double
  %75 = alloca double
  %76 = alloca double
  %77 = alloca double
  %78 = alloca i64
  %79 = alloca i64
  %80 = alloca i64
  %81 = alloca i64
  %82 = alloca double
  %83 = alloca double
  %84 = alloca <3 x double>
  %85 = alloca i64
  %86 = alloca i64
  %87 = alloca double
  %88 = alloca double
  %89 = alloca double
  %90 = alloca double
  %91 = alloca i64
  %92 = alloca i64
  %93 = alloca i64
  %94 = alloca i64
  %95 = alloca double
  %96 = alloca double
  %97 = alloca <3 x double>
  %98 = alloca i64
  %99 = alloca i64
  %100 = alloca double
  %101 = alloca double
  %102 = alloca double
  %103 = alloca double
  %104 = alloca i64
  %105 = alloca i64
  %106 = alloca i64
  %107 = alloca i64
  %108 = alloca double
  %109 = alloca double
  %110 = alloca <3 x double>
  %111 = alloca i64
  %112 = alloca i64
  %113 = alloca double
  %114 = alloca double
  %115 = alloca double
  %116 = alloca double
  %117 = alloca i64
  %118 = alloca i64
  %119 = alloca i64
  %120 = alloca i64
  %121 = alloca double
  %122 = alloca double
  %123 = alloca <3 x double>
  %124 = alloca i64
  %125 = alloca i64
  %126 = alloca double
  %127 = alloca double
  %128 = alloca double
  %129 = alloca double
  %130 = alloca i64
  %131 = alloca i64
  %132 = alloca i64
  %133 = alloca i64
  %134 = alloca double
  %135 = alloca double
  %136 = alloca <3 x double>
  %137 = alloca i64
  %138 = alloca i64
  %139 = alloca double
  %140 = alloca double
  %141 = alloca double
  %142 = alloca double
  %143 = alloca i64
  %144 = alloca i64
  %145 = alloca i64
  %146 = alloca i64
  %147 = alloca double
  %148 = alloca double
  %149 = alloca <3 x double>
  %150 = alloca i64
  %151 = alloca i64
  %152 = alloca double
  %153 = alloca double
  %154 = alloca double
  %155 = alloca double
  %156 = alloca i64
  %157 = alloca i64
  %158 = alloca i64
  %159 = alloca i64
  %160 = alloca double
  %161 = alloca double
  %162 = alloca <3 x double>
  %163 = alloca i64
  %164 = alloca i64
  %165 = alloca double
  %166 = alloca double
  %167 = alloca double
  %168 = alloca double
  %169 = alloca i64
  %170 = alloca i64
  %171 = alloca i64
  %172 = alloca i64
  %173 = alloca double
  %174 = alloca double
  %175 = alloca <3 x double>
  %176 = alloca i64
  %177 = alloca i64
  %178 = alloca double
  %179 = alloca double
  %180 = alloca double
  %181 = alloca double
  %182 = alloca i64
  %183 = alloca i64
  %184 = alloca i64
  %185 = alloca i64
  %186 = alloca double
  %187 = alloca double
  %188 = alloca <3 x double>
  %189 = alloca i64
  %190 = alloca i64
  %191 = alloca double
  %192 = alloca double
  %193 = alloca double
  %194 = alloca double
  %195 = alloca i64
  %196 = alloca i64
  %197 = alloca i64
  %198 = alloca i64
  %199 = alloca double
  %200 = alloca double
  %201 = alloca <3 x double>
  %202 = alloca i64
  %203 = alloca i64
  %204 = alloca double
  %205 = alloca double
  %206 = alloca double
  %207 = alloca double
  %208 = alloca i64
  %209 = alloca i64
  %210 = alloca i64
  %211 = alloca i64
  %212 = alloca double
  %213 = alloca double
  %214 = alloca <3 x double>
  %215 = alloca i64
  %216 = alloca i64
  %217 = alloca double
  %218 = alloca double
  %219 = alloca double
  %220 = alloca double
  %221 = alloca i64
  %222 = alloca i64
  %223 = alloca i64
  %224 = alloca i64
  %225 = alloca double
  %226 = alloca double
  %227 = alloca <3 x double>
  %228 = alloca i64
  %229 = alloca i64
  %230 = alloca double
  %231 = alloca double
  %232 = alloca double
  %233 = alloca double
  %234 = alloca i64
  %235 = alloca i64
  %236 = alloca i64
  %237 = alloca i64
  %238 = alloca double
  %239 = alloca double
  %240 = alloca <3 x double>
  %241 = alloca i64
  %242 = alloca i64
  %243 = alloca double
  %244 = alloca double
  %245 = alloca double
  %246 = alloca double
  %247 = alloca i64
  %248 = alloca i64
  %249 = alloca i64
  %250 = alloca i64
  %251 = alloca double
  %252 = alloca double
  %253 = alloca <3 x double>
  %254 = alloca i64
  %255 = alloca i64
  %256 = alloca double
  %257 = alloca double
  %258 = alloca double
  %259 = alloca double
  %260 = alloca i64
  %261 = alloca i64
  %262 = alloca i64
  %263 = alloca i64
  %264 = alloca double
  %265 = alloca double
  %266 = alloca <3 x double>
  %267 = alloca i64
  %268 = alloca i64
  %269 = alloca double
  %270 = alloca double
  %271 = alloca double
  %272 = alloca double
  %273 = alloca i64
  %274 = alloca i64
  %275 = alloca i64
  %276 = alloca i64
  %277 = alloca double
  %278 = alloca double
  %279 = alloca <3 x double>
  %280 = alloca i64
  %281 = alloca i64
  %282 = alloca double
  %283 = alloca double
  %284 = alloca double
  %285 = alloca double
  %286 = alloca i64
  %287 = alloca i64
  %288 = alloca i64
  %289 = alloca i64
  %290 = alloca double
  %291 = alloca double
  %292 = alloca <3 x double>
  %293 = alloca i64
  %294 = alloca i64
  %295 = alloca double
  %296 = alloca double
  %297 = alloca double
  %298 = alloca double
  %299 = alloca i64
  %300 = alloca i64
  %301 = alloca i64
  %302 = alloca i64
  %303 = alloca double
  %304 = alloca double
  %305 = alloca <3 x double>
  %306 = alloca i64
  %307 = alloca i64
  %308 = alloca double
  %309 = alloca double
  %310 = alloca double
  %311 = alloca double
  %312 = alloca i64
  %313 = alloca i64
  %314 = alloca i64
  %315 = alloca i64
  %316 = alloca double
  %317 = alloca double
  %318 = alloca <3 x double>
  %319 = alloca i64
  %320 = alloca i64
  %321 = alloca double
  %322 = alloca double
  %323 = alloca double
  %324 = alloca double
  %basis1 = load i8*, i8** %basis
  %return = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @22, i64 0, i64 0))
  %325 = icmp ne i64 %return, 0
  br i1 %325, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %inv2 = load i64, i64* %inv
  store i64 %inv2, i64* %0
  %fold3 = load i64, i64* %fold
  store i64 %fold3, i64* %1
  %accl4 = load i64, i64* %accl
  store i64 %accl4, i64* %2
  %accg5 = load i64, i64* %accg
  store i64 %accg5, i64* %3
  %fw6 = load double, double* %fw
  store double %fw6, double* %4
  %expon7 = load double, double* %expon
  store double %expon7, double* %5
  %dolw8 = load i64, i64* %dolw
  store i64 %dolw8, i64* %7
  %dogw9 = load i64, i64* %dogw
  store i64 %dogw9, i64* %8
  %disp10 = load double, double* %disp
  store double %disp10, double* %9
  %dfreq11 = load double, double* %dfreq
  store double %dfreq11, double* %10
  %gflow12 = load double, double* %gflow
  store double %gflow12, double* %11
  %noise_sine = call double @"noise_sine@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %0, i64* %1, i64* %2, i64* %3, double* %4, double* %5, <3 x double>* %6, i64* %7, i64* %8, double* %9, double* %10, double* %11, double* %12, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false:                                            ; preds = %__llvm_entry
  %return14 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0))
  %326 = icmp ne i64 %return14, 0
  br i1 %326, label %true15, label %false16

true15:                                           ; preds = %false
  %inv18 = load i64, i64* %inv
  store i64 %inv18, i64* %13
  %fold19 = load i64, i64* %fold
  store i64 %fold19, i64* %14
  %accl20 = load i64, i64* %accl
  store i64 %accl20, i64* %15
  %accg21 = load i64, i64* %accg
  store i64 %accg21, i64* %16
  %fw22 = load double, double* %fw
  store double %fw22, double* %17
  %expon23 = load double, double* %expon
  store double %expon23, double* %18
  %dolw24 = load i64, i64* %dolw
  store i64 %dolw24, i64* %20
  %dogw25 = load i64, i64* %dogw
  store i64 %dogw25, i64* %21
  %disp26 = load double, double* %disp
  store double %disp26, double* %22
  %dfreq27 = load double, double* %dfreq
  store double %dfreq27, double* %23
  %gflow28 = load double, double* %gflow
  store double %gflow28, double* %24
  %noise_value_fast = call double @"noise_value_fast@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %13, i64* %14, i64* %15, i64* %16, double* %17, double* %18, <3 x double>* %19, i64* %20, i64* %21, double* %22, double* %23, double* %24, double* %25, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false16:                                          ; preds = %false
  %return30 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i64 0, i64 0))
  %327 = icmp ne i64 %return30, 0
  br i1 %327, label %true31, label %false32

true31:                                           ; preds = %false16
  %inv34 = load i64, i64* %inv
  store i64 %inv34, i64* %26
  %fold35 = load i64, i64* %fold
  store i64 %fold35, i64* %27
  %accl36 = load i64, i64* %accl
  store i64 %accl36, i64* %28
  %accg37 = load i64, i64* %accg
  store i64 %accg37, i64* %29
  %fw38 = load double, double* %fw
  store double %fw38, double* %30
  %expon39 = load double, double* %expon
  store double %expon39, double* %31
  %per40 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per40, <3 x double>* %32
  %dolw41 = load i64, i64* %dolw
  store i64 %dolw41, i64* %33
  %dogw42 = load i64, i64* %dogw
  store i64 %dogw42, i64* %34
  %disp43 = load double, double* %disp
  store double %disp43, double* %35
  %dfreq44 = load double, double* %dfreq
  store double %dfreq44, double* %36
  %gflow45 = load double, double* %gflow
  store double %gflow45, double* %37
  %noise_pvalue_fast = call double @"noise_pvalue_fast@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %26, i64* %27, i64* %28, i64* %29, double* %30, double* %31, <3 x double>* %32, i64* %33, i64* %34, double* %35, double* %36, double* %37, double* %38, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false32:                                          ; preds = %false16
  %return47 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0))
  %328 = icmp ne i64 %return47, 0
  br i1 %328, label %true48, label %false49

true48:                                           ; preds = %false32
  %inv51 = load i64, i64* %inv
  store i64 %inv51, i64* %39
  %fold52 = load i64, i64* %fold
  store i64 %fold52, i64* %40
  %accl53 = load i64, i64* %accl
  store i64 %accl53, i64* %41
  %accg54 = load i64, i64* %accg
  store i64 %accg54, i64* %42
  %fw55 = load double, double* %fw
  store double %fw55, double* %43
  %expon56 = load double, double* %expon
  store double %expon56, double* %44
  %dolw57 = load i64, i64* %dolw
  store i64 %dolw57, i64* %46
  %dogw58 = load i64, i64* %dogw
  store i64 %dogw58, i64* %47
  %disp59 = load double, double* %disp
  store double %disp59, double* %48
  %dfreq60 = load double, double* %dfreq
  store double %dfreq60, double* %49
  %gflow61 = load double, double* %gflow
  store double %gflow61, double* %50
  %noise_sparse = call double @"noise_sparse@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %39, i64* %40, i64* %41, i64* %42, double* %43, double* %44, <3 x double>* %45, i64* %46, i64* %47, double* %48, double* %49, double* %50, double* %51, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false49:                                          ; preds = %false32
  %return63 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0))
  %329 = icmp ne i64 %return63, 0
  br i1 %329, label %true64, label %false65

true64:                                           ; preds = %false49
  %inv67 = load i64, i64* %inv
  store i64 %inv67, i64* %52
  %fold68 = load i64, i64* %fold
  store i64 %fold68, i64* %53
  %accl69 = load i64, i64* %accl
  store i64 %accl69, i64* %54
  %accg70 = load i64, i64* %accg
  store i64 %accg70, i64* %55
  %fw71 = load double, double* %fw
  store double %fw71, double* %56
  %expon72 = load double, double* %expon
  store double %expon72, double* %57
  %per73 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per73, <3 x double>* %58
  %dolw74 = load i64, i64* %dolw
  store i64 %dolw74, i64* %59
  %dogw75 = load i64, i64* %dogw
  store i64 %dogw75, i64* %60
  %disp76 = load double, double* %disp
  store double %disp76, double* %61
  %dfreq77 = load double, double* %dfreq
  store double %dfreq77, double* %62
  %gflow78 = load double, double* %gflow
  store double %gflow78, double* %63
  %noise_psparse = call double @"noise_psparse@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %52, i64* %53, i64* %54, i64* %55, double* %56, double* %57, <3 x double>* %58, i64* %59, i64* %60, double* %61, double* %62, double* %63, double* %64, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false65:                                          ; preds = %false49
  %return80 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @9, i64 0, i64 0))
  %330 = icmp ne i64 %return80, 0
  br i1 %330, label %true81, label %false82

true81:                                           ; preds = %false65
  %inv84 = load i64, i64* %inv
  store i64 %inv84, i64* %65
  %fold85 = load i64, i64* %fold
  store i64 %fold85, i64* %66
  %accl86 = load i64, i64* %accl
  store i64 %accl86, i64* %67
  %accg87 = load i64, i64* %accg
  store i64 %accg87, i64* %68
  %fw88 = load double, double* %fw
  store double %fw88, double* %69
  %expon89 = load double, double* %expon
  store double %expon89, double* %70
  %dolw90 = load i64, i64* %dolw
  store i64 %dolw90, i64* %72
  %dogw91 = load i64, i64* %dogw
  store i64 %dogw91, i64* %73
  %disp92 = load double, double* %disp
  store double %disp92, double* %74
  %dfreq93 = load double, double* %dfreq
  store double %dfreq93, double* %75
  %gflow94 = load double, double* %gflow
  store double %gflow94, double* %76
  %noise_alligator = call double @"noise_alligator@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %65, i64* %66, i64* %67, i64* %68, double* %69, double* %70, <3 x double>* %71, i64* %72, i64* %73, double* %74, double* %75, double* %76, double* %77, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false82:                                          ; preds = %false65
  %return96 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @10, i64 0, i64 0))
  %331 = icmp ne i64 %return96, 0
  br i1 %331, label %true97, label %false98

true97:                                           ; preds = %false82
  %inv100 = load i64, i64* %inv
  store i64 %inv100, i64* %78
  %fold101 = load i64, i64* %fold
  store i64 %fold101, i64* %79
  %accl102 = load i64, i64* %accl
  store i64 %accl102, i64* %80
  %accg103 = load i64, i64* %accg
  store i64 %accg103, i64* %81
  %fw104 = load double, double* %fw
  store double %fw104, double* %82
  %expon105 = load double, double* %expon
  store double %expon105, double* %83
  %per106 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per106, <3 x double>* %84
  %dolw107 = load i64, i64* %dolw
  store i64 %dolw107, i64* %85
  %dogw108 = load i64, i64* %dogw
  store i64 %dogw108, i64* %86
  %disp109 = load double, double* %disp
  store double %disp109, double* %87
  %dfreq110 = load double, double* %dfreq
  store double %dfreq110, double* %88
  %gflow111 = load double, double* %gflow
  store double %gflow111, double* %89
  %noise_palligator = call double @"noise_palligator@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %78, i64* %79, i64* %80, i64* %81, double* %82, double* %83, <3 x double>* %84, i64* %85, i64* %86, double* %87, double* %88, double* %89, double* %90, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false98:                                          ; preds = %false82
  %return113 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %332 = icmp ne i64 %return113, 0
  br i1 %332, label %true114, label %false115

true114:                                          ; preds = %false98
  %inv117 = load i64, i64* %inv
  store i64 %inv117, i64* %91
  %fold118 = load i64, i64* %fold
  store i64 %fold118, i64* %92
  %accl119 = load i64, i64* %accl
  store i64 %accl119, i64* %93
  %accg120 = load i64, i64* %accg
  store i64 %accg120, i64* %94
  %fw121 = load double, double* %fw
  store double %fw121, double* %95
  %expon122 = load double, double* %expon
  store double %expon122, double* %96
  %dolw123 = load i64, i64* %dolw
  store i64 %dolw123, i64* %98
  %dogw124 = load i64, i64* %dogw
  store i64 %dogw124, i64* %99
  %disp125 = load double, double* %disp
  store double %disp125, double* %100
  %dfreq126 = load double, double* %dfreq
  store double %dfreq126, double* %101
  %gflow127 = load double, double* %gflow
  store double %gflow127, double* %102
  %noise_perlin = call double @"noise_perlin@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %91, i64* %92, i64* %93, i64* %94, double* %95, double* %96, <3 x double>* %97, i64* %98, i64* %99, double* %100, double* %101, double* %102, double* %103, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false115:                                         ; preds = %false98
  %return129 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  %333 = icmp ne i64 %return129, 0
  br i1 %333, label %true130, label %false131

true130:                                          ; preds = %false115
  %inv133 = load i64, i64* %inv
  store i64 %inv133, i64* %104
  %fold134 = load i64, i64* %fold
  store i64 %fold134, i64* %105
  %accl135 = load i64, i64* %accl
  store i64 %accl135, i64* %106
  %accg136 = load i64, i64* %accg
  store i64 %accg136, i64* %107
  %fw137 = load double, double* %fw
  store double %fw137, double* %108
  %expon138 = load double, double* %expon
  store double %expon138, double* %109
  %per139 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per139, <3 x double>* %110
  %dolw140 = load i64, i64* %dolw
  store i64 %dolw140, i64* %111
  %dogw141 = load i64, i64* %dogw
  store i64 %dogw141, i64* %112
  %disp142 = load double, double* %disp
  store double %disp142, double* %113
  %dfreq143 = load double, double* %dfreq
  store double %dfreq143, double* %114
  %gflow144 = load double, double* %gflow
  store double %gflow144, double* %115
  %noise_pperlin = call double @"noise_pperlin@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %104, i64* %105, i64* %106, i64* %107, double* %108, double* %109, <3 x double>* %110, i64* %111, i64* %112, double* %113, double* %114, double* %115, double* %116, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false131:                                         ; preds = %false115
  %return146 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0))
  %334 = icmp ne i64 %return146, 0
  br i1 %334, label %true147, label %false148

true147:                                          ; preds = %false131
  %inv150 = load i64, i64* %inv
  store i64 %inv150, i64* %117
  %fold151 = load i64, i64* %fold
  store i64 %fold151, i64* %118
  %accl152 = load i64, i64* %accl
  store i64 %accl152, i64* %119
  %accg153 = load i64, i64* %accg
  store i64 %accg153, i64* %120
  %fw154 = load double, double* %fw
  store double %fw154, double* %121
  %expon155 = load double, double* %expon
  store double %expon155, double* %122
  %dolw156 = load i64, i64* %dolw
  store i64 %dolw156, i64* %124
  %dogw157 = load i64, i64* %dogw
  store i64 %dogw157, i64* %125
  %disp158 = load double, double* %disp
  store double %disp158, double* %126
  %dfreq159 = load double, double* %dfreq
  store double %dfreq159, double* %127
  %gflow160 = load double, double* %gflow
  store double %gflow160, double* %128
  %flow161 = load double, double* %flow
  store double %flow161, double* %129
  %noise_flow = call double @"noise_flow@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %117, i64* %118, i64* %119, i64* %120, double* %121, double* %122, <3 x double>* %123, i64* %124, i64* %125, double* %126, double* %127, double* %128, double* %129, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false148:                                         ; preds = %false131
  %return163 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @12, i64 0, i64 0))
  %335 = icmp ne i64 %return163, 0
  br i1 %335, label %true164, label %false165

true164:                                          ; preds = %false148
  %inv167 = load i64, i64* %inv
  store i64 %inv167, i64* %130
  %fold168 = load i64, i64* %fold
  store i64 %fold168, i64* %131
  %accl169 = load i64, i64* %accl
  store i64 %accl169, i64* %132
  %accg170 = load i64, i64* %accg
  store i64 %accg170, i64* %133
  %fw171 = load double, double* %fw
  store double %fw171, double* %134
  %expon172 = load double, double* %expon
  store double %expon172, double* %135
  %per173 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per173, <3 x double>* %136
  %dolw174 = load i64, i64* %dolw
  store i64 %dolw174, i64* %137
  %dogw175 = load i64, i64* %dogw
  store i64 %dogw175, i64* %138
  %disp176 = load double, double* %disp
  store double %disp176, double* %139
  %dfreq177 = load double, double* %dfreq
  store double %dfreq177, double* %140
  %gflow178 = load double, double* %gflow
  store double %gflow178, double* %141
  %flow179 = load double, double* %flow
  store double %flow179, double* %142
  %noise_pflow = call double @"noise_pflow@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %130, i64* %131, i64* %132, i64* %133, double* %134, double* %135, <3 x double>* %136, i64* %137, i64* %138, double* %139, double* %140, double* %141, double* %142, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false165:                                         ; preds = %false148
  %return181 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0))
  %336 = icmp ne i64 %return181, 0
  br i1 %336, label %true182, label %false183

true182:                                          ; preds = %false165
  %inv185 = load i64, i64* %inv
  store i64 %inv185, i64* %143
  %fold186 = load i64, i64* %fold
  store i64 %fold186, i64* %144
  %accl187 = load i64, i64* %accl
  store i64 %accl187, i64* %145
  %accg188 = load i64, i64* %accg
  store i64 %accg188, i64* %146
  %fw189 = load double, double* %fw
  store double %fw189, double* %147
  %expon190 = load double, double* %expon
  store double %expon190, double* %148
  %dolw191 = load i64, i64* %dolw
  store i64 %dolw191, i64* %150
  %dogw192 = load i64, i64* %dogw
  store i64 %dogw192, i64* %151
  %disp193 = load double, double* %disp
  store double %disp193, double* %152
  %dfreq194 = load double, double* %dfreq
  store double %dfreq194, double* %153
  %gflow195 = load double, double* %gflow
  store double %gflow195, double* %154
  %noise_simplex = call double @"noise_simplex@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %143, i64* %144, i64* %145, i64* %146, double* %147, double* %148, <3 x double>* %149, i64* %150, i64* %151, double* %152, double* %153, double* %154, double* %155, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false183:                                         ; preds = %false165
  %return197 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0))
  %337 = icmp ne i64 %return197, 0
  br i1 %337, label %true198, label %false199

true198:                                          ; preds = %false183
  %inv201 = load i64, i64* %inv
  store i64 %inv201, i64* %156
  %fold202 = load i64, i64* %fold
  store i64 %fold202, i64* %157
  %accl203 = load i64, i64* %accl
  store i64 %accl203, i64* %158
  %accg204 = load i64, i64* %accg
  store i64 %accg204, i64* %159
  %fw205 = load double, double* %fw
  store double %fw205, double* %160
  %expon206 = load double, double* %expon
  store double %expon206, double* %161
  %per207 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per207, <3 x double>* %162
  %dolw208 = load i64, i64* %dolw
  store i64 %dolw208, i64* %163
  %dogw209 = load i64, i64* %dogw
  store i64 %dogw209, i64* %164
  %disp210 = load double, double* %disp
  store double %disp210, double* %165
  %dfreq211 = load double, double* %dfreq
  store double %dfreq211, double* %166
  %gflow212 = load double, double* %gflow
  store double %gflow212, double* %167
  %noise_psimplex = call double @"noise_psimplex@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %156, i64* %157, i64* %158, i64* %159, double* %160, double* %161, <3 x double>* %162, i64* %163, i64* %164, double* %165, double* %166, double* %167, double* %168, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false199:                                         ; preds = %false183
  %return214 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @23, i64 0, i64 0))
  %338 = icmp ne i64 %return214, 0
  br i1 %338, label %true215, label %false216

true215:                                          ; preds = %false199
  %inv218 = load i64, i64* %inv
  store i64 %inv218, i64* %169
  %fold219 = load i64, i64* %fold
  store i64 %fold219, i64* %170
  %accl220 = load i64, i64* %accl
  store i64 %accl220, i64* %171
  %accg221 = load i64, i64* %accg
  store i64 %accg221, i64* %172
  %fw222 = load double, double* %fw
  store double %fw222, double* %173
  %expon223 = load double, double* %expon
  store double %expon223, double* %174
  %dolw224 = load i64, i64* %dolw
  store i64 %dolw224, i64* %176
  %dogw225 = load i64, i64* %dogw
  store i64 %dogw225, i64* %177
  %disp226 = load double, double* %disp
  store double %disp226, double* %178
  %dfreq227 = load double, double* %dfreq
  store double %dfreq227, double* %179
  %gflow228 = load double, double* %gflow
  store double %gflow228, double* %180
  %noise_worleyFA = call double @"noise_worleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %169, i64* %170, i64* %171, i64* %172, double* %173, double* %174, <3 x double>* %175, i64* %176, i64* %177, double* %178, double* %179, double* %180, double* %181, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false216:                                         ; preds = %false199
  %return230 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @24, i64 0, i64 0))
  %339 = icmp ne i64 %return230, 0
  br i1 %339, label %true231, label %false232

true231:                                          ; preds = %false216
  %inv234 = load i64, i64* %inv
  store i64 %inv234, i64* %182
  %fold235 = load i64, i64* %fold
  store i64 %fold235, i64* %183
  %accl236 = load i64, i64* %accl
  store i64 %accl236, i64* %184
  %accg237 = load i64, i64* %accg
  store i64 %accg237, i64* %185
  %fw238 = load double, double* %fw
  store double %fw238, double* %186
  %expon239 = load double, double* %expon
  store double %expon239, double* %187
  %dolw240 = load i64, i64* %dolw
  store i64 %dolw240, i64* %189
  %dogw241 = load i64, i64* %dogw
  store i64 %dogw241, i64* %190
  %disp242 = load double, double* %disp
  store double %disp242, double* %191
  %dfreq243 = load double, double* %dfreq
  store double %dfreq243, double* %192
  %gflow244 = load double, double* %gflow
  store double %gflow244, double* %193
  %noise_worleyFB = call double @"noise_worleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %182, i64* %183, i64* %184, i64* %185, double* %186, double* %187, <3 x double>* %188, i64* %189, i64* %190, double* %191, double* %192, double* %193, double* %194, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false232:                                         ; preds = %false216
  %return246 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @25, i64 0, i64 0))
  %340 = icmp ne i64 %return246, 0
  br i1 %340, label %true247, label %false248

true247:                                          ; preds = %false232
  %inv250 = load i64, i64* %inv
  store i64 %inv250, i64* %195
  %fold251 = load i64, i64* %fold
  store i64 %fold251, i64* %196
  %accl252 = load i64, i64* %accl
  store i64 %accl252, i64* %197
  %accg253 = load i64, i64* %accg
  store i64 %accg253, i64* %198
  %fw254 = load double, double* %fw
  store double %fw254, double* %199
  %expon255 = load double, double* %expon
  store double %expon255, double* %200
  %dolw256 = load i64, i64* %dolw
  store i64 %dolw256, i64* %202
  %dogw257 = load i64, i64* %dogw
  store i64 %dogw257, i64* %203
  %disp258 = load double, double* %disp
  store double %disp258, double* %204
  %dfreq259 = load double, double* %dfreq
  store double %dfreq259, double* %205
  %gflow260 = load double, double* %gflow
  store double %gflow260, double* %206
  %noise_mworleyFA = call double @"noise_mworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %195, i64* %196, i64* %197, i64* %198, double* %199, double* %200, <3 x double>* %201, i64* %202, i64* %203, double* %204, double* %205, double* %206, double* %207, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false248:                                         ; preds = %false232
  %return262 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @26, i64 0, i64 0))
  %341 = icmp ne i64 %return262, 0
  br i1 %341, label %true263, label %false264

true263:                                          ; preds = %false248
  %inv266 = load i64, i64* %inv
  store i64 %inv266, i64* %208
  %fold267 = load i64, i64* %fold
  store i64 %fold267, i64* %209
  %accl268 = load i64, i64* %accl
  store i64 %accl268, i64* %210
  %accg269 = load i64, i64* %accg
  store i64 %accg269, i64* %211
  %fw270 = load double, double* %fw
  store double %fw270, double* %212
  %expon271 = load double, double* %expon
  store double %expon271, double* %213
  %dolw272 = load i64, i64* %dolw
  store i64 %dolw272, i64* %215
  %dogw273 = load i64, i64* %dogw
  store i64 %dogw273, i64* %216
  %disp274 = load double, double* %disp
  store double %disp274, double* %217
  %dfreq275 = load double, double* %dfreq
  store double %dfreq275, double* %218
  %gflow276 = load double, double* %gflow
  store double %gflow276, double* %219
  %noise_mworleyFB = call double @"noise_mworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %208, i64* %209, i64* %210, i64* %211, double* %212, double* %213, <3 x double>* %214, i64* %215, i64* %216, double* %217, double* %218, double* %219, double* %220, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false264:                                         ; preds = %false248
  %return278 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @27, i64 0, i64 0))
  %342 = icmp ne i64 %return278, 0
  br i1 %342, label %true279, label %false280

true279:                                          ; preds = %false264
  %inv282 = load i64, i64* %inv
  store i64 %inv282, i64* %221
  %fold283 = load i64, i64* %fold
  store i64 %fold283, i64* %222
  %accl284 = load i64, i64* %accl
  store i64 %accl284, i64* %223
  %accg285 = load i64, i64* %accg
  store i64 %accg285, i64* %224
  %fw286 = load double, double* %fw
  store double %fw286, double* %225
  %expon287 = load double, double* %expon
  store double %expon287, double* %226
  %dolw288 = load i64, i64* %dolw
  store i64 %dolw288, i64* %228
  %dogw289 = load i64, i64* %dogw
  store i64 %dogw289, i64* %229
  %disp290 = load double, double* %disp
  store double %disp290, double* %230
  %dfreq291 = load double, double* %dfreq
  store double %dfreq291, double* %231
  %gflow292 = load double, double* %gflow
  store double %gflow292, double* %232
  %noise_cworleyFA = call double @"noise_cworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %221, i64* %222, i64* %223, i64* %224, double* %225, double* %226, <3 x double>* %227, i64* %228, i64* %229, double* %230, double* %231, double* %232, double* %233, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false280:                                         ; preds = %false264
  %return294 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @28, i64 0, i64 0))
  %343 = icmp ne i64 %return294, 0
  br i1 %343, label %true295, label %false296

true295:                                          ; preds = %false280
  %inv298 = load i64, i64* %inv
  store i64 %inv298, i64* %234
  %fold299 = load i64, i64* %fold
  store i64 %fold299, i64* %235
  %accl300 = load i64, i64* %accl
  store i64 %accl300, i64* %236
  %accg301 = load i64, i64* %accg
  store i64 %accg301, i64* %237
  %fw302 = load double, double* %fw
  store double %fw302, double* %238
  %expon303 = load double, double* %expon
  store double %expon303, double* %239
  %dolw304 = load i64, i64* %dolw
  store i64 %dolw304, i64* %241
  %dogw305 = load i64, i64* %dogw
  store i64 %dogw305, i64* %242
  %disp306 = load double, double* %disp
  store double %disp306, double* %243
  %dfreq307 = load double, double* %dfreq
  store double %dfreq307, double* %244
  %gflow308 = load double, double* %gflow
  store double %gflow308, double* %245
  %noise_cworleyFB = call double @"noise_cworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %234, i64* %235, i64* %236, i64* %237, double* %238, double* %239, <3 x double>* %240, i64* %241, i64* %242, double* %243, double* %244, double* %245, double* %246, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false296:                                         ; preds = %false280
  %return310 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @14, i64 0, i64 0))
  %344 = icmp ne i64 %return310, 0
  br i1 %344, label %true311, label %false312

true311:                                          ; preds = %false296
  %inv314 = load i64, i64* %inv
  store i64 %inv314, i64* %247
  %fold315 = load i64, i64* %fold
  store i64 %fold315, i64* %248
  %accl316 = load i64, i64* %accl
  store i64 %accl316, i64* %249
  %accg317 = load i64, i64* %accg
  store i64 %accg317, i64* %250
  %fw318 = load double, double* %fw
  store double %fw318, double* %251
  %expon319 = load double, double* %expon
  store double %expon319, double* %252
  %per320 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per320, <3 x double>* %253
  %dolw321 = load i64, i64* %dolw
  store i64 %dolw321, i64* %254
  %dogw322 = load i64, i64* %dogw
  store i64 %dogw322, i64* %255
  %disp323 = load double, double* %disp
  store double %disp323, double* %256
  %dfreq324 = load double, double* %dfreq
  store double %dfreq324, double* %257
  %gflow325 = load double, double* %gflow
  store double %gflow325, double* %258
  %noise_pworleyFA = call double @"noise_pworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %247, i64* %248, i64* %249, i64* %250, double* %251, double* %252, <3 x double>* %253, i64* %254, i64* %255, double* %256, double* %257, double* %258, double* %259, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false312:                                         ; preds = %false296
  %return327 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @15, i64 0, i64 0))
  %345 = icmp ne i64 %return327, 0
  br i1 %345, label %true328, label %false329

true328:                                          ; preds = %false312
  %inv331 = load i64, i64* %inv
  store i64 %inv331, i64* %260
  %fold332 = load i64, i64* %fold
  store i64 %fold332, i64* %261
  %accl333 = load i64, i64* %accl
  store i64 %accl333, i64* %262
  %accg334 = load i64, i64* %accg
  store i64 %accg334, i64* %263
  %fw335 = load double, double* %fw
  store double %fw335, double* %264
  %expon336 = load double, double* %expon
  store double %expon336, double* %265
  %per337 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per337, <3 x double>* %266
  %dolw338 = load i64, i64* %dolw
  store i64 %dolw338, i64* %267
  %dogw339 = load i64, i64* %dogw
  store i64 %dogw339, i64* %268
  %disp340 = load double, double* %disp
  store double %disp340, double* %269
  %dfreq341 = load double, double* %dfreq
  store double %dfreq341, double* %270
  %gflow342 = load double, double* %gflow
  store double %gflow342, double* %271
  %noise_pworleyFB = call double @"noise_pworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %260, i64* %261, i64* %262, i64* %263, double* %264, double* %265, <3 x double>* %266, i64* %267, i64* %268, double* %269, double* %270, double* %271, double* %272, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false329:                                         ; preds = %false312
  %return344 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @17, i64 0, i64 0))
  %346 = icmp ne i64 %return344, 0
  br i1 %346, label %true345, label %false346

true345:                                          ; preds = %false329
  %inv348 = load i64, i64* %inv
  store i64 %inv348, i64* %273
  %fold349 = load i64, i64* %fold
  store i64 %fold349, i64* %274
  %accl350 = load i64, i64* %accl
  store i64 %accl350, i64* %275
  %accg351 = load i64, i64* %accg
  store i64 %accg351, i64* %276
  %fw352 = load double, double* %fw
  store double %fw352, double* %277
  %expon353 = load double, double* %expon
  store double %expon353, double* %278
  %per354 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per354, <3 x double>* %279
  %dolw355 = load i64, i64* %dolw
  store i64 %dolw355, i64* %280
  %dogw356 = load i64, i64* %dogw
  store i64 %dogw356, i64* %281
  %disp357 = load double, double* %disp
  store double %disp357, double* %282
  %dfreq358 = load double, double* %dfreq
  store double %dfreq358, double* %283
  %gflow359 = load double, double* %gflow
  store double %gflow359, double* %284
  %noise_pmworleyFA = call double @"noise_pmworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %273, i64* %274, i64* %275, i64* %276, double* %277, double* %278, <3 x double>* %279, i64* %280, i64* %281, double* %282, double* %283, double* %284, double* %285, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false346:                                         ; preds = %false329
  %return361 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @18, i64 0, i64 0))
  %347 = icmp ne i64 %return361, 0
  br i1 %347, label %true362, label %false363

true362:                                          ; preds = %false346
  %inv365 = load i64, i64* %inv
  store i64 %inv365, i64* %286
  %fold366 = load i64, i64* %fold
  store i64 %fold366, i64* %287
  %accl367 = load i64, i64* %accl
  store i64 %accl367, i64* %288
  %accg368 = load i64, i64* %accg
  store i64 %accg368, i64* %289
  %fw369 = load double, double* %fw
  store double %fw369, double* %290
  %expon370 = load double, double* %expon
  store double %expon370, double* %291
  %per371 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per371, <3 x double>* %292
  %dolw372 = load i64, i64* %dolw
  store i64 %dolw372, i64* %293
  %dogw373 = load i64, i64* %dogw
  store i64 %dogw373, i64* %294
  %disp374 = load double, double* %disp
  store double %disp374, double* %295
  %dfreq375 = load double, double* %dfreq
  store double %dfreq375, double* %296
  %gflow376 = load double, double* %gflow
  store double %gflow376, double* %297
  %noise_pmworleyFB = call double @"noise_pmworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %286, i64* %287, i64* %288, i64* %289, double* %290, double* %291, <3 x double>* %292, i64* %293, i64* %294, double* %295, double* %296, double* %297, double* %298, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false363:                                         ; preds = %false346
  %return378 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @20, i64 0, i64 0))
  %348 = icmp ne i64 %return378, 0
  br i1 %348, label %true379, label %false380

true379:                                          ; preds = %false363
  %inv382 = load i64, i64* %inv
  store i64 %inv382, i64* %299
  %fold383 = load i64, i64* %fold
  store i64 %fold383, i64* %300
  %accl384 = load i64, i64* %accl
  store i64 %accl384, i64* %301
  %accg385 = load i64, i64* %accg
  store i64 %accg385, i64* %302
  %fw386 = load double, double* %fw
  store double %fw386, double* %303
  %expon387 = load double, double* %expon
  store double %expon387, double* %304
  %per388 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per388, <3 x double>* %305
  %dolw389 = load i64, i64* %dolw
  store i64 %dolw389, i64* %306
  %dogw390 = load i64, i64* %dogw
  store i64 %dogw390, i64* %307
  %disp391 = load double, double* %disp
  store double %disp391, double* %308
  %dfreq392 = load double, double* %dfreq
  store double %dfreq392, double* %309
  %gflow393 = load double, double* %gflow
  store double %gflow393, double* %310
  %noise_pcworleyFA = call double @"noise_pcworleyFA@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %299, i64* %300, i64* %301, i64* %302, double* %303, double* %304, <3 x double>* %305, i64* %306, i64* %307, double* %308, double* %309, double* %310, double* %311, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

false380:                                         ; preds = %false363
  %return395 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @21, i64 0, i64 0))
  %349 = icmp ne i64 %return395, 0
  br i1 %349, label %true396, label %end397

true396:                                          ; preds = %false380
  %inv398 = load i64, i64* %inv
  store i64 %inv398, i64* %312
  %fold399 = load i64, i64* %fold
  store i64 %fold399, i64* %313
  %accl400 = load i64, i64* %accl
  store i64 %accl400, i64* %314
  %accg401 = load i64, i64* %accg
  store i64 %accg401, i64* %315
  %fw402 = load double, double* %fw
  store double %fw402, double* %316
  %expon403 = load double, double* %expon
  store double %expon403, double* %317
  %per404 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per404, <3 x double>* %318
  %dolw405 = load i64, i64* %dolw
  store i64 %dolw405, i64* %319
  %dogw406 = load i64, i64* %dogw
  store i64 %dogw406, i64* %320
  %disp407 = load double, double* %disp
  store double %disp407, double* %321
  %dfreq408 = load double, double* %dfreq
  store double %dfreq408, double* %322
  %gflow409 = load double, double* %gflow
  store double %gflow409, double* %323
  %noise_pcworleyFB = call double @"noise_pcworleyFB@FVIIIIFFVIIFFFFFV"(<3 x double>* %p, i64* %312, i64* %313, i64* %314, i64* %315, double* %316, double* %317, <3 x double>* %318, i64* %319, i64* %320, double* %321, double* %322, double* %323, double* %324, double* %x_avg, <3 x double>* %x_off)
  br label %UnifiedReturnBlock

end397:                                           ; preds = %false380
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end397, %true396, %true379, %true362, %true345, %true328, %true311, %true295, %true279, %true263, %true247, %true231, %true215, %true198, %true182, %true164, %true147, %true130, %true114, %true97, %true81, %true64, %true48, %true31, %true15, %true
  %UnifiedRetVal = phi double [ %noise_sine, %true ], [ %noise_value_fast, %true15 ], [ %noise_pvalue_fast, %true31 ], [ %noise_sparse, %true48 ], [ %noise_psparse, %true64 ], [ %noise_alligator, %true81 ], [ %noise_palligator, %true97 ], [ %noise_perlin, %true114 ], [ %noise_pperlin, %true130 ], [ %noise_flow, %true147 ], [ %noise_pflow, %true164 ], [ %noise_simplex, %true182 ], [ %noise_psimplex, %true198 ], [ %noise_worleyFA, %true215 ], [ %noise_worleyFB, %true231 ], [ %noise_mworleyFA, %true247 ], [ %noise_mworleyFB, %true263 ], [ %noise_cworleyFA, %true279 ], [ %noise_cworleyFB, %true295 ], [ %noise_pworleyFA, %true311 ], [ %noise_pworleyFB, %true328 ], [ %noise_pmworleyFA, %true345 ], [ %noise_pmworleyFB, %true362 ], [ %noise_pcworleyFA, %true379 ], [ %noise_pcworleyFB, %true396 ], [ 1.000000e+00, %end397 ]
  ret double %UnifiedRetVal
}

; Function Attrs: alwaysinline nounwind
define private double @"unified_fractal_noise@FSSVIIIIFFVIIFFFFFVFFFF"(i8** %fractal, i8** %basis, <3 x double>* %p, i64* %inv, i64* %fold, i64* %accl, i64* %accg, double* %fw, double* %expon, <3 x double>* %per, i64* %dolw, i64* %dogw, double* %disp, double* %dfreq, double* %gflow, double* %flow, double* %x_avg, <3 x double>* %x_off, double* %maxoctaves, double* %lacunarity, double* %gain, double* %x_oct) #1 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca double
  %5 = alloca double
  %6 = alloca <3 x double>
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca double
  %10 = alloca double
  %11 = alloca double
  %12 = alloca double
  %13 = alloca double
  %14 = alloca double
  %15 = alloca double
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca double
  %21 = alloca double
  %22 = alloca <3 x double>
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca double
  %26 = alloca double
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca double
  %31 = alloca double
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca i64
  %36 = alloca double
  %37 = alloca double
  %38 = alloca <3 x double>
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %44 = alloca double
  %45 = alloca double
  %46 = alloca double
  %47 = alloca double
  %48 = alloca i64
  %49 = alloca i64
  %50 = alloca i64
  %51 = alloca i64
  %52 = alloca double
  %53 = alloca double
  %54 = alloca <3 x double>
  %55 = alloca i64
  %56 = alloca i64
  %57 = alloca double
  %58 = alloca double
  %59 = alloca double
  %60 = alloca double
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca i64
  %65 = alloca i64
  %66 = alloca i64
  %67 = alloca i64
  %68 = alloca double
  %69 = alloca double
  %70 = alloca <3 x double>
  %71 = alloca i64
  %72 = alloca i64
  %73 = alloca double
  %74 = alloca double
  %75 = alloca double
  %76 = alloca double
  %77 = alloca double
  %78 = alloca double
  %79 = alloca double
  %80 = alloca i64
  %81 = alloca i64
  %82 = alloca i64
  %83 = alloca i64
  %84 = alloca double
  %85 = alloca double
  %86 = alloca <3 x double>
  %87 = alloca i64
  %88 = alloca i64
  %89 = alloca double
  %90 = alloca double
  %91 = alloca double
  %92 = alloca double
  %93 = alloca double
  %94 = alloca double
  %95 = alloca double
  %96 = alloca i64
  %97 = alloca i64
  %98 = alloca i64
  %99 = alloca i64
  %100 = alloca double
  %101 = alloca double
  %102 = alloca <3 x double>
  %103 = alloca i64
  %104 = alloca i64
  %105 = alloca double
  %106 = alloca double
  %107 = alloca double
  %108 = alloca double
  %109 = alloca double
  %110 = alloca double
  %111 = alloca double
  %112 = alloca i64
  %113 = alloca i64
  %114 = alloca i64
  %115 = alloca i64
  %116 = alloca double
  %117 = alloca double
  %118 = alloca <3 x double>
  %119 = alloca i64
  %120 = alloca i64
  %121 = alloca double
  %122 = alloca double
  %123 = alloca double
  %124 = alloca double
  %125 = alloca double
  %126 = alloca double
  %127 = alloca double
  %128 = alloca i64
  %129 = alloca i64
  %130 = alloca i64
  %131 = alloca i64
  %132 = alloca double
  %133 = alloca double
  %134 = alloca <3 x double>
  %135 = alloca i64
  %136 = alloca i64
  %137 = alloca double
  %138 = alloca double
  %139 = alloca double
  %140 = alloca double
  %141 = alloca double
  %142 = alloca double
  %143 = alloca double
  %144 = alloca i64
  %145 = alloca i64
  %146 = alloca i64
  %147 = alloca i64
  %148 = alloca double
  %149 = alloca double
  %150 = alloca <3 x double>
  %151 = alloca i64
  %152 = alloca i64
  %153 = alloca double
  %154 = alloca double
  %155 = alloca double
  %156 = alloca double
  %157 = alloca double
  %158 = alloca double
  %159 = alloca double
  %160 = alloca i64
  %161 = alloca i64
  %162 = alloca i64
  %163 = alloca i64
  %164 = alloca double
  %165 = alloca double
  %166 = alloca <3 x double>
  %167 = alloca i64
  %168 = alloca i64
  %169 = alloca double
  %170 = alloca double
  %171 = alloca double
  %172 = alloca double
  %173 = alloca double
  %174 = alloca double
  %175 = alloca double
  %176 = alloca i64
  %177 = alloca i64
  %178 = alloca i64
  %179 = alloca i64
  %180 = alloca double
  %181 = alloca double
  %182 = alloca <3 x double>
  %183 = alloca i64
  %184 = alloca i64
  %185 = alloca double
  %186 = alloca double
  %187 = alloca double
  %188 = alloca double
  %189 = alloca double
  %190 = alloca double
  %191 = alloca double
  %192 = alloca i64
  %193 = alloca i64
  %194 = alloca i64
  %195 = alloca i64
  %196 = alloca double
  %197 = alloca double
  %198 = alloca <3 x double>
  %199 = alloca i64
  %200 = alloca i64
  %201 = alloca double
  %202 = alloca double
  %203 = alloca double
  %204 = alloca double
  %205 = alloca double
  %206 = alloca double
  %207 = alloca double
  %208 = alloca i64
  %209 = alloca i64
  %210 = alloca i64
  %211 = alloca i64
  %212 = alloca double
  %213 = alloca double
  %214 = alloca <3 x double>
  %215 = alloca i64
  %216 = alloca i64
  %217 = alloca double
  %218 = alloca double
  %219 = alloca double
  %220 = alloca double
  %221 = alloca double
  %222 = alloca double
  %223 = alloca double
  %224 = alloca i64
  %225 = alloca i64
  %226 = alloca i64
  %227 = alloca i64
  %228 = alloca double
  %229 = alloca double
  %230 = alloca <3 x double>
  %231 = alloca i64
  %232 = alloca i64
  %233 = alloca double
  %234 = alloca double
  %235 = alloca double
  %236 = alloca double
  %237 = alloca double
  %238 = alloca double
  %239 = alloca double
  %240 = alloca i64
  %241 = alloca i64
  %242 = alloca i64
  %243 = alloca i64
  %244 = alloca double
  %245 = alloca double
  %246 = alloca <3 x double>
  %247 = alloca i64
  %248 = alloca i64
  %249 = alloca double
  %250 = alloca double
  %251 = alloca double
  %252 = alloca double
  %253 = alloca double
  %254 = alloca double
  %255 = alloca double
  %256 = alloca i64
  %257 = alloca i64
  %258 = alloca i64
  %259 = alloca i64
  %260 = alloca double
  %261 = alloca double
  %262 = alloca <3 x double>
  %263 = alloca i64
  %264 = alloca i64
  %265 = alloca double
  %266 = alloca double
  %267 = alloca double
  %268 = alloca double
  %269 = alloca double
  %270 = alloca double
  %271 = alloca double
  %272 = alloca i64
  %273 = alloca i64
  %274 = alloca i64
  %275 = alloca i64
  %276 = alloca double
  %277 = alloca double
  %278 = alloca <3 x double>
  %279 = alloca i64
  %280 = alloca i64
  %281 = alloca double
  %282 = alloca double
  %283 = alloca double
  %284 = alloca double
  %285 = alloca double
  %286 = alloca double
  %287 = alloca double
  %288 = alloca i64
  %289 = alloca i64
  %290 = alloca i64
  %291 = alloca i64
  %292 = alloca double
  %293 = alloca double
  %294 = alloca <3 x double>
  %295 = alloca i64
  %296 = alloca i64
  %297 = alloca double
  %298 = alloca double
  %299 = alloca double
  %300 = alloca double
  %301 = alloca double
  %302 = alloca double
  %303 = alloca double
  %304 = alloca i64
  %305 = alloca i64
  %306 = alloca i64
  %307 = alloca i64
  %308 = alloca double
  %309 = alloca double
  %310 = alloca <3 x double>
  %311 = alloca i64
  %312 = alloca i64
  %313 = alloca double
  %314 = alloca double
  %315 = alloca double
  %316 = alloca double
  %317 = alloca double
  %318 = alloca double
  %319 = alloca double
  %320 = alloca i64
  %321 = alloca i64
  %322 = alloca i64
  %323 = alloca i64
  %324 = alloca double
  %325 = alloca double
  %326 = alloca <3 x double>
  %327 = alloca i64
  %328 = alloca i64
  %329 = alloca double
  %330 = alloca double
  %331 = alloca double
  %332 = alloca double
  %333 = alloca double
  %334 = alloca double
  %335 = alloca double
  %336 = alloca i64
  %337 = alloca i64
  %338 = alloca i64
  %339 = alloca i64
  %340 = alloca double
  %341 = alloca double
  %342 = alloca <3 x double>
  %343 = alloca i64
  %344 = alloca i64
  %345 = alloca double
  %346 = alloca double
  %347 = alloca double
  %348 = alloca double
  %349 = alloca double
  %350 = alloca double
  %351 = alloca double
  %352 = alloca i64
  %353 = alloca i64
  %354 = alloca i64
  %355 = alloca i64
  %356 = alloca double
  %357 = alloca double
  %358 = alloca <3 x double>
  %359 = alloca i64
  %360 = alloca i64
  %361 = alloca double
  %362 = alloca double
  %363 = alloca double
  %364 = alloca double
  %365 = alloca double
  %366 = alloca double
  %367 = alloca double
  %368 = alloca i64
  %369 = alloca i64
  %370 = alloca i64
  %371 = alloca i64
  %372 = alloca double
  %373 = alloca double
  %374 = alloca <3 x double>
  %375 = alloca i64
  %376 = alloca i64
  %377 = alloca double
  %378 = alloca double
  %379 = alloca double
  %380 = alloca double
  %381 = alloca double
  %382 = alloca double
  %383 = alloca double
  %384 = alloca i64
  %385 = alloca i64
  %386 = alloca i64
  %387 = alloca i64
  %388 = alloca double
  %389 = alloca double
  %390 = alloca <3 x double>
  %391 = alloca i64
  %392 = alloca i64
  %393 = alloca double
  %394 = alloca double
  %395 = alloca double
  %396 = alloca double
  %397 = alloca double
  %398 = alloca double
  %399 = alloca double
  %400 = alloca i64
  %401 = alloca i64
  %402 = alloca i64
  %403 = alloca i64
  %404 = alloca double
  %405 = alloca double
  %406 = alloca <3 x double>
  %407 = alloca i64
  %408 = alloca i64
  %409 = alloca double
  %410 = alloca double
  %411 = alloca double
  %412 = alloca double
  %413 = alloca double
  %414 = alloca double
  %415 = alloca double
  %416 = alloca i64
  %417 = alloca i64
  %418 = alloca i64
  %419 = alloca i64
  %420 = alloca double
  %421 = alloca double
  %422 = alloca <3 x double>
  %423 = alloca i64
  %424 = alloca i64
  %425 = alloca double
  %426 = alloca double
  %427 = alloca double
  %428 = alloca double
  %429 = alloca double
  %430 = alloca double
  %431 = alloca double
  %432 = alloca i64
  %433 = alloca i64
  %434 = alloca i64
  %435 = alloca i64
  %436 = alloca double
  %437 = alloca double
  %438 = alloca <3 x double>
  %439 = alloca i64
  %440 = alloca i64
  %441 = alloca double
  %442 = alloca double
  %443 = alloca double
  %444 = alloca double
  %445 = alloca double
  %446 = alloca double
  %447 = alloca double
  %448 = alloca i64
  %449 = alloca i64
  %450 = alloca i64
  %451 = alloca i64
  %452 = alloca double
  %453 = alloca double
  %454 = alloca <3 x double>
  %455 = alloca i64
  %456 = alloca i64
  %457 = alloca double
  %458 = alloca double
  %459 = alloca double
  %460 = alloca double
  %461 = alloca double
  %462 = alloca double
  %463 = alloca double
  %464 = alloca i64
  %465 = alloca i64
  %466 = alloca i64
  %467 = alloca i64
  %468 = alloca double
  %469 = alloca double
  %470 = alloca <3 x double>
  %471 = alloca i64
  %472 = alloca i64
  %473 = alloca double
  %474 = alloca double
  %475 = alloca double
  %476 = alloca double
  %477 = alloca double
  %478 = alloca double
  %479 = alloca double
  %480 = alloca i64
  %481 = alloca i64
  %482 = alloca i64
  %483 = alloca i64
  %484 = alloca double
  %485 = alloca double
  %486 = alloca <3 x double>
  %487 = alloca i64
  %488 = alloca i64
  %489 = alloca double
  %490 = alloca double
  %491 = alloca double
  %492 = alloca double
  %493 = alloca double
  %494 = alloca double
  %495 = alloca double
  %496 = alloca i64
  %497 = alloca i64
  %498 = alloca i64
  %499 = alloca i64
  %500 = alloca double
  %501 = alloca double
  %502 = alloca <3 x double>
  %503 = alloca i64
  %504 = alloca i64
  %505 = alloca double
  %506 = alloca double
  %507 = alloca double
  %508 = alloca double
  %509 = alloca double
  %510 = alloca double
  %511 = alloca double
  %512 = alloca i64
  %513 = alloca i64
  %514 = alloca i64
  %515 = alloca i64
  %516 = alloca double
  %517 = alloca double
  %518 = alloca <3 x double>
  %519 = alloca i64
  %520 = alloca i64
  %521 = alloca double
  %522 = alloca double
  %523 = alloca double
  %524 = alloca double
  %525 = alloca double
  %526 = alloca double
  %527 = alloca double
  %528 = alloca i64
  %529 = alloca i64
  %530 = alloca i64
  %531 = alloca i64
  %532 = alloca double
  %533 = alloca double
  %534 = alloca <3 x double>
  %535 = alloca i64
  %536 = alloca i64
  %537 = alloca double
  %538 = alloca double
  %539 = alloca double
  %540 = alloca double
  %541 = alloca double
  %542 = alloca double
  %543 = alloca double
  %544 = alloca i64
  %545 = alloca i64
  %546 = alloca i64
  %547 = alloca i64
  %548 = alloca double
  %549 = alloca double
  %550 = alloca <3 x double>
  %551 = alloca i64
  %552 = alloca i64
  %553 = alloca double
  %554 = alloca double
  %555 = alloca double
  %556 = alloca double
  %557 = alloca double
  %558 = alloca double
  %559 = alloca double
  %560 = alloca i64
  %561 = alloca i64
  %562 = alloca i64
  %563 = alloca i64
  %564 = alloca double
  %565 = alloca double
  %566 = alloca <3 x double>
  %567 = alloca i64
  %568 = alloca i64
  %569 = alloca double
  %570 = alloca double
  %571 = alloca double
  %572 = alloca double
  %573 = alloca double
  %574 = alloca double
  %575 = alloca double
  %576 = alloca i64
  %577 = alloca i64
  %578 = alloca i64
  %579 = alloca i64
  %580 = alloca double
  %581 = alloca double
  %582 = alloca <3 x double>
  %583 = alloca i64
  %584 = alloca i64
  %585 = alloca double
  %586 = alloca double
  %587 = alloca double
  %588 = alloca double
  %589 = alloca double
  %590 = alloca double
  %591 = alloca double
  %592 = alloca i64
  %593 = alloca i64
  %594 = alloca i64
  %595 = alloca i64
  %596 = alloca double
  %597 = alloca double
  %598 = alloca <3 x double>
  %599 = alloca i64
  %600 = alloca i64
  %601 = alloca double
  %602 = alloca double
  %603 = alloca double
  %604 = alloca double
  %605 = alloca double
  %606 = alloca double
  %607 = alloca double
  %608 = alloca i64
  %609 = alloca i64
  %610 = alloca i64
  %611 = alloca i64
  %612 = alloca double
  %613 = alloca double
  %614 = alloca <3 x double>
  %615 = alloca i64
  %616 = alloca i64
  %617 = alloca double
  %618 = alloca double
  %619 = alloca double
  %620 = alloca double
  %621 = alloca double
  %622 = alloca double
  %623 = alloca double
  %624 = alloca i64
  %625 = alloca i64
  %626 = alloca i64
  %627 = alloca i64
  %628 = alloca double
  %629 = alloca double
  %630 = alloca <3 x double>
  %631 = alloca i64
  %632 = alloca i64
  %633 = alloca double
  %634 = alloca double
  %635 = alloca double
  %636 = alloca double
  %637 = alloca double
  %638 = alloca double
  %639 = alloca double
  %640 = alloca i64
  %641 = alloca i64
  %642 = alloca i64
  %643 = alloca i64
  %644 = alloca double
  %645 = alloca double
  %646 = alloca <3 x double>
  %647 = alloca i64
  %648 = alloca i64
  %649 = alloca double
  %650 = alloca double
  %651 = alloca double
  %652 = alloca double
  %653 = alloca double
  %654 = alloca double
  %655 = alloca double
  %656 = alloca i64
  %657 = alloca i64
  %658 = alloca i64
  %659 = alloca i64
  %660 = alloca double
  %661 = alloca double
  %662 = alloca <3 x double>
  %663 = alloca i64
  %664 = alloca i64
  %665 = alloca double
  %666 = alloca double
  %667 = alloca double
  %668 = alloca double
  %669 = alloca double
  %670 = alloca double
  %671 = alloca double
  %672 = alloca i64
  %673 = alloca i64
  %674 = alloca i64
  %675 = alloca i64
  %676 = alloca double
  %677 = alloca double
  %678 = alloca <3 x double>
  %679 = alloca i64
  %680 = alloca i64
  %681 = alloca double
  %682 = alloca double
  %683 = alloca double
  %684 = alloca double
  %685 = alloca double
  %686 = alloca double
  %687 = alloca double
  %688 = alloca i64
  %689 = alloca i64
  %690 = alloca i64
  %691 = alloca i64
  %692 = alloca double
  %693 = alloca double
  %694 = alloca <3 x double>
  %695 = alloca i64
  %696 = alloca i64
  %697 = alloca double
  %698 = alloca double
  %699 = alloca double
  %700 = alloca double
  %701 = alloca double
  %702 = alloca double
  %703 = alloca double
  %704 = alloca i64
  %705 = alloca i64
  %706 = alloca i64
  %707 = alloca i64
  %708 = alloca double
  %709 = alloca double
  %710 = alloca <3 x double>
  %711 = alloca i64
  %712 = alloca i64
  %713 = alloca double
  %714 = alloca double
  %715 = alloca double
  %716 = alloca double
  %717 = alloca double
  %718 = alloca double
  %719 = alloca double
  %720 = alloca i64
  %721 = alloca i64
  %722 = alloca i64
  %723 = alloca i64
  %724 = alloca double
  %725 = alloca double
  %726 = alloca <3 x double>
  %727 = alloca i64
  %728 = alloca i64
  %729 = alloca double
  %730 = alloca double
  %731 = alloca double
  %732 = alloca double
  %733 = alloca double
  %734 = alloca double
  %735 = alloca double
  %736 = alloca i64
  %737 = alloca i64
  %738 = alloca i64
  %739 = alloca i64
  %740 = alloca double
  %741 = alloca double
  %742 = alloca <3 x double>
  %743 = alloca i64
  %744 = alloca i64
  %745 = alloca double
  %746 = alloca double
  %747 = alloca double
  %748 = alloca double
  %749 = alloca double
  %750 = alloca double
  %751 = alloca double
  %752 = alloca i64
  %753 = alloca i64
  %754 = alloca i64
  %755 = alloca i64
  %756 = alloca double
  %757 = alloca double
  %758 = alloca <3 x double>
  %759 = alloca i64
  %760 = alloca i64
  %761 = alloca double
  %762 = alloca double
  %763 = alloca double
  %764 = alloca double
  %765 = alloca double
  %766 = alloca double
  %767 = alloca double
  %768 = alloca i64
  %769 = alloca i64
  %770 = alloca i64
  %771 = alloca i64
  %772 = alloca double
  %773 = alloca double
  %774 = alloca <3 x double>
  %775 = alloca i64
  %776 = alloca i64
  %777 = alloca double
  %778 = alloca double
  %779 = alloca double
  %780 = alloca double
  %781 = alloca double
  %782 = alloca double
  %783 = alloca double
  %784 = alloca i64
  %785 = alloca i64
  %786 = alloca i64
  %787 = alloca i64
  %788 = alloca double
  %789 = alloca double
  %790 = alloca <3 x double>
  %791 = alloca i64
  %792 = alloca i64
  %793 = alloca double
  %794 = alloca double
  %795 = alloca double
  %796 = alloca double
  %797 = alloca double
  %798 = alloca double
  %799 = alloca double
  %800 = alloca i64
  %801 = alloca i64
  %802 = alloca i64
  %803 = alloca i64
  %804 = alloca double
  %805 = alloca double
  %806 = alloca <3 x double>
  %807 = alloca i64
  %808 = alloca i64
  %809 = alloca double
  %810 = alloca double
  %811 = alloca double
  %812 = alloca double
  %813 = alloca double
  %814 = alloca double
  %815 = alloca double
  %816 = alloca i64
  %817 = alloca i64
  %818 = alloca i64
  %819 = alloca i64
  %820 = alloca double
  %821 = alloca double
  %822 = alloca <3 x double>
  %823 = alloca i64
  %824 = alloca i64
  %825 = alloca double
  %826 = alloca double
  %827 = alloca double
  %828 = alloca double
  %829 = alloca double
  %830 = alloca double
  %831 = alloca double
  %832 = alloca i64
  %833 = alloca i64
  %834 = alloca i64
  %835 = alloca i64
  %836 = alloca double
  %837 = alloca double
  %838 = alloca <3 x double>
  %839 = alloca i64
  %840 = alloca i64
  %841 = alloca double
  %842 = alloca double
  %843 = alloca double
  %844 = alloca double
  %845 = alloca double
  %846 = alloca double
  %847 = alloca double
  %848 = alloca i64
  %849 = alloca i64
  %850 = alloca i64
  %851 = alloca i64
  %852 = alloca double
  %853 = alloca double
  %854 = alloca <3 x double>
  %855 = alloca i64
  %856 = alloca i64
  %857 = alloca double
  %858 = alloca double
  %859 = alloca double
  %860 = alloca double
  %861 = alloca double
  %862 = alloca double
  %863 = alloca double
  %864 = alloca i64
  %865 = alloca i64
  %866 = alloca i64
  %867 = alloca i64
  %868 = alloca double
  %869 = alloca double
  %870 = alloca <3 x double>
  %871 = alloca i64
  %872 = alloca i64
  %873 = alloca double
  %874 = alloca double
  %875 = alloca double
  %876 = alloca double
  %877 = alloca double
  %878 = alloca double
  %879 = alloca double
  %880 = alloca i64
  %881 = alloca i64
  %882 = alloca i64
  %883 = alloca i64
  %884 = alloca double
  %885 = alloca double
  %886 = alloca <3 x double>
  %887 = alloca i64
  %888 = alloca i64
  %889 = alloca double
  %890 = alloca double
  %891 = alloca double
  %892 = alloca double
  %893 = alloca double
  %894 = alloca double
  %895 = alloca double
  %896 = alloca i64
  %897 = alloca i64
  %898 = alloca i64
  %899 = alloca i64
  %900 = alloca double
  %901 = alloca double
  %902 = alloca <3 x double>
  %903 = alloca i64
  %904 = alloca i64
  %905 = alloca double
  %906 = alloca double
  %907 = alloca double
  %908 = alloca double
  %909 = alloca double
  %910 = alloca double
  %911 = alloca double
  %912 = alloca i64
  %913 = alloca i64
  %914 = alloca i64
  %915 = alloca i64
  %916 = alloca double
  %917 = alloca double
  %918 = alloca <3 x double>
  %919 = alloca i64
  %920 = alloca i64
  %921 = alloca double
  %922 = alloca double
  %923 = alloca double
  %924 = alloca double
  %925 = alloca double
  %926 = alloca double
  %927 = alloca double
  %928 = alloca i64
  %929 = alloca i64
  %930 = alloca i64
  %931 = alloca i64
  %932 = alloca double
  %933 = alloca double
  %934 = alloca <3 x double>
  %935 = alloca i64
  %936 = alloca i64
  %937 = alloca double
  %938 = alloca double
  %939 = alloca double
  %940 = alloca double
  %941 = alloca double
  %942 = alloca double
  %943 = alloca double
  %944 = alloca i64
  %945 = alloca i64
  %946 = alloca i64
  %947 = alloca i64
  %948 = alloca double
  %949 = alloca double
  %950 = alloca <3 x double>
  %951 = alloca i64
  %952 = alloca i64
  %953 = alloca double
  %954 = alloca double
  %955 = alloca double
  %956 = alloca double
  %957 = alloca double
  %958 = alloca double
  %959 = alloca double
  %960 = alloca i64
  %961 = alloca i64
  %962 = alloca i64
  %963 = alloca i64
  %964 = alloca double
  %965 = alloca double
  %966 = alloca <3 x double>
  %967 = alloca i64
  %968 = alloca i64
  %969 = alloca double
  %970 = alloca double
  %971 = alloca double
  %972 = alloca double
  %973 = alloca double
  %974 = alloca double
  %975 = alloca double
  %976 = alloca i64
  %977 = alloca i64
  %978 = alloca i64
  %979 = alloca i64
  %980 = alloca double
  %981 = alloca double
  %982 = alloca <3 x double>
  %983 = alloca i64
  %984 = alloca i64
  %985 = alloca double
  %986 = alloca double
  %987 = alloca double
  %988 = alloca double
  %989 = alloca double
  %990 = alloca double
  %991 = alloca double
  %992 = alloca i64
  %993 = alloca i64
  %994 = alloca i64
  %995 = alloca i64
  %996 = alloca double
  %997 = alloca double
  %998 = alloca <3 x double>
  %999 = alloca i64
  %1000 = alloca i64
  %1001 = alloca double
  %1002 = alloca double
  %1003 = alloca double
  %1004 = alloca double
  %1005 = alloca double
  %1006 = alloca double
  %1007 = alloca double
  %1008 = alloca i64
  %1009 = alloca i64
  %1010 = alloca i64
  %1011 = alloca i64
  %1012 = alloca double
  %1013 = alloca double
  %1014 = alloca <3 x double>
  %1015 = alloca i64
  %1016 = alloca i64
  %1017 = alloca double
  %1018 = alloca double
  %1019 = alloca double
  %1020 = alloca double
  %1021 = alloca double
  %1022 = alloca double
  %1023 = alloca double
  %1024 = alloca i64
  %1025 = alloca i64
  %1026 = alloca i64
  %1027 = alloca i64
  %1028 = alloca double
  %1029 = alloca double
  %1030 = alloca <3 x double>
  %1031 = alloca i64
  %1032 = alloca i64
  %1033 = alloca double
  %1034 = alloca double
  %1035 = alloca double
  %1036 = alloca double
  %1037 = alloca double
  %1038 = alloca double
  %1039 = alloca double
  %1040 = alloca i64
  %1041 = alloca i64
  %1042 = alloca i64
  %1043 = alloca i64
  %1044 = alloca double
  %1045 = alloca double
  %1046 = alloca <3 x double>
  %1047 = alloca i64
  %1048 = alloca i64
  %1049 = alloca double
  %1050 = alloca double
  %1051 = alloca double
  %1052 = alloca double
  %1053 = alloca double
  %1054 = alloca double
  %1055 = alloca double
  %1056 = alloca i64
  %1057 = alloca i64
  %1058 = alloca i64
  %1059 = alloca i64
  %1060 = alloca double
  %1061 = alloca double
  %1062 = alloca <3 x double>
  %1063 = alloca i64
  %1064 = alloca i64
  %1065 = alloca double
  %1066 = alloca double
  %1067 = alloca double
  %1068 = alloca double
  %1069 = alloca double
  %1070 = alloca double
  %1071 = alloca double
  %1072 = alloca i64
  %1073 = alloca i64
  %1074 = alloca i64
  %1075 = alloca i64
  %1076 = alloca double
  %1077 = alloca double
  %1078 = alloca <3 x double>
  %1079 = alloca i64
  %1080 = alloca i64
  %1081 = alloca double
  %1082 = alloca double
  %1083 = alloca double
  %1084 = alloca double
  %1085 = alloca double
  %1086 = alloca double
  %1087 = alloca double
  %1088 = alloca i64
  %1089 = alloca i64
  %1090 = alloca i64
  %1091 = alloca i64
  %1092 = alloca double
  %1093 = alloca double
  %1094 = alloca <3 x double>
  %1095 = alloca i64
  %1096 = alloca i64
  %1097 = alloca double
  %1098 = alloca double
  %1099 = alloca double
  %1100 = alloca double
  %1101 = alloca double
  %1102 = alloca double
  %1103 = alloca double
  %1104 = alloca i64
  %1105 = alloca i64
  %1106 = alloca i64
  %1107 = alloca i64
  %1108 = alloca double
  %1109 = alloca double
  %1110 = alloca <3 x double>
  %1111 = alloca i64
  %1112 = alloca i64
  %1113 = alloca double
  %1114 = alloca double
  %1115 = alloca double
  %1116 = alloca double
  %1117 = alloca double
  %1118 = alloca double
  %1119 = alloca double
  %1120 = alloca i64
  %1121 = alloca i64
  %1122 = alloca i64
  %1123 = alloca i64
  %1124 = alloca double
  %1125 = alloca double
  %1126 = alloca <3 x double>
  %1127 = alloca i64
  %1128 = alloca i64
  %1129 = alloca double
  %1130 = alloca double
  %1131 = alloca double
  %1132 = alloca double
  %1133 = alloca double
  %1134 = alloca double
  %1135 = alloca double
  %1136 = alloca i64
  %1137 = alloca i64
  %1138 = alloca i64
  %1139 = alloca i64
  %1140 = alloca double
  %1141 = alloca double
  %1142 = alloca <3 x double>
  %1143 = alloca i64
  %1144 = alloca i64
  %1145 = alloca double
  %1146 = alloca double
  %1147 = alloca double
  %1148 = alloca double
  %1149 = alloca double
  %1150 = alloca double
  %1151 = alloca double
  %1152 = alloca i64
  %1153 = alloca i64
  %1154 = alloca i64
  %1155 = alloca i64
  %1156 = alloca double
  %1157 = alloca double
  %1158 = alloca <3 x double>
  %1159 = alloca i64
  %1160 = alloca i64
  %1161 = alloca double
  %1162 = alloca double
  %1163 = alloca double
  %1164 = alloca double
  %1165 = alloca double
  %1166 = alloca double
  %1167 = alloca double
  %1168 = alloca i64
  %1169 = alloca i64
  %1170 = alloca i64
  %1171 = alloca i64
  %1172 = alloca double
  %1173 = alloca double
  %1174 = alloca <3 x double>
  %1175 = alloca i64
  %1176 = alloca i64
  %1177 = alloca double
  %1178 = alloca double
  %1179 = alloca double
  %1180 = alloca double
  %1181 = alloca double
  %1182 = alloca double
  %1183 = alloca double
  %1184 = alloca i64
  %1185 = alloca i64
  %1186 = alloca i64
  %1187 = alloca i64
  %1188 = alloca double
  %1189 = alloca double
  %1190 = alloca <3 x double>
  %1191 = alloca i64
  %1192 = alloca i64
  %1193 = alloca double
  %1194 = alloca double
  %1195 = alloca double
  %1196 = alloca double
  %1197 = alloca double
  %1198 = alloca double
  %1199 = alloca double
  %basis1 = load i8*, i8** %basis
  %return = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @22, i64 0, i64 0))
  %1200 = icmp ne i64 %return, 0
  br i1 %1200, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %fractal2 = load i8*, i8** %fractal
  %return3 = call i64 @"eq@ISS"(i8* %fractal2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1201 = icmp ne i64 %return3, 0
  br i1 %1201, label %true4, label %false5

false:                                            ; preds = %__llvm_entry
  %return60 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0))
  %1202 = icmp ne i64 %return60, 0
  br i1 %1202, label %true61, label %false62

end:                                              ; preds = %false1462, %false1551, %false1487, %false1422, %false1357, %false1292, %false1227, %false1164, %false1102, %false1040, %false978, %false916, %false854, %false788, %false722, %false657, %false594, %false530, %false467, %false403, %false340, %false276, %false213, %false149, %false86, %false24
  br label %UnifiedReturnBlock

true4:                                            ; preds = %true
  %inv7 = load i64, i64* %inv
  store i64 %inv7, i64* %0
  %fold8 = load i64, i64* %fold
  store i64 %fold8, i64* %1
  %accl9 = load i64, i64* %accl
  store i64 %accl9, i64* %2
  %accg10 = load i64, i64* %accg
  store i64 %accg10, i64* %3
  %fw11 = load double, double* %fw
  store double %fw11, double* %4
  %expon12 = load double, double* %expon
  store double %expon12, double* %5
  %dolw13 = load i64, i64* %dolw
  store i64 %dolw13, i64* %7
  %dogw14 = load i64, i64* %dogw
  store i64 %dogw14, i64* %8
  %disp15 = load double, double* %disp
  store double %disp15, double* %9
  %dfreq16 = load double, double* %dfreq
  store double %dfreq16, double* %10
  %gflow17 = load double, double* %gflow
  store double %gflow17, double* %11
  %maxoctaves18 = load double, double* %maxoctaves
  store double %maxoctaves18, double* %13
  %lacunarity19 = load double, double* %lacunarity
  store double %lacunarity19, double* %14
  %gain20 = load double, double* %gain
  store double %gain20, double* %15
  %fBm_sine = call double @"fBm_sine@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %0, i64* %1, i64* %2, i64* %3, double* %4, double* %5, <3 x double>* %6, i64* %7, i64* %8, double* %9, double* %10, double* %11, double* %12, double* %x_avg, <3 x double>* %x_off, double* %13, double* %14, double* %15, double* %x_oct)
  br label %UnifiedReturnBlock

false5:                                           ; preds = %true
  %return22 = call i64 @"eq@ISS"(i8* %fractal2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1203 = icmp ne i64 %return22, 0
  br i1 %1203, label %true23, label %false24

true23:                                           ; preds = %false5
  %inv26 = load i64, i64* %inv
  store i64 %inv26, i64* %16
  %fold27 = load i64, i64* %fold
  store i64 %fold27, i64* %17
  %accl28 = load i64, i64* %accl
  store i64 %accl28, i64* %18
  %accg29 = load i64, i64* %accg
  store i64 %accg29, i64* %19
  %fw30 = load double, double* %fw
  store double %fw30, double* %20
  %expon31 = load double, double* %expon
  store double %expon31, double* %21
  %dolw32 = load i64, i64* %dolw
  store i64 %dolw32, i64* %23
  %dogw33 = load i64, i64* %dogw
  store i64 %dogw33, i64* %24
  %disp34 = load double, double* %disp
  store double %disp34, double* %25
  %dfreq35 = load double, double* %dfreq
  store double %dfreq35, double* %26
  %gflow36 = load double, double* %gflow
  store double %gflow36, double* %27
  %maxoctaves37 = load double, double* %maxoctaves
  store double %maxoctaves37, double* %29
  %lacunarity38 = load double, double* %lacunarity
  store double %lacunarity38, double* %30
  %gain39 = load double, double* %gain
  store double %gain39, double* %31
  %mfT_sine = call double @"mfT_sine@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %16, i64* %17, i64* %18, i64* %19, double* %20, double* %21, <3 x double>* %22, i64* %23, i64* %24, double* %25, double* %26, double* %27, double* %28, double* %x_avg, <3 x double>* %x_off, double* %29, double* %30, double* %31, double* %x_oct)
  br label %UnifiedReturnBlock

false24:                                          ; preds = %false5
  %return41 = call i64 @"eq@ISS"(i8* %fractal2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1204 = icmp ne i64 %return41, 0
  br i1 %1204, label %true42, label %end

true42:                                           ; preds = %false24
  %inv45 = load i64, i64* %inv
  store i64 %inv45, i64* %32
  %fold46 = load i64, i64* %fold
  store i64 %fold46, i64* %33
  %accl47 = load i64, i64* %accl
  store i64 %accl47, i64* %34
  %accg48 = load i64, i64* %accg
  store i64 %accg48, i64* %35
  %fw49 = load double, double* %fw
  store double %fw49, double* %36
  %expon50 = load double, double* %expon
  store double %expon50, double* %37
  %dolw51 = load i64, i64* %dolw
  store i64 %dolw51, i64* %39
  %dogw52 = load i64, i64* %dogw
  store i64 %dogw52, i64* %40
  %disp53 = load double, double* %disp
  store double %disp53, double* %41
  %dfreq54 = load double, double* %dfreq
  store double %dfreq54, double* %42
  %gflow55 = load double, double* %gflow
  store double %gflow55, double* %43
  %maxoctaves56 = load double, double* %maxoctaves
  store double %maxoctaves56, double* %45
  %lacunarity57 = load double, double* %lacunarity
  store double %lacunarity57, double* %46
  %gain58 = load double, double* %gain
  store double %gain58, double* %47
  %hmfT_sine = call double @"hmfT_sine@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %32, i64* %33, i64* %34, i64* %35, double* %36, double* %37, <3 x double>* %38, i64* %39, i64* %40, double* %41, double* %42, double* %43, double* %44, double* %x_avg, <3 x double>* %x_off, double* %45, double* %46, double* %47, double* %x_oct)
  br label %UnifiedReturnBlock

true61:                                           ; preds = %false
  %fractal64 = load i8*, i8** %fractal
  %return65 = call i64 @"eq@ISS"(i8* %fractal64, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1205 = icmp ne i64 %return65, 0
  br i1 %1205, label %true66, label %false67

false62:                                          ; preds = %false
  %return122 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i64 0, i64 0))
  %1206 = icmp ne i64 %return122, 0
  br i1 %1206, label %true123, label %false124

true66:                                           ; preds = %true61
  %inv69 = load i64, i64* %inv
  store i64 %inv69, i64* %48
  %fold70 = load i64, i64* %fold
  store i64 %fold70, i64* %49
  %accl71 = load i64, i64* %accl
  store i64 %accl71, i64* %50
  %accg72 = load i64, i64* %accg
  store i64 %accg72, i64* %51
  %fw73 = load double, double* %fw
  store double %fw73, double* %52
  %expon74 = load double, double* %expon
  store double %expon74, double* %53
  %dolw75 = load i64, i64* %dolw
  store i64 %dolw75, i64* %55
  %dogw76 = load i64, i64* %dogw
  store i64 %dogw76, i64* %56
  %disp77 = load double, double* %disp
  store double %disp77, double* %57
  %dfreq78 = load double, double* %dfreq
  store double %dfreq78, double* %58
  %gflow79 = load double, double* %gflow
  store double %gflow79, double* %59
  %maxoctaves80 = load double, double* %maxoctaves
  store double %maxoctaves80, double* %61
  %lacunarity81 = load double, double* %lacunarity
  store double %lacunarity81, double* %62
  %gain82 = load double, double* %gain
  store double %gain82, double* %63
  %fBm_value_fast = call double @"fBm_value_fast@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %48, i64* %49, i64* %50, i64* %51, double* %52, double* %53, <3 x double>* %54, i64* %55, i64* %56, double* %57, double* %58, double* %59, double* %60, double* %x_avg, <3 x double>* %x_off, double* %61, double* %62, double* %63, double* %x_oct)
  br label %UnifiedReturnBlock

false67:                                          ; preds = %true61
  %return84 = call i64 @"eq@ISS"(i8* %fractal64, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1207 = icmp ne i64 %return84, 0
  br i1 %1207, label %true85, label %false86

true85:                                           ; preds = %false67
  %inv88 = load i64, i64* %inv
  store i64 %inv88, i64* %64
  %fold89 = load i64, i64* %fold
  store i64 %fold89, i64* %65
  %accl90 = load i64, i64* %accl
  store i64 %accl90, i64* %66
  %accg91 = load i64, i64* %accg
  store i64 %accg91, i64* %67
  %fw92 = load double, double* %fw
  store double %fw92, double* %68
  %expon93 = load double, double* %expon
  store double %expon93, double* %69
  %dolw94 = load i64, i64* %dolw
  store i64 %dolw94, i64* %71
  %dogw95 = load i64, i64* %dogw
  store i64 %dogw95, i64* %72
  %disp96 = load double, double* %disp
  store double %disp96, double* %73
  %dfreq97 = load double, double* %dfreq
  store double %dfreq97, double* %74
  %gflow98 = load double, double* %gflow
  store double %gflow98, double* %75
  %maxoctaves99 = load double, double* %maxoctaves
  store double %maxoctaves99, double* %77
  %lacunarity100 = load double, double* %lacunarity
  store double %lacunarity100, double* %78
  %gain101 = load double, double* %gain
  store double %gain101, double* %79
  %mfT_value_fast = call double @"mfT_value_fast@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %64, i64* %65, i64* %66, i64* %67, double* %68, double* %69, <3 x double>* %70, i64* %71, i64* %72, double* %73, double* %74, double* %75, double* %76, double* %x_avg, <3 x double>* %x_off, double* %77, double* %78, double* %79, double* %x_oct)
  br label %UnifiedReturnBlock

false86:                                          ; preds = %false67
  %return103 = call i64 @"eq@ISS"(i8* %fractal64, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1208 = icmp ne i64 %return103, 0
  br i1 %1208, label %true104, label %end

true104:                                          ; preds = %false86
  %inv107 = load i64, i64* %inv
  store i64 %inv107, i64* %80
  %fold108 = load i64, i64* %fold
  store i64 %fold108, i64* %81
  %accl109 = load i64, i64* %accl
  store i64 %accl109, i64* %82
  %accg110 = load i64, i64* %accg
  store i64 %accg110, i64* %83
  %fw111 = load double, double* %fw
  store double %fw111, double* %84
  %expon112 = load double, double* %expon
  store double %expon112, double* %85
  %dolw113 = load i64, i64* %dolw
  store i64 %dolw113, i64* %87
  %dogw114 = load i64, i64* %dogw
  store i64 %dogw114, i64* %88
  %disp115 = load double, double* %disp
  store double %disp115, double* %89
  %dfreq116 = load double, double* %dfreq
  store double %dfreq116, double* %90
  %gflow117 = load double, double* %gflow
  store double %gflow117, double* %91
  %maxoctaves118 = load double, double* %maxoctaves
  store double %maxoctaves118, double* %93
  %lacunarity119 = load double, double* %lacunarity
  store double %lacunarity119, double* %94
  %gain120 = load double, double* %gain
  store double %gain120, double* %95
  %hmfT_value_fast = call double @"hmfT_value_fast@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %80, i64* %81, i64* %82, i64* %83, double* %84, double* %85, <3 x double>* %86, i64* %87, i64* %88, double* %89, double* %90, double* %91, double* %92, double* %x_avg, <3 x double>* %x_off, double* %93, double* %94, double* %95, double* %x_oct)
  br label %UnifiedReturnBlock

true123:                                          ; preds = %false62
  %fractal126 = load i8*, i8** %fractal
  %return127 = call i64 @"eq@ISS"(i8* %fractal126, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1209 = icmp ne i64 %return127, 0
  br i1 %1209, label %true128, label %false129

false124:                                         ; preds = %false62
  %return187 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0))
  %1210 = icmp ne i64 %return187, 0
  br i1 %1210, label %true188, label %false189

true128:                                          ; preds = %true123
  %inv131 = load i64, i64* %inv
  store i64 %inv131, i64* %96
  %fold132 = load i64, i64* %fold
  store i64 %fold132, i64* %97
  %accl133 = load i64, i64* %accl
  store i64 %accl133, i64* %98
  %accg134 = load i64, i64* %accg
  store i64 %accg134, i64* %99
  %fw135 = load double, double* %fw
  store double %fw135, double* %100
  %expon136 = load double, double* %expon
  store double %expon136, double* %101
  %per137 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per137, <3 x double>* %102
  %dolw138 = load i64, i64* %dolw
  store i64 %dolw138, i64* %103
  %dogw139 = load i64, i64* %dogw
  store i64 %dogw139, i64* %104
  %disp140 = load double, double* %disp
  store double %disp140, double* %105
  %dfreq141 = load double, double* %dfreq
  store double %dfreq141, double* %106
  %gflow142 = load double, double* %gflow
  store double %gflow142, double* %107
  %maxoctaves143 = load double, double* %maxoctaves
  store double %maxoctaves143, double* %109
  %lacunarity144 = load double, double* %lacunarity
  store double %lacunarity144, double* %110
  %gain145 = load double, double* %gain
  store double %gain145, double* %111
  %fBm_pvalue_fast = call double @"fBm_pvalue_fast@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %96, i64* %97, i64* %98, i64* %99, double* %100, double* %101, <3 x double>* %102, i64* %103, i64* %104, double* %105, double* %106, double* %107, double* %108, double* %x_avg, <3 x double>* %x_off, double* %109, double* %110, double* %111, double* %x_oct)
  br label %UnifiedReturnBlock

false129:                                         ; preds = %true123
  %return147 = call i64 @"eq@ISS"(i8* %fractal126, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1211 = icmp ne i64 %return147, 0
  br i1 %1211, label %true148, label %false149

true148:                                          ; preds = %false129
  %inv151 = load i64, i64* %inv
  store i64 %inv151, i64* %112
  %fold152 = load i64, i64* %fold
  store i64 %fold152, i64* %113
  %accl153 = load i64, i64* %accl
  store i64 %accl153, i64* %114
  %accg154 = load i64, i64* %accg
  store i64 %accg154, i64* %115
  %fw155 = load double, double* %fw
  store double %fw155, double* %116
  %expon156 = load double, double* %expon
  store double %expon156, double* %117
  %per157 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per157, <3 x double>* %118
  %dolw158 = load i64, i64* %dolw
  store i64 %dolw158, i64* %119
  %dogw159 = load i64, i64* %dogw
  store i64 %dogw159, i64* %120
  %disp160 = load double, double* %disp
  store double %disp160, double* %121
  %dfreq161 = load double, double* %dfreq
  store double %dfreq161, double* %122
  %gflow162 = load double, double* %gflow
  store double %gflow162, double* %123
  %maxoctaves163 = load double, double* %maxoctaves
  store double %maxoctaves163, double* %125
  %lacunarity164 = load double, double* %lacunarity
  store double %lacunarity164, double* %126
  %gain165 = load double, double* %gain
  store double %gain165, double* %127
  %mfT_pvalue_fast = call double @"mfT_pvalue_fast@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %112, i64* %113, i64* %114, i64* %115, double* %116, double* %117, <3 x double>* %118, i64* %119, i64* %120, double* %121, double* %122, double* %123, double* %124, double* %x_avg, <3 x double>* %x_off, double* %125, double* %126, double* %127, double* %x_oct)
  br label %UnifiedReturnBlock

false149:                                         ; preds = %false129
  %return167 = call i64 @"eq@ISS"(i8* %fractal126, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1212 = icmp ne i64 %return167, 0
  br i1 %1212, label %true168, label %end

true168:                                          ; preds = %false149
  %inv171 = load i64, i64* %inv
  store i64 %inv171, i64* %128
  %fold172 = load i64, i64* %fold
  store i64 %fold172, i64* %129
  %accl173 = load i64, i64* %accl
  store i64 %accl173, i64* %130
  %accg174 = load i64, i64* %accg
  store i64 %accg174, i64* %131
  %fw175 = load double, double* %fw
  store double %fw175, double* %132
  %expon176 = load double, double* %expon
  store double %expon176, double* %133
  %per177 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per177, <3 x double>* %134
  %dolw178 = load i64, i64* %dolw
  store i64 %dolw178, i64* %135
  %dogw179 = load i64, i64* %dogw
  store i64 %dogw179, i64* %136
  %disp180 = load double, double* %disp
  store double %disp180, double* %137
  %dfreq181 = load double, double* %dfreq
  store double %dfreq181, double* %138
  %gflow182 = load double, double* %gflow
  store double %gflow182, double* %139
  %maxoctaves183 = load double, double* %maxoctaves
  store double %maxoctaves183, double* %141
  %lacunarity184 = load double, double* %lacunarity
  store double %lacunarity184, double* %142
  %gain185 = load double, double* %gain
  store double %gain185, double* %143
  %hmfT_pvalue_fast = call double @"hmfT_pvalue_fast@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %128, i64* %129, i64* %130, i64* %131, double* %132, double* %133, <3 x double>* %134, i64* %135, i64* %136, double* %137, double* %138, double* %139, double* %140, double* %x_avg, <3 x double>* %x_off, double* %141, double* %142, double* %143, double* %x_oct)
  br label %UnifiedReturnBlock

true188:                                          ; preds = %false124
  %fractal191 = load i8*, i8** %fractal
  %return192 = call i64 @"eq@ISS"(i8* %fractal191, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1213 = icmp ne i64 %return192, 0
  br i1 %1213, label %true193, label %false194

false189:                                         ; preds = %false124
  %return249 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0))
  %1214 = icmp ne i64 %return249, 0
  br i1 %1214, label %true250, label %false251

true193:                                          ; preds = %true188
  %inv196 = load i64, i64* %inv
  store i64 %inv196, i64* %144
  %fold197 = load i64, i64* %fold
  store i64 %fold197, i64* %145
  %accl198 = load i64, i64* %accl
  store i64 %accl198, i64* %146
  %accg199 = load i64, i64* %accg
  store i64 %accg199, i64* %147
  %fw200 = load double, double* %fw
  store double %fw200, double* %148
  %expon201 = load double, double* %expon
  store double %expon201, double* %149
  %dolw202 = load i64, i64* %dolw
  store i64 %dolw202, i64* %151
  %dogw203 = load i64, i64* %dogw
  store i64 %dogw203, i64* %152
  %disp204 = load double, double* %disp
  store double %disp204, double* %153
  %dfreq205 = load double, double* %dfreq
  store double %dfreq205, double* %154
  %gflow206 = load double, double* %gflow
  store double %gflow206, double* %155
  %maxoctaves207 = load double, double* %maxoctaves
  store double %maxoctaves207, double* %157
  %lacunarity208 = load double, double* %lacunarity
  store double %lacunarity208, double* %158
  %gain209 = load double, double* %gain
  store double %gain209, double* %159
  %fBm_sparse = call double @"fBm_sparse@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %144, i64* %145, i64* %146, i64* %147, double* %148, double* %149, <3 x double>* %150, i64* %151, i64* %152, double* %153, double* %154, double* %155, double* %156, double* %x_avg, <3 x double>* %x_off, double* %157, double* %158, double* %159, double* %x_oct)
  br label %UnifiedReturnBlock

false194:                                         ; preds = %true188
  %return211 = call i64 @"eq@ISS"(i8* %fractal191, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1215 = icmp ne i64 %return211, 0
  br i1 %1215, label %true212, label %false213

true212:                                          ; preds = %false194
  %inv215 = load i64, i64* %inv
  store i64 %inv215, i64* %160
  %fold216 = load i64, i64* %fold
  store i64 %fold216, i64* %161
  %accl217 = load i64, i64* %accl
  store i64 %accl217, i64* %162
  %accg218 = load i64, i64* %accg
  store i64 %accg218, i64* %163
  %fw219 = load double, double* %fw
  store double %fw219, double* %164
  %expon220 = load double, double* %expon
  store double %expon220, double* %165
  %dolw221 = load i64, i64* %dolw
  store i64 %dolw221, i64* %167
  %dogw222 = load i64, i64* %dogw
  store i64 %dogw222, i64* %168
  %disp223 = load double, double* %disp
  store double %disp223, double* %169
  %dfreq224 = load double, double* %dfreq
  store double %dfreq224, double* %170
  %gflow225 = load double, double* %gflow
  store double %gflow225, double* %171
  %maxoctaves226 = load double, double* %maxoctaves
  store double %maxoctaves226, double* %173
  %lacunarity227 = load double, double* %lacunarity
  store double %lacunarity227, double* %174
  %gain228 = load double, double* %gain
  store double %gain228, double* %175
  %mfT_sparse = call double @"mfT_sparse@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %160, i64* %161, i64* %162, i64* %163, double* %164, double* %165, <3 x double>* %166, i64* %167, i64* %168, double* %169, double* %170, double* %171, double* %172, double* %x_avg, <3 x double>* %x_off, double* %173, double* %174, double* %175, double* %x_oct)
  br label %UnifiedReturnBlock

false213:                                         ; preds = %false194
  %return230 = call i64 @"eq@ISS"(i8* %fractal191, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1216 = icmp ne i64 %return230, 0
  br i1 %1216, label %true231, label %end

true231:                                          ; preds = %false213
  %inv234 = load i64, i64* %inv
  store i64 %inv234, i64* %176
  %fold235 = load i64, i64* %fold
  store i64 %fold235, i64* %177
  %accl236 = load i64, i64* %accl
  store i64 %accl236, i64* %178
  %accg237 = load i64, i64* %accg
  store i64 %accg237, i64* %179
  %fw238 = load double, double* %fw
  store double %fw238, double* %180
  %expon239 = load double, double* %expon
  store double %expon239, double* %181
  %dolw240 = load i64, i64* %dolw
  store i64 %dolw240, i64* %183
  %dogw241 = load i64, i64* %dogw
  store i64 %dogw241, i64* %184
  %disp242 = load double, double* %disp
  store double %disp242, double* %185
  %dfreq243 = load double, double* %dfreq
  store double %dfreq243, double* %186
  %gflow244 = load double, double* %gflow
  store double %gflow244, double* %187
  %maxoctaves245 = load double, double* %maxoctaves
  store double %maxoctaves245, double* %189
  %lacunarity246 = load double, double* %lacunarity
  store double %lacunarity246, double* %190
  %gain247 = load double, double* %gain
  store double %gain247, double* %191
  %hmfT_sparse = call double @"hmfT_sparse@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %176, i64* %177, i64* %178, i64* %179, double* %180, double* %181, <3 x double>* %182, i64* %183, i64* %184, double* %185, double* %186, double* %187, double* %188, double* %x_avg, <3 x double>* %x_off, double* %189, double* %190, double* %191, double* %x_oct)
  br label %UnifiedReturnBlock

true250:                                          ; preds = %false189
  %fractal253 = load i8*, i8** %fractal
  %return254 = call i64 @"eq@ISS"(i8* %fractal253, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1217 = icmp ne i64 %return254, 0
  br i1 %1217, label %true255, label %false256

false251:                                         ; preds = %false189
  %return314 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @9, i64 0, i64 0))
  %1218 = icmp ne i64 %return314, 0
  br i1 %1218, label %true315, label %false316

true255:                                          ; preds = %true250
  %inv258 = load i64, i64* %inv
  store i64 %inv258, i64* %192
  %fold259 = load i64, i64* %fold
  store i64 %fold259, i64* %193
  %accl260 = load i64, i64* %accl
  store i64 %accl260, i64* %194
  %accg261 = load i64, i64* %accg
  store i64 %accg261, i64* %195
  %fw262 = load double, double* %fw
  store double %fw262, double* %196
  %expon263 = load double, double* %expon
  store double %expon263, double* %197
  %per264 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per264, <3 x double>* %198
  %dolw265 = load i64, i64* %dolw
  store i64 %dolw265, i64* %199
  %dogw266 = load i64, i64* %dogw
  store i64 %dogw266, i64* %200
  %disp267 = load double, double* %disp
  store double %disp267, double* %201
  %dfreq268 = load double, double* %dfreq
  store double %dfreq268, double* %202
  %gflow269 = load double, double* %gflow
  store double %gflow269, double* %203
  %maxoctaves270 = load double, double* %maxoctaves
  store double %maxoctaves270, double* %205
  %lacunarity271 = load double, double* %lacunarity
  store double %lacunarity271, double* %206
  %gain272 = load double, double* %gain
  store double %gain272, double* %207
  %fBm_psparse = call double @"fBm_psparse@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %192, i64* %193, i64* %194, i64* %195, double* %196, double* %197, <3 x double>* %198, i64* %199, i64* %200, double* %201, double* %202, double* %203, double* %204, double* %x_avg, <3 x double>* %x_off, double* %205, double* %206, double* %207, double* %x_oct)
  br label %UnifiedReturnBlock

false256:                                         ; preds = %true250
  %return274 = call i64 @"eq@ISS"(i8* %fractal253, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1219 = icmp ne i64 %return274, 0
  br i1 %1219, label %true275, label %false276

true275:                                          ; preds = %false256
  %inv278 = load i64, i64* %inv
  store i64 %inv278, i64* %208
  %fold279 = load i64, i64* %fold
  store i64 %fold279, i64* %209
  %accl280 = load i64, i64* %accl
  store i64 %accl280, i64* %210
  %accg281 = load i64, i64* %accg
  store i64 %accg281, i64* %211
  %fw282 = load double, double* %fw
  store double %fw282, double* %212
  %expon283 = load double, double* %expon
  store double %expon283, double* %213
  %per284 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per284, <3 x double>* %214
  %dolw285 = load i64, i64* %dolw
  store i64 %dolw285, i64* %215
  %dogw286 = load i64, i64* %dogw
  store i64 %dogw286, i64* %216
  %disp287 = load double, double* %disp
  store double %disp287, double* %217
  %dfreq288 = load double, double* %dfreq
  store double %dfreq288, double* %218
  %gflow289 = load double, double* %gflow
  store double %gflow289, double* %219
  %maxoctaves290 = load double, double* %maxoctaves
  store double %maxoctaves290, double* %221
  %lacunarity291 = load double, double* %lacunarity
  store double %lacunarity291, double* %222
  %gain292 = load double, double* %gain
  store double %gain292, double* %223
  %mfT_psparse = call double @"mfT_psparse@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %208, i64* %209, i64* %210, i64* %211, double* %212, double* %213, <3 x double>* %214, i64* %215, i64* %216, double* %217, double* %218, double* %219, double* %220, double* %x_avg, <3 x double>* %x_off, double* %221, double* %222, double* %223, double* %x_oct)
  br label %UnifiedReturnBlock

false276:                                         ; preds = %false256
  %return294 = call i64 @"eq@ISS"(i8* %fractal253, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1220 = icmp ne i64 %return294, 0
  br i1 %1220, label %true295, label %end

true295:                                          ; preds = %false276
  %inv298 = load i64, i64* %inv
  store i64 %inv298, i64* %224
  %fold299 = load i64, i64* %fold
  store i64 %fold299, i64* %225
  %accl300 = load i64, i64* %accl
  store i64 %accl300, i64* %226
  %accg301 = load i64, i64* %accg
  store i64 %accg301, i64* %227
  %fw302 = load double, double* %fw
  store double %fw302, double* %228
  %expon303 = load double, double* %expon
  store double %expon303, double* %229
  %per304 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per304, <3 x double>* %230
  %dolw305 = load i64, i64* %dolw
  store i64 %dolw305, i64* %231
  %dogw306 = load i64, i64* %dogw
  store i64 %dogw306, i64* %232
  %disp307 = load double, double* %disp
  store double %disp307, double* %233
  %dfreq308 = load double, double* %dfreq
  store double %dfreq308, double* %234
  %gflow309 = load double, double* %gflow
  store double %gflow309, double* %235
  %maxoctaves310 = load double, double* %maxoctaves
  store double %maxoctaves310, double* %237
  %lacunarity311 = load double, double* %lacunarity
  store double %lacunarity311, double* %238
  %gain312 = load double, double* %gain
  store double %gain312, double* %239
  %hmfT_psparse = call double @"hmfT_psparse@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %224, i64* %225, i64* %226, i64* %227, double* %228, double* %229, <3 x double>* %230, i64* %231, i64* %232, double* %233, double* %234, double* %235, double* %236, double* %x_avg, <3 x double>* %x_off, double* %237, double* %238, double* %239, double* %x_oct)
  br label %UnifiedReturnBlock

true315:                                          ; preds = %false251
  %fractal318 = load i8*, i8** %fractal
  %return319 = call i64 @"eq@ISS"(i8* %fractal318, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1221 = icmp ne i64 %return319, 0
  br i1 %1221, label %true320, label %false321

false316:                                         ; preds = %false251
  %return376 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @10, i64 0, i64 0))
  %1222 = icmp ne i64 %return376, 0
  br i1 %1222, label %true377, label %false378

true320:                                          ; preds = %true315
  %inv323 = load i64, i64* %inv
  store i64 %inv323, i64* %240
  %fold324 = load i64, i64* %fold
  store i64 %fold324, i64* %241
  %accl325 = load i64, i64* %accl
  store i64 %accl325, i64* %242
  %accg326 = load i64, i64* %accg
  store i64 %accg326, i64* %243
  %fw327 = load double, double* %fw
  store double %fw327, double* %244
  %expon328 = load double, double* %expon
  store double %expon328, double* %245
  %dolw329 = load i64, i64* %dolw
  store i64 %dolw329, i64* %247
  %dogw330 = load i64, i64* %dogw
  store i64 %dogw330, i64* %248
  %disp331 = load double, double* %disp
  store double %disp331, double* %249
  %dfreq332 = load double, double* %dfreq
  store double %dfreq332, double* %250
  %gflow333 = load double, double* %gflow
  store double %gflow333, double* %251
  %maxoctaves334 = load double, double* %maxoctaves
  store double %maxoctaves334, double* %253
  %lacunarity335 = load double, double* %lacunarity
  store double %lacunarity335, double* %254
  %gain336 = load double, double* %gain
  store double %gain336, double* %255
  %fBm_alligator = call double @"fBm_alligator@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %240, i64* %241, i64* %242, i64* %243, double* %244, double* %245, <3 x double>* %246, i64* %247, i64* %248, double* %249, double* %250, double* %251, double* %252, double* %x_avg, <3 x double>* %x_off, double* %253, double* %254, double* %255, double* %x_oct)
  br label %UnifiedReturnBlock

false321:                                         ; preds = %true315
  %return338 = call i64 @"eq@ISS"(i8* %fractal318, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1223 = icmp ne i64 %return338, 0
  br i1 %1223, label %true339, label %false340

true339:                                          ; preds = %false321
  %inv342 = load i64, i64* %inv
  store i64 %inv342, i64* %256
  %fold343 = load i64, i64* %fold
  store i64 %fold343, i64* %257
  %accl344 = load i64, i64* %accl
  store i64 %accl344, i64* %258
  %accg345 = load i64, i64* %accg
  store i64 %accg345, i64* %259
  %fw346 = load double, double* %fw
  store double %fw346, double* %260
  %expon347 = load double, double* %expon
  store double %expon347, double* %261
  %dolw348 = load i64, i64* %dolw
  store i64 %dolw348, i64* %263
  %dogw349 = load i64, i64* %dogw
  store i64 %dogw349, i64* %264
  %disp350 = load double, double* %disp
  store double %disp350, double* %265
  %dfreq351 = load double, double* %dfreq
  store double %dfreq351, double* %266
  %gflow352 = load double, double* %gflow
  store double %gflow352, double* %267
  %maxoctaves353 = load double, double* %maxoctaves
  store double %maxoctaves353, double* %269
  %lacunarity354 = load double, double* %lacunarity
  store double %lacunarity354, double* %270
  %gain355 = load double, double* %gain
  store double %gain355, double* %271
  %mfT_alligator = call double @"mfT_alligator@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %256, i64* %257, i64* %258, i64* %259, double* %260, double* %261, <3 x double>* %262, i64* %263, i64* %264, double* %265, double* %266, double* %267, double* %268, double* %x_avg, <3 x double>* %x_off, double* %269, double* %270, double* %271, double* %x_oct)
  br label %UnifiedReturnBlock

false340:                                         ; preds = %false321
  %return357 = call i64 @"eq@ISS"(i8* %fractal318, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1224 = icmp ne i64 %return357, 0
  br i1 %1224, label %true358, label %end

true358:                                          ; preds = %false340
  %inv361 = load i64, i64* %inv
  store i64 %inv361, i64* %272
  %fold362 = load i64, i64* %fold
  store i64 %fold362, i64* %273
  %accl363 = load i64, i64* %accl
  store i64 %accl363, i64* %274
  %accg364 = load i64, i64* %accg
  store i64 %accg364, i64* %275
  %fw365 = load double, double* %fw
  store double %fw365, double* %276
  %expon366 = load double, double* %expon
  store double %expon366, double* %277
  %dolw367 = load i64, i64* %dolw
  store i64 %dolw367, i64* %279
  %dogw368 = load i64, i64* %dogw
  store i64 %dogw368, i64* %280
  %disp369 = load double, double* %disp
  store double %disp369, double* %281
  %dfreq370 = load double, double* %dfreq
  store double %dfreq370, double* %282
  %gflow371 = load double, double* %gflow
  store double %gflow371, double* %283
  %maxoctaves372 = load double, double* %maxoctaves
  store double %maxoctaves372, double* %285
  %lacunarity373 = load double, double* %lacunarity
  store double %lacunarity373, double* %286
  %gain374 = load double, double* %gain
  store double %gain374, double* %287
  %hmfT_alligator = call double @"hmfT_alligator@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %272, i64* %273, i64* %274, i64* %275, double* %276, double* %277, <3 x double>* %278, i64* %279, i64* %280, double* %281, double* %282, double* %283, double* %284, double* %x_avg, <3 x double>* %x_off, double* %285, double* %286, double* %287, double* %x_oct)
  br label %UnifiedReturnBlock

true377:                                          ; preds = %false316
  %fractal380 = load i8*, i8** %fractal
  %return381 = call i64 @"eq@ISS"(i8* %fractal380, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1225 = icmp ne i64 %return381, 0
  br i1 %1225, label %true382, label %false383

false378:                                         ; preds = %false316
  %return441 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %1226 = icmp ne i64 %return441, 0
  br i1 %1226, label %true442, label %false443

true382:                                          ; preds = %true377
  %inv385 = load i64, i64* %inv
  store i64 %inv385, i64* %288
  %fold386 = load i64, i64* %fold
  store i64 %fold386, i64* %289
  %accl387 = load i64, i64* %accl
  store i64 %accl387, i64* %290
  %accg388 = load i64, i64* %accg
  store i64 %accg388, i64* %291
  %fw389 = load double, double* %fw
  store double %fw389, double* %292
  %expon390 = load double, double* %expon
  store double %expon390, double* %293
  %per391 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per391, <3 x double>* %294
  %dolw392 = load i64, i64* %dolw
  store i64 %dolw392, i64* %295
  %dogw393 = load i64, i64* %dogw
  store i64 %dogw393, i64* %296
  %disp394 = load double, double* %disp
  store double %disp394, double* %297
  %dfreq395 = load double, double* %dfreq
  store double %dfreq395, double* %298
  %gflow396 = load double, double* %gflow
  store double %gflow396, double* %299
  %maxoctaves397 = load double, double* %maxoctaves
  store double %maxoctaves397, double* %301
  %lacunarity398 = load double, double* %lacunarity
  store double %lacunarity398, double* %302
  %gain399 = load double, double* %gain
  store double %gain399, double* %303
  %fBm_palligator = call double @"fBm_palligator@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %288, i64* %289, i64* %290, i64* %291, double* %292, double* %293, <3 x double>* %294, i64* %295, i64* %296, double* %297, double* %298, double* %299, double* %300, double* %x_avg, <3 x double>* %x_off, double* %301, double* %302, double* %303, double* %x_oct)
  br label %UnifiedReturnBlock

false383:                                         ; preds = %true377
  %return401 = call i64 @"eq@ISS"(i8* %fractal380, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1227 = icmp ne i64 %return401, 0
  br i1 %1227, label %true402, label %false403

true402:                                          ; preds = %false383
  %inv405 = load i64, i64* %inv
  store i64 %inv405, i64* %304
  %fold406 = load i64, i64* %fold
  store i64 %fold406, i64* %305
  %accl407 = load i64, i64* %accl
  store i64 %accl407, i64* %306
  %accg408 = load i64, i64* %accg
  store i64 %accg408, i64* %307
  %fw409 = load double, double* %fw
  store double %fw409, double* %308
  %expon410 = load double, double* %expon
  store double %expon410, double* %309
  %per411 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per411, <3 x double>* %310
  %dolw412 = load i64, i64* %dolw
  store i64 %dolw412, i64* %311
  %dogw413 = load i64, i64* %dogw
  store i64 %dogw413, i64* %312
  %disp414 = load double, double* %disp
  store double %disp414, double* %313
  %dfreq415 = load double, double* %dfreq
  store double %dfreq415, double* %314
  %gflow416 = load double, double* %gflow
  store double %gflow416, double* %315
  %maxoctaves417 = load double, double* %maxoctaves
  store double %maxoctaves417, double* %317
  %lacunarity418 = load double, double* %lacunarity
  store double %lacunarity418, double* %318
  %gain419 = load double, double* %gain
  store double %gain419, double* %319
  %mfT_palligator = call double @"mfT_palligator@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %304, i64* %305, i64* %306, i64* %307, double* %308, double* %309, <3 x double>* %310, i64* %311, i64* %312, double* %313, double* %314, double* %315, double* %316, double* %x_avg, <3 x double>* %x_off, double* %317, double* %318, double* %319, double* %x_oct)
  br label %UnifiedReturnBlock

false403:                                         ; preds = %false383
  %return421 = call i64 @"eq@ISS"(i8* %fractal380, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1228 = icmp ne i64 %return421, 0
  br i1 %1228, label %true422, label %end

true422:                                          ; preds = %false403
  %inv425 = load i64, i64* %inv
  store i64 %inv425, i64* %320
  %fold426 = load i64, i64* %fold
  store i64 %fold426, i64* %321
  %accl427 = load i64, i64* %accl
  store i64 %accl427, i64* %322
  %accg428 = load i64, i64* %accg
  store i64 %accg428, i64* %323
  %fw429 = load double, double* %fw
  store double %fw429, double* %324
  %expon430 = load double, double* %expon
  store double %expon430, double* %325
  %per431 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per431, <3 x double>* %326
  %dolw432 = load i64, i64* %dolw
  store i64 %dolw432, i64* %327
  %dogw433 = load i64, i64* %dogw
  store i64 %dogw433, i64* %328
  %disp434 = load double, double* %disp
  store double %disp434, double* %329
  %dfreq435 = load double, double* %dfreq
  store double %dfreq435, double* %330
  %gflow436 = load double, double* %gflow
  store double %gflow436, double* %331
  %maxoctaves437 = load double, double* %maxoctaves
  store double %maxoctaves437, double* %333
  %lacunarity438 = load double, double* %lacunarity
  store double %lacunarity438, double* %334
  %gain439 = load double, double* %gain
  store double %gain439, double* %335
  %hmfT_palligator = call double @"hmfT_palligator@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %320, i64* %321, i64* %322, i64* %323, double* %324, double* %325, <3 x double>* %326, i64* %327, i64* %328, double* %329, double* %330, double* %331, double* %332, double* %x_avg, <3 x double>* %x_off, double* %333, double* %334, double* %335, double* %x_oct)
  br label %UnifiedReturnBlock

true442:                                          ; preds = %false378
  %fractal445 = load i8*, i8** %fractal
  %return446 = call i64 @"eq@ISS"(i8* %fractal445, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1229 = icmp ne i64 %return446, 0
  br i1 %1229, label %true447, label %false448

false443:                                         ; preds = %false378
  %return503 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  %1230 = icmp ne i64 %return503, 0
  br i1 %1230, label %true504, label %false505

true447:                                          ; preds = %true442
  %inv450 = load i64, i64* %inv
  store i64 %inv450, i64* %336
  %fold451 = load i64, i64* %fold
  store i64 %fold451, i64* %337
  %accl452 = load i64, i64* %accl
  store i64 %accl452, i64* %338
  %accg453 = load i64, i64* %accg
  store i64 %accg453, i64* %339
  %fw454 = load double, double* %fw
  store double %fw454, double* %340
  %expon455 = load double, double* %expon
  store double %expon455, double* %341
  %dolw456 = load i64, i64* %dolw
  store i64 %dolw456, i64* %343
  %dogw457 = load i64, i64* %dogw
  store i64 %dogw457, i64* %344
  %disp458 = load double, double* %disp
  store double %disp458, double* %345
  %dfreq459 = load double, double* %dfreq
  store double %dfreq459, double* %346
  %gflow460 = load double, double* %gflow
  store double %gflow460, double* %347
  %maxoctaves461 = load double, double* %maxoctaves
  store double %maxoctaves461, double* %349
  %lacunarity462 = load double, double* %lacunarity
  store double %lacunarity462, double* %350
  %gain463 = load double, double* %gain
  store double %gain463, double* %351
  %fBm_perlin = call double @"fBm_perlin@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %336, i64* %337, i64* %338, i64* %339, double* %340, double* %341, <3 x double>* %342, i64* %343, i64* %344, double* %345, double* %346, double* %347, double* %348, double* %x_avg, <3 x double>* %x_off, double* %349, double* %350, double* %351, double* %x_oct)
  br label %UnifiedReturnBlock

false448:                                         ; preds = %true442
  %return465 = call i64 @"eq@ISS"(i8* %fractal445, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1231 = icmp ne i64 %return465, 0
  br i1 %1231, label %true466, label %false467

true466:                                          ; preds = %false448
  %inv469 = load i64, i64* %inv
  store i64 %inv469, i64* %352
  %fold470 = load i64, i64* %fold
  store i64 %fold470, i64* %353
  %accl471 = load i64, i64* %accl
  store i64 %accl471, i64* %354
  %accg472 = load i64, i64* %accg
  store i64 %accg472, i64* %355
  %fw473 = load double, double* %fw
  store double %fw473, double* %356
  %expon474 = load double, double* %expon
  store double %expon474, double* %357
  %dolw475 = load i64, i64* %dolw
  store i64 %dolw475, i64* %359
  %dogw476 = load i64, i64* %dogw
  store i64 %dogw476, i64* %360
  %disp477 = load double, double* %disp
  store double %disp477, double* %361
  %dfreq478 = load double, double* %dfreq
  store double %dfreq478, double* %362
  %gflow479 = load double, double* %gflow
  store double %gflow479, double* %363
  %maxoctaves480 = load double, double* %maxoctaves
  store double %maxoctaves480, double* %365
  %lacunarity481 = load double, double* %lacunarity
  store double %lacunarity481, double* %366
  %gain482 = load double, double* %gain
  store double %gain482, double* %367
  %mfT_perlin = call double @"mfT_perlin@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %352, i64* %353, i64* %354, i64* %355, double* %356, double* %357, <3 x double>* %358, i64* %359, i64* %360, double* %361, double* %362, double* %363, double* %364, double* %x_avg, <3 x double>* %x_off, double* %365, double* %366, double* %367, double* %x_oct)
  br label %UnifiedReturnBlock

false467:                                         ; preds = %false448
  %return484 = call i64 @"eq@ISS"(i8* %fractal445, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1232 = icmp ne i64 %return484, 0
  br i1 %1232, label %true485, label %end

true485:                                          ; preds = %false467
  %inv488 = load i64, i64* %inv
  store i64 %inv488, i64* %368
  %fold489 = load i64, i64* %fold
  store i64 %fold489, i64* %369
  %accl490 = load i64, i64* %accl
  store i64 %accl490, i64* %370
  %accg491 = load i64, i64* %accg
  store i64 %accg491, i64* %371
  %fw492 = load double, double* %fw
  store double %fw492, double* %372
  %expon493 = load double, double* %expon
  store double %expon493, double* %373
  %dolw494 = load i64, i64* %dolw
  store i64 %dolw494, i64* %375
  %dogw495 = load i64, i64* %dogw
  store i64 %dogw495, i64* %376
  %disp496 = load double, double* %disp
  store double %disp496, double* %377
  %dfreq497 = load double, double* %dfreq
  store double %dfreq497, double* %378
  %gflow498 = load double, double* %gflow
  store double %gflow498, double* %379
  %maxoctaves499 = load double, double* %maxoctaves
  store double %maxoctaves499, double* %381
  %lacunarity500 = load double, double* %lacunarity
  store double %lacunarity500, double* %382
  %gain501 = load double, double* %gain
  store double %gain501, double* %383
  %hmfT_perlin = call double @"hmfT_perlin@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %368, i64* %369, i64* %370, i64* %371, double* %372, double* %373, <3 x double>* %374, i64* %375, i64* %376, double* %377, double* %378, double* %379, double* %380, double* %x_avg, <3 x double>* %x_off, double* %381, double* %382, double* %383, double* %x_oct)
  br label %UnifiedReturnBlock

true504:                                          ; preds = %false443
  %fractal507 = load i8*, i8** %fractal
  %return508 = call i64 @"eq@ISS"(i8* %fractal507, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1233 = icmp ne i64 %return508, 0
  br i1 %1233, label %true509, label %false510

false505:                                         ; preds = %false443
  %return568 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0))
  %1234 = icmp ne i64 %return568, 0
  br i1 %1234, label %true569, label %false570

true509:                                          ; preds = %true504
  %inv512 = load i64, i64* %inv
  store i64 %inv512, i64* %384
  %fold513 = load i64, i64* %fold
  store i64 %fold513, i64* %385
  %accl514 = load i64, i64* %accl
  store i64 %accl514, i64* %386
  %accg515 = load i64, i64* %accg
  store i64 %accg515, i64* %387
  %fw516 = load double, double* %fw
  store double %fw516, double* %388
  %expon517 = load double, double* %expon
  store double %expon517, double* %389
  %per518 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per518, <3 x double>* %390
  %dolw519 = load i64, i64* %dolw
  store i64 %dolw519, i64* %391
  %dogw520 = load i64, i64* %dogw
  store i64 %dogw520, i64* %392
  %disp521 = load double, double* %disp
  store double %disp521, double* %393
  %dfreq522 = load double, double* %dfreq
  store double %dfreq522, double* %394
  %gflow523 = load double, double* %gflow
  store double %gflow523, double* %395
  %maxoctaves524 = load double, double* %maxoctaves
  store double %maxoctaves524, double* %397
  %lacunarity525 = load double, double* %lacunarity
  store double %lacunarity525, double* %398
  %gain526 = load double, double* %gain
  store double %gain526, double* %399
  %fBm_pperlin = call double @"fBm_pperlin@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %384, i64* %385, i64* %386, i64* %387, double* %388, double* %389, <3 x double>* %390, i64* %391, i64* %392, double* %393, double* %394, double* %395, double* %396, double* %x_avg, <3 x double>* %x_off, double* %397, double* %398, double* %399, double* %x_oct)
  br label %UnifiedReturnBlock

false510:                                         ; preds = %true504
  %return528 = call i64 @"eq@ISS"(i8* %fractal507, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1235 = icmp ne i64 %return528, 0
  br i1 %1235, label %true529, label %false530

true529:                                          ; preds = %false510
  %inv532 = load i64, i64* %inv
  store i64 %inv532, i64* %400
  %fold533 = load i64, i64* %fold
  store i64 %fold533, i64* %401
  %accl534 = load i64, i64* %accl
  store i64 %accl534, i64* %402
  %accg535 = load i64, i64* %accg
  store i64 %accg535, i64* %403
  %fw536 = load double, double* %fw
  store double %fw536, double* %404
  %expon537 = load double, double* %expon
  store double %expon537, double* %405
  %per538 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per538, <3 x double>* %406
  %dolw539 = load i64, i64* %dolw
  store i64 %dolw539, i64* %407
  %dogw540 = load i64, i64* %dogw
  store i64 %dogw540, i64* %408
  %disp541 = load double, double* %disp
  store double %disp541, double* %409
  %dfreq542 = load double, double* %dfreq
  store double %dfreq542, double* %410
  %gflow543 = load double, double* %gflow
  store double %gflow543, double* %411
  %maxoctaves544 = load double, double* %maxoctaves
  store double %maxoctaves544, double* %413
  %lacunarity545 = load double, double* %lacunarity
  store double %lacunarity545, double* %414
  %gain546 = load double, double* %gain
  store double %gain546, double* %415
  %mfT_pperlin = call double @"mfT_pperlin@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %400, i64* %401, i64* %402, i64* %403, double* %404, double* %405, <3 x double>* %406, i64* %407, i64* %408, double* %409, double* %410, double* %411, double* %412, double* %x_avg, <3 x double>* %x_off, double* %413, double* %414, double* %415, double* %x_oct)
  br label %UnifiedReturnBlock

false530:                                         ; preds = %false510
  %return548 = call i64 @"eq@ISS"(i8* %fractal507, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1236 = icmp ne i64 %return548, 0
  br i1 %1236, label %true549, label %end

true549:                                          ; preds = %false530
  %inv552 = load i64, i64* %inv
  store i64 %inv552, i64* %416
  %fold553 = load i64, i64* %fold
  store i64 %fold553, i64* %417
  %accl554 = load i64, i64* %accl
  store i64 %accl554, i64* %418
  %accg555 = load i64, i64* %accg
  store i64 %accg555, i64* %419
  %fw556 = load double, double* %fw
  store double %fw556, double* %420
  %expon557 = load double, double* %expon
  store double %expon557, double* %421
  %per558 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per558, <3 x double>* %422
  %dolw559 = load i64, i64* %dolw
  store i64 %dolw559, i64* %423
  %dogw560 = load i64, i64* %dogw
  store i64 %dogw560, i64* %424
  %disp561 = load double, double* %disp
  store double %disp561, double* %425
  %dfreq562 = load double, double* %dfreq
  store double %dfreq562, double* %426
  %gflow563 = load double, double* %gflow
  store double %gflow563, double* %427
  %maxoctaves564 = load double, double* %maxoctaves
  store double %maxoctaves564, double* %429
  %lacunarity565 = load double, double* %lacunarity
  store double %lacunarity565, double* %430
  %gain566 = load double, double* %gain
  store double %gain566, double* %431
  %hmfT_pperlin = call double @"hmfT_pperlin@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %416, i64* %417, i64* %418, i64* %419, double* %420, double* %421, <3 x double>* %422, i64* %423, i64* %424, double* %425, double* %426, double* %427, double* %428, double* %x_avg, <3 x double>* %x_off, double* %429, double* %430, double* %431, double* %x_oct)
  br label %UnifiedReturnBlock

true569:                                          ; preds = %false505
  %fractal572 = load i8*, i8** %fractal
  %return573 = call i64 @"eq@ISS"(i8* %fractal572, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1237 = icmp ne i64 %return573, 0
  br i1 %1237, label %true574, label %false575

false570:                                         ; preds = %false505
  %return630 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0))
  %1238 = icmp ne i64 %return630, 0
  br i1 %1238, label %true631, label %false632

true574:                                          ; preds = %true569
  %inv577 = load i64, i64* %inv
  store i64 %inv577, i64* %432
  %fold578 = load i64, i64* %fold
  store i64 %fold578, i64* %433
  %accl579 = load i64, i64* %accl
  store i64 %accl579, i64* %434
  %accg580 = load i64, i64* %accg
  store i64 %accg580, i64* %435
  %fw581 = load double, double* %fw
  store double %fw581, double* %436
  %expon582 = load double, double* %expon
  store double %expon582, double* %437
  %dolw583 = load i64, i64* %dolw
  store i64 %dolw583, i64* %439
  %dogw584 = load i64, i64* %dogw
  store i64 %dogw584, i64* %440
  %disp585 = load double, double* %disp
  store double %disp585, double* %441
  %dfreq586 = load double, double* %dfreq
  store double %dfreq586, double* %442
  %gflow587 = load double, double* %gflow
  store double %gflow587, double* %443
  %maxoctaves588 = load double, double* %maxoctaves
  store double %maxoctaves588, double* %445
  %lacunarity589 = load double, double* %lacunarity
  store double %lacunarity589, double* %446
  %gain590 = load double, double* %gain
  store double %gain590, double* %447
  %fBm_simplex = call double @"fBm_simplex@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %432, i64* %433, i64* %434, i64* %435, double* %436, double* %437, <3 x double>* %438, i64* %439, i64* %440, double* %441, double* %442, double* %443, double* %444, double* %x_avg, <3 x double>* %x_off, double* %445, double* %446, double* %447, double* %x_oct)
  br label %UnifiedReturnBlock

false575:                                         ; preds = %true569
  %return592 = call i64 @"eq@ISS"(i8* %fractal572, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1239 = icmp ne i64 %return592, 0
  br i1 %1239, label %true593, label %false594

true593:                                          ; preds = %false575
  %inv596 = load i64, i64* %inv
  store i64 %inv596, i64* %448
  %fold597 = load i64, i64* %fold
  store i64 %fold597, i64* %449
  %accl598 = load i64, i64* %accl
  store i64 %accl598, i64* %450
  %accg599 = load i64, i64* %accg
  store i64 %accg599, i64* %451
  %fw600 = load double, double* %fw
  store double %fw600, double* %452
  %expon601 = load double, double* %expon
  store double %expon601, double* %453
  %dolw602 = load i64, i64* %dolw
  store i64 %dolw602, i64* %455
  %dogw603 = load i64, i64* %dogw
  store i64 %dogw603, i64* %456
  %disp604 = load double, double* %disp
  store double %disp604, double* %457
  %dfreq605 = load double, double* %dfreq
  store double %dfreq605, double* %458
  %gflow606 = load double, double* %gflow
  store double %gflow606, double* %459
  %maxoctaves607 = load double, double* %maxoctaves
  store double %maxoctaves607, double* %461
  %lacunarity608 = load double, double* %lacunarity
  store double %lacunarity608, double* %462
  %gain609 = load double, double* %gain
  store double %gain609, double* %463
  %mfT_simplex = call double @"mfT_simplex@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %448, i64* %449, i64* %450, i64* %451, double* %452, double* %453, <3 x double>* %454, i64* %455, i64* %456, double* %457, double* %458, double* %459, double* %460, double* %x_avg, <3 x double>* %x_off, double* %461, double* %462, double* %463, double* %x_oct)
  br label %UnifiedReturnBlock

false594:                                         ; preds = %false575
  %return611 = call i64 @"eq@ISS"(i8* %fractal572, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1240 = icmp ne i64 %return611, 0
  br i1 %1240, label %true612, label %end

true612:                                          ; preds = %false594
  %inv615 = load i64, i64* %inv
  store i64 %inv615, i64* %464
  %fold616 = load i64, i64* %fold
  store i64 %fold616, i64* %465
  %accl617 = load i64, i64* %accl
  store i64 %accl617, i64* %466
  %accg618 = load i64, i64* %accg
  store i64 %accg618, i64* %467
  %fw619 = load double, double* %fw
  store double %fw619, double* %468
  %expon620 = load double, double* %expon
  store double %expon620, double* %469
  %dolw621 = load i64, i64* %dolw
  store i64 %dolw621, i64* %471
  %dogw622 = load i64, i64* %dogw
  store i64 %dogw622, i64* %472
  %disp623 = load double, double* %disp
  store double %disp623, double* %473
  %dfreq624 = load double, double* %dfreq
  store double %dfreq624, double* %474
  %gflow625 = load double, double* %gflow
  store double %gflow625, double* %475
  %maxoctaves626 = load double, double* %maxoctaves
  store double %maxoctaves626, double* %477
  %lacunarity627 = load double, double* %lacunarity
  store double %lacunarity627, double* %478
  %gain628 = load double, double* %gain
  store double %gain628, double* %479
  %hmfT_simplex = call double @"hmfT_simplex@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %464, i64* %465, i64* %466, i64* %467, double* %468, double* %469, <3 x double>* %470, i64* %471, i64* %472, double* %473, double* %474, double* %475, double* %476, double* %x_avg, <3 x double>* %x_off, double* %477, double* %478, double* %479, double* %x_oct)
  br label %UnifiedReturnBlock

true631:                                          ; preds = %false570
  %fractal634 = load i8*, i8** %fractal
  %return635 = call i64 @"eq@ISS"(i8* %fractal634, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1241 = icmp ne i64 %return635, 0
  br i1 %1241, label %true636, label %false637

false632:                                         ; preds = %false570
  %return695 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0))
  %1242 = icmp ne i64 %return695, 0
  br i1 %1242, label %true696, label %false697

true636:                                          ; preds = %true631
  %inv639 = load i64, i64* %inv
  store i64 %inv639, i64* %480
  %fold640 = load i64, i64* %fold
  store i64 %fold640, i64* %481
  %accl641 = load i64, i64* %accl
  store i64 %accl641, i64* %482
  %accg642 = load i64, i64* %accg
  store i64 %accg642, i64* %483
  %fw643 = load double, double* %fw
  store double %fw643, double* %484
  %expon644 = load double, double* %expon
  store double %expon644, double* %485
  %per645 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per645, <3 x double>* %486
  %dolw646 = load i64, i64* %dolw
  store i64 %dolw646, i64* %487
  %dogw647 = load i64, i64* %dogw
  store i64 %dogw647, i64* %488
  %disp648 = load double, double* %disp
  store double %disp648, double* %489
  %dfreq649 = load double, double* %dfreq
  store double %dfreq649, double* %490
  %gflow650 = load double, double* %gflow
  store double %gflow650, double* %491
  %maxoctaves651 = load double, double* %maxoctaves
  store double %maxoctaves651, double* %493
  %lacunarity652 = load double, double* %lacunarity
  store double %lacunarity652, double* %494
  %gain653 = load double, double* %gain
  store double %gain653, double* %495
  %fBm_psimplex = call double @"fBm_psimplex@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %480, i64* %481, i64* %482, i64* %483, double* %484, double* %485, <3 x double>* %486, i64* %487, i64* %488, double* %489, double* %490, double* %491, double* %492, double* %x_avg, <3 x double>* %x_off, double* %493, double* %494, double* %495, double* %x_oct)
  br label %UnifiedReturnBlock

false637:                                         ; preds = %true631
  %return655 = call i64 @"eq@ISS"(i8* %fractal634, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1243 = icmp ne i64 %return655, 0
  br i1 %1243, label %true656, label %false657

true656:                                          ; preds = %false637
  %inv659 = load i64, i64* %inv
  store i64 %inv659, i64* %496
  %fold660 = load i64, i64* %fold
  store i64 %fold660, i64* %497
  %accl661 = load i64, i64* %accl
  store i64 %accl661, i64* %498
  %accg662 = load i64, i64* %accg
  store i64 %accg662, i64* %499
  %fw663 = load double, double* %fw
  store double %fw663, double* %500
  %expon664 = load double, double* %expon
  store double %expon664, double* %501
  %per665 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per665, <3 x double>* %502
  %dolw666 = load i64, i64* %dolw
  store i64 %dolw666, i64* %503
  %dogw667 = load i64, i64* %dogw
  store i64 %dogw667, i64* %504
  %disp668 = load double, double* %disp
  store double %disp668, double* %505
  %dfreq669 = load double, double* %dfreq
  store double %dfreq669, double* %506
  %gflow670 = load double, double* %gflow
  store double %gflow670, double* %507
  %maxoctaves671 = load double, double* %maxoctaves
  store double %maxoctaves671, double* %509
  %lacunarity672 = load double, double* %lacunarity
  store double %lacunarity672, double* %510
  %gain673 = load double, double* %gain
  store double %gain673, double* %511
  %mfT_psimplex = call double @"mfT_psimplex@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %496, i64* %497, i64* %498, i64* %499, double* %500, double* %501, <3 x double>* %502, i64* %503, i64* %504, double* %505, double* %506, double* %507, double* %508, double* %x_avg, <3 x double>* %x_off, double* %509, double* %510, double* %511, double* %x_oct)
  br label %UnifiedReturnBlock

false657:                                         ; preds = %false637
  %return675 = call i64 @"eq@ISS"(i8* %fractal634, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1244 = icmp ne i64 %return675, 0
  br i1 %1244, label %true676, label %end

true676:                                          ; preds = %false657
  %inv679 = load i64, i64* %inv
  store i64 %inv679, i64* %512
  %fold680 = load i64, i64* %fold
  store i64 %fold680, i64* %513
  %accl681 = load i64, i64* %accl
  store i64 %accl681, i64* %514
  %accg682 = load i64, i64* %accg
  store i64 %accg682, i64* %515
  %fw683 = load double, double* %fw
  store double %fw683, double* %516
  %expon684 = load double, double* %expon
  store double %expon684, double* %517
  %per685 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per685, <3 x double>* %518
  %dolw686 = load i64, i64* %dolw
  store i64 %dolw686, i64* %519
  %dogw687 = load i64, i64* %dogw
  store i64 %dogw687, i64* %520
  %disp688 = load double, double* %disp
  store double %disp688, double* %521
  %dfreq689 = load double, double* %dfreq
  store double %dfreq689, double* %522
  %gflow690 = load double, double* %gflow
  store double %gflow690, double* %523
  %maxoctaves691 = load double, double* %maxoctaves
  store double %maxoctaves691, double* %525
  %lacunarity692 = load double, double* %lacunarity
  store double %lacunarity692, double* %526
  %gain693 = load double, double* %gain
  store double %gain693, double* %527
  %hmfT_psimplex = call double @"hmfT_psimplex@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %512, i64* %513, i64* %514, i64* %515, double* %516, double* %517, <3 x double>* %518, i64* %519, i64* %520, double* %521, double* %522, double* %523, double* %524, double* %x_avg, <3 x double>* %x_off, double* %525, double* %526, double* %527, double* %x_oct)
  br label %UnifiedReturnBlock

true696:                                          ; preds = %false632
  %fractal699 = load i8*, i8** %fractal
  %return700 = call i64 @"eq@ISS"(i8* %fractal699, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1245 = icmp ne i64 %return700, 0
  br i1 %1245, label %true701, label %false702

false697:                                         ; preds = %false632
  %return760 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @12, i64 0, i64 0))
  %1246 = icmp ne i64 %return760, 0
  br i1 %1246, label %true761, label %false762

true701:                                          ; preds = %true696
  %inv704 = load i64, i64* %inv
  store i64 %inv704, i64* %528
  %fold705 = load i64, i64* %fold
  store i64 %fold705, i64* %529
  %accl706 = load i64, i64* %accl
  store i64 %accl706, i64* %530
  %accg707 = load i64, i64* %accg
  store i64 %accg707, i64* %531
  %fw708 = load double, double* %fw
  store double %fw708, double* %532
  %expon709 = load double, double* %expon
  store double %expon709, double* %533
  %dolw710 = load i64, i64* %dolw
  store i64 %dolw710, i64* %535
  %dogw711 = load i64, i64* %dogw
  store i64 %dogw711, i64* %536
  %disp712 = load double, double* %disp
  store double %disp712, double* %537
  %dfreq713 = load double, double* %dfreq
  store double %dfreq713, double* %538
  %gflow714 = load double, double* %gflow
  store double %gflow714, double* %539
  %flow715 = load double, double* %flow
  store double %flow715, double* %540
  %maxoctaves716 = load double, double* %maxoctaves
  store double %maxoctaves716, double* %541
  %lacunarity717 = load double, double* %lacunarity
  store double %lacunarity717, double* %542
  %gain718 = load double, double* %gain
  store double %gain718, double* %543
  %fBm_flow = call double @"fBm_flow@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %528, i64* %529, i64* %530, i64* %531, double* %532, double* %533, <3 x double>* %534, i64* %535, i64* %536, double* %537, double* %538, double* %539, double* %540, double* %x_avg, <3 x double>* %x_off, double* %541, double* %542, double* %543, double* %x_oct)
  br label %UnifiedReturnBlock

false702:                                         ; preds = %true696
  %return720 = call i64 @"eq@ISS"(i8* %fractal699, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1247 = icmp ne i64 %return720, 0
  br i1 %1247, label %true721, label %false722

true721:                                          ; preds = %false702
  %inv724 = load i64, i64* %inv
  store i64 %inv724, i64* %544
  %fold725 = load i64, i64* %fold
  store i64 %fold725, i64* %545
  %accl726 = load i64, i64* %accl
  store i64 %accl726, i64* %546
  %accg727 = load i64, i64* %accg
  store i64 %accg727, i64* %547
  %fw728 = load double, double* %fw
  store double %fw728, double* %548
  %expon729 = load double, double* %expon
  store double %expon729, double* %549
  %dolw730 = load i64, i64* %dolw
  store i64 %dolw730, i64* %551
  %dogw731 = load i64, i64* %dogw
  store i64 %dogw731, i64* %552
  %disp732 = load double, double* %disp
  store double %disp732, double* %553
  %dfreq733 = load double, double* %dfreq
  store double %dfreq733, double* %554
  %gflow734 = load double, double* %gflow
  store double %gflow734, double* %555
  %flow735 = load double, double* %flow
  store double %flow735, double* %556
  %maxoctaves736 = load double, double* %maxoctaves
  store double %maxoctaves736, double* %557
  %lacunarity737 = load double, double* %lacunarity
  store double %lacunarity737, double* %558
  %gain738 = load double, double* %gain
  store double %gain738, double* %559
  %mfT_flow = call double @"mfT_flow@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %544, i64* %545, i64* %546, i64* %547, double* %548, double* %549, <3 x double>* %550, i64* %551, i64* %552, double* %553, double* %554, double* %555, double* %556, double* %x_avg, <3 x double>* %x_off, double* %557, double* %558, double* %559, double* %x_oct)
  br label %UnifiedReturnBlock

false722:                                         ; preds = %false702
  %return740 = call i64 @"eq@ISS"(i8* %fractal699, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1248 = icmp ne i64 %return740, 0
  br i1 %1248, label %true741, label %end

true741:                                          ; preds = %false722
  %inv744 = load i64, i64* %inv
  store i64 %inv744, i64* %560
  %fold745 = load i64, i64* %fold
  store i64 %fold745, i64* %561
  %accl746 = load i64, i64* %accl
  store i64 %accl746, i64* %562
  %accg747 = load i64, i64* %accg
  store i64 %accg747, i64* %563
  %fw748 = load double, double* %fw
  store double %fw748, double* %564
  %expon749 = load double, double* %expon
  store double %expon749, double* %565
  %dolw750 = load i64, i64* %dolw
  store i64 %dolw750, i64* %567
  %dogw751 = load i64, i64* %dogw
  store i64 %dogw751, i64* %568
  %disp752 = load double, double* %disp
  store double %disp752, double* %569
  %dfreq753 = load double, double* %dfreq
  store double %dfreq753, double* %570
  %gflow754 = load double, double* %gflow
  store double %gflow754, double* %571
  %flow755 = load double, double* %flow
  store double %flow755, double* %572
  %maxoctaves756 = load double, double* %maxoctaves
  store double %maxoctaves756, double* %573
  %lacunarity757 = load double, double* %lacunarity
  store double %lacunarity757, double* %574
  %gain758 = load double, double* %gain
  store double %gain758, double* %575
  %hmfT_flow = call double @"hmfT_flow@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %560, i64* %561, i64* %562, i64* %563, double* %564, double* %565, <3 x double>* %566, i64* %567, i64* %568, double* %569, double* %570, double* %571, double* %572, double* %x_avg, <3 x double>* %x_off, double* %573, double* %574, double* %575, double* %x_oct)
  br label %UnifiedReturnBlock

true761:                                          ; preds = %false697
  %fractal764 = load i8*, i8** %fractal
  %return765 = call i64 @"eq@ISS"(i8* %fractal764, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1249 = icmp ne i64 %return765, 0
  br i1 %1249, label %true766, label %false767

false762:                                         ; preds = %false697
  %return828 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @23, i64 0, i64 0))
  %1250 = icmp ne i64 %return828, 0
  br i1 %1250, label %true829, label %false830

true766:                                          ; preds = %true761
  %inv769 = load i64, i64* %inv
  store i64 %inv769, i64* %576
  %fold770 = load i64, i64* %fold
  store i64 %fold770, i64* %577
  %accl771 = load i64, i64* %accl
  store i64 %accl771, i64* %578
  %accg772 = load i64, i64* %accg
  store i64 %accg772, i64* %579
  %fw773 = load double, double* %fw
  store double %fw773, double* %580
  %expon774 = load double, double* %expon
  store double %expon774, double* %581
  %per775 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per775, <3 x double>* %582
  %dolw776 = load i64, i64* %dolw
  store i64 %dolw776, i64* %583
  %dogw777 = load i64, i64* %dogw
  store i64 %dogw777, i64* %584
  %disp778 = load double, double* %disp
  store double %disp778, double* %585
  %dfreq779 = load double, double* %dfreq
  store double %dfreq779, double* %586
  %gflow780 = load double, double* %gflow
  store double %gflow780, double* %587
  %flow781 = load double, double* %flow
  store double %flow781, double* %588
  %maxoctaves782 = load double, double* %maxoctaves
  store double %maxoctaves782, double* %589
  %lacunarity783 = load double, double* %lacunarity
  store double %lacunarity783, double* %590
  %gain784 = load double, double* %gain
  store double %gain784, double* %591
  %fBm_pflow = call double @"fBm_pflow@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %576, i64* %577, i64* %578, i64* %579, double* %580, double* %581, <3 x double>* %582, i64* %583, i64* %584, double* %585, double* %586, double* %587, double* %588, double* %x_avg, <3 x double>* %x_off, double* %589, double* %590, double* %591, double* %x_oct)
  br label %UnifiedReturnBlock

false767:                                         ; preds = %true761
  %return786 = call i64 @"eq@ISS"(i8* %fractal764, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1251 = icmp ne i64 %return786, 0
  br i1 %1251, label %true787, label %false788

true787:                                          ; preds = %false767
  %inv790 = load i64, i64* %inv
  store i64 %inv790, i64* %592
  %fold791 = load i64, i64* %fold
  store i64 %fold791, i64* %593
  %accl792 = load i64, i64* %accl
  store i64 %accl792, i64* %594
  %accg793 = load i64, i64* %accg
  store i64 %accg793, i64* %595
  %fw794 = load double, double* %fw
  store double %fw794, double* %596
  %expon795 = load double, double* %expon
  store double %expon795, double* %597
  %per796 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per796, <3 x double>* %598
  %dolw797 = load i64, i64* %dolw
  store i64 %dolw797, i64* %599
  %dogw798 = load i64, i64* %dogw
  store i64 %dogw798, i64* %600
  %disp799 = load double, double* %disp
  store double %disp799, double* %601
  %dfreq800 = load double, double* %dfreq
  store double %dfreq800, double* %602
  %gflow801 = load double, double* %gflow
  store double %gflow801, double* %603
  %flow802 = load double, double* %flow
  store double %flow802, double* %604
  %maxoctaves803 = load double, double* %maxoctaves
  store double %maxoctaves803, double* %605
  %lacunarity804 = load double, double* %lacunarity
  store double %lacunarity804, double* %606
  %gain805 = load double, double* %gain
  store double %gain805, double* %607
  %mfT_pflow = call double @"mfT_pflow@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %592, i64* %593, i64* %594, i64* %595, double* %596, double* %597, <3 x double>* %598, i64* %599, i64* %600, double* %601, double* %602, double* %603, double* %604, double* %x_avg, <3 x double>* %x_off, double* %605, double* %606, double* %607, double* %x_oct)
  br label %UnifiedReturnBlock

false788:                                         ; preds = %false767
  %return807 = call i64 @"eq@ISS"(i8* %fractal764, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1252 = icmp ne i64 %return807, 0
  br i1 %1252, label %true808, label %end

true808:                                          ; preds = %false788
  %inv811 = load i64, i64* %inv
  store i64 %inv811, i64* %608
  %fold812 = load i64, i64* %fold
  store i64 %fold812, i64* %609
  %accl813 = load i64, i64* %accl
  store i64 %accl813, i64* %610
  %accg814 = load i64, i64* %accg
  store i64 %accg814, i64* %611
  %fw815 = load double, double* %fw
  store double %fw815, double* %612
  %expon816 = load double, double* %expon
  store double %expon816, double* %613
  %per817 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per817, <3 x double>* %614
  %dolw818 = load i64, i64* %dolw
  store i64 %dolw818, i64* %615
  %dogw819 = load i64, i64* %dogw
  store i64 %dogw819, i64* %616
  %disp820 = load double, double* %disp
  store double %disp820, double* %617
  %dfreq821 = load double, double* %dfreq
  store double %dfreq821, double* %618
  %gflow822 = load double, double* %gflow
  store double %gflow822, double* %619
  %flow823 = load double, double* %flow
  store double %flow823, double* %620
  %maxoctaves824 = load double, double* %maxoctaves
  store double %maxoctaves824, double* %621
  %lacunarity825 = load double, double* %lacunarity
  store double %lacunarity825, double* %622
  %gain826 = load double, double* %gain
  store double %gain826, double* %623
  %hmfT_pflow = call double @"hmfT_pflow@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %608, i64* %609, i64* %610, i64* %611, double* %612, double* %613, <3 x double>* %614, i64* %615, i64* %616, double* %617, double* %618, double* %619, double* %620, double* %x_avg, <3 x double>* %x_off, double* %621, double* %622, double* %623, double* %x_oct)
  br label %UnifiedReturnBlock

true829:                                          ; preds = %false762
  %fractal832 = load i8*, i8** %fractal
  %return833 = call i64 @"eq@ISS"(i8* %fractal832, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1253 = icmp ne i64 %return833, 0
  br i1 %1253, label %true834, label %false835

false830:                                         ; preds = %false762
  %return890 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @24, i64 0, i64 0))
  %1254 = icmp ne i64 %return890, 0
  br i1 %1254, label %true891, label %false892

true834:                                          ; preds = %true829
  %inv837 = load i64, i64* %inv
  store i64 %inv837, i64* %624
  %fold838 = load i64, i64* %fold
  store i64 %fold838, i64* %625
  %accl839 = load i64, i64* %accl
  store i64 %accl839, i64* %626
  %accg840 = load i64, i64* %accg
  store i64 %accg840, i64* %627
  %fw841 = load double, double* %fw
  store double %fw841, double* %628
  %expon842 = load double, double* %expon
  store double %expon842, double* %629
  %dolw843 = load i64, i64* %dolw
  store i64 %dolw843, i64* %631
  %dogw844 = load i64, i64* %dogw
  store i64 %dogw844, i64* %632
  %disp845 = load double, double* %disp
  store double %disp845, double* %633
  %dfreq846 = load double, double* %dfreq
  store double %dfreq846, double* %634
  %gflow847 = load double, double* %gflow
  store double %gflow847, double* %635
  %maxoctaves848 = load double, double* %maxoctaves
  store double %maxoctaves848, double* %637
  %lacunarity849 = load double, double* %lacunarity
  store double %lacunarity849, double* %638
  %gain850 = load double, double* %gain
  store double %gain850, double* %639
  %fBm_worleyFA = call double @"fBm_worleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %624, i64* %625, i64* %626, i64* %627, double* %628, double* %629, <3 x double>* %630, i64* %631, i64* %632, double* %633, double* %634, double* %635, double* %636, double* %x_avg, <3 x double>* %x_off, double* %637, double* %638, double* %639, double* %x_oct)
  br label %UnifiedReturnBlock

false835:                                         ; preds = %true829
  %return852 = call i64 @"eq@ISS"(i8* %fractal832, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1255 = icmp ne i64 %return852, 0
  br i1 %1255, label %true853, label %false854

true853:                                          ; preds = %false835
  %inv856 = load i64, i64* %inv
  store i64 %inv856, i64* %640
  %fold857 = load i64, i64* %fold
  store i64 %fold857, i64* %641
  %accl858 = load i64, i64* %accl
  store i64 %accl858, i64* %642
  %accg859 = load i64, i64* %accg
  store i64 %accg859, i64* %643
  %fw860 = load double, double* %fw
  store double %fw860, double* %644
  %expon861 = load double, double* %expon
  store double %expon861, double* %645
  %dolw862 = load i64, i64* %dolw
  store i64 %dolw862, i64* %647
  %dogw863 = load i64, i64* %dogw
  store i64 %dogw863, i64* %648
  %disp864 = load double, double* %disp
  store double %disp864, double* %649
  %dfreq865 = load double, double* %dfreq
  store double %dfreq865, double* %650
  %gflow866 = load double, double* %gflow
  store double %gflow866, double* %651
  %maxoctaves867 = load double, double* %maxoctaves
  store double %maxoctaves867, double* %653
  %lacunarity868 = load double, double* %lacunarity
  store double %lacunarity868, double* %654
  %gain869 = load double, double* %gain
  store double %gain869, double* %655
  %mfT_worleyFA = call double @"mfT_worleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %640, i64* %641, i64* %642, i64* %643, double* %644, double* %645, <3 x double>* %646, i64* %647, i64* %648, double* %649, double* %650, double* %651, double* %652, double* %x_avg, <3 x double>* %x_off, double* %653, double* %654, double* %655, double* %x_oct)
  br label %UnifiedReturnBlock

false854:                                         ; preds = %false835
  %return871 = call i64 @"eq@ISS"(i8* %fractal832, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1256 = icmp ne i64 %return871, 0
  br i1 %1256, label %true872, label %end

true872:                                          ; preds = %false854
  %inv875 = load i64, i64* %inv
  store i64 %inv875, i64* %656
  %fold876 = load i64, i64* %fold
  store i64 %fold876, i64* %657
  %accl877 = load i64, i64* %accl
  store i64 %accl877, i64* %658
  %accg878 = load i64, i64* %accg
  store i64 %accg878, i64* %659
  %fw879 = load double, double* %fw
  store double %fw879, double* %660
  %expon880 = load double, double* %expon
  store double %expon880, double* %661
  %dolw881 = load i64, i64* %dolw
  store i64 %dolw881, i64* %663
  %dogw882 = load i64, i64* %dogw
  store i64 %dogw882, i64* %664
  %disp883 = load double, double* %disp
  store double %disp883, double* %665
  %dfreq884 = load double, double* %dfreq
  store double %dfreq884, double* %666
  %gflow885 = load double, double* %gflow
  store double %gflow885, double* %667
  %maxoctaves886 = load double, double* %maxoctaves
  store double %maxoctaves886, double* %669
  %lacunarity887 = load double, double* %lacunarity
  store double %lacunarity887, double* %670
  %gain888 = load double, double* %gain
  store double %gain888, double* %671
  %hmfT_worleyFA = call double @"hmfT_worleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %656, i64* %657, i64* %658, i64* %659, double* %660, double* %661, <3 x double>* %662, i64* %663, i64* %664, double* %665, double* %666, double* %667, double* %668, double* %x_avg, <3 x double>* %x_off, double* %669, double* %670, double* %671, double* %x_oct)
  br label %UnifiedReturnBlock

true891:                                          ; preds = %false830
  %fractal894 = load i8*, i8** %fractal
  %return895 = call i64 @"eq@ISS"(i8* %fractal894, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1257 = icmp ne i64 %return895, 0
  br i1 %1257, label %true896, label %false897

false892:                                         ; preds = %false830
  %return952 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @25, i64 0, i64 0))
  %1258 = icmp ne i64 %return952, 0
  br i1 %1258, label %true953, label %false954

true896:                                          ; preds = %true891
  %inv899 = load i64, i64* %inv
  store i64 %inv899, i64* %672
  %fold900 = load i64, i64* %fold
  store i64 %fold900, i64* %673
  %accl901 = load i64, i64* %accl
  store i64 %accl901, i64* %674
  %accg902 = load i64, i64* %accg
  store i64 %accg902, i64* %675
  %fw903 = load double, double* %fw
  store double %fw903, double* %676
  %expon904 = load double, double* %expon
  store double %expon904, double* %677
  %dolw905 = load i64, i64* %dolw
  store i64 %dolw905, i64* %679
  %dogw906 = load i64, i64* %dogw
  store i64 %dogw906, i64* %680
  %disp907 = load double, double* %disp
  store double %disp907, double* %681
  %dfreq908 = load double, double* %dfreq
  store double %dfreq908, double* %682
  %gflow909 = load double, double* %gflow
  store double %gflow909, double* %683
  %maxoctaves910 = load double, double* %maxoctaves
  store double %maxoctaves910, double* %685
  %lacunarity911 = load double, double* %lacunarity
  store double %lacunarity911, double* %686
  %gain912 = load double, double* %gain
  store double %gain912, double* %687
  %fBm_worleyFB = call double @"fBm_worleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %672, i64* %673, i64* %674, i64* %675, double* %676, double* %677, <3 x double>* %678, i64* %679, i64* %680, double* %681, double* %682, double* %683, double* %684, double* %x_avg, <3 x double>* %x_off, double* %685, double* %686, double* %687, double* %x_oct)
  br label %UnifiedReturnBlock

false897:                                         ; preds = %true891
  %return914 = call i64 @"eq@ISS"(i8* %fractal894, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1259 = icmp ne i64 %return914, 0
  br i1 %1259, label %true915, label %false916

true915:                                          ; preds = %false897
  %inv918 = load i64, i64* %inv
  store i64 %inv918, i64* %688
  %fold919 = load i64, i64* %fold
  store i64 %fold919, i64* %689
  %accl920 = load i64, i64* %accl
  store i64 %accl920, i64* %690
  %accg921 = load i64, i64* %accg
  store i64 %accg921, i64* %691
  %fw922 = load double, double* %fw
  store double %fw922, double* %692
  %expon923 = load double, double* %expon
  store double %expon923, double* %693
  %dolw924 = load i64, i64* %dolw
  store i64 %dolw924, i64* %695
  %dogw925 = load i64, i64* %dogw
  store i64 %dogw925, i64* %696
  %disp926 = load double, double* %disp
  store double %disp926, double* %697
  %dfreq927 = load double, double* %dfreq
  store double %dfreq927, double* %698
  %gflow928 = load double, double* %gflow
  store double %gflow928, double* %699
  %maxoctaves929 = load double, double* %maxoctaves
  store double %maxoctaves929, double* %701
  %lacunarity930 = load double, double* %lacunarity
  store double %lacunarity930, double* %702
  %gain931 = load double, double* %gain
  store double %gain931, double* %703
  %mfT_worleyFB = call double @"mfT_worleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %688, i64* %689, i64* %690, i64* %691, double* %692, double* %693, <3 x double>* %694, i64* %695, i64* %696, double* %697, double* %698, double* %699, double* %700, double* %x_avg, <3 x double>* %x_off, double* %701, double* %702, double* %703, double* %x_oct)
  br label %UnifiedReturnBlock

false916:                                         ; preds = %false897
  %return933 = call i64 @"eq@ISS"(i8* %fractal894, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1260 = icmp ne i64 %return933, 0
  br i1 %1260, label %true934, label %end

true934:                                          ; preds = %false916
  %inv937 = load i64, i64* %inv
  store i64 %inv937, i64* %704
  %fold938 = load i64, i64* %fold
  store i64 %fold938, i64* %705
  %accl939 = load i64, i64* %accl
  store i64 %accl939, i64* %706
  %accg940 = load i64, i64* %accg
  store i64 %accg940, i64* %707
  %fw941 = load double, double* %fw
  store double %fw941, double* %708
  %expon942 = load double, double* %expon
  store double %expon942, double* %709
  %dolw943 = load i64, i64* %dolw
  store i64 %dolw943, i64* %711
  %dogw944 = load i64, i64* %dogw
  store i64 %dogw944, i64* %712
  %disp945 = load double, double* %disp
  store double %disp945, double* %713
  %dfreq946 = load double, double* %dfreq
  store double %dfreq946, double* %714
  %gflow947 = load double, double* %gflow
  store double %gflow947, double* %715
  %maxoctaves948 = load double, double* %maxoctaves
  store double %maxoctaves948, double* %717
  %lacunarity949 = load double, double* %lacunarity
  store double %lacunarity949, double* %718
  %gain950 = load double, double* %gain
  store double %gain950, double* %719
  %hmfT_worleyFB = call double @"hmfT_worleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %704, i64* %705, i64* %706, i64* %707, double* %708, double* %709, <3 x double>* %710, i64* %711, i64* %712, double* %713, double* %714, double* %715, double* %716, double* %x_avg, <3 x double>* %x_off, double* %717, double* %718, double* %719, double* %x_oct)
  br label %UnifiedReturnBlock

true953:                                          ; preds = %false892
  %fractal956 = load i8*, i8** %fractal
  %return957 = call i64 @"eq@ISS"(i8* %fractal956, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1261 = icmp ne i64 %return957, 0
  br i1 %1261, label %true958, label %false959

false954:                                         ; preds = %false892
  %return1014 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @26, i64 0, i64 0))
  %1262 = icmp ne i64 %return1014, 0
  br i1 %1262, label %true1015, label %false1016

true958:                                          ; preds = %true953
  %inv961 = load i64, i64* %inv
  store i64 %inv961, i64* %720
  %fold962 = load i64, i64* %fold
  store i64 %fold962, i64* %721
  %accl963 = load i64, i64* %accl
  store i64 %accl963, i64* %722
  %accg964 = load i64, i64* %accg
  store i64 %accg964, i64* %723
  %fw965 = load double, double* %fw
  store double %fw965, double* %724
  %expon966 = load double, double* %expon
  store double %expon966, double* %725
  %dolw967 = load i64, i64* %dolw
  store i64 %dolw967, i64* %727
  %dogw968 = load i64, i64* %dogw
  store i64 %dogw968, i64* %728
  %disp969 = load double, double* %disp
  store double %disp969, double* %729
  %dfreq970 = load double, double* %dfreq
  store double %dfreq970, double* %730
  %gflow971 = load double, double* %gflow
  store double %gflow971, double* %731
  %maxoctaves972 = load double, double* %maxoctaves
  store double %maxoctaves972, double* %733
  %lacunarity973 = load double, double* %lacunarity
  store double %lacunarity973, double* %734
  %gain974 = load double, double* %gain
  store double %gain974, double* %735
  %fBm_mworleyFA = call double @"fBm_mworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %720, i64* %721, i64* %722, i64* %723, double* %724, double* %725, <3 x double>* %726, i64* %727, i64* %728, double* %729, double* %730, double* %731, double* %732, double* %x_avg, <3 x double>* %x_off, double* %733, double* %734, double* %735, double* %x_oct)
  br label %UnifiedReturnBlock

false959:                                         ; preds = %true953
  %return976 = call i64 @"eq@ISS"(i8* %fractal956, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1263 = icmp ne i64 %return976, 0
  br i1 %1263, label %true977, label %false978

true977:                                          ; preds = %false959
  %inv980 = load i64, i64* %inv
  store i64 %inv980, i64* %736
  %fold981 = load i64, i64* %fold
  store i64 %fold981, i64* %737
  %accl982 = load i64, i64* %accl
  store i64 %accl982, i64* %738
  %accg983 = load i64, i64* %accg
  store i64 %accg983, i64* %739
  %fw984 = load double, double* %fw
  store double %fw984, double* %740
  %expon985 = load double, double* %expon
  store double %expon985, double* %741
  %dolw986 = load i64, i64* %dolw
  store i64 %dolw986, i64* %743
  %dogw987 = load i64, i64* %dogw
  store i64 %dogw987, i64* %744
  %disp988 = load double, double* %disp
  store double %disp988, double* %745
  %dfreq989 = load double, double* %dfreq
  store double %dfreq989, double* %746
  %gflow990 = load double, double* %gflow
  store double %gflow990, double* %747
  %maxoctaves991 = load double, double* %maxoctaves
  store double %maxoctaves991, double* %749
  %lacunarity992 = load double, double* %lacunarity
  store double %lacunarity992, double* %750
  %gain993 = load double, double* %gain
  store double %gain993, double* %751
  %mfT_mworleyFA = call double @"mfT_mworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %736, i64* %737, i64* %738, i64* %739, double* %740, double* %741, <3 x double>* %742, i64* %743, i64* %744, double* %745, double* %746, double* %747, double* %748, double* %x_avg, <3 x double>* %x_off, double* %749, double* %750, double* %751, double* %x_oct)
  br label %UnifiedReturnBlock

false978:                                         ; preds = %false959
  %return995 = call i64 @"eq@ISS"(i8* %fractal956, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1264 = icmp ne i64 %return995, 0
  br i1 %1264, label %true996, label %end

true996:                                          ; preds = %false978
  %inv999 = load i64, i64* %inv
  store i64 %inv999, i64* %752
  %fold1000 = load i64, i64* %fold
  store i64 %fold1000, i64* %753
  %accl1001 = load i64, i64* %accl
  store i64 %accl1001, i64* %754
  %accg1002 = load i64, i64* %accg
  store i64 %accg1002, i64* %755
  %fw1003 = load double, double* %fw
  store double %fw1003, double* %756
  %expon1004 = load double, double* %expon
  store double %expon1004, double* %757
  %dolw1005 = load i64, i64* %dolw
  store i64 %dolw1005, i64* %759
  %dogw1006 = load i64, i64* %dogw
  store i64 %dogw1006, i64* %760
  %disp1007 = load double, double* %disp
  store double %disp1007, double* %761
  %dfreq1008 = load double, double* %dfreq
  store double %dfreq1008, double* %762
  %gflow1009 = load double, double* %gflow
  store double %gflow1009, double* %763
  %maxoctaves1010 = load double, double* %maxoctaves
  store double %maxoctaves1010, double* %765
  %lacunarity1011 = load double, double* %lacunarity
  store double %lacunarity1011, double* %766
  %gain1012 = load double, double* %gain
  store double %gain1012, double* %767
  %hmfT_mworleyFA = call double @"hmfT_mworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %752, i64* %753, i64* %754, i64* %755, double* %756, double* %757, <3 x double>* %758, i64* %759, i64* %760, double* %761, double* %762, double* %763, double* %764, double* %x_avg, <3 x double>* %x_off, double* %765, double* %766, double* %767, double* %x_oct)
  br label %UnifiedReturnBlock

true1015:                                         ; preds = %false954
  %fractal1018 = load i8*, i8** %fractal
  %return1019 = call i64 @"eq@ISS"(i8* %fractal1018, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1265 = icmp ne i64 %return1019, 0
  br i1 %1265, label %true1020, label %false1021

false1016:                                        ; preds = %false954
  %return1076 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @27, i64 0, i64 0))
  %1266 = icmp ne i64 %return1076, 0
  br i1 %1266, label %true1077, label %false1078

true1020:                                         ; preds = %true1015
  %inv1023 = load i64, i64* %inv
  store i64 %inv1023, i64* %768
  %fold1024 = load i64, i64* %fold
  store i64 %fold1024, i64* %769
  %accl1025 = load i64, i64* %accl
  store i64 %accl1025, i64* %770
  %accg1026 = load i64, i64* %accg
  store i64 %accg1026, i64* %771
  %fw1027 = load double, double* %fw
  store double %fw1027, double* %772
  %expon1028 = load double, double* %expon
  store double %expon1028, double* %773
  %dolw1029 = load i64, i64* %dolw
  store i64 %dolw1029, i64* %775
  %dogw1030 = load i64, i64* %dogw
  store i64 %dogw1030, i64* %776
  %disp1031 = load double, double* %disp
  store double %disp1031, double* %777
  %dfreq1032 = load double, double* %dfreq
  store double %dfreq1032, double* %778
  %gflow1033 = load double, double* %gflow
  store double %gflow1033, double* %779
  %maxoctaves1034 = load double, double* %maxoctaves
  store double %maxoctaves1034, double* %781
  %lacunarity1035 = load double, double* %lacunarity
  store double %lacunarity1035, double* %782
  %gain1036 = load double, double* %gain
  store double %gain1036, double* %783
  %fBm_mworleyFB = call double @"fBm_mworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %768, i64* %769, i64* %770, i64* %771, double* %772, double* %773, <3 x double>* %774, i64* %775, i64* %776, double* %777, double* %778, double* %779, double* %780, double* %x_avg, <3 x double>* %x_off, double* %781, double* %782, double* %783, double* %x_oct)
  br label %UnifiedReturnBlock

false1021:                                        ; preds = %true1015
  %return1038 = call i64 @"eq@ISS"(i8* %fractal1018, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1267 = icmp ne i64 %return1038, 0
  br i1 %1267, label %true1039, label %false1040

true1039:                                         ; preds = %false1021
  %inv1042 = load i64, i64* %inv
  store i64 %inv1042, i64* %784
  %fold1043 = load i64, i64* %fold
  store i64 %fold1043, i64* %785
  %accl1044 = load i64, i64* %accl
  store i64 %accl1044, i64* %786
  %accg1045 = load i64, i64* %accg
  store i64 %accg1045, i64* %787
  %fw1046 = load double, double* %fw
  store double %fw1046, double* %788
  %expon1047 = load double, double* %expon
  store double %expon1047, double* %789
  %dolw1048 = load i64, i64* %dolw
  store i64 %dolw1048, i64* %791
  %dogw1049 = load i64, i64* %dogw
  store i64 %dogw1049, i64* %792
  %disp1050 = load double, double* %disp
  store double %disp1050, double* %793
  %dfreq1051 = load double, double* %dfreq
  store double %dfreq1051, double* %794
  %gflow1052 = load double, double* %gflow
  store double %gflow1052, double* %795
  %maxoctaves1053 = load double, double* %maxoctaves
  store double %maxoctaves1053, double* %797
  %lacunarity1054 = load double, double* %lacunarity
  store double %lacunarity1054, double* %798
  %gain1055 = load double, double* %gain
  store double %gain1055, double* %799
  %mfT_mworleyFB = call double @"mfT_mworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %784, i64* %785, i64* %786, i64* %787, double* %788, double* %789, <3 x double>* %790, i64* %791, i64* %792, double* %793, double* %794, double* %795, double* %796, double* %x_avg, <3 x double>* %x_off, double* %797, double* %798, double* %799, double* %x_oct)
  br label %UnifiedReturnBlock

false1040:                                        ; preds = %false1021
  %return1057 = call i64 @"eq@ISS"(i8* %fractal1018, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1268 = icmp ne i64 %return1057, 0
  br i1 %1268, label %true1058, label %end

true1058:                                         ; preds = %false1040
  %inv1061 = load i64, i64* %inv
  store i64 %inv1061, i64* %800
  %fold1062 = load i64, i64* %fold
  store i64 %fold1062, i64* %801
  %accl1063 = load i64, i64* %accl
  store i64 %accl1063, i64* %802
  %accg1064 = load i64, i64* %accg
  store i64 %accg1064, i64* %803
  %fw1065 = load double, double* %fw
  store double %fw1065, double* %804
  %expon1066 = load double, double* %expon
  store double %expon1066, double* %805
  %dolw1067 = load i64, i64* %dolw
  store i64 %dolw1067, i64* %807
  %dogw1068 = load i64, i64* %dogw
  store i64 %dogw1068, i64* %808
  %disp1069 = load double, double* %disp
  store double %disp1069, double* %809
  %dfreq1070 = load double, double* %dfreq
  store double %dfreq1070, double* %810
  %gflow1071 = load double, double* %gflow
  store double %gflow1071, double* %811
  %maxoctaves1072 = load double, double* %maxoctaves
  store double %maxoctaves1072, double* %813
  %lacunarity1073 = load double, double* %lacunarity
  store double %lacunarity1073, double* %814
  %gain1074 = load double, double* %gain
  store double %gain1074, double* %815
  %hmfT_mworleyFB = call double @"hmfT_mworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %800, i64* %801, i64* %802, i64* %803, double* %804, double* %805, <3 x double>* %806, i64* %807, i64* %808, double* %809, double* %810, double* %811, double* %812, double* %x_avg, <3 x double>* %x_off, double* %813, double* %814, double* %815, double* %x_oct)
  br label %UnifiedReturnBlock

true1077:                                         ; preds = %false1016
  %fractal1080 = load i8*, i8** %fractal
  %return1081 = call i64 @"eq@ISS"(i8* %fractal1080, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1269 = icmp ne i64 %return1081, 0
  br i1 %1269, label %true1082, label %false1083

false1078:                                        ; preds = %false1016
  %return1138 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @28, i64 0, i64 0))
  %1270 = icmp ne i64 %return1138, 0
  br i1 %1270, label %true1139, label %false1140

true1082:                                         ; preds = %true1077
  %inv1085 = load i64, i64* %inv
  store i64 %inv1085, i64* %816
  %fold1086 = load i64, i64* %fold
  store i64 %fold1086, i64* %817
  %accl1087 = load i64, i64* %accl
  store i64 %accl1087, i64* %818
  %accg1088 = load i64, i64* %accg
  store i64 %accg1088, i64* %819
  %fw1089 = load double, double* %fw
  store double %fw1089, double* %820
  %expon1090 = load double, double* %expon
  store double %expon1090, double* %821
  %dolw1091 = load i64, i64* %dolw
  store i64 %dolw1091, i64* %823
  %dogw1092 = load i64, i64* %dogw
  store i64 %dogw1092, i64* %824
  %disp1093 = load double, double* %disp
  store double %disp1093, double* %825
  %dfreq1094 = load double, double* %dfreq
  store double %dfreq1094, double* %826
  %gflow1095 = load double, double* %gflow
  store double %gflow1095, double* %827
  %maxoctaves1096 = load double, double* %maxoctaves
  store double %maxoctaves1096, double* %829
  %lacunarity1097 = load double, double* %lacunarity
  store double %lacunarity1097, double* %830
  %gain1098 = load double, double* %gain
  store double %gain1098, double* %831
  %fBm_cworleyFA = call double @"fBm_cworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %816, i64* %817, i64* %818, i64* %819, double* %820, double* %821, <3 x double>* %822, i64* %823, i64* %824, double* %825, double* %826, double* %827, double* %828, double* %x_avg, <3 x double>* %x_off, double* %829, double* %830, double* %831, double* %x_oct)
  br label %UnifiedReturnBlock

false1083:                                        ; preds = %true1077
  %return1100 = call i64 @"eq@ISS"(i8* %fractal1080, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1271 = icmp ne i64 %return1100, 0
  br i1 %1271, label %true1101, label %false1102

true1101:                                         ; preds = %false1083
  %inv1104 = load i64, i64* %inv
  store i64 %inv1104, i64* %832
  %fold1105 = load i64, i64* %fold
  store i64 %fold1105, i64* %833
  %accl1106 = load i64, i64* %accl
  store i64 %accl1106, i64* %834
  %accg1107 = load i64, i64* %accg
  store i64 %accg1107, i64* %835
  %fw1108 = load double, double* %fw
  store double %fw1108, double* %836
  %expon1109 = load double, double* %expon
  store double %expon1109, double* %837
  %dolw1110 = load i64, i64* %dolw
  store i64 %dolw1110, i64* %839
  %dogw1111 = load i64, i64* %dogw
  store i64 %dogw1111, i64* %840
  %disp1112 = load double, double* %disp
  store double %disp1112, double* %841
  %dfreq1113 = load double, double* %dfreq
  store double %dfreq1113, double* %842
  %gflow1114 = load double, double* %gflow
  store double %gflow1114, double* %843
  %maxoctaves1115 = load double, double* %maxoctaves
  store double %maxoctaves1115, double* %845
  %lacunarity1116 = load double, double* %lacunarity
  store double %lacunarity1116, double* %846
  %gain1117 = load double, double* %gain
  store double %gain1117, double* %847
  %mfT_cworleyFA = call double @"mfT_cworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %832, i64* %833, i64* %834, i64* %835, double* %836, double* %837, <3 x double>* %838, i64* %839, i64* %840, double* %841, double* %842, double* %843, double* %844, double* %x_avg, <3 x double>* %x_off, double* %845, double* %846, double* %847, double* %x_oct)
  br label %UnifiedReturnBlock

false1102:                                        ; preds = %false1083
  %return1119 = call i64 @"eq@ISS"(i8* %fractal1080, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1272 = icmp ne i64 %return1119, 0
  br i1 %1272, label %true1120, label %end

true1120:                                         ; preds = %false1102
  %inv1123 = load i64, i64* %inv
  store i64 %inv1123, i64* %848
  %fold1124 = load i64, i64* %fold
  store i64 %fold1124, i64* %849
  %accl1125 = load i64, i64* %accl
  store i64 %accl1125, i64* %850
  %accg1126 = load i64, i64* %accg
  store i64 %accg1126, i64* %851
  %fw1127 = load double, double* %fw
  store double %fw1127, double* %852
  %expon1128 = load double, double* %expon
  store double %expon1128, double* %853
  %dolw1129 = load i64, i64* %dolw
  store i64 %dolw1129, i64* %855
  %dogw1130 = load i64, i64* %dogw
  store i64 %dogw1130, i64* %856
  %disp1131 = load double, double* %disp
  store double %disp1131, double* %857
  %dfreq1132 = load double, double* %dfreq
  store double %dfreq1132, double* %858
  %gflow1133 = load double, double* %gflow
  store double %gflow1133, double* %859
  %maxoctaves1134 = load double, double* %maxoctaves
  store double %maxoctaves1134, double* %861
  %lacunarity1135 = load double, double* %lacunarity
  store double %lacunarity1135, double* %862
  %gain1136 = load double, double* %gain
  store double %gain1136, double* %863
  %hmfT_cworleyFA = call double @"hmfT_cworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %848, i64* %849, i64* %850, i64* %851, double* %852, double* %853, <3 x double>* %854, i64* %855, i64* %856, double* %857, double* %858, double* %859, double* %860, double* %x_avg, <3 x double>* %x_off, double* %861, double* %862, double* %863, double* %x_oct)
  br label %UnifiedReturnBlock

true1139:                                         ; preds = %false1078
  %fractal1142 = load i8*, i8** %fractal
  %return1143 = call i64 @"eq@ISS"(i8* %fractal1142, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1273 = icmp ne i64 %return1143, 0
  br i1 %1273, label %true1144, label %false1145

false1140:                                        ; preds = %false1078
  %return1200 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @14, i64 0, i64 0))
  %1274 = icmp ne i64 %return1200, 0
  br i1 %1274, label %true1201, label %false1202

true1144:                                         ; preds = %true1139
  %inv1147 = load i64, i64* %inv
  store i64 %inv1147, i64* %864
  %fold1148 = load i64, i64* %fold
  store i64 %fold1148, i64* %865
  %accl1149 = load i64, i64* %accl
  store i64 %accl1149, i64* %866
  %accg1150 = load i64, i64* %accg
  store i64 %accg1150, i64* %867
  %fw1151 = load double, double* %fw
  store double %fw1151, double* %868
  %expon1152 = load double, double* %expon
  store double %expon1152, double* %869
  %dolw1153 = load i64, i64* %dolw
  store i64 %dolw1153, i64* %871
  %dogw1154 = load i64, i64* %dogw
  store i64 %dogw1154, i64* %872
  %disp1155 = load double, double* %disp
  store double %disp1155, double* %873
  %dfreq1156 = load double, double* %dfreq
  store double %dfreq1156, double* %874
  %gflow1157 = load double, double* %gflow
  store double %gflow1157, double* %875
  %maxoctaves1158 = load double, double* %maxoctaves
  store double %maxoctaves1158, double* %877
  %lacunarity1159 = load double, double* %lacunarity
  store double %lacunarity1159, double* %878
  %gain1160 = load double, double* %gain
  store double %gain1160, double* %879
  %fBm_cworleyFB = call double @"fBm_cworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %864, i64* %865, i64* %866, i64* %867, double* %868, double* %869, <3 x double>* %870, i64* %871, i64* %872, double* %873, double* %874, double* %875, double* %876, double* %x_avg, <3 x double>* %x_off, double* %877, double* %878, double* %879, double* %x_oct)
  br label %UnifiedReturnBlock

false1145:                                        ; preds = %true1139
  %return1162 = call i64 @"eq@ISS"(i8* %fractal1142, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1275 = icmp ne i64 %return1162, 0
  br i1 %1275, label %true1163, label %false1164

true1163:                                         ; preds = %false1145
  %inv1166 = load i64, i64* %inv
  store i64 %inv1166, i64* %880
  %fold1167 = load i64, i64* %fold
  store i64 %fold1167, i64* %881
  %accl1168 = load i64, i64* %accl
  store i64 %accl1168, i64* %882
  %accg1169 = load i64, i64* %accg
  store i64 %accg1169, i64* %883
  %fw1170 = load double, double* %fw
  store double %fw1170, double* %884
  %expon1171 = load double, double* %expon
  store double %expon1171, double* %885
  %dolw1172 = load i64, i64* %dolw
  store i64 %dolw1172, i64* %887
  %dogw1173 = load i64, i64* %dogw
  store i64 %dogw1173, i64* %888
  %disp1174 = load double, double* %disp
  store double %disp1174, double* %889
  %dfreq1175 = load double, double* %dfreq
  store double %dfreq1175, double* %890
  %gflow1176 = load double, double* %gflow
  store double %gflow1176, double* %891
  %maxoctaves1177 = load double, double* %maxoctaves
  store double %maxoctaves1177, double* %893
  %lacunarity1178 = load double, double* %lacunarity
  store double %lacunarity1178, double* %894
  %gain1179 = load double, double* %gain
  store double %gain1179, double* %895
  %mfT_cworleyFB = call double @"mfT_cworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %880, i64* %881, i64* %882, i64* %883, double* %884, double* %885, <3 x double>* %886, i64* %887, i64* %888, double* %889, double* %890, double* %891, double* %892, double* %x_avg, <3 x double>* %x_off, double* %893, double* %894, double* %895, double* %x_oct)
  br label %UnifiedReturnBlock

false1164:                                        ; preds = %false1145
  %return1181 = call i64 @"eq@ISS"(i8* %fractal1142, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1276 = icmp ne i64 %return1181, 0
  br i1 %1276, label %true1182, label %end

true1182:                                         ; preds = %false1164
  %inv1185 = load i64, i64* %inv
  store i64 %inv1185, i64* %896
  %fold1186 = load i64, i64* %fold
  store i64 %fold1186, i64* %897
  %accl1187 = load i64, i64* %accl
  store i64 %accl1187, i64* %898
  %accg1188 = load i64, i64* %accg
  store i64 %accg1188, i64* %899
  %fw1189 = load double, double* %fw
  store double %fw1189, double* %900
  %expon1190 = load double, double* %expon
  store double %expon1190, double* %901
  %dolw1191 = load i64, i64* %dolw
  store i64 %dolw1191, i64* %903
  %dogw1192 = load i64, i64* %dogw
  store i64 %dogw1192, i64* %904
  %disp1193 = load double, double* %disp
  store double %disp1193, double* %905
  %dfreq1194 = load double, double* %dfreq
  store double %dfreq1194, double* %906
  %gflow1195 = load double, double* %gflow
  store double %gflow1195, double* %907
  %maxoctaves1196 = load double, double* %maxoctaves
  store double %maxoctaves1196, double* %909
  %lacunarity1197 = load double, double* %lacunarity
  store double %lacunarity1197, double* %910
  %gain1198 = load double, double* %gain
  store double %gain1198, double* %911
  %hmfT_cworleyFB = call double @"hmfT_cworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %896, i64* %897, i64* %898, i64* %899, double* %900, double* %901, <3 x double>* %902, i64* %903, i64* %904, double* %905, double* %906, double* %907, double* %908, double* %x_avg, <3 x double>* %x_off, double* %909, double* %910, double* %911, double* %x_oct)
  br label %UnifiedReturnBlock

true1201:                                         ; preds = %false1140
  %fractal1204 = load i8*, i8** %fractal
  %return1205 = call i64 @"eq@ISS"(i8* %fractal1204, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1277 = icmp ne i64 %return1205, 0
  br i1 %1277, label %true1206, label %false1207

false1202:                                        ; preds = %false1140
  %return1265 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @15, i64 0, i64 0))
  %1278 = icmp ne i64 %return1265, 0
  br i1 %1278, label %true1266, label %false1267

true1206:                                         ; preds = %true1201
  %inv1209 = load i64, i64* %inv
  store i64 %inv1209, i64* %912
  %fold1210 = load i64, i64* %fold
  store i64 %fold1210, i64* %913
  %accl1211 = load i64, i64* %accl
  store i64 %accl1211, i64* %914
  %accg1212 = load i64, i64* %accg
  store i64 %accg1212, i64* %915
  %fw1213 = load double, double* %fw
  store double %fw1213, double* %916
  %expon1214 = load double, double* %expon
  store double %expon1214, double* %917
  %per1215 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1215, <3 x double>* %918
  %dolw1216 = load i64, i64* %dolw
  store i64 %dolw1216, i64* %919
  %dogw1217 = load i64, i64* %dogw
  store i64 %dogw1217, i64* %920
  %disp1218 = load double, double* %disp
  store double %disp1218, double* %921
  %dfreq1219 = load double, double* %dfreq
  store double %dfreq1219, double* %922
  %gflow1220 = load double, double* %gflow
  store double %gflow1220, double* %923
  %maxoctaves1221 = load double, double* %maxoctaves
  store double %maxoctaves1221, double* %925
  %lacunarity1222 = load double, double* %lacunarity
  store double %lacunarity1222, double* %926
  %gain1223 = load double, double* %gain
  store double %gain1223, double* %927
  %fBm_pworleyFA = call double @"fBm_pworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %912, i64* %913, i64* %914, i64* %915, double* %916, double* %917, <3 x double>* %918, i64* %919, i64* %920, double* %921, double* %922, double* %923, double* %924, double* %x_avg, <3 x double>* %x_off, double* %925, double* %926, double* %927, double* %x_oct)
  br label %UnifiedReturnBlock

false1207:                                        ; preds = %true1201
  %return1225 = call i64 @"eq@ISS"(i8* %fractal1204, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1279 = icmp ne i64 %return1225, 0
  br i1 %1279, label %true1226, label %false1227

true1226:                                         ; preds = %false1207
  %inv1229 = load i64, i64* %inv
  store i64 %inv1229, i64* %928
  %fold1230 = load i64, i64* %fold
  store i64 %fold1230, i64* %929
  %accl1231 = load i64, i64* %accl
  store i64 %accl1231, i64* %930
  %accg1232 = load i64, i64* %accg
  store i64 %accg1232, i64* %931
  %fw1233 = load double, double* %fw
  store double %fw1233, double* %932
  %expon1234 = load double, double* %expon
  store double %expon1234, double* %933
  %per1235 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1235, <3 x double>* %934
  %dolw1236 = load i64, i64* %dolw
  store i64 %dolw1236, i64* %935
  %dogw1237 = load i64, i64* %dogw
  store i64 %dogw1237, i64* %936
  %disp1238 = load double, double* %disp
  store double %disp1238, double* %937
  %dfreq1239 = load double, double* %dfreq
  store double %dfreq1239, double* %938
  %gflow1240 = load double, double* %gflow
  store double %gflow1240, double* %939
  %maxoctaves1241 = load double, double* %maxoctaves
  store double %maxoctaves1241, double* %941
  %lacunarity1242 = load double, double* %lacunarity
  store double %lacunarity1242, double* %942
  %gain1243 = load double, double* %gain
  store double %gain1243, double* %943
  %mfT_pworleyFA = call double @"mfT_pworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %928, i64* %929, i64* %930, i64* %931, double* %932, double* %933, <3 x double>* %934, i64* %935, i64* %936, double* %937, double* %938, double* %939, double* %940, double* %x_avg, <3 x double>* %x_off, double* %941, double* %942, double* %943, double* %x_oct)
  br label %UnifiedReturnBlock

false1227:                                        ; preds = %false1207
  %return1245 = call i64 @"eq@ISS"(i8* %fractal1204, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1280 = icmp ne i64 %return1245, 0
  br i1 %1280, label %true1246, label %end

true1246:                                         ; preds = %false1227
  %inv1249 = load i64, i64* %inv
  store i64 %inv1249, i64* %944
  %fold1250 = load i64, i64* %fold
  store i64 %fold1250, i64* %945
  %accl1251 = load i64, i64* %accl
  store i64 %accl1251, i64* %946
  %accg1252 = load i64, i64* %accg
  store i64 %accg1252, i64* %947
  %fw1253 = load double, double* %fw
  store double %fw1253, double* %948
  %expon1254 = load double, double* %expon
  store double %expon1254, double* %949
  %per1255 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1255, <3 x double>* %950
  %dolw1256 = load i64, i64* %dolw
  store i64 %dolw1256, i64* %951
  %dogw1257 = load i64, i64* %dogw
  store i64 %dogw1257, i64* %952
  %disp1258 = load double, double* %disp
  store double %disp1258, double* %953
  %dfreq1259 = load double, double* %dfreq
  store double %dfreq1259, double* %954
  %gflow1260 = load double, double* %gflow
  store double %gflow1260, double* %955
  %maxoctaves1261 = load double, double* %maxoctaves
  store double %maxoctaves1261, double* %957
  %lacunarity1262 = load double, double* %lacunarity
  store double %lacunarity1262, double* %958
  %gain1263 = load double, double* %gain
  store double %gain1263, double* %959
  %hmfT_pworleyFA = call double @"hmfT_pworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %944, i64* %945, i64* %946, i64* %947, double* %948, double* %949, <3 x double>* %950, i64* %951, i64* %952, double* %953, double* %954, double* %955, double* %956, double* %x_avg, <3 x double>* %x_off, double* %957, double* %958, double* %959, double* %x_oct)
  br label %UnifiedReturnBlock

true1266:                                         ; preds = %false1202
  %fractal1269 = load i8*, i8** %fractal
  %return1270 = call i64 @"eq@ISS"(i8* %fractal1269, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1281 = icmp ne i64 %return1270, 0
  br i1 %1281, label %true1271, label %false1272

false1267:                                        ; preds = %false1202
  %return1330 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @17, i64 0, i64 0))
  %1282 = icmp ne i64 %return1330, 0
  br i1 %1282, label %true1331, label %false1332

true1271:                                         ; preds = %true1266
  %inv1274 = load i64, i64* %inv
  store i64 %inv1274, i64* %960
  %fold1275 = load i64, i64* %fold
  store i64 %fold1275, i64* %961
  %accl1276 = load i64, i64* %accl
  store i64 %accl1276, i64* %962
  %accg1277 = load i64, i64* %accg
  store i64 %accg1277, i64* %963
  %fw1278 = load double, double* %fw
  store double %fw1278, double* %964
  %expon1279 = load double, double* %expon
  store double %expon1279, double* %965
  %per1280 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1280, <3 x double>* %966
  %dolw1281 = load i64, i64* %dolw
  store i64 %dolw1281, i64* %967
  %dogw1282 = load i64, i64* %dogw
  store i64 %dogw1282, i64* %968
  %disp1283 = load double, double* %disp
  store double %disp1283, double* %969
  %dfreq1284 = load double, double* %dfreq
  store double %dfreq1284, double* %970
  %gflow1285 = load double, double* %gflow
  store double %gflow1285, double* %971
  %maxoctaves1286 = load double, double* %maxoctaves
  store double %maxoctaves1286, double* %973
  %lacunarity1287 = load double, double* %lacunarity
  store double %lacunarity1287, double* %974
  %gain1288 = load double, double* %gain
  store double %gain1288, double* %975
  %fBm_pworleyFB = call double @"fBm_pworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %960, i64* %961, i64* %962, i64* %963, double* %964, double* %965, <3 x double>* %966, i64* %967, i64* %968, double* %969, double* %970, double* %971, double* %972, double* %x_avg, <3 x double>* %x_off, double* %973, double* %974, double* %975, double* %x_oct)
  br label %UnifiedReturnBlock

false1272:                                        ; preds = %true1266
  %return1290 = call i64 @"eq@ISS"(i8* %fractal1269, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1283 = icmp ne i64 %return1290, 0
  br i1 %1283, label %true1291, label %false1292

true1291:                                         ; preds = %false1272
  %inv1294 = load i64, i64* %inv
  store i64 %inv1294, i64* %976
  %fold1295 = load i64, i64* %fold
  store i64 %fold1295, i64* %977
  %accl1296 = load i64, i64* %accl
  store i64 %accl1296, i64* %978
  %accg1297 = load i64, i64* %accg
  store i64 %accg1297, i64* %979
  %fw1298 = load double, double* %fw
  store double %fw1298, double* %980
  %expon1299 = load double, double* %expon
  store double %expon1299, double* %981
  %per1300 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1300, <3 x double>* %982
  %dolw1301 = load i64, i64* %dolw
  store i64 %dolw1301, i64* %983
  %dogw1302 = load i64, i64* %dogw
  store i64 %dogw1302, i64* %984
  %disp1303 = load double, double* %disp
  store double %disp1303, double* %985
  %dfreq1304 = load double, double* %dfreq
  store double %dfreq1304, double* %986
  %gflow1305 = load double, double* %gflow
  store double %gflow1305, double* %987
  %maxoctaves1306 = load double, double* %maxoctaves
  store double %maxoctaves1306, double* %989
  %lacunarity1307 = load double, double* %lacunarity
  store double %lacunarity1307, double* %990
  %gain1308 = load double, double* %gain
  store double %gain1308, double* %991
  %mfT_pworleyFB = call double @"mfT_pworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %976, i64* %977, i64* %978, i64* %979, double* %980, double* %981, <3 x double>* %982, i64* %983, i64* %984, double* %985, double* %986, double* %987, double* %988, double* %x_avg, <3 x double>* %x_off, double* %989, double* %990, double* %991, double* %x_oct)
  br label %UnifiedReturnBlock

false1292:                                        ; preds = %false1272
  %return1310 = call i64 @"eq@ISS"(i8* %fractal1269, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1284 = icmp ne i64 %return1310, 0
  br i1 %1284, label %true1311, label %end

true1311:                                         ; preds = %false1292
  %inv1314 = load i64, i64* %inv
  store i64 %inv1314, i64* %992
  %fold1315 = load i64, i64* %fold
  store i64 %fold1315, i64* %993
  %accl1316 = load i64, i64* %accl
  store i64 %accl1316, i64* %994
  %accg1317 = load i64, i64* %accg
  store i64 %accg1317, i64* %995
  %fw1318 = load double, double* %fw
  store double %fw1318, double* %996
  %expon1319 = load double, double* %expon
  store double %expon1319, double* %997
  %per1320 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1320, <3 x double>* %998
  %dolw1321 = load i64, i64* %dolw
  store i64 %dolw1321, i64* %999
  %dogw1322 = load i64, i64* %dogw
  store i64 %dogw1322, i64* %1000
  %disp1323 = load double, double* %disp
  store double %disp1323, double* %1001
  %dfreq1324 = load double, double* %dfreq
  store double %dfreq1324, double* %1002
  %gflow1325 = load double, double* %gflow
  store double %gflow1325, double* %1003
  %maxoctaves1326 = load double, double* %maxoctaves
  store double %maxoctaves1326, double* %1005
  %lacunarity1327 = load double, double* %lacunarity
  store double %lacunarity1327, double* %1006
  %gain1328 = load double, double* %gain
  store double %gain1328, double* %1007
  %hmfT_pworleyFB = call double @"hmfT_pworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %992, i64* %993, i64* %994, i64* %995, double* %996, double* %997, <3 x double>* %998, i64* %999, i64* %1000, double* %1001, double* %1002, double* %1003, double* %1004, double* %x_avg, <3 x double>* %x_off, double* %1005, double* %1006, double* %1007, double* %x_oct)
  br label %UnifiedReturnBlock

true1331:                                         ; preds = %false1267
  %fractal1334 = load i8*, i8** %fractal
  %return1335 = call i64 @"eq@ISS"(i8* %fractal1334, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1285 = icmp ne i64 %return1335, 0
  br i1 %1285, label %true1336, label %false1337

false1332:                                        ; preds = %false1267
  %return1395 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @18, i64 0, i64 0))
  %1286 = icmp ne i64 %return1395, 0
  br i1 %1286, label %true1396, label %false1397

true1336:                                         ; preds = %true1331
  %inv1339 = load i64, i64* %inv
  store i64 %inv1339, i64* %1008
  %fold1340 = load i64, i64* %fold
  store i64 %fold1340, i64* %1009
  %accl1341 = load i64, i64* %accl
  store i64 %accl1341, i64* %1010
  %accg1342 = load i64, i64* %accg
  store i64 %accg1342, i64* %1011
  %fw1343 = load double, double* %fw
  store double %fw1343, double* %1012
  %expon1344 = load double, double* %expon
  store double %expon1344, double* %1013
  %per1345 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1345, <3 x double>* %1014
  %dolw1346 = load i64, i64* %dolw
  store i64 %dolw1346, i64* %1015
  %dogw1347 = load i64, i64* %dogw
  store i64 %dogw1347, i64* %1016
  %disp1348 = load double, double* %disp
  store double %disp1348, double* %1017
  %dfreq1349 = load double, double* %dfreq
  store double %dfreq1349, double* %1018
  %gflow1350 = load double, double* %gflow
  store double %gflow1350, double* %1019
  %maxoctaves1351 = load double, double* %maxoctaves
  store double %maxoctaves1351, double* %1021
  %lacunarity1352 = load double, double* %lacunarity
  store double %lacunarity1352, double* %1022
  %gain1353 = load double, double* %gain
  store double %gain1353, double* %1023
  %fBm_pmworleyFA = call double @"fBm_pmworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %1008, i64* %1009, i64* %1010, i64* %1011, double* %1012, double* %1013, <3 x double>* %1014, i64* %1015, i64* %1016, double* %1017, double* %1018, double* %1019, double* %1020, double* %x_avg, <3 x double>* %x_off, double* %1021, double* %1022, double* %1023, double* %x_oct)
  br label %UnifiedReturnBlock

false1337:                                        ; preds = %true1331
  %return1355 = call i64 @"eq@ISS"(i8* %fractal1334, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1287 = icmp ne i64 %return1355, 0
  br i1 %1287, label %true1356, label %false1357

true1356:                                         ; preds = %false1337
  %inv1359 = load i64, i64* %inv
  store i64 %inv1359, i64* %1024
  %fold1360 = load i64, i64* %fold
  store i64 %fold1360, i64* %1025
  %accl1361 = load i64, i64* %accl
  store i64 %accl1361, i64* %1026
  %accg1362 = load i64, i64* %accg
  store i64 %accg1362, i64* %1027
  %fw1363 = load double, double* %fw
  store double %fw1363, double* %1028
  %expon1364 = load double, double* %expon
  store double %expon1364, double* %1029
  %per1365 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1365, <3 x double>* %1030
  %dolw1366 = load i64, i64* %dolw
  store i64 %dolw1366, i64* %1031
  %dogw1367 = load i64, i64* %dogw
  store i64 %dogw1367, i64* %1032
  %disp1368 = load double, double* %disp
  store double %disp1368, double* %1033
  %dfreq1369 = load double, double* %dfreq
  store double %dfreq1369, double* %1034
  %gflow1370 = load double, double* %gflow
  store double %gflow1370, double* %1035
  %maxoctaves1371 = load double, double* %maxoctaves
  store double %maxoctaves1371, double* %1037
  %lacunarity1372 = load double, double* %lacunarity
  store double %lacunarity1372, double* %1038
  %gain1373 = load double, double* %gain
  store double %gain1373, double* %1039
  %mfT_pmworleyFA = call double @"mfT_pmworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %1024, i64* %1025, i64* %1026, i64* %1027, double* %1028, double* %1029, <3 x double>* %1030, i64* %1031, i64* %1032, double* %1033, double* %1034, double* %1035, double* %1036, double* %x_avg, <3 x double>* %x_off, double* %1037, double* %1038, double* %1039, double* %x_oct)
  br label %UnifiedReturnBlock

false1357:                                        ; preds = %false1337
  %return1375 = call i64 @"eq@ISS"(i8* %fractal1334, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1288 = icmp ne i64 %return1375, 0
  br i1 %1288, label %true1376, label %end

true1376:                                         ; preds = %false1357
  %inv1379 = load i64, i64* %inv
  store i64 %inv1379, i64* %1040
  %fold1380 = load i64, i64* %fold
  store i64 %fold1380, i64* %1041
  %accl1381 = load i64, i64* %accl
  store i64 %accl1381, i64* %1042
  %accg1382 = load i64, i64* %accg
  store i64 %accg1382, i64* %1043
  %fw1383 = load double, double* %fw
  store double %fw1383, double* %1044
  %expon1384 = load double, double* %expon
  store double %expon1384, double* %1045
  %per1385 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1385, <3 x double>* %1046
  %dolw1386 = load i64, i64* %dolw
  store i64 %dolw1386, i64* %1047
  %dogw1387 = load i64, i64* %dogw
  store i64 %dogw1387, i64* %1048
  %disp1388 = load double, double* %disp
  store double %disp1388, double* %1049
  %dfreq1389 = load double, double* %dfreq
  store double %dfreq1389, double* %1050
  %gflow1390 = load double, double* %gflow
  store double %gflow1390, double* %1051
  %maxoctaves1391 = load double, double* %maxoctaves
  store double %maxoctaves1391, double* %1053
  %lacunarity1392 = load double, double* %lacunarity
  store double %lacunarity1392, double* %1054
  %gain1393 = load double, double* %gain
  store double %gain1393, double* %1055
  %hmfT_pmworleyFA = call double @"hmfT_pmworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %1040, i64* %1041, i64* %1042, i64* %1043, double* %1044, double* %1045, <3 x double>* %1046, i64* %1047, i64* %1048, double* %1049, double* %1050, double* %1051, double* %1052, double* %x_avg, <3 x double>* %x_off, double* %1053, double* %1054, double* %1055, double* %x_oct)
  br label %UnifiedReturnBlock

true1396:                                         ; preds = %false1332
  %fractal1399 = load i8*, i8** %fractal
  %return1400 = call i64 @"eq@ISS"(i8* %fractal1399, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1289 = icmp ne i64 %return1400, 0
  br i1 %1289, label %true1401, label %false1402

false1397:                                        ; preds = %false1332
  %return1460 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @20, i64 0, i64 0))
  %1290 = icmp ne i64 %return1460, 0
  br i1 %1290, label %true1461, label %false1462

true1401:                                         ; preds = %true1396
  %inv1404 = load i64, i64* %inv
  store i64 %inv1404, i64* %1056
  %fold1405 = load i64, i64* %fold
  store i64 %fold1405, i64* %1057
  %accl1406 = load i64, i64* %accl
  store i64 %accl1406, i64* %1058
  %accg1407 = load i64, i64* %accg
  store i64 %accg1407, i64* %1059
  %fw1408 = load double, double* %fw
  store double %fw1408, double* %1060
  %expon1409 = load double, double* %expon
  store double %expon1409, double* %1061
  %per1410 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1410, <3 x double>* %1062
  %dolw1411 = load i64, i64* %dolw
  store i64 %dolw1411, i64* %1063
  %dogw1412 = load i64, i64* %dogw
  store i64 %dogw1412, i64* %1064
  %disp1413 = load double, double* %disp
  store double %disp1413, double* %1065
  %dfreq1414 = load double, double* %dfreq
  store double %dfreq1414, double* %1066
  %gflow1415 = load double, double* %gflow
  store double %gflow1415, double* %1067
  %maxoctaves1416 = load double, double* %maxoctaves
  store double %maxoctaves1416, double* %1069
  %lacunarity1417 = load double, double* %lacunarity
  store double %lacunarity1417, double* %1070
  %gain1418 = load double, double* %gain
  store double %gain1418, double* %1071
  %fBm_pmworleyFB = call double @"fBm_pmworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %1056, i64* %1057, i64* %1058, i64* %1059, double* %1060, double* %1061, <3 x double>* %1062, i64* %1063, i64* %1064, double* %1065, double* %1066, double* %1067, double* %1068, double* %x_avg, <3 x double>* %x_off, double* %1069, double* %1070, double* %1071, double* %x_oct)
  br label %UnifiedReturnBlock

false1402:                                        ; preds = %true1396
  %return1420 = call i64 @"eq@ISS"(i8* %fractal1399, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1291 = icmp ne i64 %return1420, 0
  br i1 %1291, label %true1421, label %false1422

true1421:                                         ; preds = %false1402
  %inv1424 = load i64, i64* %inv
  store i64 %inv1424, i64* %1072
  %fold1425 = load i64, i64* %fold
  store i64 %fold1425, i64* %1073
  %accl1426 = load i64, i64* %accl
  store i64 %accl1426, i64* %1074
  %accg1427 = load i64, i64* %accg
  store i64 %accg1427, i64* %1075
  %fw1428 = load double, double* %fw
  store double %fw1428, double* %1076
  %expon1429 = load double, double* %expon
  store double %expon1429, double* %1077
  %per1430 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1430, <3 x double>* %1078
  %dolw1431 = load i64, i64* %dolw
  store i64 %dolw1431, i64* %1079
  %dogw1432 = load i64, i64* %dogw
  store i64 %dogw1432, i64* %1080
  %disp1433 = load double, double* %disp
  store double %disp1433, double* %1081
  %dfreq1434 = load double, double* %dfreq
  store double %dfreq1434, double* %1082
  %gflow1435 = load double, double* %gflow
  store double %gflow1435, double* %1083
  %maxoctaves1436 = load double, double* %maxoctaves
  store double %maxoctaves1436, double* %1085
  %lacunarity1437 = load double, double* %lacunarity
  store double %lacunarity1437, double* %1086
  %gain1438 = load double, double* %gain
  store double %gain1438, double* %1087
  %mfT_pmworleyFB = call double @"mfT_pmworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %1072, i64* %1073, i64* %1074, i64* %1075, double* %1076, double* %1077, <3 x double>* %1078, i64* %1079, i64* %1080, double* %1081, double* %1082, double* %1083, double* %1084, double* %x_avg, <3 x double>* %x_off, double* %1085, double* %1086, double* %1087, double* %x_oct)
  br label %UnifiedReturnBlock

false1422:                                        ; preds = %false1402
  %return1440 = call i64 @"eq@ISS"(i8* %fractal1399, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1292 = icmp ne i64 %return1440, 0
  br i1 %1292, label %true1441, label %end

true1441:                                         ; preds = %false1422
  %inv1444 = load i64, i64* %inv
  store i64 %inv1444, i64* %1088
  %fold1445 = load i64, i64* %fold
  store i64 %fold1445, i64* %1089
  %accl1446 = load i64, i64* %accl
  store i64 %accl1446, i64* %1090
  %accg1447 = load i64, i64* %accg
  store i64 %accg1447, i64* %1091
  %fw1448 = load double, double* %fw
  store double %fw1448, double* %1092
  %expon1449 = load double, double* %expon
  store double %expon1449, double* %1093
  %per1450 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1450, <3 x double>* %1094
  %dolw1451 = load i64, i64* %dolw
  store i64 %dolw1451, i64* %1095
  %dogw1452 = load i64, i64* %dogw
  store i64 %dogw1452, i64* %1096
  %disp1453 = load double, double* %disp
  store double %disp1453, double* %1097
  %dfreq1454 = load double, double* %dfreq
  store double %dfreq1454, double* %1098
  %gflow1455 = load double, double* %gflow
  store double %gflow1455, double* %1099
  %maxoctaves1456 = load double, double* %maxoctaves
  store double %maxoctaves1456, double* %1101
  %lacunarity1457 = load double, double* %lacunarity
  store double %lacunarity1457, double* %1102
  %gain1458 = load double, double* %gain
  store double %gain1458, double* %1103
  %hmfT_pmworleyFB = call double @"hmfT_pmworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %1088, i64* %1089, i64* %1090, i64* %1091, double* %1092, double* %1093, <3 x double>* %1094, i64* %1095, i64* %1096, double* %1097, double* %1098, double* %1099, double* %1100, double* %x_avg, <3 x double>* %x_off, double* %1101, double* %1102, double* %1103, double* %x_oct)
  br label %UnifiedReturnBlock

true1461:                                         ; preds = %false1397
  %fractal1464 = load i8*, i8** %fractal
  %return1465 = call i64 @"eq@ISS"(i8* %fractal1464, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1293 = icmp ne i64 %return1465, 0
  br i1 %1293, label %true1466, label %false1467

false1462:                                        ; preds = %false1397
  %return1525 = call i64 @"eq@ISS"(i8* %basis1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @21, i64 0, i64 0))
  %1294 = icmp ne i64 %return1525, 0
  br i1 %1294, label %true1526, label %end

true1466:                                         ; preds = %true1461
  %inv1469 = load i64, i64* %inv
  store i64 %inv1469, i64* %1104
  %fold1470 = load i64, i64* %fold
  store i64 %fold1470, i64* %1105
  %accl1471 = load i64, i64* %accl
  store i64 %accl1471, i64* %1106
  %accg1472 = load i64, i64* %accg
  store i64 %accg1472, i64* %1107
  %fw1473 = load double, double* %fw
  store double %fw1473, double* %1108
  %expon1474 = load double, double* %expon
  store double %expon1474, double* %1109
  %per1475 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1475, <3 x double>* %1110
  %dolw1476 = load i64, i64* %dolw
  store i64 %dolw1476, i64* %1111
  %dogw1477 = load i64, i64* %dogw
  store i64 %dogw1477, i64* %1112
  %disp1478 = load double, double* %disp
  store double %disp1478, double* %1113
  %dfreq1479 = load double, double* %dfreq
  store double %dfreq1479, double* %1114
  %gflow1480 = load double, double* %gflow
  store double %gflow1480, double* %1115
  %maxoctaves1481 = load double, double* %maxoctaves
  store double %maxoctaves1481, double* %1117
  %lacunarity1482 = load double, double* %lacunarity
  store double %lacunarity1482, double* %1118
  %gain1483 = load double, double* %gain
  store double %gain1483, double* %1119
  %fBm_pcworleyFA = call double @"fBm_pcworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %1104, i64* %1105, i64* %1106, i64* %1107, double* %1108, double* %1109, <3 x double>* %1110, i64* %1111, i64* %1112, double* %1113, double* %1114, double* %1115, double* %1116, double* %x_avg, <3 x double>* %x_off, double* %1117, double* %1118, double* %1119, double* %x_oct)
  br label %UnifiedReturnBlock

false1467:                                        ; preds = %true1461
  %return1485 = call i64 @"eq@ISS"(i8* %fractal1464, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1295 = icmp ne i64 %return1485, 0
  br i1 %1295, label %true1486, label %false1487

true1486:                                         ; preds = %false1467
  %inv1489 = load i64, i64* %inv
  store i64 %inv1489, i64* %1120
  %fold1490 = load i64, i64* %fold
  store i64 %fold1490, i64* %1121
  %accl1491 = load i64, i64* %accl
  store i64 %accl1491, i64* %1122
  %accg1492 = load i64, i64* %accg
  store i64 %accg1492, i64* %1123
  %fw1493 = load double, double* %fw
  store double %fw1493, double* %1124
  %expon1494 = load double, double* %expon
  store double %expon1494, double* %1125
  %per1495 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1495, <3 x double>* %1126
  %dolw1496 = load i64, i64* %dolw
  store i64 %dolw1496, i64* %1127
  %dogw1497 = load i64, i64* %dogw
  store i64 %dogw1497, i64* %1128
  %disp1498 = load double, double* %disp
  store double %disp1498, double* %1129
  %dfreq1499 = load double, double* %dfreq
  store double %dfreq1499, double* %1130
  %gflow1500 = load double, double* %gflow
  store double %gflow1500, double* %1131
  %maxoctaves1501 = load double, double* %maxoctaves
  store double %maxoctaves1501, double* %1133
  %lacunarity1502 = load double, double* %lacunarity
  store double %lacunarity1502, double* %1134
  %gain1503 = load double, double* %gain
  store double %gain1503, double* %1135
  %mfT_pcworleyFA = call double @"mfT_pcworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %1120, i64* %1121, i64* %1122, i64* %1123, double* %1124, double* %1125, <3 x double>* %1126, i64* %1127, i64* %1128, double* %1129, double* %1130, double* %1131, double* %1132, double* %x_avg, <3 x double>* %x_off, double* %1133, double* %1134, double* %1135, double* %x_oct)
  br label %UnifiedReturnBlock

false1487:                                        ; preds = %false1467
  %return1505 = call i64 @"eq@ISS"(i8* %fractal1464, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1296 = icmp ne i64 %return1505, 0
  br i1 %1296, label %true1506, label %end

true1506:                                         ; preds = %false1487
  %inv1509 = load i64, i64* %inv
  store i64 %inv1509, i64* %1136
  %fold1510 = load i64, i64* %fold
  store i64 %fold1510, i64* %1137
  %accl1511 = load i64, i64* %accl
  store i64 %accl1511, i64* %1138
  %accg1512 = load i64, i64* %accg
  store i64 %accg1512, i64* %1139
  %fw1513 = load double, double* %fw
  store double %fw1513, double* %1140
  %expon1514 = load double, double* %expon
  store double %expon1514, double* %1141
  %per1515 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1515, <3 x double>* %1142
  %dolw1516 = load i64, i64* %dolw
  store i64 %dolw1516, i64* %1143
  %dogw1517 = load i64, i64* %dogw
  store i64 %dogw1517, i64* %1144
  %disp1518 = load double, double* %disp
  store double %disp1518, double* %1145
  %dfreq1519 = load double, double* %dfreq
  store double %dfreq1519, double* %1146
  %gflow1520 = load double, double* %gflow
  store double %gflow1520, double* %1147
  %maxoctaves1521 = load double, double* %maxoctaves
  store double %maxoctaves1521, double* %1149
  %lacunarity1522 = load double, double* %lacunarity
  store double %lacunarity1522, double* %1150
  %gain1523 = load double, double* %gain
  store double %gain1523, double* %1151
  %hmfT_pcworleyFA = call double @"hmfT_pcworleyFA@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %1136, i64* %1137, i64* %1138, i64* %1139, double* %1140, double* %1141, <3 x double>* %1142, i64* %1143, i64* %1144, double* %1145, double* %1146, double* %1147, double* %1148, double* %x_avg, <3 x double>* %x_off, double* %1149, double* %1150, double* %1151, double* %x_oct)
  br label %UnifiedReturnBlock

true1526:                                         ; preds = %false1462
  %fractal1528 = load i8*, i8** %fractal
  %return1529 = call i64 @"eq@ISS"(i8* %fractal1528, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0))
  %1297 = icmp ne i64 %return1529, 0
  br i1 %1297, label %true1530, label %false1531

true1530:                                         ; preds = %true1526
  %inv1533 = load i64, i64* %inv
  store i64 %inv1533, i64* %1152
  %fold1534 = load i64, i64* %fold
  store i64 %fold1534, i64* %1153
  %accl1535 = load i64, i64* %accl
  store i64 %accl1535, i64* %1154
  %accg1536 = load i64, i64* %accg
  store i64 %accg1536, i64* %1155
  %fw1537 = load double, double* %fw
  store double %fw1537, double* %1156
  %expon1538 = load double, double* %expon
  store double %expon1538, double* %1157
  %per1539 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1539, <3 x double>* %1158
  %dolw1540 = load i64, i64* %dolw
  store i64 %dolw1540, i64* %1159
  %dogw1541 = load i64, i64* %dogw
  store i64 %dogw1541, i64* %1160
  %disp1542 = load double, double* %disp
  store double %disp1542, double* %1161
  %dfreq1543 = load double, double* %dfreq
  store double %dfreq1543, double* %1162
  %gflow1544 = load double, double* %gflow
  store double %gflow1544, double* %1163
  %maxoctaves1545 = load double, double* %maxoctaves
  store double %maxoctaves1545, double* %1165
  %lacunarity1546 = load double, double* %lacunarity
  store double %lacunarity1546, double* %1166
  %gain1547 = load double, double* %gain
  store double %gain1547, double* %1167
  %fBm_pcworleyFB = call double @"fBm_pcworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %1152, i64* %1153, i64* %1154, i64* %1155, double* %1156, double* %1157, <3 x double>* %1158, i64* %1159, i64* %1160, double* %1161, double* %1162, double* %1163, double* %1164, double* %x_avg, <3 x double>* %x_off, double* %1165, double* %1166, double* %1167, double* %x_oct)
  br label %UnifiedReturnBlock

false1531:                                        ; preds = %true1526
  %return1549 = call i64 @"eq@ISS"(i8* %fractal1528, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0))
  %1298 = icmp ne i64 %return1549, 0
  br i1 %1298, label %true1550, label %false1551

true1550:                                         ; preds = %false1531
  %inv1553 = load i64, i64* %inv
  store i64 %inv1553, i64* %1168
  %fold1554 = load i64, i64* %fold
  store i64 %fold1554, i64* %1169
  %accl1555 = load i64, i64* %accl
  store i64 %accl1555, i64* %1170
  %accg1556 = load i64, i64* %accg
  store i64 %accg1556, i64* %1171
  %fw1557 = load double, double* %fw
  store double %fw1557, double* %1172
  %expon1558 = load double, double* %expon
  store double %expon1558, double* %1173
  %per1559 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1559, <3 x double>* %1174
  %dolw1560 = load i64, i64* %dolw
  store i64 %dolw1560, i64* %1175
  %dogw1561 = load i64, i64* %dogw
  store i64 %dogw1561, i64* %1176
  %disp1562 = load double, double* %disp
  store double %disp1562, double* %1177
  %dfreq1563 = load double, double* %dfreq
  store double %dfreq1563, double* %1178
  %gflow1564 = load double, double* %gflow
  store double %gflow1564, double* %1179
  %maxoctaves1565 = load double, double* %maxoctaves
  store double %maxoctaves1565, double* %1181
  %lacunarity1566 = load double, double* %lacunarity
  store double %lacunarity1566, double* %1182
  %gain1567 = load double, double* %gain
  store double %gain1567, double* %1183
  %mfT_pcworleyFB = call double @"mfT_pcworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %1168, i64* %1169, i64* %1170, i64* %1171, double* %1172, double* %1173, <3 x double>* %1174, i64* %1175, i64* %1176, double* %1177, double* %1178, double* %1179, double* %1180, double* %x_avg, <3 x double>* %x_off, double* %1181, double* %1182, double* %1183, double* %x_oct)
  br label %UnifiedReturnBlock

false1551:                                        ; preds = %false1531
  %return1569 = call i64 @"eq@ISS"(i8* %fractal1528, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @31, i64 0, i64 0))
  %1299 = icmp ne i64 %return1569, 0
  br i1 %1299, label %true1570, label %end

true1570:                                         ; preds = %false1551
  %inv1573 = load i64, i64* %inv
  store i64 %inv1573, i64* %1184
  %fold1574 = load i64, i64* %fold
  store i64 %fold1574, i64* %1185
  %accl1575 = load i64, i64* %accl
  store i64 %accl1575, i64* %1186
  %accg1576 = load i64, i64* %accg
  store i64 %accg1576, i64* %1187
  %fw1577 = load double, double* %fw
  store double %fw1577, double* %1188
  %expon1578 = load double, double* %expon
  store double %expon1578, double* %1189
  %per1579 = load <3 x double>, <3 x double>* %per
  store <3 x double> %per1579, <3 x double>* %1190
  %dolw1580 = load i64, i64* %dolw
  store i64 %dolw1580, i64* %1191
  %dogw1581 = load i64, i64* %dogw
  store i64 %dogw1581, i64* %1192
  %disp1582 = load double, double* %disp
  store double %disp1582, double* %1193
  %dfreq1583 = load double, double* %dfreq
  store double %dfreq1583, double* %1194
  %gflow1584 = load double, double* %gflow
  store double %gflow1584, double* %1195
  %maxoctaves1585 = load double, double* %maxoctaves
  store double %maxoctaves1585, double* %1197
  %lacunarity1586 = load double, double* %lacunarity
  store double %lacunarity1586, double* %1198
  %gain1587 = load double, double* %gain
  store double %gain1587, double* %1199
  %hmfT_pcworleyFB = call double @"hmfT_pcworleyFB@FVIIIIFFVIIFFFFFVFFFF"(<3 x double>* %p, i64* %1184, i64* %1185, i64* %1186, i64* %1187, double* %1188, double* %1189, <3 x double>* %1190, i64* %1191, i64* %1192, double* %1193, double* %1194, double* %1195, double* %1196, double* %x_avg, <3 x double>* %x_off, double* %1197, double* %1198, double* %1199, double* %x_oct)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %true1570, %true1550, %true1530, %true1506, %true1486, %true1466, %true1441, %true1421, %true1401, %true1376, %true1356, %true1336, %true1311, %true1291, %true1271, %true1246, %true1226, %true1206, %true1182, %true1163, %true1144, %true1120, %true1101, %true1082, %true1058, %true1039, %true1020, %true996, %true977, %true958, %true934, %true915, %true896, %true872, %true853, %true834, %true808, %true787, %true766, %true741, %true721, %true701, %true676, %true656, %true636, %true612, %true593, %true574, %true549, %true529, %true509, %true485, %true466, %true447, %true422, %true402, %true382, %true358, %true339, %true320, %true295, %true275, %true255, %true231, %true212, %true193, %true168, %true148, %true128, %true104, %true85, %true66, %true42, %true23, %true4, %end
  %UnifiedRetVal = phi double [ 1.000000e+00, %end ], [ %fBm_sine, %true4 ], [ %mfT_sine, %true23 ], [ %hmfT_sine, %true42 ], [ %fBm_value_fast, %true66 ], [ %mfT_value_fast, %true85 ], [ %hmfT_value_fast, %true104 ], [ %fBm_pvalue_fast, %true128 ], [ %mfT_pvalue_fast, %true148 ], [ %hmfT_pvalue_fast, %true168 ], [ %fBm_sparse, %true193 ], [ %mfT_sparse, %true212 ], [ %hmfT_sparse, %true231 ], [ %fBm_psparse, %true255 ], [ %mfT_psparse, %true275 ], [ %hmfT_psparse, %true295 ], [ %fBm_alligator, %true320 ], [ %mfT_alligator, %true339 ], [ %hmfT_alligator, %true358 ], [ %fBm_palligator, %true382 ], [ %mfT_palligator, %true402 ], [ %hmfT_palligator, %true422 ], [ %fBm_perlin, %true447 ], [ %mfT_perlin, %true466 ], [ %hmfT_perlin, %true485 ], [ %fBm_pperlin, %true509 ], [ %mfT_pperlin, %true529 ], [ %hmfT_pperlin, %true549 ], [ %fBm_simplex, %true574 ], [ %mfT_simplex, %true593 ], [ %hmfT_simplex, %true612 ], [ %fBm_psimplex, %true636 ], [ %mfT_psimplex, %true656 ], [ %hmfT_psimplex, %true676 ], [ %fBm_flow, %true701 ], [ %mfT_flow, %true721 ], [ %hmfT_flow, %true741 ], [ %fBm_pflow, %true766 ], [ %mfT_pflow, %true787 ], [ %hmfT_pflow, %true808 ], [ %fBm_worleyFA, %true834 ], [ %mfT_worleyFA, %true853 ], [ %hmfT_worleyFA, %true872 ], [ %fBm_worleyFB, %true896 ], [ %mfT_worleyFB, %true915 ], [ %hmfT_worleyFB, %true934 ], [ %fBm_mworleyFA, %true958 ], [ %mfT_mworleyFA, %true977 ], [ %hmfT_mworleyFA, %true996 ], [ %fBm_mworleyFB, %true1020 ], [ %mfT_mworleyFB, %true1039 ], [ %hmfT_mworleyFB, %true1058 ], [ %fBm_cworleyFA, %true1082 ], [ %mfT_cworleyFA, %true1101 ], [ %hmfT_cworleyFA, %true1120 ], [ %fBm_cworleyFB, %true1144 ], [ %mfT_cworleyFB, %true1163 ], [ %hmfT_cworleyFB, %true1182 ], [ %fBm_pworleyFA, %true1206 ], [ %mfT_pworleyFA, %true1226 ], [ %hmfT_pworleyFA, %true1246 ], [ %fBm_pworleyFB, %true1271 ], [ %mfT_pworleyFB, %true1291 ], [ %hmfT_pworleyFB, %true1311 ], [ %fBm_pmworleyFA, %true1336 ], [ %mfT_pmworleyFA, %true1356 ], [ %hmfT_pmworleyFA, %true1376 ], [ %fBm_pmworleyFB, %true1401 ], [ %mfT_pmworleyFB, %true1421 ], [ %hmfT_pmworleyFB, %true1441 ], [ %fBm_pcworleyFA, %true1466 ], [ %mfT_pcworleyFA, %true1486 ], [ %hmfT_pcworleyFA, %true1506 ], [ %fBm_pcworleyFB, %true1530 ], [ %mfT_pcworleyFB, %true1550 ], [ %hmfT_pcworleyFB, %true1570 ]
  ret double %UnifiedRetVal
}

; Function Attrs: nounwind
define void @obj_geo1_solver1_d_s_pointvop1(i64 %ptnum, i64 %vtxnum, i64 %primnum, i64 %id, i64 %numpt, i64 %numvtx, i64 %numprim, double %Time, double %TimeInc, double %Frame, double %life, double %age, i8* %OpInput2, i8* %OpInput3, i8* %OpInput4, i8* %OpInput1, <3 x double> %uv, <3 x double> %P, <3 x double> %v, <3 x double> %force, <3 x double> %Cd, <3 x double> %N, i8** %ramp_the_basis_strings, double* %ramp_the_key_positions, double* %ramp_the_key_values, double %pscale) #2 {
__llvm_entry:
  %x_avg = alloca double
  %x_oct = alloca double
  %x_off = alloca <3 x double>
  %p1 = alloca <3 x double>
  %p2 = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca i64
  %7 = alloca <3 x double>
  %8 = alloca i64
  %9 = alloca <3 x double>
  %10 = alloca <3 x double>
  %11 = alloca <3 x double>
  %12 = alloca i8*
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca <3 x double>
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca double
  %23 = alloca double
  %24 = alloca double
  %25 = alloca double
  %26 = alloca i8*
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca i64
  %31 = alloca double
  %32 = alloca double
  %33 = alloca <3 x double>
  %34 = alloca i64
  %35 = alloca i64
  %36 = alloca double
  %37 = alloca double
  %38 = alloca double
  %39 = alloca double
  %40 = alloca i8*
  %41 = alloca i8*
  %42 = alloca i64
  %43 = alloca i64
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca double
  %47 = alloca double
  %48 = alloca <3 x double>
  %49 = alloca i64
  %50 = alloca i64
  %51 = alloca double
  %52 = alloca double
  %53 = alloca double
  %54 = alloca double
  %55 = alloca double
  %56 = alloca double
  %57 = alloca double
  %58 = alloca i8*
  %59 = alloca i8*
  %60 = alloca i64
  %61 = alloca i64
  %62 = alloca i64
  %63 = alloca i64
  %64 = alloca double
  %65 = alloca double
  %66 = alloca <3 x double>
  %67 = alloca i64
  %68 = alloca i64
  %69 = alloca double
  %70 = alloca double
  %71 = alloca double
  %72 = alloca double
  %73 = alloca double
  %74 = alloca double
  %75 = alloca double
  store double 0.000000e+00, double* %x_avg
  store double 0.000000e+00, double* %x_oct
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %x_off
  %return = call i64 @"eq@ISS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  %return30 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @12, i64 0, i64 0))
  %return31 = call i64 @"or@III"(i64 %return, i64 %return30)
  %cast35 = call <4 x double> @"set@PV"(<3 x double> %P)
  %output = call <4 x double> @"mul@PP"(<4 x double> %cast35, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  %output36 = call <4 x double> @"sub@PP"(<4 x double> %output, <4 x double> zeroinitializer)
  %cast37 = call <3 x double> @"set@VP"(<4 x double> %output36)
  store <3 x double> %cast37, <3 x double>* %p1
  store <3 x double> %cast37, <3 x double>* %p2
  %cast39 = call <3 x double> @"set@VP"(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  %pyro_vopfw_VOP_CTXT = call double @"pyro_vopfw_VOP_CTXT@FV"(<3 x double>* %0)
  br i1 false, label %true44, label %false

true44:                                           ; preds = %__llvm_entry
  %pyro_vopfw_VOP_CTXT46 = call double @"pyro_vopfw_VOP_CTXT@FV"(<3 x double>* %1)
  br label %end45

false:                                            ; preds = %__llvm_entry
  br label %end45

end45:                                            ; preds = %false, %true44
  %return48 = call double @"max@FP"(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  %output50 = fmul double 0.000000e+00, %return48
  %return56 = call double @"max@FFF"(double 0.000000e+00, double 1.000000e+00)
  %return57 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @35, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @35, i64 0, i64 0))
  %76 = icmp ne i64 %return57, 0
  br i1 %76, label %true58, label %false59

true58:                                           ; preds = %end45
  br i1 true, label %true64, label %end65

false59:                                          ; preds = %end45
  br i1 true, label %true87, label %end88

end60:                                            ; preds = %end88, %true98, %end65, %true75
  %n1.0 = phi double [ %n1.1, %true75 ], [ %n1.1, %end65 ], [ %n1.2, %true98 ], [ %n1.2, %end88 ]
  %n2.0 = phi double [ %unified_noise83, %true75 ], [ 0.000000e+00, %end65 ], [ %unified_fractal_noise106, %true98 ], [ 0.000000e+00, %end88 ]
  %output112 = fmul double %n2.0, 0.000000e+00
  %output113 = fadd double %n1.0, %output112
  store double %output113, double* %2
  store i64 0, i64* %3
  store i64 0, i64* %4
  store <3 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <3 x double>* %5
  store i64 0, i64* %6
  store <3 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <3 x double>* %7
  store i64 0, i64* %8
  store <3 x double> zeroinitializer, <3 x double>* %9
  store <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double>* %10
  store <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double>* %11
  %noise_cc = call double @"noise_cc@FFIIVIVIVVV"(double* %2, i64* %3, i64* %4, <3 x double>* %5, i64* %6, <3 x double>* %7, i64* %8, <3 x double>* %9, <3 x double>* %10, <3 x double>* %11)
  %return119 = call double @"spline@F[SF[F[F"(i8** %ramp_the_basis_strings, double %noise_cc, double* %ramp_the_key_values, double* %ramp_the_key_positions)
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @36, i64 0, i64 0), double %return119) #4
  store double %gvalue, double* @pscale
  ret void

true64:                                           ; preds = %true58
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i8** %12
  store i64 0, i64* %13
  store i64 0, i64* %14
  store i64 0, i64* %15
  store i64 0, i64* %16
  store double 0.000000e+00, double* %17
  store double %return56, double* %18
  store <3 x double> %cast39, <3 x double>* %19
  store i64 0, i64* %20
  store i64 0, i64* %21
  store double %output50, double* %22
  store double 1.000000e+00, double* %23
  store double 0.000000e+00, double* %24
  store double 0.000000e+00, double* %25
  %unified_noise = call double @"unified_noise@FSVIIIIFFVIIFFFFFV"(i8** %12, <3 x double>* %p1, i64* %13, i64* %14, i64* %15, i64* %16, double* %17, double* %18, <3 x double>* %19, i64* %20, i64* %21, double* %22, double* %23, double* %24, double* %25, double* %x_avg, <3 x double>* %x_off)
  br label %end65

end65:                                            ; preds = %true64, %true58
  %n1.1 = phi double [ %unified_noise, %true64 ], [ 0.000000e+00, %true58 ]
  br i1 false, label %true75, label %end60

true75:                                           ; preds = %end65
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i8** %26
  store i64 0, i64* %27
  store i64 0, i64* %28
  store i64 0, i64* %29
  store i64 0, i64* %30
  store double 0.000000e+00, double* %31
  store double %return56, double* %32
  store <3 x double> %cast39, <3 x double>* %33
  store i64 0, i64* %34
  store i64 0, i64* %35
  store double %output50, double* %36
  store double 1.000000e+00, double* %37
  store double 0.000000e+00, double* %38
  store double 0.000000e+00, double* %39
  %unified_noise83 = call double @"unified_noise@FSVIIIIFFVIIFFFFFV"(i8** %26, <3 x double>* %p2, i64* %27, i64* %28, i64* %29, i64* %30, double* %31, double* %32, <3 x double>* %33, i64* %34, i64* %35, double* %36, double* %37, double* %38, double* %39, double* %x_avg, <3 x double>* %x_off)
  br label %end60

true87:                                           ; preds = %false59
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @35, i64 0, i64 0), i8** %40
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i8** %41
  store i64 0, i64* %42
  store i64 0, i64* %43
  store i64 0, i64* %44
  store i64 0, i64* %45
  store double 0.000000e+00, double* %46
  store double %return56, double* %47
  store <3 x double> %cast39, <3 x double>* %48
  store i64 0, i64* %49
  store i64 0, i64* %50
  store double %output50, double* %51
  store double 1.000000e+00, double* %52
  store double 0.000000e+00, double* %53
  store double 0.000000e+00, double* %54
  store double 8.000000e+00, double* %55
  store double 2.012340e+00, double* %56
  store double 5.000000e-01, double* %57
  %unified_fractal_noise = call double @"unified_fractal_noise@FSSVIIIIFFVIIFFFFFVFFFF"(i8** %40, i8** %41, <3 x double>* %p1, i64* %42, i64* %43, i64* %44, i64* %45, double* %46, double* %47, <3 x double>* %48, i64* %49, i64* %50, double* %51, double* %52, double* %53, double* %54, double* %x_avg, <3 x double>* %x_off, double* %55, double* %56, double* %57, double* %x_oct)
  br label %end88

end88:                                            ; preds = %true87, %false59
  %n1.2 = phi double [ %unified_fractal_noise, %true87 ], [ 0.000000e+00, %false59 ]
  br i1 false, label %true98, label %end60

true98:                                           ; preds = %end88
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @35, i64 0, i64 0), i8** %58
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i8** %59
  store i64 0, i64* %60
  store i64 0, i64* %61
  store i64 0, i64* %62
  store i64 0, i64* %63
  store double 0.000000e+00, double* %64
  store double %return56, double* %65
  store <3 x double> %cast39, <3 x double>* %66
  store i64 0, i64* %67
  store i64 0, i64* %68
  store double %output50, double* %69
  store double 1.000000e+00, double* %70
  store double 0.000000e+00, double* %71
  store double 0.000000e+00, double* %72
  store double 8.000000e+00, double* %73
  store double 2.012340e+00, double* %74
  store double 5.000000e-01, double* %75
  %unified_fractal_noise106 = call double @"unified_fractal_noise@FSSVIIIIFFVIIFFFFFVFFFF"(i8** %58, i8** %59, <3 x double>* %p2, i64* %60, i64* %61, i64* %62, i64* %63, double* %64, double* %65, <3 x double>* %66, i64* %67, i64* %68, double* %69, double* %70, double* %71, double* %72, double* %x_avg, <3 x double>* %x_off, double* %73, double* %74, double* %75, double* %x_oct)
  br label %end60
}

; Function Attrs: nounwind
declare double @"max@FP"(<4 x double>) #2

; Function Attrs: nounwind readnone
declare double @"spline@F[SF[F[F"(i8**, double, double*, double*) #0

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_geo1_solver1_d_s_pointvop1(i64 0, i64 0, i64 0, i64 -1, i64 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> zeroinitializer, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @33, i64 0, i64 0), double* getelementptr inbounds ([2 x double], [2 x double]* @34, i64 0, i64 0), double* getelementptr inbounds ([2 x double], [2 x double]* @34, i64 0, i64 0), double 0.000000e+00)
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline nounwind }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.383"}
!2 = !{!"64"}

;_code_end

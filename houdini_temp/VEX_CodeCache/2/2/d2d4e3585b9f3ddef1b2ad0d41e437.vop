;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [13 x i8] c"sourceprimuv\00"
@case = external global i64
@1 = private constant [5 x i8] c"case\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_case) #0 {
__llvm_entry:
  %return = call <3 x double>* @"point@[VISI"(i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0), i64 0)
  %return1 = call <3 x double>* @"point@[VISI"(i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0), i64 1)
  %return3 = call i64 @"len@I[V"(<3 x double>* %return)
  %return5 = call i64 @"len@I[V"(<3 x double>* %return1)
  %output = add i64 %return3, %return5
  %return7 = call i64 @"eq@III"(i64 %output, i64 4)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store i64 0, i64* %_bound_case
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %return9 = call i64 @"eq@III"(i64 %output, i64 5)
  %1 = icmp ne i64 %return9, 0
  br i1 %1, label %true10, label %end11

true10:                                           ; preds = %end
  store i64 1, i64* %_bound_case
  br label %end11

end11:                                            ; preds = %true10, %end
  %return13 = call i64 @"eq@III"(i64 %output, i64 6)
  %2 = icmp ne i64 %return13, 0
  br i1 %2, label %true14, label %end15

true14:                                           ; preds = %end11
  store i64 2, i64* %_bound_case
  br label %end15

end15:                                            ; preds = %true14, %end11
  ret void
}

; Function Attrs: nounwind
declare <3 x double>* @"point@[VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[V"(<3 x double>*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %case) #1 {
__llvm_entry:
  %"<case>" = alloca i64
  store i64 %case, i64* %"<case>"
  call void @"__vex_snippet_snippet@I"(i64* %"<case>")
  %evalue = load i64, i64* %"<case>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %evalue) #3
  store i64 %gvalue, i64* @case
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

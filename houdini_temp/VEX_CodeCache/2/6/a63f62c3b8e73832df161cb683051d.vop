;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [11 x i8] c"udimtarget\00"
@u = external global double
@v = external global double
@1 = private constant [2 x i8] c"u\00"
@2 = private constant [2 x i8] c"v\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FF"(double* %_bound_u, double* %_bound_v) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i64 0, i64 0))
  %output = sub i64 %return, 1000
  %return3 = call i64 @"mod@III"(i64 %output, i64 10)
  %return4 = call i64 @"max@III"(i64 %return3, i64 0)
  %return6 = call i64 @"eq@III"(i64 %return4, i64 0)
  %0 = icmp ne i64 %return6, 0
  %output8 = sub i64 %return4, 1
  %phi = select i1 %0, i64 9, i64 %output8
  %cast = sitofp i64 %phi to double
  store double %cast, double* %_bound_u
  %cast11 = fptosi double %cast to i64
  %output12 = sub i64 %output, %cast11
  %output13 = call i64 @"div@II"(i64 %output12, i64 10)
  %cast14 = sitofp i64 %output13 to double
  store double %cast14, double* %_bound_v
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"max@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"div@II"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %u, double %v) #2 {
__llvm_entry:
  %"<v>" = alloca double
  %"<u>" = alloca double
  store double %u, double* %"<u>"
  store double %v, double* %"<v>"
  call void @"__vex_snippet_snippet@FF"(double* %"<u>", double* %"<v>")
  %evalue = load double, double* %"<u>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), double %evalue) #3
  %evalue1 = load double, double* %"<v>"
  %gvalue2 = call double @"_export@FSF"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), double %evalue1) #3
  store double %gvalue, double* @u
  store double %gvalue2, double* @v
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

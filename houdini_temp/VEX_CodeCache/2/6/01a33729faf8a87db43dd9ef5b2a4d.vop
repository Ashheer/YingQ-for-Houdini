;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@_outer_radius = external global double
@footprint = external global double
@_inner_radius = external global double
@falloff = external global double
@0 = private constant [14 x i8] c"_outer_radius\00"
@1 = private constant [10 x i8] c"footprint\00"
@2 = private constant [14 x i8] c"_inner_radius\00"
@3 = private constant [8 x i8] c"falloff\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FFFF"(double* %_bound__outer_radius, double* %_bound_footprint, double* %_bound__inner_radius, double* %_bound_falloff) #0 {
__llvm_entry:
  %_bound_footprint1 = load double, double* %_bound_footprint
  store double %_bound_footprint1, double* %_bound__outer_radius
  %_bound_footprint2 = load double, double* %_bound_footprint
  %_bound_falloff3 = load double, double* %_bound_falloff
  %output = fsub double 1.000000e+00, %_bound_falloff3
  %output4 = fmul double %_bound_footprint2, %output
  store double %output4, double* %_bound__inner_radius
  ret void
}

; Function Attrs: nounwind
define void @__vex_snippet(double %_outer_radius, double %footprint, double %_inner_radius, double %falloff) #1 {
__llvm_entry:
  %"<_inner_radius>" = alloca double
  %0 = alloca double
  %1 = alloca double
  %"<_outer_radius>" = alloca double
  store double %_outer_radius, double* %"<_outer_radius>"
  store double %_inner_radius, double* %"<_inner_radius>"
  store double %footprint, double* %0
  store double %falloff, double* %1
  call void @"__vex_snippet_snippet@FFFF"(double* %"<_outer_radius>", double* %0, double* %"<_inner_radius>", double* %1)
  %evalue = load double, double* %"<_outer_radius>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @0, i64 0, i64 0), double %evalue) #2
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), double %footprint) #2
  %evalue5 = load double, double* %"<_inner_radius>"
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @2, i64 0, i64 0), double %evalue5) #2
  %gvalue8 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), double %falloff) #2
  store double %gvalue, double* @_outer_radius
  store double %gvalue4, double* @footprint
  store double %gvalue6, double* @_inner_radius
  store double %gvalue8, double* @falloff
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

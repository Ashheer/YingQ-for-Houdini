;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [20 x i8] c"__max_angular_speed\00"
@1 = private constant [13 x i8] c"__max_pscale\00"
@2 = private constant [12 x i8] c"__frame_ref\00"
@3 = private constant [17 x i8] c"__numpt_error_fs\00"
@4 = private constant [31 x i8] c"__intrinsic_pivot_update_count\00"
@5 = private constant [0 x i64] zeroinitializer
@__max_angular_speed = external global double
@__max_pscale = external global double
@__frame_ref = external global i64
@__numpt_error_fs = external global i64*
@numpt = external global i64
@__intrinsic_pivot_update_count = external global i64
@__pivot_updated = external global i64
@6 = private constant [6 x i8] c"numpt\00"
@7 = private constant [16 x i8] c"__pivot_updated\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FFI[IIII"(double* %_bound___max_angular_speed, double* %_bound___max_pscale, i64* %_bound___frame_ref, i64** %_bound___numpt_error_fs, i64* %_bound_numpt, i64* %_bound___intrinsic_pivot_update_count, i64* %_bound___pivot_updated) #0 {
__llvm_entry:
  %return = call double @"detail@FISI"(i64 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @0, i64 0, i64 0), i64 0)
  %return1 = call double @"detail@FISI"(i64 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0), i64 0)
  %_bound___max_angular_speed3 = load double, double* %_bound___max_angular_speed
  %return4 = fcmp ogt double %return, %_bound___max_angular_speed3
  br i1 %return4, label %true, label %false

true:                                             ; preds = %__llvm_entry
  br label %end

false:                                            ; preds = %__llvm_entry
  br label %end

end:                                              ; preds = %false, %true
  %phi = phi double [ %return, %true ], [ %_bound___max_angular_speed3, %false ]
  store double %phi, double* %_bound___max_angular_speed
  %_bound___max_pscale9 = load double, double* %_bound___max_pscale
  %return10 = fcmp ogt double %return1, %_bound___max_pscale9
  br i1 %return10, label %true12, label %false13

true12:                                           ; preds = %end
  br label %end14

false13:                                          ; preds = %end
  br label %end14

end14:                                            ; preds = %false13, %true12
  %phi17 = phi double [ %return1, %true12 ], [ %_bound___max_pscale9, %false13 ]
  store double %phi17, double* %_bound___max_pscale
  %return18 = call i64 @"detail@IISI"(i64 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i64 0, i64 0), i64 0)
  %output = add i64 %return18, 1
  store i64 %output, i64* %_bound___frame_ref
  %return19 = call i64* @"detail@[IISI"(i64 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @3, i64 0, i64 0), i64 0)
  store i64* %return19, i64** %_bound___numpt_error_fs
  %_bound_numpt20 = load i64, i64* %_bound_numpt
  %return21 = call i64 @"npoints@II"(i64 1)
  %return22 = call i64 @"ne@III"(i64 %_bound_numpt20, i64 %return21)
  %0 = icmp ne i64 %return22, 0
  br i1 %0, label %true23, label %end24

true23:                                           ; preds = %end14
  %_bound___numpt_error_fs25 = load i64*, i64** %_bound___numpt_error_fs
  %_bound___frame_ref26 = load i64, i64* %_bound___frame_ref
  %output27 = call i64* @"append@[II"(i64* %_bound___numpt_error_fs25, i64 %_bound___frame_ref26)
  store i64* %output27, i64** %_bound___numpt_error_fs
  br label %end24

end24:                                            ; preds = %true23, %end14
  %return28 = call i64 @"detail@IISI"(i64 1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @4, i64 0, i64 0), i64 0)
  store i64 %return28, i64* %_bound___intrinsic_pivot_update_count
  %_bound___pivot_updated30 = load i64, i64* %_bound___pivot_updated
  %output31 = add i64 %return28, %_bound___pivot_updated30
  store i64 %output31, i64* %_bound___intrinsic_pivot_update_count
  ret void
}

; Function Attrs: nounwind
declare double @"detail@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"detail@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64* @"detail@[IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %__max_angular_speed, double %__max_pscale, i64 %__frame_ref, i64* %__numpt_error_fs, i64 %numpt, i64 %__intrinsic_pivot_update_count, i64 %__pivot_updated) #1 {
__llvm_entry:
  %"<__max_pscale>" = alloca double
  %"<__frame_ref>" = alloca i64
  %"<__numpt_error_fs>" = alloca i64*
  %"<__intrinsic_pivot_update_count>" = alloca i64
  %0 = alloca i64
  %1 = alloca i64
  %"<__max_angular_speed>" = alloca double
  store double %__max_angular_speed, double* %"<__max_angular_speed>"
  store double %__max_pscale, double* %"<__max_pscale>"
  store i64 %__frame_ref, i64* %"<__frame_ref>"
  store i64* %__numpt_error_fs, i64** %"<__numpt_error_fs>"
  store i64 %__intrinsic_pivot_update_count, i64* %"<__intrinsic_pivot_update_count>"
  store i64 %numpt, i64* %0
  store i64 %__pivot_updated, i64* %1
  call void @"__vex_snippet_snippet@FFI[IIII"(double* %"<__max_angular_speed>", double* %"<__max_pscale>", i64* %"<__frame_ref>", i64** %"<__numpt_error_fs>", i64* %0, i64* %"<__intrinsic_pivot_update_count>", i64* %1)
  %evalue = load double, double* %"<__max_angular_speed>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @0, i64 0, i64 0), double %evalue) #3
  %evalue3 = load double, double* %"<__max_pscale>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0), double %evalue3) #3
  %evalue5 = load i64, i64* %"<__frame_ref>"
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i64 0, i64 0), i64 %evalue5) #3
  %evalue7 = load i64*, i64** %"<__numpt_error_fs>"
  %gvalue8 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @3, i64 0, i64 0), i64* %evalue7) #3
  %gvalue10 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i64 0, i64 0), i64 %numpt) #3
  %evalue11 = load i64, i64* %"<__intrinsic_pivot_update_count>"
  %gvalue12 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @4, i64 0, i64 0), i64 %evalue11) #3
  %gvalue14 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @7, i64 0, i64 0), i64 %__pivot_updated) #3
  store double %gvalue, double* @__max_angular_speed
  store double %gvalue4, double* @__max_pscale
  store i64 %gvalue6, i64* @__frame_ref
  store i64* %gvalue8, i64** @__numpt_error_fs
  store i64 %gvalue10, i64* @numpt
  store i64 %gvalue12, i64* @__intrinsic_pivot_update_count
  store i64 %gvalue14, i64* @__pivot_updated
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00, i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @5, i64 0, i64 0), i64 0, i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

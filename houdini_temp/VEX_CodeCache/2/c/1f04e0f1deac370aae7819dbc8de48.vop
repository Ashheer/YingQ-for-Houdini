;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [13 x i8] c"stencil_name\00"
@1 = private constant [12 x i8] c"attrib_name\00"
@2 = private constant [7 x i8] c"_alpha\00"
@ptnum = external global i64
@attrib = external global i64
@3 = private constant [6 x i8] c"ptnum\00"
@4 = private constant [7 x i8] c"attrib\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound_ptnum, i64* %_bound_attrib) #0 {
__llvm_entry:
  %return = call i8* @"detail@SISI"(i64 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0), i64 0)
  %return1 = call i8* @"detail@SISI"(i64 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i64 0, i64 0), i64 0)
  %output = call i8* @"add@SS"(i8* %return, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0))
  %_bound_ptnum4 = load i64, i64* %_bound_ptnum
  %return5 = call double @"point@FISI"(i64 1, i8* %output, i64 %_bound_ptnum4)
  %_bound_ptnum7 = load i64, i64* %_bound_ptnum
  %return8 = call i64 @"point@IISI"(i64 1, i8* %return, i64 %_bound_ptnum7)
  %return10 = fcmp ogt double %return5, 5.000000e-01
  br i1 %return10, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store i64 %return8, i64* %_bound_attrib
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind
declare i8* @"detail@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"add@SS"(i8*, i8*) #2

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64 %attrib) #1 {
__llvm_entry:
  %"<attrib>" = alloca i64
  %0 = alloca i64
  store i64 %attrib, i64* %"<attrib>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@II"(i64* %0, i64* %"<attrib>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load i64, i64* %"<attrib>"
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0), i64 %evalue2) #3
  store i64 %gvalue, i64* @ptnum
  store i64 %gvalue3, i64* @attrib
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"scale\00"
@rest = external global <3 x double>
@P = external global <3 x double>
@N = external global <3 x double>
@y = external global double
@1 = private constant [5 x i8] c"rest\00"
@2 = private constant [2 x i8] c"P\00"
@3 = private constant [2 x i8] c"N\00"
@4 = private constant [2 x i8] c"y\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVVF"(<3 x double>* %_bound_rest, <3 x double>* %_bound_P, <3 x double>* %_bound_N, double* %_bound_y) #0 {
__llvm_entry:
  %_bound_rest1 = load <3 x double>, <3 x double>* %_bound_rest
  %_bound_N3 = load <3 x double>, <3 x double>* %_bound_N
  %_bound_y4 = load double, double* %_bound_y
  %cast = call <3 x double> @"set@VF"(double %_bound_y4)
  %output = call <3 x double> @"mul@VV"(<3 x double> %_bound_N3, <3 x double> %cast)
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0))
  %cast5 = call <3 x double> @"set@VF"(double %return)
  %output6 = call <3 x double> @"mul@VV"(<3 x double> %output, <3 x double> %cast5)
  %output7 = call <3 x double> @"add@VV"(<3 x double> %_bound_rest1, <3 x double> %output6)
  store <3 x double> %output7, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %rest, <3 x double> %P, <3 x double> %N, double %y) #2 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %rest, <3 x double>* %0
  store <3 x double> %N, <3 x double>* %1
  store double %y, double* %2
  call void @"__vex_snippet_snippet@VVVF"(<3 x double>* %0, <3 x double>* %"<P>", <3 x double>* %1, double* %2)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), <3 x double> %rest) #3
  %evalue4 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %evalue4) #3
  %gvalue7 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %N) #3
  %gvalue9 = call double @"_export@FSF"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), double %y) #3
  store <3 x double> %gvalue, <3 x double>* @rest
  store <3 x double> %gvalue5, <3 x double>* @P
  store <3 x double> %gvalue7, <3 x double>* @N
  store double %gvalue9, double* @y
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

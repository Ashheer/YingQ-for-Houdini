;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@P = external global <3 x double>
@height = external global double
@0 = private constant [2 x i8] c"P\00"
@1 = private constant [7 x i8] c"height\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VF"(<3 x double>* %_bound_P, double* %_bound_height) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call i64 @"neg@II"(i64 1)
  %cast = sitofp i64 %return to double
  %return2 = call { i64, <3 x double>*, i64*, <3 x double>* } @"intersect_all@IIVV[V[I[VFF"(i64 1, <3 x double> %_bound_P1, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 2.000000e-01>, double 1.000000e-02, double %cast)
  %return3 = extractvalue { i64, <3 x double>*, i64*, <3 x double>* } %return2, 0
  %return7 = call i64 @"gt@III"(i64 %return3, i64 1)
  %cast8 = sitofp i64 %return7 to double
  store double %cast8, double* %_bound_height
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind
declare { i64, <3 x double>*, i64*, <3 x double>* } @"intersect_all@IIVV[V[I[VFF"(i64, <3 x double>, <3 x double>, double, double) #2

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, double %height) #2 {
__llvm_entry:
  %"<height>" = alloca double
  %0 = alloca <3 x double>
  store double %height, double* %"<height>"
  store <3 x double> %P, <3 x double>* %0
  call void @"__vex_snippet_snippet@VF"(<3 x double>* %0, double* %"<height>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %P) #3
  %evalue2 = load double, double* %"<height>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), double %evalue2) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store double %gvalue3, double* @height
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

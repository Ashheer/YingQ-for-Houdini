;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [7 x i8] c"domass\00"
@1 = private constant [5 x i8] c"mass\00"
@2 = private constant [15 x i8] c"__computedmass\00"
@3 = private constant [9 x i8] c"__pinsrc\00"
@mass = external global double
@ptnum = external global i64
@__computedmass = external global double
@inertia = external global double
@4 = private constant [6 x i8] c"ptnum\00"
@5 = private constant [8 x i8] c"inertia\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FIFF"(double* %_bound_mass, i64* %_bound_ptnum, double* %_bound___computedmass, double* %_bound_inertia) #0 {
__llvm_entry:
  %_bound_mass1 = load double, double* %_bound_mass
  %return = fcmp oeq double %_bound_mass1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0))
  %return5 = call i64 @"eq@III"(i64 %return4, i64 1)
  %0 = icmp ne i64 %return5, 0
  br i1 %0, label %true6, label %false

end:                                              ; preds = %true19, %false20, %true6, %__llvm_entry
  %mass.0 = phi double [ %return8, %true6 ], [ %_bound___computedmass22, %true19 ], [ %cast, %false20 ], [ %_bound_mass1, %__llvm_entry ]
  %_bound_inertia24 = load double, double* %_bound_inertia
  %output = fmul double %mass.0, 2.000000e+00
  %output26 = call double @"div@FF"(double %output, double 5.000000e+00)
  %output27 = fmul double %_bound_inertia24, %output26
  store double %output27, double* %_bound_inertia
  ret void

true6:                                            ; preds = %true
  %return8 = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0))
  br label %end

false:                                            ; preds = %true
  %return10 = call i64 @"eq@III"(i64 %return4, i64 2)
  %return12 = call i64 @"eq@III"(i64 %return4, i64 3)
  %return13 = call i64 @"or@III"(i64 %return10, i64 %return12)
  %return14 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i64 0, i64 0))
  %_bound_ptnum15 = load i64, i64* %_bound_ptnum
  %return16 = call i64 @"inpointgroup@IISI"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0), i64 %_bound_ptnum15)
  %return17 = call i64 @"and@III"(i64 %return14, i64 %return16)
  %return18 = call i64 @"or@III"(i64 %return13, i64 %return17)
  %1 = icmp ne i64 %return18, 0
  br i1 %1, label %true19, label %false20

true19:                                           ; preds = %false
  %_bound___computedmass22 = load double, double* %_bound___computedmass
  br label %end

false20:                                          ; preds = %false
  %return23 = call i64 @"neg@II"(i64 1)
  %cast = sitofp i64 %return23 to double
  br label %end
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"haspointattrib@IIS"(i64, i8*) #2

; Function Attrs: nounwind
declare i64 @"inpointgroup@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %mass, i64 %ptnum, double %__computedmass, double %inertia) #2 {
__llvm_entry:
  %"<inertia>" = alloca double
  %0 = alloca double
  %1 = alloca i64
  %2 = alloca double
  store double %inertia, double* %"<inertia>"
  store double %mass, double* %0
  store i64 %ptnum, i64* %1
  store double %__computedmass, double* %2
  call void @"__vex_snippet_snippet@FIFF"(double* %0, i64* %1, double* %2, double* %"<inertia>")
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), double %mass) #3
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #3
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i64 0, i64 0), double %__computedmass) #3
  %evalue8 = load double, double* %"<inertia>"
  %gvalue9 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @5, i64 0, i64 0), double %evalue8) #3
  store double %gvalue, double* @mass
  store i64 %gvalue5, i64* @ptnum
  store double %gvalue7, double* @__computedmass
  store double %gvalue9, double* @inertia
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, i64 0, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

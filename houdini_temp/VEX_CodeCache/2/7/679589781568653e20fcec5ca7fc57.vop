;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [9 x i8] c"../color\00"
@1 = private constant [7 x i8] c"colors\00"
@ptnum = external global i64
@primnum = external global i64
@Cd = external global <3 x double>
@2 = private constant [6 x i8] c"ptnum\00"
@3 = private constant [8 x i8] c"primnum\00"
@4 = private constant [3 x i8] c"Cd\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIV"(i64* %_bound_ptnum, i64* %_bound_primnum, <3 x double>* %_bound_Cd) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0))
  %return2 = call i64 @"eq@III"(i64 %return, i64 1)
  %0 = icmp ne i64 %return2, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_primnum3 = load i64, i64* %_bound_primnum
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %index.0 = phi i64 [ %_bound_primnum3, %true ], [ %_bound_ptnum1, %__llvm_entry ]
  %return4 = call <3 x double>* @"detail@[VISI"(i64 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i64 0)
  %return7 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %return4, i64 %index.0)
  store <3 x double> %return7, <3 x double>* %_bound_Cd
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double>* @"detail@[VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64 %primnum, <3 x double> %Cd) #2 {
__llvm_entry:
  %"<Cd>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca i64
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store i64 %ptnum, i64* %0
  store i64 %primnum, i64* %1
  call void @"__vex_snippet_snippet@IIV"(i64* %0, i64* %1, <3 x double>* %"<Cd>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %ptnum) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i64 %primnum) #3
  %evalue5 = load <3 x double>, <3 x double>* %"<Cd>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), <3 x double> %evalue5) #3
  store i64 %gvalue, i64* @ptnum
  store i64 %gvalue4, i64* @primnum
  store <3 x double> %gvalue6, <3 x double>* @Cd
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [14 x i8] c"__clusterroot\00"
@clusterattrib = external global i64
@2 = private constant [14 x i8] c"clusterattrib\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound_clusterattrib, i64* %_bound___clusterroot) #0 {
__llvm_entry:
  %_bound___clusterroot1 = load i64, i64* %_bound___clusterroot
  %return = call i64 @"findattribval@IISSI"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1, i64 0, i64 0), i64 %_bound___clusterroot1)
  store i64 %return, i64* %_bound_clusterattrib
  ret void
}

; Function Attrs: nounwind
declare i64 @"findattribval@IISSI"(i64, i8*, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %clusterattrib, i64 %__clusterroot) #1 {
__llvm_entry:
  %0 = alloca i64
  %"<clusterattrib>" = alloca i64
  store i64 %clusterattrib, i64* %"<clusterattrib>"
  store i64 %__clusterroot, i64* %0
  call void @"__vex_snippet_snippet@II"(i64* %"<clusterattrib>", i64* %0)
  %evalue = load i64, i64* %"<clusterattrib>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @2, i64 0, i64 0), i64 %evalue) #2
  store i64 %gvalue, i64* @clusterattrib
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

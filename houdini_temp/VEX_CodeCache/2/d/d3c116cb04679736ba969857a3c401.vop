;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@primnum = external global i64
@lhedge = external global i64
@ldist = external global double
@1 = private constant [8 x i8] c"primnum\00"
@2 = private constant [7 x i8] c"lhedge\00"
@3 = private constant [6 x i8] c"ldist\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIF"(i64* %_bound_primnum, i64* %_bound_lhedge, double* %_bound_ldist) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64 @"primhedge@III"(i64 0, i64 %_bound_primnum1)
  %return2 = call i64 @"neg@II"(i64 1)
  br label %cond

cond:                                             ; preds = %end20, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %end20 ]
  %longestdist.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %longestdist.1, %end20 ]
  %longesthedge.0 = phi i64 [ %return2, %__llvm_entry ], [ %longesthedge.1, %end20 ]
  %hedge.0 = phi i64 [ %return, %__llvm_entry ], [ %return24, %end20 ]
  %_bound_primnum4 = load i64, i64* %_bound_primnum
  %return5 = call i64 @"primvertexcount@III"(i64 0, i64 %_bound_primnum4)
  %return6 = call i64 @"lt@III"(i64 %i.0, i64 %return5)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return8 = call i64 @"hedge_srcpoint@III"(i64 0, i64 %hedge.0)
  %return9 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return8)
  %return11 = call i64 @"hedge_dstpoint@III"(i64 0, i64 %hedge.0)
  %return12 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return11)
  %return15 = call double @"distance@FVV"(<3 x double> %return9, <3 x double> %return12)
  %return18 = fcmp ogt double %return15, %longestdist.0
  br i1 %return18, label %true, label %end20

end:                                              ; preds = %cond
  store i64 %longesthedge.0, i64* %_bound_lhedge
  store double %longestdist.0, double* %_bound_ldist
  ret void

true:                                             ; preds = %body
  br label %end20

end20:                                            ; preds = %true, %body
  %longestdist.1 = phi double [ %return15, %true ], [ %longestdist.0, %body ]
  %longesthedge.1 = phi i64 [ %hedge.0, %true ], [ %longesthedge.0, %body ]
  %return24 = call i64 @"hedge_next@III"(i64 0, i64 %hedge.0)
  %output = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind
declare i64 @"primhedge@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind
declare i64 @"primvertexcount@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"hedge_srcpoint@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"hedge_dstpoint@III"(i64, i64) #1

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"hedge_next@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, i64 %lhedge, double %ldist) #1 {
__llvm_entry:
  %"<lhedge>" = alloca i64
  %"<ldist>" = alloca double
  %0 = alloca i64
  store i64 %lhedge, i64* %"<lhedge>"
  store double %ldist, double* %"<ldist>"
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@IIF"(i64* %0, i64* %"<lhedge>", double* %"<ldist>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i64 %primnum) #3
  %evalue2 = load i64, i64* %"<lhedge>"
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), i64 %evalue2) #3
  %evalue4 = load double, double* %"<ldist>"
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), double %evalue4) #3
  store i64 %gvalue, i64* @primnum
  store i64 %gvalue3, i64* @lhedge
  store double %gvalue5, double* @ldist
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [14 x i8] c"__max_numprim\00"
@1 = private constant [14 x i8] c"__accum_numpt\00"
@2 = private constant [13 x i8] c"__max_pscale\00"
@3 = private constant [23 x i8] c"__accum_numpt_by_frame\00"
@4 = private constant [0 x i64] zeroinitializer
@__max_numprim = external global i64
@__accum_numpt = external global i64
@__max_pscale = external global double
@__accum_numpt_by_frame = external global i64*

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIF[I"(i64* %_bound___max_numprim, i64* %_bound___accum_numpt, double* %_bound___max_pscale, i64** %_bound___accum_numpt_by_frame) #0 {
__llvm_entry:
  %return = call i64 @"detail@IISI"(i64 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @0, i64 0, i64 0), i64 0)
  %_bound___max_numprim2 = load i64, i64* %_bound___max_numprim
  %return3 = call i64 @"gt@III"(i64 %return, i64 %_bound___max_numprim2)
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  br label %end

false:                                            ; preds = %__llvm_entry
  br label %end

end:                                              ; preds = %false, %true
  %phi = phi i64 [ %return, %true ], [ %_bound___max_numprim2, %false ]
  store i64 %phi, i64* %_bound___max_numprim
  %return6 = call i64 @"npoints@II"(i64 0)
  %return7 = call i64 @"detail@IISI"(i64 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1, i64 0, i64 0), i64 0)
  %output = add i64 %return6, %return7
  store i64 %output, i64* %_bound___accum_numpt
  %return8 = call double @"detail@FISI"(i64 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0), i64 0)
  %_bound___max_pscale10 = load double, double* %_bound___max_pscale
  %return11 = fcmp ogt double %return8, %_bound___max_pscale10
  br i1 %return11, label %true13, label %false14

true13:                                           ; preds = %end
  br label %end15

false14:                                          ; preds = %end
  br label %end15

end15:                                            ; preds = %false14, %true13
  %phi18 = phi double [ %return8, %true13 ], [ %_bound___max_pscale10, %false14 ]
  store double %phi18, double* %_bound___max_pscale
  %return19 = call i64* @"detail@[IISI"(i64 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @3, i64 0, i64 0), i64 0)
  store i64* %return19, i64** %_bound___accum_numpt_by_frame
  %_bound___accum_numpt21 = load i64, i64* %_bound___accum_numpt
  %output22 = call i64* @"append@[II"(i64* %return19, i64 %_bound___accum_numpt21)
  store i64* %output22, i64** %_bound___accum_numpt_by_frame
  ret void
}

; Function Attrs: nounwind
declare i64 @"detail@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #1

; Function Attrs: nounwind
declare double @"detail@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64* @"detail@[IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %__max_numprim, i64 %__accum_numpt, double %__max_pscale, i64* %__accum_numpt_by_frame) #1 {
__llvm_entry:
  %"<__accum_numpt>" = alloca i64
  %"<__max_pscale>" = alloca double
  %"<__accum_numpt_by_frame>" = alloca i64*
  %"<__max_numprim>" = alloca i64
  store i64 %__max_numprim, i64* %"<__max_numprim>"
  store i64 %__accum_numpt, i64* %"<__accum_numpt>"
  store double %__max_pscale, double* %"<__max_pscale>"
  store i64* %__accum_numpt_by_frame, i64** %"<__accum_numpt_by_frame>"
  call void @"__vex_snippet_snippet@IIF[I"(i64* %"<__max_numprim>", i64* %"<__accum_numpt>", double* %"<__max_pscale>", i64** %"<__accum_numpt_by_frame>")
  %evalue = load i64, i64* %"<__max_numprim>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @0, i64 0, i64 0), i64 %evalue) #3
  %evalue1 = load i64, i64* %"<__accum_numpt>"
  %gvalue2 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1, i64 0, i64 0), i64 %evalue1) #3
  %evalue3 = load double, double* %"<__max_pscale>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0), double %evalue3) #3
  %evalue5 = load i64*, i64** %"<__accum_numpt_by_frame>"
  %gvalue6 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @3, i64 0, i64 0), i64* %evalue5) #3
  store i64 %gvalue, i64* @__max_numprim
  store i64 %gvalue2, i64* @__accum_numpt
  store double %gvalue4, double* @__max_pscale
  store i64* %gvalue6, i64** @__accum_numpt_by_frame
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, double 0.000000e+00, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @4, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"test\00"
@orient = external global <4 x double>
@1 = private constant [7 x i8] c"orient\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@P"(<4 x double>* %_bound_orient) #0 {
__llvm_entry:
  %_bound_orient1 = load <4 x double>, <4 x double>* %_bound_orient
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  %output = call double @"div@FF"(double 0x400921FB4D12D84A, double %return)
  %return2 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double %output, double 0.000000e+00)
  %return3 = call <4 x double> @"quaternion@PV"(<3 x double> %return2)
  %return6 = call <4 x double> @"qmultiply@PPP"(<4 x double> %_bound_orient1, <4 x double> %return3)
  store <4 x double> %return6, <4 x double>* %_bound_orient
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"quaternion@PV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"qmultiply@PPP"(<4 x double>, <4 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<4 x double> %orient) #2 {
__llvm_entry:
  %"<orient>" = alloca <4 x double>
  store <4 x double> %orient, <4 x double>* %"<orient>"
  call void @"__vex_snippet_snippet@P"(<4 x double>* %"<orient>")
  %evalue = load <4 x double>, <4 x double>* %"<orient>"
  %gvalue = call <4 x double> @"_export@PSP"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), <4 x double> %evalue) #3
  store <4 x double> %gvalue, <4 x double>* @orient
  ret void
}

declare <4 x double> @"_export@PSP"(i8*, <4 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

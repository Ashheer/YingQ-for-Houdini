;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [14 x i8] c"_initial_name\00"
@1 = private constant [1 x i8] zeroinitializer
@_initial_name = external global i8*
@name = external global i8*
@2 = private constant [5 x i8] c"name\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SS"(i8** %_bound__initial_name, i8** %_bound_name) #0 {
__llvm_entry:
  %return = call i64 @"hasprimattrib@IIS"(i64 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"not@II"(i64 %return)
  %0 = icmp ne i64 %return1, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_name2 = load i8*, i8** %_bound_name
  store i8* %_bound_name2, i8** %_bound__initial_name
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind
declare i64 @"hasprimattrib@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i8* %_initial_name, i8* %name) #1 {
__llvm_entry:
  %0 = alloca i8*
  %"<_initial_name>" = alloca i8*
  store i8* %_initial_name, i8** %"<_initial_name>"
  store i8* %name, i8** %0
  call void @"__vex_snippet_snippet@SS"(i8** %"<_initial_name>", i8** %0)
  %evalue = load i8*, i8** %"<_initial_name>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @0, i64 0, i64 0), i8* %evalue) #3
  %gvalue3 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), i8* %name) #3
  store i8* %gvalue, i8** @_initial_name
  store i8* %gvalue3, i8** @name
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

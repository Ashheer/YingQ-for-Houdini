;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [23 x i8] c"variability_normal_min\00"
@1 = private constant [23 x i8] c"variability_normal_max\00"
@2 = private constant [26 x i8] c"variability_normal_stddev\00"
@_expected_value = external global double
@3 = private constant [16 x i8] c"_expected_value\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@F"(double* %_bound__expected_value) #0 {
__llvm_entry:
  %min_max = alloca <2 x double>
  %0 = alloca double
  %1 = alloca double
  %2 = alloca <2 x double>
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca double
  %7 = alloca double
  %8 = alloca <2 x double>
  %9 = alloca double
  %10 = alloca i64
  %11 = alloca i64
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @0, i64 0, i64 0))
  %return1 = call double @"ch@FS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @1, i64 0, i64 0))
  %return2 = call double @"ch@FS"(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @2, i64 0, i64 0))
  %return5 = call <2 x double> @"set@UFF"(double %return, double %return1)
  store <2 x double> %return5, <2 x double>* %min_max
  %swap_min_max_if_needed = call <2 x double> @"swap_min_max_if_needed@UU"(<2 x double>* %min_max)
  store <2 x double> %swap_min_max_if_needed, <2 x double>* %min_max
  %return7 = call double @"getcomp@FUI"(<2 x double> %swap_min_max_if_needed, i64 1)
  %return9 = call double @"getcomp@FUI"(<2 x double> %swap_min_max_if_needed, i64 0)
  %output = fsub double %return7, %return9
  %output12 = fadd double %return, %return1
  %output13 = call double @"div@FF"(double %output12, double 2.000000e+00)
  %output16 = fmul double 8.000000e+00, %return2
  %return18 = fcmp olt double %output16, %output
  br i1 %return18, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output22 = fmul double %output13, %output13
  %output24 = fadd double %output22, %return2
  %output26 = fadd double %output24, %return2
  store double %output26, double* %_bound__expected_value
  br label %end

false:                                            ; preds = %__llvm_entry
  store double %output13, double* %0
  store double %return2, double* %1
  %min_max29 = load <2 x double>, <2 x double>* %min_max
  store <2 x double> %min_max29, <2 x double>* %2
  store double %output, double* %3
  store i64 16, i64* %4
  store i64 2, i64* %5
  %calc_moment = call double @"calc_moment@FFFUFII"(double* %0, double* %1, <2 x double>* %2, double* %3, i64* %4, i64* %5)
  store double %output13, double* %6
  store double %return2, double* %7
  %min_max33 = load <2 x double>, <2 x double>* %min_max
  store <2 x double> %min_max33, <2 x double>* %8
  store double %output, double* %9
  store i64 16, i64* %10
  store i64 0, i64* %11
  %calc_moment35 = call double @"calc_moment@FFFUFII"(double* %6, double* %7, <2 x double>* %8, double* %9, i64* %10, i64* %11)
  %output36 = call double @"div@FF"(double %calc_moment, double %calc_moment35)
  store double %output36, double* %_bound__expected_value
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: alwaysinline nounwind
define private <2 x double> @"swap_min_max_if_needed@UU"(<2 x double>* %min_max) #0 {
__llvm_entry:
  %min_max1 = load <2 x double>, <2 x double>* %min_max
  %return = call double @"getcomp@FUI"(<2 x double> %min_max1, i64 1)
  %return3 = call double @"getcomp@FUI"(<2 x double> %min_max1, i64 0)
  %return4 = fcmp olt double %return, %return3
  br i1 %return4, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return11 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %min_max1, double %return, i64 0)
  %output = extractvalue { double, <2 x double> } %return11, 1
  store <2 x double> %output, <2 x double>* %min_max
  %return15 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output, double %return3, i64 1)
  %output17 = extractvalue { double, <2 x double> } %return15, 1
  store <2 x double> %output17, <2 x double>* %min_max
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %min_max18 = load <2 x double>, <2 x double>* %min_max
  ret <2 x double> %min_max18
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #1

; Function Attrs: alwaysinline
define private { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <2 x double> @"setcomp@UFI"(<2 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <2 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <2 x double> } %mrv, <2 x double> %rw16, 1
  ret { double, <2 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #1

; Function Attrs: alwaysinline nounwind
define private double @"normal_dist@FFFF"(double* %x, double* %mean, double* %stddev) #0 {
__llvm_entry:
  %stddev1 = load double, double* %stddev
  %output = fmul double %stddev1, %stddev1
  %x3 = load double, double* %x
  %mean4 = load double, double* %mean
  %output5 = fsub double %x3, %mean4
  %output9 = fmul double %output5, %output5
  %output11 = fmul double 5.000000e-01, %output9
  %output13 = call double @"div@FF"(double %output11, double %output)
  %return = fcmp ogt double %output13, 1.000000e+01
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %return17 = call double @"neg@FF"(double %output13)
  %return18 = call double @"exp@FF"(double %return17)
  %output20 = fmul double 0x401921FB4D12D84A, %output
  %output21 = call double @"div@FF"(double %return18, double %output20)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end, %true
  %UnifiedRetVal = phi double [ 0.000000e+00, %true ], [ %output21, %end ]
  ret double %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"exp@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private double @"calc_instances@FFFFI"(double* %x, double* %mean, double* %stddev, i64* %moment) #0 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output6, %body ]
  %fx.0 = phi double [ 1.000000e+00, %__llvm_entry ], [ %output, %body ]
  %moment2 = load i64, i64* %moment
  %return = call i64 @"lt@III"(i64 %i.0, i64 %moment2)
  %3 = icmp ne i64 %return, 0
  br i1 %3, label %body, label %end

body:                                             ; preds = %cond
  %x4 = load double, double* %x
  %output = fmul double %fx.0, %x4
  %output6 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %x8 = load double, double* %x
  store double %x8, double* %0
  %mean9 = load double, double* %mean
  store double %mean9, double* %1
  %stddev10 = load double, double* %stddev
  store double %stddev10, double* %2
  %normal_dist = call double @"normal_dist@FFFF"(double* %0, double* %1, double* %2)
  %output11 = fmul double %fx.0, %normal_dist
  ret double %output11
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: alwaysinline nounwind
define private double @"calc_moment@FFFUFII"(double* %mean, double* %stddev, <2 x double>* %min_max, double* %range, i64* %divisions, i64* %moment) #0 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca i64
  %4 = alloca double
  %5 = alloca double
  %6 = alloca double
  %7 = alloca i64
  %8 = alloca double
  %9 = alloca double
  %10 = alloca double
  %11 = alloca i64
  %min_max1 = load <2 x double>, <2 x double>* %min_max
  %return = call double @"getcomp@FUI"(<2 x double> %min_max1, i64 0)
  %return3 = call double @"getcomp@FUI"(<2 x double> %min_max1, i64 1)
  %range4 = load double, double* %range
  %divisions5 = load i64, i64* %divisions
  %cast = sitofp i64 %divisions5 to double
  %output = call double @"div@FF"(double %range4, double %cast)
  store double %return, double* %0
  %mean7 = load double, double* %mean
  store double %mean7, double* %1
  %stddev8 = load double, double* %stddev
  store double %stddev8, double* %2
  %moment9 = load i64, i64* %moment
  store i64 %moment9, i64* %3
  %calc_instances = call double @"calc_instances@FFFFI"(double* %0, double* %1, double* %2, i64* %3)
  store double %return3, double* %4
  %mean11 = load double, double* %mean
  store double %mean11, double* %5
  %stddev12 = load double, double* %stddev
  store double %stddev12, double* %6
  %moment13 = load i64, i64* %moment
  store i64 %moment13, i64* %7
  %calc_instances14 = call double @"calc_instances@FFFFI"(double* %4, double* %5, double* %6, i64* %7)
  %output15 = fadd double %calc_instances, %calc_instances14
  br label %cond

cond:                                             ; preds = %end21, %__llvm_entry
  %sum.0 = phi double [ %output15, %__llvm_entry ], [ %sum.1, %end21 ]
  %i.0 = phi i64 [ 1, %__llvm_entry ], [ %output49, %end21 ]
  %divisions17 = load i64, i64* %divisions
  %return18 = call i64 @"lt@III"(i64 %i.0, i64 %divisions17)
  %12 = icmp ne i64 %return18, 0
  br i1 %12, label %body, label %end

body:                                             ; preds = %cond
  %return20 = call i64 @"mod@III"(i64 %i.0, i64 2)
  %13 = icmp ne i64 %return20, 0
  %cast26 = sitofp i64 %i.0 to double
  %output27 = fmul double %cast26, %output
  %output28 = fadd double %return, %output27
  store double %output28, double* %8
  %mean29 = load double, double* %mean
  store double %mean29, double* %9
  %stddev30 = load double, double* %stddev
  store double %stddev30, double* %10
  %moment31 = load i64, i64* %moment
  store i64 %moment31, i64* %11
  %calc_instances32 = call double @"calc_instances@FFFFI"(double* %8, double* %9, double* %10, i64* %11)
  br i1 %13, label %true, label %false

end:                                              ; preds = %cond
  %output52 = call double @"div@FF"(double %output, double 3.000000e+00)
  %output53 = fmul double %sum.0, %output52
  ret double %output53

true:                                             ; preds = %body
  %output33 = fmul double 4.000000e+00, %calc_instances32
  %output34 = fadd double %sum.0, %output33
  br label %end21

false:                                            ; preds = %body
  %output46 = fmul double 2.000000e+00, %calc_instances32
  %output47 = fadd double %sum.0, %output46
  br label %end21

end21:                                            ; preds = %false, %true
  %sum.1 = phi double [ %output34, %true ], [ %output47, %false ]
  %output49 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %_expected_value) #3 {
__llvm_entry:
  %"<_expected_value>" = alloca double
  store double %_expected_value, double* %"<_expected_value>"
  call void @"__vex_snippet_snippet@F"(double* %"<_expected_value>")
  %evalue = load double, double* %"<_expected_value>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @3, i64 0, i64 0), double %evalue) #4
  store double %gvalue, double* @_expected_value
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

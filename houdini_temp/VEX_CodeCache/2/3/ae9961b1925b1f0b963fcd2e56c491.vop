;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"encode_up\00"
@__A16i = external global i64
@__A32i = external global i64
@__B16i = external global i64
@__B32i = external global i64
@__C16i = external global i64
@__C32i = external global i64
@__D16i = external global i64
@__D32i = external global i64
@1 = private constant [7 x i8] c"__A16i\00"
@2 = private constant [7 x i8] c"__A32i\00"
@3 = private constant [7 x i8] c"__B16i\00"
@4 = private constant [7 x i8] c"__B32i\00"
@5 = private constant [7 x i8] c"__C16i\00"
@6 = private constant [7 x i8] c"__C32i\00"
@7 = private constant [7 x i8] c"__D16i\00"
@8 = private constant [7 x i8] c"__D32i\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIIIIIII"(i64* %_bound___A16i, i64* %_bound___A32i, i64* %_bound___B16i, i64* %_bound___B32i, i64* %_bound___C16i, i64* %_bound___C32i, i64* %_bound___D16i, i64* %_bound___D32i) #0 {
__llvm_entry:
  %_bound___A32i1 = load i64, i64* %_bound___A32i
  store i64 %_bound___A32i1, i64* %_bound___A16i
  %_bound___B32i2 = load i64, i64* %_bound___B32i
  store i64 %_bound___B32i2, i64* %_bound___B16i
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound___C32i3 = load i64, i64* %_bound___C32i
  store i64 %_bound___C32i3, i64* %_bound___C16i
  %_bound___D32i4 = load i64, i64* %_bound___D32i
  store i64 %_bound___D32i4, i64* %_bound___D16i
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %__A16i, i64 %__A32i, i64 %__B16i, i64 %__B32i, i64 %__C16i, i64 %__C32i, i64 %__D16i, i64 %__D32i) #2 {
__llvm_entry:
  %"<__B16i>" = alloca i64
  %"<__C16i>" = alloca i64
  %"<__D16i>" = alloca i64
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca i64
  %"<__A16i>" = alloca i64
  store i64 %__A16i, i64* %"<__A16i>"
  store i64 %__B16i, i64* %"<__B16i>"
  store i64 %__C16i, i64* %"<__C16i>"
  store i64 %__D16i, i64* %"<__D16i>"
  store i64 %__A32i, i64* %0
  store i64 %__B32i, i64* %1
  store i64 %__C32i, i64* %2
  store i64 %__D32i, i64* %3
  call void @"__vex_snippet_snippet@IIIIIIII"(i64* %"<__A16i>", i64* %0, i64* %"<__B16i>", i64* %1, i64* %"<__C16i>", i64* %2, i64* %"<__D16i>", i64* %3)
  %evalue = load i64, i64* %"<__A16i>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i64 %evalue) #3
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), i64 %__A32i) #3
  %evalue7 = load i64, i64* %"<__B16i>"
  %gvalue8 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), i64 %evalue7) #3
  %gvalue10 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0), i64 %__B32i) #3
  %evalue11 = load i64, i64* %"<__C16i>"
  %gvalue12 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0), i64 %evalue11) #3
  %gvalue14 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0), i64 %__C32i) #3
  %evalue15 = load i64, i64* %"<__D16i>"
  %gvalue16 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), i64 %evalue15) #3
  %gvalue18 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @8, i64 0, i64 0), i64 %__D32i) #3
  store i64 %gvalue, i64* @__A16i
  store i64 %gvalue6, i64* @__A32i
  store i64 %gvalue8, i64* @__B16i
  store i64 %gvalue10, i64* @__B32i
  store i64 %gvalue12, i64* @__C16i
  store i64 %gvalue14, i64* @__C32i
  store i64 %gvalue16, i64* @__D16i
  store i64 %gvalue18, i64* @__D32i
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@up = external global <3 x double>
@ptnum = external global i64
@Time = external global double
@N = external global <3 x double>
@0 = private constant [3 x i8] c"up\00"
@1 = private constant [6 x i8] c"ptnum\00"
@2 = private constant [5 x i8] c"Time\00"
@3 = private constant [2 x i8] c"N\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VIFV"(<3 x double>* %_bound_up, i64* %_bound_ptnum, double* %_bound_Time, <3 x double>* %_bound_N) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %cast = sitofp i64 %_bound_ptnum1 to double
  %return = call <2 x double> @"rand@UF"(double %cast)
  %return2 = call <3 x double> @"sample_direction_uniform@VU"(<2 x double> %return)
  store <3 x double> %return2, <3 x double>* %_bound_up
  %return3 = call <9 x double> @"ident@3"()
  %_bound_Time5 = load double, double* %_bound_Time
  %output = fmul double %_bound_Time5, 2.000000e+00
  %_bound_N6 = load <3 x double>, <3 x double>* %_bound_N
  %output7 = call <9 x double> @"rotate@3FV"(<9 x double> %return3, double %output, <3 x double> %_bound_N6)
  %_bound_up8 = load <3 x double>, <3 x double>* %_bound_up
  %output10 = call <3 x double> @"mul@V3"(<3 x double> %_bound_up8, <9 x double> %output7)
  store <3 x double> %output10, <3 x double>* %_bound_up
  ret void
}

; Function Attrs: nounwind
declare <2 x double> @"rand@UF"(double) #1

; Function Attrs: nounwind
declare <3 x double> @"sample_direction_uniform@VU"(<2 x double>) #1

; Function Attrs: nounwind
declare <9 x double> @"ident@3"() #1

; Function Attrs: nounwind readnone
declare <9 x double> @"rotate@3FV"(<9 x double>, double, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"mul@V3"(<3 x double>, <9 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %up, i64 %ptnum, double %Time, <3 x double> %N) #1 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca double
  %2 = alloca <3 x double>
  %"<up>" = alloca <3 x double>
  store <3 x double> %up, <3 x double>* %"<up>"
  store i64 %ptnum, i64* %0
  store double %Time, double* %1
  store <3 x double> %N, <3 x double>* %2
  call void @"__vex_snippet_snippet@VIFV"(<3 x double>* %"<up>", i64* %0, double* %1, <3 x double>* %2)
  %evalue = load <3 x double>, <3 x double>* %"<up>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i64 %ptnum) #3
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), double %Time) #3
  %gvalue9 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %N) #3
  store <3 x double> %gvalue, <3 x double>* @up
  store i64 %gvalue5, i64* @ptnum
  store double %gvalue7, double* @Time
  store <3 x double> %gvalue9, <3 x double>* @N
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

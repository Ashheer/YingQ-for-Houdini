;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [16 x i8] c"../materialtype\00"
@1 = private constant [23 x i8] c"../custom_inputsurface\00"
@2 = private constant [8 x i8] c"__holes\00"
@3 = private constant [74 x i8] c"The input geometry has holes. This may result in bad or missing geometry.\00"
@primnum = external global i64
@4 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_primnum) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"eq@III"(i64 %return, i64 3)
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @1, i64 0, i64 0))
  %return3 = call i64 @"eq@III"(i64 %return2, i64 1)
  %return4 = call i64 @"and@III"(i64 %return1, i64 %return3)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %end, %true7, %__llvm_entry
  ret void

end:                                              ; preds = %__llvm_entry
  %_bound_primnum5 = load i64, i64* %_bound_primnum
  %return6 = call i64 @"inprimgroup@IISI"(i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i64 %_bound_primnum5)
  %1 = icmp ne i64 %return6, 0
  br i1 %1, label %true7, label %true

true7:                                            ; preds = %end
  call void @"warning@S"(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @3, i64 0, i64 0))
  br label %true
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"inprimgroup@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare void @"warning@S"(i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum) #2 {
__llvm_entry:
  %0 = alloca i64
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), i64 %primnum) #3
  store i64 %gvalue, i64* @primnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [3 x i8] c"%s\00"
@1 = private constant [1 x i8] zeroinitializer
@pts = external global i8*
@primnum = external global i64
@2 = private constant [4 x i8] c"pts\00"
@3 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SI"(i8** %_bound_pts, i64* %_bound_primnum) #0 {
__llvm_entry:
  %0 = alloca i64
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  store i64 %_bound_primnum1, i64* %0
  %serializePointIndices = call i8* @"serializePointIndices@SI"(i64* %0)
  store i8* %serializePointIndices, i8** %_bound_pts
  ret void
}

; Function Attrs: alwaysinline nounwind
define private i8* @"serializePointIndices@SI"(i64* %primnum) #0 {
__llvm_entry:
  %primnum1 = load i64, i64* %primnum
  %return = call i64* @"primpoints@[III"(i64 0, i64 %primnum1)
  %return3 = call i64* @"sort@[I[I"(i64* %return)
  %return5 = call i8* @"sprintf@SS:[I"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), i64* %return3)
  ret i8* %return5
}

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind
declare i64* @"sort@[I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i8* @"sprintf@SS:[I"(i8*, i64*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i8* %pts, i64 %primnum) #1 {
__llvm_entry:
  %0 = alloca i64
  %"<pts>" = alloca i8*
  store i8* %pts, i8** %"<pts>"
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@SI"(i8** %"<pts>", i64* %0)
  %evalue = load i8*, i8** %"<pts>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i64 0, i64 0), i8* %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i64 %primnum) #3
  store i8* %gvalue, i8** @pts
  store i64 %gvalue3, i64* @primnum
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0), i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

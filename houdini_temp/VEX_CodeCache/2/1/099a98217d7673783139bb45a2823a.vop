;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [27 x i8] c"../enable_enumeratepromote\00"
@1 = private constant [12 x i8] c"../attribto\00"
@2 = private constant [14 x i8] c"../attribfrom\00"
@3 = private constant [16 x i8] c"FeE: same class\00"
@4 = private constant [14 x i8] c"../outasarray\00"
@5 = private constant [0 x i64] zeroinitializer
@outattribArr = external global i64*
@elemnum = external global i64
@outattrib = external global i64
@6 = private constant [13 x i8] c"outattribArr\00"
@7 = private constant [8 x i8] c"elemnum\00"
@8 = private constant [10 x i8] c"outattrib\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[III"(i64** %_bound_outattribArr, i64* %_bound_elemnum, i64* %_bound_outattrib) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"not@II"(i64 %return)
  %0 = icmp ne i64 %return1, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %true75, %false76, %true66, %false67, %true53, %false54, %true43, %false44, %true25, %false26, %true17, %false18, %__llvm_entry
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i64 0, i64 0))
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @2, i64 0, i64 0))
  %return4 = call i64 @"eq@III"(i64 %return2, i64 %return3)
  %1 = icmp ne i64 %return4, 0
  br i1 %1, label %true5, label %end6

true5:                                            ; preds = %end
  call void @"error@S"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @3, i64 0, i64 0))
  br label %UnifiedReturnBlock

end6:                                             ; preds = %end
  %return8 = call i64 @"eq@III"(i64 %return2, i64 0)
  %2 = icmp ne i64 %return8, 0
  br i1 %2, label %true9, label %false

true9:                                            ; preds = %end6
  %return12 = call i64 @"eq@III"(i64 %return3, i64 1)
  %3 = icmp ne i64 %return12, 0
  %return16 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @4, i64 0, i64 0))
  %4 = icmp ne i64 %return16, 0
  %_bound_elemnum20 = load i64, i64* %_bound_elemnum
  br i1 %3, label %true13, label %false14

false:                                            ; preds = %end6
  %return33 = call i64 @"eq@III"(i64 %return2, i64 1)
  %5 = icmp ne i64 %return33, 0
  %return38 = call i64 @"eq@III"(i64 %return3, i64 0)
  %6 = icmp ne i64 %return38, 0
  %return42 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @4, i64 0, i64 0))
  %7 = icmp ne i64 %return42, 0
  br i1 %5, label %true34, label %false35

true13:                                           ; preds = %true9
  br i1 %4, label %true17, label %false18

false14:                                          ; preds = %true9
  br i1 %4, label %true25, label %false26

true17:                                           ; preds = %true13
  %return21 = call i64* @"primpoints@[III"(i64 0, i64 %_bound_elemnum20)
  store i64* %return21, i64** %_bound_outattribArr
  br label %true

false18:                                          ; preds = %true13
  %return23 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_elemnum20, i64 0)
  store i64 %return23, i64* %_bound_outattrib
  br label %true

true25:                                           ; preds = %false14
  %return29 = call i64* @"primvertices@[III"(i64 0, i64 %_bound_elemnum20)
  store i64* %return29, i64** %_bound_outattribArr
  br label %true

false26:                                          ; preds = %false14
  %return31 = call i64 @"primvertex@IIII"(i64 0, i64 %_bound_elemnum20, i64 0)
  store i64 %return31, i64* %_bound_outattrib
  br label %true

true34:                                           ; preds = %false
  br i1 %6, label %true39, label %false40

false35:                                          ; preds = %false
  %_bound_elemnum69 = load i64, i64* %_bound_elemnum
  br i1 %6, label %true62, label %false63

true39:                                           ; preds = %true34
  br i1 %7, label %true43, label %false44

false40:                                          ; preds = %true34
  %_bound_elemnum56 = load i64, i64* %_bound_elemnum
  br i1 %7, label %true53, label %false54

true43:                                           ; preds = %true39
  %_bound_elemnum46 = load i64, i64* %_bound_elemnum
  %return47 = call i64* @"pointprims@[III"(i64 0, i64 %_bound_elemnum46)
  store i64* %return47, i64** %_bound_outattribArr
  br label %true

false44:                                          ; preds = %true39
  %_bound_elemnum48 = load i64, i64* %_bound_elemnum
  %return49 = call i64 @"pointvertex@III"(i64 0, i64 %_bound_elemnum48)
  %return51 = call i64 @"vertexprim@III"(i64 0, i64 %return49)
  store i64 %return51, i64* %_bound_outattrib
  br label %true

true53:                                           ; preds = %false40
  %return57 = call i64* @"pointvertices@[III"(i64 0, i64 %_bound_elemnum56)
  store i64* %return57, i64** %_bound_outattribArr
  br label %true

false54:                                          ; preds = %false40
  %return59 = call i64 @"pointvertex@III"(i64 0, i64 %_bound_elemnum56)
  store i64 %return59, i64* %_bound_outattrib
  br label %true

true62:                                           ; preds = %false35
  %return70 = call i64 @"vertexprim@III"(i64 0, i64 %_bound_elemnum69)
  br i1 %7, label %true66, label %false67

false63:                                          ; preds = %false35
  %return79 = call i64 @"vertexpoint@III"(i64 0, i64 %_bound_elemnum69)
  br i1 %7, label %true75, label %false76

true66:                                           ; preds = %true62
  %return71 = call i64* @"array@[I:I"(i64 %return70)
  store i64* %return71, i64** %_bound_outattribArr
  br label %true

false67:                                          ; preds = %true62
  store i64 %return70, i64* %_bound_outattrib
  br label %true

true75:                                           ; preds = %false63
  %return80 = call i64* @"array@[I:I"(i64 %return79)
  store i64* %return80, i64** %_bound_outattribArr
  br label %true

false76:                                          ; preds = %false63
  store i64 %return79, i64* %_bound_outattrib
  br label %true

UnifiedReturnBlock:                               ; preds = %true5, %true
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare void @"error@S"(i8*) #2

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"primpoint@IIII"(i64, i64, i64) #2

; Function Attrs: nounwind
declare i64* @"primvertices@[III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"primvertex@IIII"(i64, i64, i64) #2

; Function Attrs: nounwind
declare i64* @"pointprims@[III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"pointvertex@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"vertexprim@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64* @"pointvertices@[III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64* @"array@[I:I"(i64) #1

; Function Attrs: nounwind
declare i64 @"vertexpoint@III"(i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64* %outattribArr, i64 %elemnum, i64 %outattrib) #2 {
__llvm_entry:
  %"<outattrib>" = alloca i64
  %0 = alloca i64
  %"<outattribArr>" = alloca i64*
  store i64* %outattribArr, i64** %"<outattribArr>"
  store i64 %outattrib, i64* %"<outattrib>"
  store i64 %elemnum, i64* %0
  call void @"__vex_snippet_snippet@[III"(i64** %"<outattribArr>", i64* %0, i64* %"<outattrib>")
  %evalue = load i64*, i64** %"<outattribArr>"
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @6, i64 0, i64 0), i64* %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @7, i64 0, i64 0), i64 %elemnum) #3
  %evalue4 = load i64, i64* %"<outattrib>"
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @8, i64 0, i64 0), i64 %evalue4) #3
  store i64* %gvalue, i64** @outattribArr
  store i64 %gvalue3, i64* @elemnum
  store i64 %gvalue5, i64* @outattrib
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @5, i64 0, i64 0), i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

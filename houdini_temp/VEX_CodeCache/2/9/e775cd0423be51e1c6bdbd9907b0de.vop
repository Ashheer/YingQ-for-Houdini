;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

; Function Attrs: alwaysinline nounwind
define private void @__vex_snippet_snippet() #0 {
__llvm_entry:
  %return1 = call <9 x double> @"set@3VVV"(<3 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  %cast = call <16 x double> @"set@43"(<9 x double> %return1)
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind
declare <9 x double> @"set@3VVV"(<3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <16 x double> @"set@43"(<9 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet() #2 {
__llvm_entry:
  call void @__vex_snippet_snippet()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

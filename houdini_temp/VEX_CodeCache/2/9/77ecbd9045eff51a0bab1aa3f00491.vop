;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [15 x i8] c"Obstacle_1wide\00"
@1 = private constant [11 x i8] c"obstacle1w\00"
@2 = private constant [15 x i8] c"Obstacle_2wide\00"
@3 = private constant [11 x i8] c"obstacle2w\00"
@4 = private constant [15 x i8] c"Obstacle_3wide\00"
@5 = private constant [11 x i8] c"obstacle3w\00"
@6 = private constant [1 x i8] zeroinitializer
@up = external global <3 x double>
@N = external global <3 x double>
@transform = external global <9 x double>
@P = external global <3 x double>
@name = external global i8*
@unity_instance = external global i8*
@7 = private constant [3 x i8] c"up\00"
@8 = private constant [2 x i8] c"N\00"
@9 = private constant [10 x i8] c"transform\00"
@10 = private constant [2 x i8] c"P\00"
@11 = private constant [5 x i8] c"name\00"
@12 = private constant [15 x i8] c"unity_instance\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VV3VSS"(<3 x double>* %_bound_up, <3 x double>* %_bound_N, <9 x double>* %_bound_transform, <3 x double>* %_bound_P, i8** %_bound_name, i8** %_bound_unity_instance) #0 {
__llvm_entry:
  %return = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 1.000000e+00, double 0.000000e+00)
  store <3 x double> %return, <3 x double>* %_bound_up
  %return1 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 1.000000e+00)
  %_bound_N2 = load <3 x double>, <3 x double>* %_bound_N
  %return3 = call <9 x double> @"dihedral@3VV"(<3 x double> %return1, <3 x double> %_bound_N2)
  %return5 = call <3 x double> @"set@VFFF"(double 1.000000e-01, double 1.000000e-01, double 1.000000e-01)
  %output = call <9 x double> @"prescale@3V"(<9 x double> %return3, <3 x double> %return5)
  store <9 x double> %output, <9 x double>* %_bound_transform
  %tmp = load <3 x double>, <3 x double>* %_bound_P
  %return7 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double 2.500000e-02, i64 1)
  %output9 = extractvalue { double, <3 x double> } %return7, 1
  store <3 x double> %output9, <3 x double>* %_bound_P
  %_bound_name10 = load i8*, i8** %_bound_name
  %return11 = call i64 @"eq@ISS"(i8* %_bound_name10, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return11, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return12 = call i8* @"chs@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0))
  store i8* %return12, i8** %_bound_unity_instance
  br label %end

false:                                            ; preds = %__llvm_entry
  %return14 = call i64 @"eq@ISS"(i8* %_bound_name10, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i64 0, i64 0))
  %1 = icmp ne i64 %return14, 0
  br i1 %1, label %true15, label %false16

end:                                              ; preds = %false16, %true21, %true15, %true
  ret void

true15:                                           ; preds = %false
  %return18 = call i8* @"chs@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0))
  store i8* %return18, i8** %_bound_unity_instance
  br label %end

false16:                                          ; preds = %false
  %return20 = call i64 @"eq@ISS"(i8* %_bound_name10, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @4, i64 0, i64 0))
  %2 = icmp ne i64 %return20, 0
  br i1 %2, label %true21, label %end

true21:                                           ; preds = %false16
  %return23 = call i8* @"chs@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0))
  store i8* %return23, i8** %_bound_unity_instance
  br label %end
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <9 x double> @"dihedral@3VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <9 x double> @"prescale@3V"(<9 x double>, <3 x double>) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double 2.500000e-02, i64 1)
  %mrv9 = insertvalue { double, <3 x double> } { double 2.500000e-02, <3 x double> undef }, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %up, <3 x double> %N, <9 x double> %transform, <3 x double> %P, i8* %name, i8* %unity_instance) #3 {
__llvm_entry:
  %"<transform>" = alloca <9 x double>
  %"<P>" = alloca <3 x double>
  %"<unity_instance>" = alloca i8*
  %0 = alloca <3 x double>
  %1 = alloca i8*
  %"<up>" = alloca <3 x double>
  store <3 x double> %up, <3 x double>* %"<up>"
  store <9 x double> %transform, <9 x double>* %"<transform>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store i8* %unity_instance, i8** %"<unity_instance>"
  store <3 x double> %N, <3 x double>* %0
  store i8* %name, i8** %1
  call void @"__vex_snippet_snippet@VV3VSS"(<3 x double>* %"<up>", <3 x double>* %0, <9 x double>* %"<transform>", <3 x double>* %"<P>", i8** %1, i8** %"<unity_instance>")
  %evalue = load <3 x double>, <3 x double>* %"<up>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @7, i64 0, i64 0), <3 x double> %evalue) #4
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), <3 x double> %N) #4
  %evalue5 = load <9 x double>, <9 x double>* %"<transform>"
  %gvalue6 = call <9 x double> @"_export@3S3"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @9, i64 0, i64 0), <9 x double> %evalue5) #4
  %evalue7 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i64 0, i64 0), <3 x double> %evalue7) #4
  %gvalue10 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0), i8* %name) #4
  %evalue11 = load i8*, i8** %"<unity_instance>"
  %gvalue12 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @12, i64 0, i64 0), i8* %evalue11) #4
  store <3 x double> %gvalue, <3 x double>* @up
  store <3 x double> %gvalue4, <3 x double>* @N
  store <9 x double> %gvalue6, <9 x double>* @transform
  store <3 x double> %gvalue8, <3 x double>* @P
  store i8* %gvalue10, i8** @name
  store i8* %gvalue12, i8** @unity_instance
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare <9 x double> @"_export@3S3"(i8*, <9 x double>)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <9 x double> zeroinitializer, <3 x double> zeroinitializer, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @6, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

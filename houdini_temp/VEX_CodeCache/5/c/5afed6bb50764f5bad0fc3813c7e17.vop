;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"class\00"
@1 = private constant [39 x i8] c"../extractintrinsic_fee1/newattribname\00"
@2 = private constant [39 x i8] c"../extractintrinsic_fee2/newattribname\00"
@3 = private constant [9 x i8] c"../scale\00"
@4 = private constant [13 x i8] c"../do_scalex\00"
@5 = private constant [10 x i8] c"../scalex\00"
@6 = private constant [13 x i8] c"../do_scaley\00"
@7 = private constant [10 x i8] c"../scaley\00"
@8 = private constant [13 x i8] c"../do_scalez\00"
@9 = private constant [10 x i8] c"../scalez\00"
@primnum = external global i64
@ptnum = external global i64
@uv = external global <3 x double>
@10 = private constant [8 x i8] c"primnum\00"
@11 = private constant [6 x i8] c"ptnum\00"
@12 = private constant [3 x i8] c"uv\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIV"(i64* %_bound_primnum, i64* %_bound_ptnum, <3 x double>* %_bound_uv) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"eq@III"(i64 %return, i64 3)
  %2 = icmp ne i64 %return1, 0
  br i1 %2, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_bound_primnum2 = load i64, i64* %_bound_primnum
  br label %end

false:                                            ; preds = %__llvm_entry
  store i64 0, i64* %0
  %_bound_ptnum3 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum3, i64* %1
  %pointprim = call i64 @"pointprim@III"(i64* %0, i64* %1)
  br label %end

end:                                              ; preds = %false, %true
  %primnum.0 = phi i64 [ %_bound_primnum2, %true ], [ %pointprim, %false ]
  %return4 = call i8* @"chs@SS"(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @1, i64 0, i64 0))
  %return6 = call double @"prim@FISI"(i64 1, i8* %return4, i64 %primnum.0)
  %return7 = call i8* @"chs@SS"(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @2, i64 0, i64 0))
  %return9 = call double @"prim@FISI"(i64 1, i8* %return7, i64 %primnum.0)
  %output = call double @"div@FF"(double %return6, double %return9)
  %return12 = call double @"sqrt@FF"(double %output)
  %return13 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0))
  %output14 = fmul double %return12, %return13
  %return15 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @4, i64 0, i64 0))
  %3 = icmp ne i64 %return15, 0
  br i1 %3, label %true16, label %end17

true16:                                           ; preds = %end
  %_bound_uv18 = load <3 x double>, <3 x double>* %_bound_uv
  %return19 = call double @"getcomp@FVI"(<3 x double> %_bound_uv18, i64 0)
  %return21 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i64 0, i64 0))
  %output22 = fmul double %output14, %return21
  %output23 = fmul double %return19, %output22
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %_bound_uv18, double %output23, i64 0)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %_bound_uv
  br label %end17

end17:                                            ; preds = %true16, %end
  %return27 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @6, i64 0, i64 0))
  %4 = icmp ne i64 %return27, 0
  br i1 %4, label %true28, label %end29

true28:                                           ; preds = %end17
  %_bound_uv30 = load <3 x double>, <3 x double>* %_bound_uv
  %return31 = call double @"getcomp@FVI"(<3 x double> %_bound_uv30, i64 1)
  %return33 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @7, i64 0, i64 0))
  %output34 = fmul double %output14, %return33
  %output35 = fmul double %return31, %output34
  %return37 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %_bound_uv30, double %output35, i64 1)
  %output39 = extractvalue { double, <3 x double> } %return37, 1
  store <3 x double> %output39, <3 x double>* %_bound_uv
  br label %end29

end29:                                            ; preds = %true28, %end17
  %return40 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @8, i64 0, i64 0))
  %5 = icmp ne i64 %return40, 0
  br i1 %5, label %true41, label %end42

true41:                                           ; preds = %end29
  %_bound_uv43 = load <3 x double>, <3 x double>* %_bound_uv
  %return44 = call double @"getcomp@FVI"(<3 x double> %_bound_uv43, i64 2)
  %return46 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @9, i64 0, i64 0))
  %output47 = fmul double %output14, %return46
  %output48 = fmul double %return44, %output47
  %return50 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %_bound_uv43, double %output48, i64 2)
  %output52 = extractvalue { double, <3 x double> } %return50, 1
  store <3 x double> %output52, <3 x double>* %_bound_uv
  br label %end42

end42:                                            ; preds = %true41, %end29
  ret void
}

; Function Attrs: alwaysinline nounwind
define private i64 @"pointprim@III"(i64* %geo, i64* %ptnum) #0 {
__llvm_entry:
  %geo1 = load i64, i64* %geo
  %ptnum2 = load i64, i64* %ptnum
  %return = call i64 @"pointvertex@III"(i64 %geo1, i64 %ptnum2)
  %geo3 = load i64, i64* %geo
  %return5 = call i64 @"vertexprim@III"(i64 %geo3, i64 %return)
  ret i64 %return5
}

; Function Attrs: nounwind
declare i64 @"pointvertex@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"vertexprim@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind
declare double @"prim@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #2

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #2

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, i64 %ptnum, <3 x double> %uv) #1 {
__llvm_entry:
  %"<uv>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca i64
  store <3 x double> %uv, <3 x double>* %"<uv>"
  store i64 %primnum, i64* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@IIV"(i64* %0, i64* %1, <3 x double>* %"<uv>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @10, i64 0, i64 0), i64 %primnum) #4
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @11, i64 0, i64 0), i64 %ptnum) #4
  %evalue5 = load <3 x double>, <3 x double>* %"<uv>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @12, i64 0, i64 0), <3 x double> %evalue5) #4
  store i64 %gvalue, i64* @primnum
  store i64 %gvalue4, i64* @ptnum
  store <3 x double> %gvalue6, <3 x double>* @uv
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"debug\00"
@__pv16o = external global <3 x double>
@__pv16n = external global <3 x double>
@__magnitude = external global double
@pivot = external global <3 x double>
@__format = external global i64
@d_diff = external global double
@1 = private constant [8 x i8] c"__pv16o\00"
@2 = private constant [8 x i8] c"__pv16n\00"
@3 = private constant [12 x i8] c"__magnitude\00"
@4 = private constant [6 x i8] c"pivot\00"
@5 = private constant [9 x i8] c"__format\00"
@6 = private constant [7 x i8] c"d_diff\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVFVIF"(<3 x double>* %_bound___pv16o, <3 x double>* %_bound___pv16n, double* %_bound___magnitude, <3 x double>* %_bound_pivot, i64* %_bound___format, double* %_bound_d_diff) #0 {
__llvm_entry:
  %_bound___pv16o1 = load <3 x double>, <3 x double>* %_bound___pv16o
  %_bound___pv16n2 = load <3 x double>, <3 x double>* %_bound___pv16n
  %return = call double @"getcomp@FVI"(<3 x double> %_bound___pv16n2, i64 0)
  %return3 = call double @"pow@FFF"(double %return, double 2.000000e+00)
  %output = fsub double 1.000000e+00, %return3
  %return5 = call double @"getcomp@FVI"(<3 x double> %_bound___pv16n2, i64 2)
  %return6 = call double @"pow@FFF"(double %return5, double 2.000000e+00)
  %output7 = fsub double %output, %return6
  %return8 = call double @"sqrt@FF"(double %output7)
  %return14 = call <3 x double> @"set@VFFF"(double %return, double %return8, double %return5)
  %_bound___magnitude16 = load double, double* %_bound___magnitude
  %cast = call <3 x double> @"set@VF"(double %_bound___magnitude16)
  %output17 = call <3 x double> @"mul@VV"(<3 x double> %return14, <3 x double> %cast)
  %_bound_pivot18 = load <3 x double>, <3 x double>* %_bound_pivot
  %return20 = call double @"distance@FVV"(<3 x double> %_bound_pivot18, <3 x double> %_bound___pv16o1)
  %_bound_pivot21 = load <3 x double>, <3 x double>* %_bound_pivot
  %return23 = call double @"distance@FVV"(<3 x double> %_bound_pivot21, <3 x double> %output17)
  %return26 = fcmp ole double %return20, %return23
  %return27 = zext i1 %return26 to i64
  %return29 = call double @"pow@FFF"(double %return8, double 2.000000e+00)
  %return30 = fcmp olt double %return29, 1.000000e-03
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %0 = icmp ne i64 %return32, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  store i64 0, i64* %_bound___format
  %return33 = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0))
  %1 = icmp ne i64 %return33, 0
  br i1 %1, label %true34, label %end

false:                                            ; preds = %__llvm_entry
  store i64 1, i64* %_bound___format
  %return39 = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0))
  %2 = icmp ne i64 %return39, 0
  br i1 %2, label %true40, label %end

end:                                              ; preds = %false, %true40, %true, %true34
  ret void

true34:                                           ; preds = %true
  %output38 = fsub double %return23, %return20
  store double %output38, double* %_bound_d_diff
  br label %end

true40:                                           ; preds = %false
  %output44 = fsub double %return20, %return23
  store double %output44, double* %_bound_d_diff
  br label %end
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare double @"pow@FFF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %__pv16o, <3 x double> %__pv16n, double %__magnitude, <3 x double> %pivot, i64 %__format, double %d_diff) #2 {
__llvm_entry:
  %"<__format>" = alloca i64
  %"<d_diff>" = alloca double
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca <3 x double>
  store i64 %__format, i64* %"<__format>"
  store double %d_diff, double* %"<d_diff>"
  store <3 x double> %__pv16o, <3 x double>* %0
  store <3 x double> %__pv16n, <3 x double>* %1
  store double %__magnitude, double* %2
  store <3 x double> %pivot, <3 x double>* %3
  call void @"__vex_snippet_snippet@VVFVIF"(<3 x double>* %0, <3 x double>* %1, double* %2, <3 x double>* %3, i64* %"<__format>", double* %"<d_diff>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), <3 x double> %__pv16o) #3
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), <3 x double> %__pv16n) #3
  %gvalue8 = call double @"_export@FSF"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i64 0, i64 0), double %__magnitude) #3
  %gvalue10 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), <3 x double> %pivot) #3
  %evalue11 = load i64, i64* %"<__format>"
  %gvalue12 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i64 0, i64 0), i64 %evalue11) #3
  %evalue13 = load double, double* %"<d_diff>"
  %gvalue14 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0), double %evalue13) #3
  store <3 x double> %gvalue, <3 x double>* @__pv16o
  store <3 x double> %gvalue6, <3 x double>* @__pv16n
  store double %gvalue8, double* @__magnitude
  store <3 x double> %gvalue10, <3 x double>* @pivot
  store i64 %gvalue12, i64* @__format
  store double %gvalue14, double* @d_diff
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00, <3 x double> zeroinitializer, i64 0, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

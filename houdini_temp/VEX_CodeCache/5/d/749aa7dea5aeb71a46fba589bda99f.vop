;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [13 x i8] c"../attribute\00"
@3 = private constant [2 x i8] c"m\00"
@4 = private constant [6 x i8] c"point\00"
@5 = private constant [7 x i8] c"../new\00"
@6 = private constant [7 x i8] c"vector\00"
@__ptlist__ = external global i64*
@P = external global <3 x double>
@attrib = external global double
@grad = external global <3 x double>
@7 = private constant [11 x i8] c"__ptlist__\00"
@8 = private constant [7 x i8] c"attrib\00"
@9 = private constant [5 x i8] c"grad\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[IVFV"(i64** %_bound___ptlist__, <3 x double>* %_bound_P, double* %_bound_attrib, <3 x double>* %_bound_grad) #0 {
__llvm_entry:
  %_bound___ptlist__1 = load i64*, i64** %_bound___ptlist__
  %cast = call <3 x double> @"set@VI"(i64 0)
  %return = call i64 @"len@I[I"(i64* %_bound___ptlist__1)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %__impl_foreach_index.0 = phi i64 [ 0, %__llvm_entry ], [ %output25, %body ]
  %grad.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %output23, %body ]
  %return5 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return)
  %0 = icmp ne i64 %return5, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return8 = call i64 @"getcomp@I[II"(i64* %_bound___ptlist__1, i64 %__impl_foreach_index.0)
  %return10 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return8)
  %_bound_P11 = load <3 x double>, <3 x double>* %_bound_P
  %output = call <3 x double> @"sub@VV"(<3 x double> %return10, <3 x double> %_bound_P11)
  %return12 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %return13 = call i8* @"chs@SS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0))
  %return15 = call double @"point@FISI"(i64 0, i8* %return13, i64 %return8)
  %_bound_attrib16 = load double, double* %_bound_attrib
  %output17 = fsub double %return15, %_bound_attrib16
  %cast21 = call <3 x double> @"set@VF"(double %output17)
  %output22 = call <3 x double> @"mul@VV"(<3 x double> %cast21, <3 x double> %return12)
  %output23 = call <3 x double> @"add@VV"(<3 x double> %grad.0, <3 x double> %output22)
  %output25 = add i64 %__impl_foreach_index.0, 1
  br label %cond

end:                                              ; preds = %cond
  %return27 = call <3 x double> @"normalize@VV"(<3 x double> %grad.0)
  %return28 = call double @"ch@FS"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0))
  %cast29 = call <3 x double> @"set@VF"(double %return28)
  %output30 = call <3 x double> @"mul@VV"(<3 x double> %return27, <3 x double> %cast29)
  store <3 x double> %output30, <3 x double>* %_bound_grad
  %return31 = call i64 @"geoself@I"()
  %return32 = call i8* @"chs@SS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0))
  %return33 = call i64 @"setattribtypeinfo@IISSS"(i64 %return31, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i8* %return32, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0))
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"geoself@I"() #2

; Function Attrs: nounwind
declare i64 @"setattribtypeinfo@IISSS"(i64, i8*, i8*, i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64* %__ptlist__, <3 x double> %P, double %attrib, <3 x double> %grad) #2 {
__llvm_entry:
  %"<grad>" = alloca <3 x double>
  %0 = alloca i64*
  %1 = alloca <3 x double>
  %2 = alloca double
  store <3 x double> %grad, <3 x double>* %"<grad>"
  store i64* %__ptlist__, i64** %0
  store <3 x double> %P, <3 x double>* %1
  store double %attrib, double* %2
  call void @"__vex_snippet_snippet@[IVFV"(i64** %0, <3 x double>* %1, double* %2, <3 x double>* %"<grad>")
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @7, i64 0, i64 0), i64* %__ptlist__) #3
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %P) #3
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @8, i64 0, i64 0), double %attrib) #3
  %evalue8 = load <3 x double>, <3 x double>* %"<grad>"
  %gvalue9 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i64 0, i64 0), <3 x double> %evalue8) #3
  store i64* %gvalue, i64** @__ptlist__
  store <3 x double> %gvalue5, <3 x double>* @P
  store double %gvalue7, double* @attrib
  store <3 x double> %gvalue9, <3 x double>* @grad
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), <3 x double> zeroinitializer, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

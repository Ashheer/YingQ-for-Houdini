;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@Ndir = external global <3 x double>
@1 = private constant [5 x i8] c"Ndir\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@V"(<3 x double>* %_bound_Ndir) #0 {
__llvm_entry:
  %return = call <3 x double> @"set@VFFF"(double 5.000000e-01, double 0.000000e+00, double 0.000000e+00)
  %return1 = call <3 x double> @"primuv@VISIV"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 0, <3 x double> %return)
  %return2 = call <3 x double> @"normalize@VV"(<3 x double> %return1)
  store <3 x double> %return2, <3 x double>* %_bound_Ndir
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind
declare <3 x double> @"primuv@VISIV"(i64, i8*, i64, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %Ndir) #2 {
__llvm_entry:
  %"<Ndir>" = alloca <3 x double>
  store <3 x double> %Ndir, <3 x double>* %"<Ndir>"
  call void @"__vex_snippet_snippet@V"(<3 x double>* %"<Ndir>")
  %evalue = load <3 x double>, <3 x double>* %"<Ndir>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #3
  store <3 x double> %gvalue, <3 x double>* @Ndir
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

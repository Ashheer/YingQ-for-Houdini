;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x double] zeroinitializer
@1 = private constant [1 x i8] zeroinitializer
@2 = private constant [4 x i8] c"op:\00"
@3 = private constant [10 x i8] c"cut_areas\00"
@soppath = external global i8*
@cut_areas = external global double*
@4 = private constant [8 x i8] c"soppath\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@S[F"(i8** %_bound_soppath, double** %_bound_cut_areas) #0 {
__llvm_entry:
  %_bound_soppath1 = load i8*, i8** %_bound_soppath
  %return = call i8* @"opfullpath@SS"(i8* %_bound_soppath1)
  %return3 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i64 0, i64 0), i8* %return)
  %return5 = call double* @"detail@[FSS"(i8* %return3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0))
  store double* %return5, double** %_bound_cut_areas
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"opfullpath@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #1

; Function Attrs: nounwind
declare double* @"detail@[FSS"(i8*, i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i8* %soppath, double* %cut_areas) #2 {
__llvm_entry:
  %"<cut_areas>" = alloca double*
  %0 = alloca i8*
  store double* %cut_areas, double** %"<cut_areas>"
  store i8* %soppath, i8** %0
  call void @"__vex_snippet_snippet@S[F"(i8** %0, double** %"<cut_areas>")
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), i8* %soppath) #3
  %evalue2 = load double*, double** %"<cut_areas>"
  %gvalue3 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), double* %evalue2) #3
  store i8* %gvalue, i8** @soppath
  store double* %gvalue3, double** @cut_areas
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @0, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

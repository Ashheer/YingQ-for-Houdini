;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [8 x i8] c"../seed\00"
@1 = private constant [11 x i8] c"min_height\00"
@2 = private constant [11 x i8] c"max_height\00"
@scale = external global double
@primnum = external global i64
@3 = private constant [6 x i8] c"scale\00"
@4 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FI"(double* %_bound_scale, i64* %_bound_primnum) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %cast = sitofp i64 %_bound_primnum1 to double
  %output = fadd double %cast, %return
  %return2 = call double @"rand@FF"(double %output)
  %return3 = call double @"ch@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0))
  %return4 = call double @"ch@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0))
  %return5 = call double @"fit01@FFFF"(double %return2, double %return3, double %return4)
  store double %return5, double* %_bound_scale
  ret void
}

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"rand@FF"(double) #2

; Function Attrs: nounwind
declare double @"fit01@FFFF"(double, double, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(double %scale, i64 %primnum) #2 {
__llvm_entry:
  %0 = alloca i64
  %"<scale>" = alloca double
  store double %scale, double* %"<scale>"
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@FI"(double* %"<scale>", i64* %0)
  %evalue = load double, double* %"<scale>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), double %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), i64 %primnum) #3
  store double %gvalue, double* @scale
  store i64 %gvalue3, i64* @primnum
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

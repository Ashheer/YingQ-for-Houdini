;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [7 x i8] c"orient\00"
@1 = private constant [6 x i8] c"pivot\00"
@2 = private constant [2 x i8] c"N\00"
@3 = private constant [10 x i8] c"transform\00"
@4 = private constant [30 x i8] c"intrinsic:packedfulltransform\00"
@5 = private constant [8 x i8] c"userest\00"
@6 = private constant [8 x i8] c"__xform\00"
@7 = private constant [12 x i8] c"invertxform\00"
@__xform = external global <16 x double>
@__templateptnum = external global i64
@__worldpivot = external global <3 x double>
@8 = private constant [16 x i8] c"__templateptnum\00"
@9 = private constant [13 x i8] c"__worldpivot\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VPPF4IIVVIVVVVV"(<3 x double>* %_bound_scale, <4 x double>* %_bound_orient, <4 x double>* %_bound_rot, double* %_bound_pscale, <16 x double>* %_bound___xform, i64* %_bound___templateptnum, i64* %_bound_primnum, <3 x double>* %_bound___worldpivot, <3 x double>* %_bound_P, i64* %_bound_ptnum, <3 x double>* %_bound_trans, <3 x double>* %_bound_pivot, <3 x double>* %_bound_N, <3 x double>* %_bound_v, <3 x double>* %_bound_up) #0 {
__llvm_entry:
  %return2 = call i64 @"isbound@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0))
  %return3 = call i64 @"isbound@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0))
  %return4 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0))
  %return5 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0))
  %_bound_primnum6 = load i64, i64* %_bound_primnum
  %return7 = call i64 @"ge@III"(i64 %_bound_primnum6, i64 0)
  %return9 = call i64 @"primvertexcount@III"(i64 0, i64 %_bound_primnum6)
  %return10 = call i64 @"eq@III"(i64 %return9, i64 1)
  %return11 = call i64 @"and@III"(i64 %return7, i64 %return10)
  %0 = icmp ne i64 %return11, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_bound_primnum12 = load i64, i64* %_bound_primnum
  %return13 = call { <16 x double>, i64 } @"primattrib@4ISII"(i64 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @4, i64 0, i64 0), i64 %_bound_primnum12)
  %return14 = extractvalue { <16 x double>, i64 } %return13, 0
  %output = extractvalue { <16 x double>, i64 } %return13, 1
  store <16 x double> %return14, <16 x double>* %_bound___xform
  %1 = icmp ne i64 %output, 0
  %_bound_primnum19 = load i64, i64* %_bound_primnum
  br i1 %1, label %true16, label %false17

false:                                            ; preds = %__llvm_entry
  %2 = icmp ne i64 %return5, 0
  br i1 %2, label %true27, label %false28

end:                                              ; preds = %end29, %true85, %true16, %false17
  %has_pivot.0 = phi i64 [ 1, %true16 ], [ 1, %false17 ], [ %return3, %true85 ], [ %return3, %end29 ]
  %return88 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @5, i64 0, i64 0))
  %3 = icmp ne i64 %return88, 0
  br i1 %3, label %true89, label %end90

true16:                                           ; preds = %true
  %return20 = call <3 x double> @"primintrinsic@VISI"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i64 %_bound_primnum19)
  store <3 x double> %return20, <3 x double>* %_bound___worldpivot
  br label %end

false17:                                          ; preds = %true
  %return22 = call <9 x double> @"primintrinsic@3ISI"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), i64 %_bound_primnum19)
  %cast = call <16 x double> @"set@43"(<9 x double> %return22)
  store <16 x double> %cast, <16 x double>* %_bound___xform
  %_bound_P24 = load <3 x double>, <3 x double>* %_bound_P
  %output25 = call <16 x double> @"translate@4V"(<16 x double> %cast, <3 x double> %_bound_P24)
  store <16 x double> %output25, <16 x double>* %_bound___xform
  br label %end

true27:                                           ; preds = %false
  %return30 = call i64 @"pointattribsize@IIS"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0))
  %return31 = call i64 @"eq@III"(i64 %return30, i64 9)
  %4 = icmp ne i64 %return31, 0
  %_bound_ptnum35 = load i64, i64* %_bound_ptnum
  br i1 %4, label %true32, label %false33

false28:                                          ; preds = %false
  %5 = icmp ne i64 %return2, 0
  %_bound_P56 = load <3 x double>, <3 x double>* %_bound_P
  %_bound_trans57 = load <3 x double>, <3 x double>* %_bound_trans
  %output58 = call <3 x double> @"add@VV"(<3 x double> %_bound_P56, <3 x double> %_bound_trans57)
  br i1 %5, label %true53, label %false54

end29:                                            ; preds = %true53, %end73, %end34, %true46
  %6 = icmp ne i64 %return3, 0
  br i1 %6, label %true85, label %end

true32:                                           ; preds = %true27
  %return36 = call <9 x double> @"point@3ISI"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), i64 %_bound_ptnum35)
  %cast37 = call <16 x double> @"set@43"(<9 x double> %return36)
  store <16 x double> %cast37, <16 x double>* %_bound___xform
  br label %end34

false33:                                          ; preds = %true27
  %return39 = call <16 x double> @"point@4ISI"(i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), i64 %_bound_ptnum35)
  store <16 x double> %return39, <16 x double>* %_bound___xform
  br label %end34

end34:                                            ; preds = %false33, %true32
  %_bound___xform40 = load <16 x double>, <16 x double>* %_bound___xform
  %_bound_P41 = load <3 x double>, <3 x double>* %_bound_P
  %_bound_trans42 = load <3 x double>, <3 x double>* %_bound_trans
  %output43 = call <3 x double> @"add@VV"(<3 x double> %_bound_P41, <3 x double> %_bound_trans42)
  %output44 = call <16 x double> @"translate@4V"(<16 x double> %_bound___xform40, <3 x double> %output43)
  store <16 x double> %output44, <16 x double>* %_bound___xform
  %7 = icmp ne i64 %return3, 0
  br i1 %7, label %true46, label %end29

true46:                                           ; preds = %end34
  %_bound_pivot49 = load <3 x double>, <3 x double>* %_bound_pivot
  %return50 = call <3 x double> @"neg@VV"(<3 x double> %_bound_pivot49)
  %output51 = call <16 x double> @"pretranslate@4V"(<16 x double> %output44, <3 x double> %return50)
  store <16 x double> %output51, <16 x double>* %_bound___xform
  br label %end29

true53:                                           ; preds = %false28
  %_bound_pscale59 = load double, double* %_bound_pscale
  %_bound_scale60 = load <3 x double>, <3 x double>* %_bound_scale
  %cast61 = call <3 x double> @"set@VF"(double %_bound_pscale59)
  %output62 = call <3 x double> @"mul@VV"(<3 x double> %cast61, <3 x double> %_bound_scale60)
  %_bound_rot63 = load <4 x double>, <4 x double>* %_bound_rot
  %_bound_orient64 = load <4 x double>, <4 x double>* %_bound_orient
  %_bound_pivot65 = load <3 x double>, <3 x double>* %_bound_pivot
  %return66 = call <16 x double> @"instance@4VVVPPV"(<3 x double> %output58, <3 x double> zeroinitializer, <3 x double> %output62, <4 x double> %_bound_rot63, <4 x double> %_bound_orient64, <3 x double> %_bound_pivot65)
  store <16 x double> %return66, <16 x double>* %_bound___xform
  br label %end29

false54:                                          ; preds = %false28
  %8 = icmp ne i64 %return4, 0
  br i1 %8, label %true71, label %false72

true71:                                           ; preds = %false54
  %_bound_N74 = load <3 x double>, <3 x double>* %_bound_N
  br label %end73

false72:                                          ; preds = %false54
  %_bound_v75 = load <3 x double>, <3 x double>* %_bound_v
  br label %end73

end73:                                            ; preds = %false72, %true71
  %phi = phi <3 x double> [ %_bound_N74, %true71 ], [ %_bound_v75, %false72 ]
  %_bound_pscale76 = load double, double* %_bound_pscale
  %_bound_scale77 = load <3 x double>, <3 x double>* %_bound_scale
  %cast78 = call <3 x double> @"set@VF"(double %_bound_pscale76)
  %output79 = call <3 x double> @"mul@VV"(<3 x double> %cast78, <3 x double> %_bound_scale77)
  %_bound_rot80 = load <4 x double>, <4 x double>* %_bound_rot
  %_bound_up81 = load <3 x double>, <3 x double>* %_bound_up
  %_bound_pivot82 = load <3 x double>, <3 x double>* %_bound_pivot
  %return83 = call <16 x double> @"instance@4VVVPVV"(<3 x double> %output58, <3 x double> %phi, <3 x double> %output79, <4 x double> %_bound_rot80, <3 x double> %_bound_up81, <3 x double> %_bound_pivot82)
  store <16 x double> %return83, <16 x double>* %_bound___xform
  br label %end29

true85:                                           ; preds = %end29
  %_bound_pivot87 = load <3 x double>, <3 x double>* %_bound_pivot
  store <3 x double> %_bound_pivot87, <3 x double>* %_bound___worldpivot
  br label %end

true89:                                           ; preds = %end
  %_bound_ptnum91 = load i64, i64* %_bound_ptnum
  %return92 = call <16 x double> @"point@4ISI"(i64 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @6, i64 0, i64 0), i64 %_bound_ptnum91)
  %_bound___xform94 = load <16 x double>, <16 x double>* %_bound___xform
  %output95 = call <16 x double> @"mul@44"(<16 x double> %return92, <16 x double> %_bound___xform94)
  store <16 x double> %output95, <16 x double>* %_bound___xform
  br label %end90

end90:                                            ; preds = %true89, %end
  %return96 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i64 0, i64 0))
  %9 = icmp ne i64 %return96, 0
  br i1 %9, label %true97, label %end98

true97:                                           ; preds = %end90
  %_bound___xform99 = load <16 x double>, <16 x double>* %_bound___xform
  %return100 = call <16 x double> @"invert@44"(<16 x double> %_bound___xform99)
  store <16 x double> %return100, <16 x double>* %_bound___xform
  br label %end98

end98:                                            ; preds = %true97, %end90
  %10 = icmp ne i64 %has_pivot.0, 0
  br i1 %10, label %true102, label %end103

true102:                                          ; preds = %end98
  %_bound___worldpivot104 = load <3 x double>, <3 x double>* %_bound___worldpivot
  %_bound___xform105 = load <16 x double>, <16 x double>* %_bound___xform
  %output106 = call <3 x double> @"mul@V4"(<3 x double> %_bound___worldpivot104, <16 x double> %_bound___xform105)
  store <3 x double> %output106, <3 x double>* %_bound___worldpivot
  br label %end103

end103:                                           ; preds = %true102, %end98
  %_bound_ptnum107 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum107, i64* %_bound___templateptnum
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"isbound@IS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"haspointattrib@IIS"(i64, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"primvertexcount@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind
declare { <16 x double>, i64 } @"primattrib@4ISII"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"primintrinsic@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare <9 x double> @"primintrinsic@3ISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare <16 x double> @"set@43"(<9 x double>) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"translate@4V"(<16 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"pointattribsize@IIS"(i64, i8*) #2

; Function Attrs: nounwind
declare <9 x double> @"point@3ISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare <16 x double> @"point@4ISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <16 x double> @"pretranslate@4V"(<16 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <16 x double> @"instance@4VVVPPV"(<3 x double>, <3 x double>, <3 x double>, <4 x double>, <4 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <16 x double> @"instance@4VVVPVV"(<3 x double>, <3 x double>, <3 x double>, <4 x double>, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind
declare <16 x double> @"mul@44"(<16 x double>, <16 x double>) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"invert@44"(<16 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"mul@V4"(<3 x double>, <16 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %scale, <4 x double> %orient, <4 x double> %rot, double %pscale, <16 x double> %__xform, i64 %__templateptnum, i64 %primnum, <3 x double> %__worldpivot, <3 x double> %P, i64 %ptnum, <3 x double> %trans, <3 x double> %pivot, <3 x double> %N, <3 x double> %v, <3 x double> %up) #2 {
__llvm_entry:
  %"<__xform>" = alloca <16 x double>
  %"<__templateptnum>" = alloca i64
  %"<__worldpivot>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca <4 x double>
  %2 = alloca <4 x double>
  %3 = alloca double
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca i64
  %7 = alloca <3 x double>
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca <3 x double>
  %11 = alloca <3 x double>
  store <16 x double> %__xform, <16 x double>* %"<__xform>"
  store i64 %__templateptnum, i64* %"<__templateptnum>"
  store <3 x double> %__worldpivot, <3 x double>* %"<__worldpivot>"
  store <3 x double> %scale, <3 x double>* %0
  store <4 x double> %orient, <4 x double>* %1
  store <4 x double> %rot, <4 x double>* %2
  store double %pscale, double* %3
  store i64 %primnum, i64* %4
  store <3 x double> %P, <3 x double>* %5
  store i64 %ptnum, i64* %6
  store <3 x double> %trans, <3 x double>* %7
  store <3 x double> %pivot, <3 x double>* %8
  store <3 x double> %N, <3 x double>* %9
  store <3 x double> %v, <3 x double>* %10
  store <3 x double> %up, <3 x double>* %11
  call void @"__vex_snippet_snippet@VPPF4IIVVIVVVVV"(<3 x double>* %0, <4 x double>* %1, <4 x double>* %2, double* %3, <16 x double>* %"<__xform>", i64* %"<__templateptnum>", i64* %4, <3 x double>* %"<__worldpivot>", <3 x double>* %5, i64* %6, <3 x double>* %7, <3 x double>* %8, <3 x double>* %9, <3 x double>* %10, <3 x double>* %11)
  %evalue = load <16 x double>, <16 x double>* %"<__xform>"
  %gvalue = call <16 x double> @"_export@4S4"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @6, i64 0, i64 0), <16 x double> %evalue) #3
  %evalue13 = load i64, i64* %"<__templateptnum>"
  %gvalue14 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @8, i64 0, i64 0), i64 %evalue13) #3
  %evalue15 = load <3 x double>, <3 x double>* %"<__worldpivot>"
  %gvalue16 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @9, i64 0, i64 0), <3 x double> %evalue15) #3
  store <16 x double> %gvalue, <16 x double>* @__xform
  store i64 %gvalue14, i64* @__templateptnum
  store <3 x double> %gvalue16, <3 x double>* @__worldpivot
  ret void
}

declare <16 x double> @"_export@4S4"(i8*, <16 x double>)

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>, <4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>, double 1.000000e+00, <16 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>, i64 -1, i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

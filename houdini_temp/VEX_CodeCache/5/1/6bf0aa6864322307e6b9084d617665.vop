;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [12 x i8] c"__cutterdir\00"
@2 = private constant [13 x i8] c"__cuttertype\00"
@3 = private constant [15 x i8] c"__cutterlength\00"
@4 = private constant [14 x i8] c"__obbox_xform\00"
@5 = private constant [15 x i8] c"cutfracturedir\00"
@6 = private constant [13 x i8] c"cutdirvector\00"
@7 = private constant [17 x i8] c"grainfracturedir\00"
@8 = private constant [15 x i8] c"graindirvector\00"
@9 = private constant [4 x i8] c"cut\00"
@10 = private constant [6 x i8] c"grain\00"
@__obbox_xform = external global <16 x double>

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@4"(<16 x double>* %_bound___obbox_xform) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca <3 x double>
  %7 = alloca <3 x double>
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca <3 x double>
  %11 = alloca i8*
  %12 = alloca <3 x double>
  %13 = alloca double
  %14 = alloca <3 x double>
  %15 = alloca i8*
  %16 = alloca <3 x double>
  %17 = alloca double
  store i64 1, i64* %0
  %pointpos = call <3 x double> @"pointpos@VI"(i64* %0)
  store i64 0, i64* %1
  %pointpos1 = call <3 x double> @"pointpos@VI"(i64* %1)
  %output = call <3 x double> @"sub@VV"(<3 x double> %pointpos, <3 x double> %pointpos1)
  store i64 0, i64* %2
  %pointpos2 = call <3 x double> @"pointpos@VI"(i64* %2)
  store i64 3, i64* %3
  %pointpos3 = call <3 x double> @"pointpos@VI"(i64* %3)
  %output4 = call <3 x double> @"sub@VV"(<3 x double> %pointpos2, <3 x double> %pointpos3)
  store i64 3, i64* %4
  %pointpos5 = call <3 x double> @"pointpos@VI"(i64* %4)
  store i64 7, i64* %5
  %pointpos6 = call <3 x double> @"pointpos@VI"(i64* %5)
  %output7 = call <3 x double> @"sub@VV"(<3 x double> %pointpos5, <3 x double> %pointpos6)
  %return = call <3 x double> @"getbbox_center@VI"(i64 1)
  %return8 = call <16 x double> @"detail@4IS"(i64 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @4, i64 0, i64 0))
  store <16 x double> %return8, <16 x double>* %_bound___obbox_xform
  %return10 = call <3 x double> @"normalize@VV"(<3 x double> %output7)
  %return12 = call <3 x double> @"normalize@VV"(<3 x double> %output4)
  %return14 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %return15 = call <3 x double>* @"array@[V:VVV"(<3 x double> %return10, <3 x double> %return12, <3 x double> %return14)
  %return17 = call double @"length@FV"(<3 x double> %output7)
  %return19 = call double @"length@FV"(<3 x double> %output4)
  %return21 = call double @"length@FV"(<3 x double> %output)
  %return22 = call double* @"array@[F:FFF"(double %return17, double %return19, double %return21)
  %return24 = call i64* @"argsort@[I[F"(double* %return22)
  %return27 = call i64 @"getcomp@I[II"(i64* %return24, i64 1)
  %return28 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %return15, i64 %return27)
  %return32 = call double @"getcomp@F[FI"(double* %return22, i64 %return27)
  %return35 = call i64 @"getcomp@I[II"(i64* %return24, i64 2)
  %return36 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %return15, i64 %return35)
  %return40 = call double @"getcomp@F[FI"(double* %return22, i64 %return35)
  %return41 = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @5, i64 0, i64 0))
  %return42 = call i64 @"eq@III"(i64 %return41, i64 1)
  %18 = icmp ne i64 %return42, 0
  br i1 %18, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return43 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @6, i64 0, i64 0))
  %return44 = call <3 x double> @"normalize@VV"(<3 x double> %return43)
  store <3 x double> %return44, <3 x double>* %6
  store <3 x double> %return, <3 x double>* %7
  %computer_cutter_length = call double @"computer_cutter_length@FVV"(<3 x double>* %6, <3 x double>* %7)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %cut_dir.0 = phi <3 x double> [ %return44, %true ], [ %return36, %__llvm_entry ]
  %cut_length.0 = phi double [ %computer_cutter_length, %true ], [ %return40, %__llvm_entry ]
  %return47 = call i64 @"chi@IS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @7, i64 0, i64 0))
  %return48 = call i64 @"eq@III"(i64 %return47, i64 1)
  %19 = icmp ne i64 %return48, 0
  br i1 %19, label %true49, label %end50

true49:                                           ; preds = %end
  %return51 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @8, i64 0, i64 0))
  %return52 = call <3 x double> @"normalize@VV"(<3 x double> %return51)
  store <3 x double> %return52, <3 x double>* %8
  store <3 x double> %return, <3 x double>* %9
  %computer_cutter_length55 = call double @"computer_cutter_length@FVV"(<3 x double>* %8, <3 x double>* %9)
  br label %end50

end50:                                            ; preds = %true49, %end
  %grain_dir.0 = phi <3 x double> [ %return52, %true49 ], [ %return28, %end ]
  %grain_length.0 = phi double [ %computer_cutter_length55, %true49 ], [ %return32, %end ]
  store <3 x double> %return, <3 x double>* %10
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @9, i64 0, i64 0), i8** %11
  store <3 x double> %cut_dir.0, <3 x double>* %12
  store double %cut_length.0, double* %13
  call void @"add_instance_point@VSVF"(<3 x double>* %10, i8** %11, <3 x double>* %12, double* %13)
  store <3 x double> %return, <3 x double>* %14
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @10, i64 0, i64 0), i8** %15
  store <3 x double> %grain_dir.0, <3 x double>* %16
  store double %grain_length.0, double* %17
  call void @"add_instance_point@VSVF"(<3 x double>* %14, i8** %15, <3 x double>* %16, double* %17)
  ret void
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"pointpos@VI"(i64* %ptnum) #0 {
__llvm_entry:
  %ptnum1 = load i64, i64* %ptnum
  %return = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %ptnum1)
  ret <3 x double> %return
}

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: alwaysinline nounwind
define private double @"computer_cutter_length@FVV"(<3 x double>* %dir, <3 x double>* %center) #0 {
__llvm_entry:
  %0 = alloca i64
  %return = call double @"neg@FF"(double 1.000000e+09)
  %return1 = call i64 @"npoints@II"(i64 1)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output16, %body ]
  %max_dist.0 = phi double [ %return, %__llvm_entry ], [ %return14, %body ]
  %min_dist.0 = phi double [ 1.000000e+09, %__llvm_entry ], [ %return11, %body ]
  %return4 = call i64 @"lt@III"(i64 %i.0, i64 %return1)
  %1 = icmp ne i64 %return4, 0
  br i1 %1, label %body, label %end

body:                                             ; preds = %cond
  store i64 %i.0, i64* %0
  %pointpos = call <3 x double> @"pointpos@VI"(i64* %0)
  %center6 = load <3 x double>, <3 x double>* %center
  %output = call <3 x double> @"sub@VV"(<3 x double> %pointpos, <3 x double> %center6)
  %dir7 = load <3 x double>, <3 x double>* %dir
  %return8 = call double @"dot@FVV"(<3 x double> %output, <3 x double> %dir7)
  %return11 = call double @"min@FFF"(double %min_dist.0, double %return8)
  %return14 = call double @"max@FFF"(double %max_dist.0, double %return8)
  %output16 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  %output19 = fsub double %max_dist.0, %min_dist.0
  ret double %output19
}

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #2

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"min@FFF"(double, double) #2

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #2

; Function Attrs: alwaysinline nounwind
define private void @"add_instance_point@VSVF"(<3 x double>* %pos, i8** %cutter_type, <3 x double>* %cutter_dir, double* %cutter_length) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %return = call i64 @"addpoint@IIV"(i64 0, <3 x double> %pos1)
  %cutter_dir3 = load <3 x double>, <3 x double>* %cutter_dir
  %return4 = call i64 @"setpointattrib@IISIV"(i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i64 0, i64 0), i64 %return, <3 x double> %cutter_dir3)
  %cutter_type6 = load i8*, i8** %cutter_type
  %return7 = call i64 @"setpointattrib@IISIS"(i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0), i64 %return, i8* %cutter_type6)
  %cutter_length9 = load double, double* %cutter_length
  %return10 = call i64 @"setpointattrib@IISIF"(i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @3, i64 0, i64 0), i64 %return, double %cutter_length9)
  ret void
}

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIV"(i64, i8*, i64, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIS"(i64, i8*, i64, i8*) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIF"(i64, i8*, i64, double) #1

; Function Attrs: nounwind
declare <3 x double> @"getbbox_center@VI"(i64) #1

; Function Attrs: nounwind
declare <16 x double> @"detail@4IS"(i64, i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double>* @"array@[V:VVV"(<3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare double* @"array@[F:FFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare i64* @"argsort@[I[F"(double*) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(<16 x double> %__obbox_xform) #1 {
__llvm_entry:
  %"<__obbox_xform>" = alloca <16 x double>
  store <16 x double> %__obbox_xform, <16 x double>* %"<__obbox_xform>"
  call void @"__vex_snippet_snippet@4"(<16 x double>* %"<__obbox_xform>")
  %evalue = load <16 x double>, <16 x double>* %"<__obbox_xform>"
  %gvalue = call <16 x double> @"_export@4S4"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @4, i64 0, i64 0), <16 x double> %evalue) #3
  store <16 x double> %gvalue, <16 x double>* @__obbox_xform
  ret void
}

declare <16 x double> @"_export@4S4"(i8*, <16 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<16 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

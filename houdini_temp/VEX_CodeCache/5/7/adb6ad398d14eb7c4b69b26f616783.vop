;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [14 x i8] c"../attributes\00"
@1 = private constant [0 x i8*] zeroinitializer
@2 = private constant [12 x double] zeroinitializer
@3 = private constant [12 x i8] c"__blur_tmp_\00"
@4 = private constant [3 x i8] c"__\00"
@5 = private constant [65 x i8] c"One or more of the specified attributes has an unsupported size.\00"
@6 = private constant [54 x i8] c"One or more of the specified attributes do not exist.\00"
@7 = private constant [65 x i8] c"One or more of the specified attributes has an unsupported type.\00"
@__blur_targets__ = external global i8**
@__blur_num_targets__ = external global i64
@8 = private constant [17 x i8] c"__blur_targets__\00"
@9 = private constant [21 x i8] c"__blur_num_targets__\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[SI"(i8*** %_bound___blur_targets__, i64* %_bound___blur_num_targets__) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @0, i64 0, i64 0))
  %return2 = call i8** @"split@[SS"(i8* %return)
  %return4 = call i64 @"len@I[S"(i8** %return2)
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %__impl_foreach_index_3e.0 = phi i64 [ 0, %__llvm_entry ], [ %output88, %iter ]
  %return7 = call i64 @"lt@III"(i64 %__impl_foreach_index_3e.0, i64 %return4)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return10 = call i8* @"getcomp@S[SI"(i8** %return2, i64 %__impl_foreach_index_3e.0)
  %return12 = call i64 @"pointattribtype@IIS"(i64 0, i8* %return10)
  %return14 = call i64 @"eq@III"(i64 %return12, i64 1)
  %1 = icmp ne i64 %return14, 0
  br i1 %1, label %true, label %false

end:                                              ; preds = %cond
  %_bound___blur_targets__89 = load i8**, i8*** %_bound___blur_targets__
  %return90 = call i64 @"len@I[S"(i8** %_bound___blur_targets__89)
  store i64 %return90, i64* %_bound___blur_num_targets__
  ret void

iter:                                             ; preds = %true84, %false85, %end22, %false70
  %output88 = add i64 %__impl_foreach_index_3e.0, 1
  br label %cond

true:                                             ; preds = %body
  %return17 = call i64 @"pointattribsize@IIS"(i64 0, i8* %return10)
  %return19 = call i64 @"eq@III"(i64 %return17, i64 1)
  %2 = icmp ne i64 %return19, 0
  br i1 %2, label %true20, label %false21

false:                                            ; preds = %body
  %return82 = call i64 @"neg@II"(i64 1)
  %return83 = call i64 @"eq@III"(i64 %return12, i64 %return82)
  %3 = icmp ne i64 %return83, 0
  br i1 %3, label %true84, label %false85

true20:                                           ; preds = %true
  %output = call i8* @"add@SS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i64 0, i64 0), i8* %return10)
  %output24 = call i8* @"add@SS"(i8* %output, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0))
  %return25 = call i64 @"addpointattrib@IISF"(i64 0, i8* %output24, double 0.000000e+00)
  br label %end22

false21:                                          ; preds = %true
  %return27 = call i64 @"eq@III"(i64 %return17, i64 2)
  %4 = icmp ne i64 %return27, 0
  br i1 %4, label %true28, label %false29

end22:                                            ; preds = %true58, %true69, %true47, %true37, %true28, %true20
  %_bound___blur_targets__78 = load i8**, i8*** %_bound___blur_targets__
  %output80 = call i8** @"push@[SS"(i8** %_bound___blur_targets__78, i8* %return10)
  store i8** %output80, i8*** %_bound___blur_targets__
  br label %iter

true28:                                           ; preds = %false21
  %output32 = call i8* @"add@SS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i64 0, i64 0), i8* %return10)
  %output33 = call i8* @"add@SS"(i8* %output32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0))
  %return34 = call i64 @"addpointattrib@IISU"(i64 0, i8* %output33, <2 x double> zeroinitializer)
  br label %end22

false29:                                          ; preds = %false21
  %return36 = call i64 @"eq@III"(i64 %return17, i64 3)
  %5 = icmp ne i64 %return36, 0
  br i1 %5, label %true37, label %false38

true37:                                           ; preds = %false29
  %output41 = call i8* @"add@SS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i64 0, i64 0), i8* %return10)
  %output42 = call i8* @"add@SS"(i8* %output41, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0))
  %cast = call <3 x double> @"set@V[F"(double* getelementptr inbounds ([12 x double], [12 x double]* @2, i64 0, i64 0))
  %return44 = call i64 @"addpointattrib@IISV"(i64 0, i8* %output42, <3 x double> %cast)
  br label %end22

false38:                                          ; preds = %false29
  %return46 = call i64 @"eq@III"(i64 %return17, i64 4)
  %6 = icmp ne i64 %return46, 0
  br i1 %6, label %true47, label %false48

true47:                                           ; preds = %false38
  %output51 = call i8* @"add@SS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i64 0, i64 0), i8* %return10)
  %output52 = call i8* @"add@SS"(i8* %output51, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0))
  %cast54 = call <4 x double> @"set@P[F"(double* getelementptr inbounds ([12 x double], [12 x double]* @2, i64 0, i64 0))
  %return55 = call i64 @"addpointattrib@IISP"(i64 0, i8* %output52, <4 x double> %cast54)
  br label %end22

false48:                                          ; preds = %false38
  %return57 = call i64 @"eq@III"(i64 %return17, i64 9)
  %7 = icmp ne i64 %return57, 0
  br i1 %7, label %true58, label %false59

true58:                                           ; preds = %false48
  %output62 = call i8* @"add@SS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i64 0, i64 0), i8* %return10)
  %output63 = call i8* @"add@SS"(i8* %output62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0))
  %cast65 = call <9 x double> @"set@3[F"(double* getelementptr inbounds ([12 x double], [12 x double]* @2, i64 0, i64 0))
  %return66 = call i64 @"addpointattrib@IIS3"(i64 0, i8* %output63, <9 x double> %cast65)
  br label %end22

false59:                                          ; preds = %false48
  %return68 = call i64 @"eq@III"(i64 %return17, i64 16)
  %8 = icmp ne i64 %return68, 0
  br i1 %8, label %true69, label %false70

true69:                                           ; preds = %false59
  %output73 = call i8* @"add@SS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i64 0, i64 0), i8* %return10)
  %output74 = call i8* @"add@SS"(i8* %output73, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0))
  %cast76 = call <16 x double> @"set@4[F"(double* getelementptr inbounds ([12 x double], [12 x double]* @2, i64 0, i64 0))
  %return77 = call i64 @"addpointattrib@IIS4"(i64 0, i8* %output74, <16 x double> %cast76)
  br label %end22

false70:                                          ; preds = %false59
  call void @"warning@S"(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @5, i64 0, i64 0))
  br label %iter

true84:                                           ; preds = %false
  call void @"warning@S"(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @6, i64 0, i64 0))
  br label %iter

false85:                                          ; preds = %false
  call void @"warning@S"(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @7, i64 0, i64 0))
  br label %iter
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8** @"split@[SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #1

; Function Attrs: nounwind
declare i64 @"pointattribtype@IIS"(i64, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"pointattribsize@IIS"(i64, i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"add@SS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i64 @"addpointattrib@IISF"(i64, i8*, double) #2

; Function Attrs: nounwind
declare i64 @"addpointattrib@IISU"(i64, i8*, <2 x double>) #2

; Function Attrs: alwaysinline
define private <3 x double> @"set@V[F"(double* %rw11) #3 {
__llvm_entry:
  %t_0_ = call double @"getcomp@F[FI"(double* %rw11, i64 0)
  %t_1_ = call double @"getcomp@F[FI"(double* %rw11, i64 1)
  %t_2_ = call double @"getcomp@F[FI"(double* %rw11, i64 2)
  %rw010 = call <3 x double> @"set@VFFF"(double %t_0_, double %t_1_, double %t_2_)
  ret <3 x double> %rw010
}

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind
declare i64 @"addpointattrib@IISV"(i64, i8*, <3 x double>) #2

; Function Attrs: alwaysinline
define private <4 x double> @"set@P[F"(double* %rw11) #3 {
__llvm_entry:
  %t_0_ = call double @"getcomp@F[FI"(double* %rw11, i64 0)
  %t_1_ = call double @"getcomp@F[FI"(double* %rw11, i64 1)
  %t_2_ = call double @"getcomp@F[FI"(double* %rw11, i64 2)
  %t_3_ = call double @"getcomp@F[FI"(double* %rw11, i64 3)
  %rw013 = call <4 x double> @"set@PFFFF"(double %t_0_, double %t_1_, double %t_2_, double %t_3_)
  ret <4 x double> %rw013
}

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PFFFF"(double, double, double, double) #1

; Function Attrs: nounwind
declare i64 @"addpointattrib@IISP"(i64, i8*, <4 x double>) #2

; Function Attrs: alwaysinline
define private <9 x double> @"set@3[F"(double* %rw11) #3 {
__llvm_entry:
  %t_0_ = call double @"getcomp@F[FI"(double* %rw11, i64 0)
  %t_1_ = call double @"getcomp@F[FI"(double* %rw11, i64 1)
  %t_2_ = call double @"getcomp@F[FI"(double* %rw11, i64 2)
  %t_3_ = call double @"getcomp@F[FI"(double* %rw11, i64 3)
  %t_4_ = call double @"getcomp@F[FI"(double* %rw11, i64 4)
  %t_5_ = call double @"getcomp@F[FI"(double* %rw11, i64 5)
  %t_6_ = call double @"getcomp@F[FI"(double* %rw11, i64 6)
  %t_7_ = call double @"getcomp@F[FI"(double* %rw11, i64 7)
  %t_8_ = call double @"getcomp@F[FI"(double* %rw11, i64 8)
  %rw028 = call <9 x double> @"set@3FFFFFFFFF"(double %t_0_, double %t_1_, double %t_2_, double %t_3_, double %t_4_, double %t_5_, double %t_6_, double %t_7_, double %t_8_)
  ret <9 x double> %rw028
}

; Function Attrs: nounwind readnone
declare <9 x double> @"set@3FFFFFFFFF"(double, double, double, double, double, double, double, double, double) #1

; Function Attrs: nounwind
declare i64 @"addpointattrib@IIS3"(i64, i8*, <9 x double>) #2

; Function Attrs: alwaysinline
define private <16 x double> @"set@4[F"(double* %rw11) #3 {
__llvm_entry:
  %t_0_ = call double @"getcomp@F[FI"(double* %rw11, i64 0)
  %t_1_ = call double @"getcomp@F[FI"(double* %rw11, i64 1)
  %t_2_ = call double @"getcomp@F[FI"(double* %rw11, i64 2)
  %t_3_ = call double @"getcomp@F[FI"(double* %rw11, i64 3)
  %t_4_ = call double @"getcomp@F[FI"(double* %rw11, i64 4)
  %t_5_ = call double @"getcomp@F[FI"(double* %rw11, i64 5)
  %t_6_ = call double @"getcomp@F[FI"(double* %rw11, i64 6)
  %t_7_ = call double @"getcomp@F[FI"(double* %rw11, i64 7)
  %t_8_ = call double @"getcomp@F[FI"(double* %rw11, i64 8)
  %t_9_ = call double @"getcomp@F[FI"(double* %rw11, i64 9)
  %t_a_ = call double @"getcomp@F[FI"(double* %rw11, i64 10)
  %t_b_ = call double @"getcomp@F[FI"(double* %rw11, i64 11)
  %t_c_ = call double @"getcomp@F[FI"(double* %rw11, i64 12)
  %t_d_ = call double @"getcomp@F[FI"(double* %rw11, i64 13)
  %t_e_ = call double @"getcomp@F[FI"(double* %rw11, i64 14)
  %t_f_ = call double @"getcomp@F[FI"(double* %rw11, i64 15)
  %rw049 = call <16 x double> @"set@4FFFFFFFFFFFFFFFF"(double %t_0_, double %t_1_, double %t_2_, double %t_3_, double %t_4_, double %t_5_, double %t_6_, double %t_7_, double %t_8_, double %t_9_, double %t_a_, double %t_b_, double %t_c_, double %t_d_, double %t_e_, double %t_f_)
  ret <16 x double> %rw049
}

; Function Attrs: nounwind readnone
declare <16 x double> @"set@4FFFFFFFFFFFFFFFF"(double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double) #1

; Function Attrs: nounwind
declare i64 @"addpointattrib@IIS4"(i64, i8*, <16 x double>) #2

; Function Attrs: nounwind
declare void @"warning@S"(i8*) #2

; Function Attrs: nounwind readnone
declare i8** @"push@[SS"(i8**, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8** %__blur_targets__, i64 %__blur_num_targets__) #2 {
__llvm_entry:
  %"<__blur_num_targets__>" = alloca i64
  %"<__blur_targets__>" = alloca i8**
  store i8** %__blur_targets__, i8*** %"<__blur_targets__>"
  store i64 %__blur_num_targets__, i64* %"<__blur_num_targets__>"
  call void @"__vex_snippet_snippet@[SI"(i8*** %"<__blur_targets__>", i64* %"<__blur_num_targets__>")
  %evalue = load i8**, i8*** %"<__blur_targets__>"
  %gvalue = call i8** @"_export@[SS[S"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @8, i64 0, i64 0), i8** %evalue) #4
  %evalue1 = load i64, i64* %"<__blur_num_targets__>"
  %gvalue2 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @9, i64 0, i64 0), i64 %evalue1) #4
  store i8** %gvalue, i8*** @__blur_targets__
  store i64 %gvalue2, i64* @__blur_num_targets__
  ret void
}

declare i8** @"_export@[SS[S"(i8*, i8**)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @1, i64 0, i64 0), i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"MODULE_ID\00"
@1 = private constant [17 x i8] c"MODULE_DIMENSION\00"
@2 = private constant [1 x i8] zeroinitializer
@MODULE_ID = external global i8*
@MODULE_WIDTH = external global double
@MODULE_HEIGHT = external global double
@3 = private constant [13 x i8] c"MODULE_WIDTH\00"
@4 = private constant [14 x i8] c"MODULE_HEIGHT\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SFF"(i8** %_bound_MODULE_ID, double* %_bound_MODULE_WIDTH, double* %_bound_MODULE_HEIGHT) #0 {
__llvm_entry:
  %return = call i8* @"prim@SISI"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), i64 0)
  store i8* %return, i8** %_bound_MODULE_ID
  %return1 = call <2 x double> @"prim@UISI"(i64 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1, i64 0, i64 0), i64 0)
  %return2 = call double @"length@FU"(<2 x double> %return1)
  %return3 = call i64 @"hasprimattrib@IIS"(i64 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1, i64 0, i64 0))
  %return4 = call i64 @"eq@III"(i64 %return3, i64 0)
  %return6 = fcmp oeq double %return2, 0.000000e+00
  %return7 = zext i1 %return6 to i64
  %return8 = call i64 @"or@III"(i64 %return4, i64 %return7)
  %0 = icmp ne i64 %return8, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return9 = call <3 x double> @"getbbox_size@VI"(i64 1)
  %return10 = call double @"getcomp@FVI"(<3 x double> %return9, i64 2)
  store double %return10, double* %_bound_MODULE_WIDTH
  %return11 = call <3 x double> @"getbbox_size@VI"(i64 1)
  %return12 = call double @"getcomp@FVI"(<3 x double> %return11, i64 1)
  store double %return12, double* %_bound_MODULE_HEIGHT
  br label %end

false:                                            ; preds = %__llvm_entry
  %return13 = call <2 x double> @"prim@UISI"(i64 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1, i64 0, i64 0), i64 0)
  %return14 = call double @"getcomp@FUI"(<2 x double> %return13, i64 0)
  store double %return14, double* %_bound_MODULE_WIDTH
  %return15 = call <2 x double> @"prim@UISI"(i64 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1, i64 0, i64 0), i64 0)
  %return16 = call double @"getcomp@FUI"(<2 x double> %return15, i64 1)
  store double %return16, double* %_bound_MODULE_HEIGHT
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: nounwind
declare i8* @"prim@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare <2 x double> @"prim@UISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #1

; Function Attrs: nounwind
declare i64 @"hasprimattrib@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"getbbox_size@VI"(i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i8* %MODULE_ID, double %MODULE_WIDTH, double %MODULE_HEIGHT) #1 {
__llvm_entry:
  %"<MODULE_WIDTH>" = alloca double
  %"<MODULE_HEIGHT>" = alloca double
  %"<MODULE_ID>" = alloca i8*
  store i8* %MODULE_ID, i8** %"<MODULE_ID>"
  store double %MODULE_WIDTH, double* %"<MODULE_WIDTH>"
  store double %MODULE_HEIGHT, double* %"<MODULE_HEIGHT>"
  call void @"__vex_snippet_snippet@SFF"(i8** %"<MODULE_ID>", double* %"<MODULE_WIDTH>", double* %"<MODULE_HEIGHT>")
  %evalue = load i8*, i8** %"<MODULE_ID>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), i8* %evalue) #3
  %evalue1 = load double, double* %"<MODULE_WIDTH>"
  %gvalue2 = call double @"_export@FSF"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @3, i64 0, i64 0), double %evalue1) #3
  %evalue3 = load double, double* %"<MODULE_HEIGHT>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @4, i64 0, i64 0), double %evalue3) #3
  store i8* %gvalue, i8** @MODULE_ID
  store double %gvalue2, double* @MODULE_WIDTH
  store double %gvalue4, double* @MODULE_HEIGHT
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

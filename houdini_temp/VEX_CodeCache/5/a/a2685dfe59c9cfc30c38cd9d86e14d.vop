;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@__angular_speed = external global double
@w = external global <3 x double>
@0 = private constant [16 x i8] c"__angular_speed\00"
@1 = private constant [2 x i8] c"w\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FV"(double* %_bound___angular_speed, <3 x double>* %_bound_w) #0 {
__llvm_entry:
  %_bound_w1 = load <3 x double>, <3 x double>* %_bound_w
  %return = call double @"length@FV"(<3 x double> %_bound_w1)
  store double %return, double* %_bound___angular_speed
  ret void
}

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %__angular_speed, <3 x double> %w) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %"<__angular_speed>" = alloca double
  store double %__angular_speed, double* %"<__angular_speed>"
  store <3 x double> %w, <3 x double>* %0
  call void @"__vex_snippet_snippet@FV"(double* %"<__angular_speed>", <3 x double>* %0)
  %evalue = load double, double* %"<__angular_speed>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i64 0, i64 0), double %evalue) #2
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %w) #2
  store double %gvalue, double* @__angular_speed
  store <3 x double> %gvalue3, <3 x double>* @w
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

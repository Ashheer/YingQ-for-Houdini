;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [9 x i8] c"polyline\00"
@P = external global <3 x double>

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVFI"(<3 x double>* %_bound_P, <3 x double>* %_bound_N, double* %_bound___cutterlength, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %_bound_N2 = load <3 x double>, <3 x double>* %_bound_N
  %_bound___cutterlength3 = load double, double* %_bound___cutterlength
  %cast = call <3 x double> @"set@VF"(double %_bound___cutterlength3)
  %output = call <3 x double> @"mul@VV"(<3 x double> %_bound_N2, <3 x double> %cast)
  %cast4 = call <3 x double> @"set@VF"(double 6.000000e-01)
  %output5 = call <3 x double> @"mul@VV"(<3 x double> %output, <3 x double> %cast4)
  %output8 = call <3 x double> @"add@VV"(<3 x double> %_bound_P1, <3 x double> %output5)
  store <3 x double> %output8, <3 x double>* %_bound_P
  %_bound_ptnum9 = load i64, i64* %_bound_ptnum
  %return = call i64 @"addpoint@III"(i64 0, i64 %_bound_ptnum9)
  %output13 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P1, <3 x double> %output5)
  %return14 = call i64 @"setpointattrib@IISIV"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return, <3 x double> %output13)
  %_bound_ptnum15 = load i64, i64* %_bound_ptnum
  %return17 = call i64 @"addprim@IISII"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0), i64 %_bound_ptnum15, i64 %return)
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"addpoint@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIV"(i64, i8*, i64, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"addprim@IISII"(i64, i8*, i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, <3 x double> %N, double %__cutterlength, i64 %ptnum) #2 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca double
  %2 = alloca i64
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store <3 x double> %N, <3 x double>* %0
  store double %__cutterlength, double* %1
  store i64 %ptnum, i64* %2
  call void @"__vex_snippet_snippet@VVFI"(<3 x double>* %"<P>", <3 x double>* %0, double* %1, i64* %2)
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %evalue) #3
  store <3 x double> %gvalue, <3 x double>* @P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@orient = external global <4 x double>
@__q_max_component = external global i64
@__frame_ref = external global double
@Frame = external global double
@0 = private constant [7 x i8] c"orient\00"
@1 = private constant [18 x i8] c"__q_max_component\00"
@2 = private constant [12 x i8] c"__frame_ref\00"
@3 = private constant [6 x i8] c"Frame\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@PIFF"(<4 x double>* %_bound_orient, i64* %_bound___q_max_component, double* %_bound___frame_ref, double* %_bound_Frame) #0 {
__llvm_entry:
  %_bound_orient1 = load <4 x double>, <4 x double>* %_bound_orient
  %return = call <4 x double> @"normalize@PP"(<4 x double> %_bound_orient1)
  store <4 x double> %return, <4 x double>* %_bound_orient
  %return3 = call double @"getcomp@FPI"(<4 x double> %return, i64 0)
  %return4 = call double @"abs@FF"(double %return3)
  %_bound_orient5 = load <4 x double>, <4 x double>* %_bound_orient
  %return6 = call double @"getcomp@FPI"(<4 x double> %_bound_orient5, i64 1)
  %return7 = call double @"abs@FF"(double %return6)
  %_bound_orient8 = load <4 x double>, <4 x double>* %_bound_orient
  %return9 = call double @"getcomp@FPI"(<4 x double> %_bound_orient8, i64 2)
  %return10 = call double @"abs@FF"(double %return9)
  %_bound_orient11 = load <4 x double>, <4 x double>* %_bound_orient
  %return12 = call double @"getcomp@FPI"(<4 x double> %_bound_orient11, i64 3)
  %return13 = call double @"abs@FF"(double %return12)
  store i64 0, i64* %_bound___q_max_component
  %return16 = fcmp oge double %return4, %return7
  %return17 = zext i1 %return16 to i64
  %return20 = fcmp oge double %return4, %return10
  %return21 = zext i1 %return20 to i64
  %return22 = call i64 @"and@III"(i64 %return17, i64 %return21)
  %return25 = fcmp oge double %return4, %return13
  %return26 = zext i1 %return25 to i64
  %return27 = call i64 @"and@III"(i64 %return22, i64 %return26)
  %0 = icmp ne i64 %return27, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  store i64 1, i64* %_bound___q_max_component
  %_bound_orient28 = load <4 x double>, <4 x double>* %_bound_orient
  %return29 = call double @"getcomp@FPI"(<4 x double> %_bound_orient28, i64 0)
  %return30 = call double @"sign@FF"(double %return29)
  %return31 = fcmp one double %return30, 0.000000e+00
  %_bound_orient36 = load <4 x double>, <4 x double>* %_bound_orient
  br i1 %return31, label %true33, label %end35

false:                                            ; preds = %__llvm_entry
  %return43 = fcmp oge double %return7, %return4
  %return44 = zext i1 %return43 to i64
  %return47 = fcmp oge double %return7, %return10
  %return48 = zext i1 %return47 to i64
  %return49 = call i64 @"and@III"(i64 %return44, i64 %return48)
  %return52 = fcmp oge double %return7, %return13
  %return53 = zext i1 %return52 to i64
  %return54 = call i64 @"and@III"(i64 %return49, i64 %return53)
  %1 = icmp ne i64 %return54, 0
  br i1 %1, label %true55, label %false56

end:                                              ; preds = %end98, %end114, %end65, %end35
  %_bound_Frame123 = load double, double* %_bound_Frame
  store double %_bound_Frame123, double* %_bound___frame_ref
  ret void

true33:                                           ; preds = %true
  %return38 = call double @"getcomp@FPI"(<4 x double> %_bound_orient36, i64 0)
  %return39 = call double @"sign@FF"(double %return38)
  %cast = call <4 x double> @"set@PF"(double %return39)
  %output = call <4 x double> @"mul@PP"(<4 x double> %_bound_orient36, <4 x double> %cast)
  br label %end35

end35:                                            ; preds = %true, %true33
  %phi = phi <4 x double> [ %output, %true33 ], [ %_bound_orient36, %true ]
  store <4 x double> %phi, <4 x double>* %_bound_orient
  br label %end

true55:                                           ; preds = %false
  store i64 2, i64* %_bound___q_max_component
  %_bound_orient58 = load <4 x double>, <4 x double>* %_bound_orient
  %return59 = call double @"getcomp@FPI"(<4 x double> %_bound_orient58, i64 1)
  %return60 = call double @"sign@FF"(double %return59)
  %return61 = fcmp one double %return60, 0.000000e+00
  %_bound_orient66 = load <4 x double>, <4 x double>* %_bound_orient
  br i1 %return61, label %true63, label %end65

false56:                                          ; preds = %false
  %return76 = fcmp oge double %return10, %return4
  %return77 = zext i1 %return76 to i64
  %return80 = fcmp oge double %return10, %return7
  %return81 = zext i1 %return80 to i64
  %return82 = call i64 @"and@III"(i64 %return77, i64 %return81)
  %return85 = fcmp oge double %return10, %return13
  %return86 = zext i1 %return85 to i64
  %return87 = call i64 @"and@III"(i64 %return82, i64 %return86)
  %2 = icmp ne i64 %return87, 0
  br i1 %2, label %true88, label %false89

true63:                                           ; preds = %true55
  %return68 = call double @"getcomp@FPI"(<4 x double> %_bound_orient66, i64 1)
  %return69 = call double @"sign@FF"(double %return68)
  %cast70 = call <4 x double> @"set@PF"(double %return69)
  %output71 = call <4 x double> @"mul@PP"(<4 x double> %_bound_orient66, <4 x double> %cast70)
  br label %end65

end65:                                            ; preds = %true55, %true63
  %phi73 = phi <4 x double> [ %output71, %true63 ], [ %_bound_orient66, %true55 ]
  store <4 x double> %phi73, <4 x double>* %_bound_orient
  br label %end

true88:                                           ; preds = %false56
  store i64 3, i64* %_bound___q_max_component
  %_bound_orient91 = load <4 x double>, <4 x double>* %_bound_orient
  %return92 = call double @"getcomp@FPI"(<4 x double> %_bound_orient91, i64 2)
  %return93 = call double @"sign@FF"(double %return92)
  %return94 = fcmp one double %return93, 0.000000e+00
  %_bound_orient99 = load <4 x double>, <4 x double>* %_bound_orient
  br i1 %return94, label %true96, label %end98

false89:                                          ; preds = %false56
  store i64 0, i64* %_bound___q_max_component
  %_bound_orient107 = load <4 x double>, <4 x double>* %_bound_orient
  %return108 = call double @"getcomp@FPI"(<4 x double> %_bound_orient107, i64 3)
  %return109 = call double @"sign@FF"(double %return108)
  %return110 = fcmp one double %return109, 0.000000e+00
  %_bound_orient115 = load <4 x double>, <4 x double>* %_bound_orient
  br i1 %return110, label %true112, label %end114

true96:                                           ; preds = %true88
  %return101 = call double @"getcomp@FPI"(<4 x double> %_bound_orient99, i64 2)
  %return102 = call double @"sign@FF"(double %return101)
  %cast103 = call <4 x double> @"set@PF"(double %return102)
  %output104 = call <4 x double> @"mul@PP"(<4 x double> %_bound_orient99, <4 x double> %cast103)
  br label %end98

end98:                                            ; preds = %true88, %true96
  %phi106 = phi <4 x double> [ %output104, %true96 ], [ %_bound_orient99, %true88 ]
  store <4 x double> %phi106, <4 x double>* %_bound_orient
  br label %end

true112:                                          ; preds = %false89
  %return117 = call double @"getcomp@FPI"(<4 x double> %_bound_orient115, i64 3)
  %return118 = call double @"sign@FF"(double %return117)
  %cast119 = call <4 x double> @"set@PF"(double %return118)
  %output120 = call <4 x double> @"mul@PP"(<4 x double> %_bound_orient115, <4 x double> %cast119)
  br label %end114

end114:                                           ; preds = %false89, %true112
  %phi122 = phi <4 x double> [ %output120, %true112 ], [ %_bound_orient115, %false89 ]
  store <4 x double> %phi122, <4 x double>* %_bound_orient
  br label %end
}

; Function Attrs: nounwind
declare <4 x double> @"normalize@PP"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FPI"(<4 x double>, i64) #2

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind
declare double @"sign@FF"(double) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PF"(double) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"mul@PP"(<4 x double>, <4 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<4 x double> %orient, i64 %__q_max_component, double %__frame_ref, double %Frame) #1 {
__llvm_entry:
  %"<__q_max_component>" = alloca i64
  %"<__frame_ref>" = alloca double
  %0 = alloca double
  %"<orient>" = alloca <4 x double>
  store <4 x double> %orient, <4 x double>* %"<orient>"
  store i64 %__q_max_component, i64* %"<__q_max_component>"
  store double %__frame_ref, double* %"<__frame_ref>"
  store double %Frame, double* %0
  call void @"__vex_snippet_snippet@PIFF"(<4 x double>* %"<orient>", i64* %"<__q_max_component>", double* %"<__frame_ref>", double* %0)
  %evalue = load <4 x double>, <4 x double>* %"<orient>"
  %gvalue = call <4 x double> @"_export@PSP"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0), <4 x double> %evalue) #3
  %evalue2 = load i64, i64* %"<__q_max_component>"
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1, i64 0, i64 0), i64 %evalue2) #3
  %evalue4 = load double, double* %"<__frame_ref>"
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i64 0, i64 0), double %evalue4) #3
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), double %Frame) #3
  store <4 x double> %gvalue, <4 x double>* @orient
  store i64 %gvalue3, i64* @__q_max_component
  store double %gvalue5, double* @__frame_ref
  store double %gvalue7, double* @Frame
  ret void
}

declare <4 x double> @"_export@PSP"(i8*, <4 x double>)

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>, i64 0, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [15 x i8] c"../inputcenter\00"
@1 = private constant [11 x i8] c"../centerx\00"
@2 = private constant [2 x i8] c"P\00"
@3 = private constant [11 x i8] c"../outdist\00"
@4 = private constant [18 x i8] c"../outsumindetail\00"
@5 = private constant [23 x i8] c"../distname_sum_detail\00"
@6 = private constant [4 x i8] c"add\00"
@7 = private constant [18 x i8] c"../outminindetail\00"
@8 = private constant [23 x i8] c"../distname_min_detail\00"
@9 = private constant [4 x i8] c"min\00"
@10 = private constant [18 x i8] c"../outmaxindetail\00"
@11 = private constant [23 x i8] c"../distname_max_detail\00"
@12 = private constant [4 x i8] c"max\00"
@attrib = external global <3 x double>
@outdist = external global double
@13 = private constant [7 x i8] c"attrib\00"
@14 = private constant [8 x i8] c"outdist\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VF"(<3 x double>* %_bound_attrib, double* %_bound_outdist) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return1 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0))
  br label %end

false:                                            ; preds = %__llvm_entry
  %return2 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), i64 0)
  br label %end

end:                                              ; preds = %false, %true
  %center.0 = phi <3 x double> [ %return1, %true ], [ %return2, %false ]
  %_bound_attrib3 = load <3 x double>, <3 x double>* %_bound_attrib
  %return5 = call double @"distance@FVV"(<3 x double> %_bound_attrib3, <3 x double> %center.0)
  %return6 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0))
  %1 = icmp ne i64 %return6, 0
  br i1 %1, label %true7, label %end8

true7:                                            ; preds = %end
  store double %return5, double* %_bound_outdist
  br label %end8

end8:                                             ; preds = %true7, %end
  %return10 = call i64 @"chi@IS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @4, i64 0, i64 0))
  %2 = icmp ne i64 %return10, 0
  br i1 %2, label %true11, label %end12

true11:                                           ; preds = %end8
  %return13 = call i8* @"chs@SS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @5, i64 0, i64 0))
  %return15 = call i64 @"setdetailattrib@IISFS"(i64 0, i8* %return13, double %return5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @6, i64 0, i64 0))
  br label %end12

end12:                                            ; preds = %true11, %end8
  %return16 = call i64 @"chi@IS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @7, i64 0, i64 0))
  %3 = icmp ne i64 %return16, 0
  br i1 %3, label %true17, label %end18

true17:                                           ; preds = %end12
  %return19 = call i8* @"chs@SS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @8, i64 0, i64 0))
  %return21 = call i64 @"setdetailattrib@IISFS"(i64 0, i8* %return19, double %return5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @9, i64 0, i64 0))
  br label %end18

end18:                                            ; preds = %true17, %end12
  %return22 = call i64 @"chi@IS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @10, i64 0, i64 0))
  %4 = icmp ne i64 %return22, 0
  br i1 %4, label %true23, label %end24

true23:                                           ; preds = %end18
  %return25 = call i8* @"chs@SS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @11, i64 0, i64 0))
  %return27 = call i64 @"setdetailattrib@IISFS"(i64 0, i8* %return25, double %return5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @12, i64 0, i64 0))
  br label %end24

end24:                                            ; preds = %true23, %end18
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"setdetailattrib@IISFS"(i64, i8*, double, i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %attrib, double %outdist) #2 {
__llvm_entry:
  %"<outdist>" = alloca double
  %0 = alloca <3 x double>
  store double %outdist, double* %"<outdist>"
  store <3 x double> %attrib, <3 x double>* %0
  call void @"__vex_snippet_snippet@VF"(<3 x double>* %0, double* %"<outdist>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i64 0, i64 0), <3 x double> %attrib) #3
  %evalue2 = load double, double* %"<outdist>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @14, i64 0, i64 0), double %evalue2) #3
  store <3 x double> %gvalue, <3 x double>* @attrib
  store double %gvalue3, double* @outdist
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	/obj/volume_bindings/noisey_fields
; ModuleID = 'obj_volume_bindings_noisey_fields'
source_filename = "obj_volume_bindings_noisey_fields"

@0 = private constant [7 x i8] c"xnoise\00"
@1 = private constant [1 x i8] zeroinitializer
@density = external global double
@2 = private constant [6 x i8] c"noise\00"
@3 = private constant [10 x i8] c"opinput:0\00"
@4 = private constant [5 x i8] c"file\00"
@5 = private constant [62 x i8] c"C:/PROGRA~1/SIDEEF~1/Houdini 19.0.531/houdini/geo/defgeo.bgeo\00"
@6 = private constant [7 x i8] c"wnoise\00"
@7 = private constant [8 x i8] c"mwnoise\00"
@8 = private constant [8 x i8] c"cwnoise\00"
@9 = private constant [8 x i8] c"density\00"

; Function Attrs: alwaysinline nounwind
define private double @"vop_bias@FFF"(double* %base, double* %bias) #0 {
__llvm_entry:
  %base1 = load double, double* %base
  %return = fcmp ole double %base1, 0.000000e+00
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  br label %end

false:                                            ; preds = %__llvm_entry
  %return4 = fcmp oge double %base1, 1.000000e+00
  br i1 %return4, label %true6, label %false7

end:                                              ; preds = %true6, %false7, %true
  %val.0 = phi double [ 0.000000e+00, %true ], [ 1.000000e+00, %true6 ], [ %output16, %false7 ]
  ret double %val.0

true6:                                            ; preds = %false
  br label %end

false7:                                           ; preds = %false
  %bias9 = load double, double* %bias
  %output = call double @"div@FF"(double 1.000000e+00, double %base1)
  %output11 = fsub double %output, 2.000000e+00
  %output13 = fsub double 1.000000e+00, %bias9
  %output14 = fmul double %output11, %output13
  %output15 = fadd double %output14, 1.000000e+00
  %output16 = call double @"div@FF"(double %bias9, double %output15)
  br label %end
}

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"vop_fbmNoiseVP@VPFIS"(<4 x double>* %pos, double* %rough, i64* %maxoctaves, i8** %noisetype) #0 {
__llvm_entry:
  %return = call double @"sqrt@FF"(double 1.000000e-06)
  %pos1 = load <4 x double>, <4 x double>* %pos
  %output = fmul double 2.000000e+00, %return
  %cast = call <3 x double> @"set@VI"(i64 0)
  br label %cond

cond:                                             ; preds = %end13, %__llvm_entry
  %pp.0 = phi <4 x double> [ %pos1, %__llvm_entry ], [ %output39, %end13 ]
  %nval.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %nval.1, %end13 ]
  %amp.0 = phi double [ 1.000000e+00, %__llvm_entry ], [ %output34, %end13 ]
  %scale.0 = phi double [ 1.000000e+00, %__llvm_entry ], [ %output36, %end13 ]
  %octaves.0 = phi i64 [ 0, %__llvm_entry ], [ %output42, %end13 ]
  %return5 = fcmp ogt double %scale.0, %output
  %return6 = zext i1 %return5 to i64
  %maxoctaves8 = load i64, i64* %maxoctaves
  %return9 = call i64 @"lt@III"(i64 %octaves.0, i64 %maxoctaves8)
  %return10 = call i64 @"and@III"(i64 %return6, i64 %return9)
  %0 = icmp ne i64 %return10, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %noisetype11 = load i8*, i8** %noisetype
  %return12 = call i64 @"eq@ISS"(i8* %noisetype11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0))
  %1 = icmp ne i64 %return12, 0
  br i1 %1, label %true, label %false

end:                                              ; preds = %cond
  %return45 = fcmp ogt double %scale.0, %return
  br i1 %return45, label %true47, label %end48

true:                                             ; preds = %body
  %return17 = call <3 x double> @"xnoise@VP"(<4 x double> %pp.0)
  %cast18 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output19 = call <3 x double> @"sub@VV"(<3 x double> %return17, <3 x double> %cast18)
  %cast20 = call <3 x double> @"set@VF"(double %amp.0)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %cast20, <3 x double> %output19)
  %output22 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output21)
  br label %end13

false:                                            ; preds = %body
  %return26 = call <3 x double> @"noise@VP"(<4 x double> %pp.0)
  %cast27 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output28 = call <3 x double> @"sub@VV"(<3 x double> %return26, <3 x double> %cast27)
  %cast29 = call <3 x double> @"set@VF"(double %amp.0)
  %output30 = call <3 x double> @"mul@VV"(<3 x double> %cast29, <3 x double> %output28)
  %output31 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output30)
  br label %end13

end13:                                            ; preds = %false, %true
  %nval.1 = phi <3 x double> [ %output22, %true ], [ %output31, %false ]
  %rough33 = load double, double* %rough
  %output34 = fmul double %amp.0, %rough33
  %output36 = fmul double %scale.0, 5.000000e-01
  %cast38 = call <4 x double> @"set@PI"(i64 2)
  %output39 = call <4 x double> @"mul@PP"(<4 x double> %pp.0, <4 x double> %cast38)
  %output42 = add i64 %octaves.0, 1
  br label %cond

true47:                                           ; preds = %end
  %output52 = call double @"div@FF"(double %scale.0, double %return)
  %output53 = fsub double %output52, 1.000000e+00
  %return54 = call double @"clamp@FFFF"(double %output53, double 0.000000e+00, double 1.000000e+00)
  %output55 = fmul double %amp.0, %return54
  %noisetype56 = load i8*, i8** %noisetype
  %return57 = call i64 @"eq@ISS"(i8* %noisetype56, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0))
  %2 = icmp ne i64 %return57, 0
  br i1 %2, label %true58, label %false59

end48:                                            ; preds = %true58, %false59, %end
  %nval.2 = phi <3 x double> [ %output69, %true58 ], [ %output78, %false59 ], [ %nval.0, %end ]
  ret <3 x double> %nval.2

true58:                                           ; preds = %true47
  %return64 = call <3 x double> @"xnoise@VP"(<4 x double> %pp.0)
  %cast65 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output66 = call <3 x double> @"sub@VV"(<3 x double> %return64, <3 x double> %cast65)
  %cast67 = call <3 x double> @"set@VF"(double %output55)
  %output68 = call <3 x double> @"mul@VV"(<3 x double> %cast67, <3 x double> %output66)
  %output69 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output68)
  br label %end48

false59:                                          ; preds = %true47
  %return73 = call <3 x double> @"noise@VP"(<4 x double> %pp.0)
  %cast74 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output75 = call <3 x double> @"sub@VV"(<3 x double> %return73, <3 x double> %cast74)
  %cast76 = call <3 x double> @"set@VF"(double %output55)
  %output77 = call <3 x double> @"mul@VV"(<3 x double> %cast76, <3 x double> %output75)
  %output78 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output77)
  br label %end48
}

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VP"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"noise@VP"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PI"(i64) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"mul@PP"(<4 x double>, <4 x double>) #1

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #2

; Function Attrs: nounwind
define void @obj_volume_bindings_noisey_fields(<3 x double> %P, i64 %ix, i64 %iy, i64 %iz, i64 %resx, i64 %resy, i64 %resz, <3 x double> %dPdx, <3 x double> %dPdy, <3 x double> %dPdz, <3 x double> %center, double %Time, double %Timeinc, double %Frame, i8* %OpInput2, i8* %OpInput3, i8* %OpInput4, i8* %OpInput1, double %density, <4 x double> %freq, double %amp, double %rough) #2 {
__llvm_entry:
  %0 = alloca <4 x double>
  %1 = alloca double
  %2 = alloca i64
  %3 = alloca i8*
  %4 = alloca double
  %5 = alloca double
  %cast = sitofp i64 %resx to double
  %return = call double @"neg@FF"(double 5.000000e-01)
  %output = fmul double %cast, %return
  %cast7 = call <3 x double> @"set@VF"(double %output)
  %output8 = call <3 x double> @"mul@VV"(<3 x double> %dPdx, <3 x double> %cast7)
  %cast10 = sitofp i64 %resy to double
  %output13 = fmul double %cast10, %return
  %cast16 = call <3 x double> @"set@VF"(double %output13)
  %output17 = call <3 x double> @"mul@VV"(<3 x double> %dPdy, <3 x double> %cast16)
  %cast19 = sitofp i64 %resz to double
  %output22 = fmul double %cast19, %return
  %cast25 = call <3 x double> @"set@VF"(double %output22)
  %output26 = call <3 x double> @"mul@VV"(<3 x double> %dPdz, <3 x double> %cast25)
  %output29 = call <3 x double> @"add@VV"(<3 x double> %center, <3 x double> %output8)
  %return35 = call double @"length@FV"(<3 x double> %output8)
  %return37 = call double @"length@FV"(<3 x double> %output17)
  %return39 = call double @"length@FV"(<3 x double> %output26)
  %cast48 = sitofp i64 %ix to double
  %cast50 = sitofp i64 %iy to double
  %cast52 = sitofp i64 %iz to double
  %return60 = call <3 x double> @"set@VFFF"(double %cast, double %cast10, double %cast19)
  %return62 = call i64 @"neg@II"(i64 1)
  %cast63 = call <3 x double> @"set@VI"(i64 %return62)
  %cast91 = call <4 x double> @"set@PV"(<3 x double> %P)
  %output94 = call <4 x double> @"setcomp@PFI"(<4 x double> %cast91, double %Time, i64 3)
  %output97 = call <4 x double> @"mul@PP"(<4 x double> %output94, <4 x double> %freq)
  %output98 = call <4 x double> @"sub@PP"(<4 x double> %output97, <4 x double> zeroinitializer)
  store <4 x double> %output98, <4 x double>* %0
  store double %rough, double* %1
  store i64 8, i64* %2
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i8** %3
  %vop_fbmNoiseVP = call <3 x double> @"vop_fbmNoiseVP@VPFIS"(<4 x double>* %0, double* %1, i64* %2, i8** %3)
  %cast102 = call <3 x double> @"set@VF"(double %amp)
  %output103 = call <3 x double> @"mul@VV"(<3 x double> %vop_fbmNoiseVP, <3 x double> %cast102)
  %output106 = call <3 x double> @"add@VV"(<3 x double> %P, <3 x double> %output103)
  %return107 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0))
  %6 = icmp ne i64 %return107, 0
  %. = select i1 %6, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @5, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0)
  %return110 = call double @"volumesample@FSIV"(i8* %., i64 0, <3 x double> %output106)
  %return148 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @7, i64 0, i64 0))
  %7 = icmp ne i64 %return148, 0
  br i1 %7, label %true149, label %false150

true149:                                          ; preds = %__llvm_entry
  %output153 = call <4 x double> @"mul@PP"(<4 x double> %output94, <4 x double> <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 1.000000e+00>)
  %output154 = call <4 x double> @"sub@PP"(<4 x double> %output153, <4 x double> zeroinitializer)
  %output155 = call { i64, double, double } @"mwnoise@PIFF"(<4 x double> %output154)
  %output157 = extractvalue { i64, double, double } %output155, 1
  br label %end151

false150:                                         ; preds = %__llvm_entry
  %return159 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0))
  %8 = icmp ne i64 %return159, 0
  %output164 = call <4 x double> @"mul@PP"(<4 x double> %output94, <4 x double> <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 1.000000e+00>)
  %output165 = call <4 x double> @"sub@PP"(<4 x double> %output164, <4 x double> zeroinitializer)
  br i1 %8, label %true160, label %false161

end151:                                           ; preds = %true160, %false161, %true149
  %dist1.0 = phi double [ %output157, %true149 ], [ %output168, %true160 ], [ %output175, %false161 ]
  %return178 = call double @"fit@FFFFFF"(double %dist1.0, double 2.330000e-01, double 9.260000e-01, double 0.000000e+00, double 1.000000e+00)
  store double %return178, double* %4
  store double 8.290000e-01, double* %5
  %vop_bias = call double @"vop_bias@FFF"(double* %4, double* %5)
  %output182 = fmul double %return110, %vop_bias
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @9, i64 0, i64 0), double %output182) #3
  store double %gvalue, double* @density
  ret void

true160:                                          ; preds = %false150
  %output166 = call { i64, double, double } @"mwnoise@PIFF"(<4 x double> %output165)
  %output168 = extractvalue { i64, double, double } %output166, 1
  br label %end151

false161:                                         ; preds = %false150
  %output173 = call { i64, double, double } @"wnoise@PIFF"(<4 x double> %output165)
  %output175 = extractvalue { i64, double, double } %output173, 1
  br label %end151
}

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <4 x double> @"set@PV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"setcomp@PFI"(<4 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"sub@PP"(<4 x double>, <4 x double>) #1

; Function Attrs: nounwind readnone
declare double @"volumesample@FSIV"(i8*, i64, <3 x double>) #1

; Function Attrs: nounwind readnone
declare { i64, double, double, double, double } @"mwnoise@PIFFFF"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare { i64, double, double, double, double } @"cwnoise@PIFFFF"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare { i64, double, double, double, double } @"wnoise@PIFFFF"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare { i64, double, double } @"mwnoise@PIFF"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare { i64, double, double } @"wnoise@PIFF"(<4 x double>) #1

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #2

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_volume_bindings_noisey_fields(<3 x double> zeroinitializer, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0), double 0.000000e+00, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, double 1.000000e+00, double 5.000000e-01)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

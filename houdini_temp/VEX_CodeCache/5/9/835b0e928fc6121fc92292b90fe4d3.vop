;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [20 x i8] c"../radiusmultiplier\00"
@radius = external global double
@1 = private constant [7 x i8] c"radius\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@F"(double* %_bound_radius) #0 {
__llvm_entry:
  %_bound_radius1 = load double, double* %_bound_radius
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @0, i64 0, i64 0))
  %output = fmul double %_bound_radius1, %return
  store double %output, double* %_bound_radius
  ret void
}

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %radius) #2 {
__llvm_entry:
  %"<radius>" = alloca double
  store double %radius, double* %"<radius>"
  call void @"__vex_snippet_snippet@F"(double* %"<radius>")
  %evalue = load double, double* %"<radius>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), double %evalue) #3
  store double %gvalue, double* @radius
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

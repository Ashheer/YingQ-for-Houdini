;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [18 x i8] c"../include_Unused\00"
@1 = private constant [16 x i8] c"../outendsgroup\00"
@2 = private constant [14 x i8] c"../outendsint\00"
@3 = private constant [16 x i8] c"../reversegroup\00"
@4 = private constant [11 x i8] c"../numends\00"
@5 = private constant [13 x i8] c"../mergetype\00"
@6 = private constant [17 x i8] c"../outstartgroup\00"
@7 = private constant [15 x i8] c"../outstartint\00"
@8 = private constant [15 x i8] c"../outendgroup\00"
@9 = private constant [13 x i8] c"../outendint\00"
@ptnum = external global i64
@endsgroup = external global i64
@endsint = external global i64
@startgroup = external global i64
@startint = external global i64
@endgroup = external global i64
@endint = external global i64
@10 = private constant [6 x i8] c"ptnum\00"
@11 = private constant [10 x i8] c"endsgroup\00"
@12 = private constant [8 x i8] c"endsint\00"
@13 = private constant [11 x i8] c"startgroup\00"
@14 = private constant [9 x i8] c"startint\00"
@15 = private constant [9 x i8] c"endgroup\00"
@16 = private constant [7 x i8] c"endint\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIIIIII"(i64* %_bound_ptnum, i64* %_bound_endsgroup, i64* %_bound_endsint, i64* %_bound_startgroup, i64* %_bound_startint, i64* %_bound_endgroup, i64* %_bound_endint) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64 @"pointvertex@III"(i64 0, i64 %_bound_ptnum1)
  %return3 = call i64 @"neg@II"(i64 1)
  %return4 = call i64 @"eq@III"(i64 %return, i64 %return3)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return5 = call i64 @"chi@IS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @0, i64 0, i64 0))
  %1 = icmp ne i64 %return5, 0
  br i1 %1, label %end, label %false

end:                                              ; preds = %true, %__llvm_entry
  %return9 = call i64 @"vertexprim@III"(i64 0, i64 %return)
  %return11 = call i64 @"primvertexcount@III"(i64 0, i64 %return9)
  %return13 = call i64 @"vertexprimindex@III"(i64 0, i64 %return)
  %return14 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1, i64 0, i64 0))
  %return15 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @2, i64 0, i64 0))
  %return16 = call i64 @"or@III"(i64 %return14, i64 %return15)
  %2 = icmp ne i64 %return16, 0
  br i1 %2, label %true17, label %end18

false:                                            ; preds = %end101, %true103, %true90, %end73, %true
  ret void

true17:                                           ; preds = %end
  %return19 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @3, i64 0, i64 0))
  %return21 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0))
  %return22 = call i64 @"lt@III"(i64 %return13, i64 %return21)
  %output = sub i64 %return11, %return21
  %return26 = call i64 @"ge@III"(i64 %return13, i64 %output)
  %return27 = call i64 @"or@III"(i64 %return22, i64 %return26)
  %return28 = xor i64 %return19, %return27
  %3 = icmp ne i64 %return28, 0
  br i1 %3, label %true29, label %false30

end18:                                            ; preds = %end59, %true61, %false55, %end34, %true47, %end
  %return67 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @3, i64 0, i64 0))
  %return68 = call i64 @"chi@IS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @6, i64 0, i64 0))
  %return69 = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @7, i64 0, i64 0))
  %return70 = call i64 @"or@III"(i64 %return68, i64 %return69)
  %return71 = xor i64 %return67, %return70
  %4 = icmp ne i64 %return71, 0
  br i1 %4, label %true72, label %end73

true29:                                           ; preds = %true17
  %5 = icmp ne i64 %return14, 0
  br i1 %5, label %true33, label %end34

false30:                                          ; preds = %true17
  %return49 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @5, i64 0, i64 0))
  %return50 = call i64 @"eq@III"(i64 %return49, i64 0)
  %return52 = call i64 @"eq@III"(i64 %return49, i64 2)
  %return53 = call i64 @"or@III"(i64 %return50, i64 %return52)
  %6 = icmp ne i64 %return53, 0
  br i1 %6, label %true54, label %false55

true33:                                           ; preds = %true29
  %return35 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @5, i64 0, i64 0))
  %return36 = call i64 @"eq@III"(i64 %return35, i64 2)
  %7 = icmp ne i64 %return36, 0
  br i1 %7, label %true37, label %false38

end34:                                            ; preds = %end42, %true44, %false38, %true29
  %8 = icmp ne i64 %return15, 0
  br i1 %8, label %true47, label %end18

true37:                                           ; preds = %true33
  %_bound_endsgroup40 = load i64, i64* %_bound_endsgroup
  %9 = icmp ne i64 %_bound_endsgroup40, 0
  br i1 %9, label %true41, label %end42

false38:                                          ; preds = %true33
  store i64 1, i64* %_bound_endsgroup
  br label %end34

true41:                                           ; preds = %true37
  store i64 1, i64* %_bound_endsgroup
  br label %end42

end42:                                            ; preds = %true41, %true37
  %_bound_endsint43 = load i64, i64* %_bound_endsint
  %10 = icmp ne i64 %_bound_endsint43, 0
  br i1 %10, label %true44, label %end34

true44:                                           ; preds = %end42
  store i64 1, i64* %_bound_endsint
  br label %end34

true47:                                           ; preds = %end34
  store i64 1, i64* %_bound_endsint
  br label %end18

true54:                                           ; preds = %false30
  %11 = icmp ne i64 %return14, 0
  br i1 %11, label %true58, label %end59

false55:                                          ; preds = %false30
  br label %end18

true58:                                           ; preds = %true54
  store i64 0, i64* %_bound_endsgroup
  br label %end59

end59:                                            ; preds = %true58, %true54
  %12 = icmp ne i64 %return15, 0
  br i1 %12, label %true61, label %end18

true61:                                           ; preds = %end59
  store i64 0, i64* %_bound_endsint
  br label %end18

true72:                                           ; preds = %end18
  %return75 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0))
  %return76 = call i64 @"lt@III"(i64 %return13, i64 %return75)
  %13 = icmp ne i64 %return76, 0
  br i1 %13, label %true77, label %end73

end73:                                            ; preds = %end81, %true83, %true72, %end18
  %return86 = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @8, i64 0, i64 0))
  %return87 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @9, i64 0, i64 0))
  %return88 = call i64 @"or@III"(i64 %return86, i64 %return87)
  %return89 = xor i64 %return67, %return88
  %14 = icmp ne i64 %return89, 0
  br i1 %14, label %true90, label %false

true77:                                           ; preds = %true72
  %15 = icmp ne i64 %return68, 0
  br i1 %15, label %true80, label %end81

true80:                                           ; preds = %true77
  store i64 1, i64* %_bound_startgroup
  br label %end81

end81:                                            ; preds = %true80, %true77
  %16 = icmp ne i64 %return69, 0
  br i1 %16, label %true83, label %end73

true83:                                           ; preds = %end81
  store i64 1, i64* %_bound_startint
  br label %end73

true90:                                           ; preds = %end73
  %return94 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0))
  %output95 = sub i64 %return11, %return94
  %return96 = call i64 @"ge@III"(i64 %return13, i64 %output95)
  %17 = icmp ne i64 %return96, 0
  br i1 %17, label %true97, label %false

true97:                                           ; preds = %true90
  %18 = icmp ne i64 %return86, 0
  br i1 %18, label %true100, label %end101

true100:                                          ; preds = %true97
  store i64 1, i64* %_bound_endgroup
  br label %end101

end101:                                           ; preds = %true100, %true97
  %19 = icmp ne i64 %return87, 0
  br i1 %19, label %true103, label %false

true103:                                          ; preds = %end101
  store i64 1, i64* %_bound_endint
  br label %false
}

; Function Attrs: nounwind
declare i64 @"pointvertex@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind
declare i64 @"vertexprim@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"primvertexcount@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"vertexprimindex@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64 %endsgroup, i64 %endsint, i64 %startgroup, i64 %startint, i64 %endgroup, i64 %endint) #1 {
__llvm_entry:
  %"<endsgroup>" = alloca i64
  %"<endsint>" = alloca i64
  %"<startgroup>" = alloca i64
  %"<startint>" = alloca i64
  %"<endgroup>" = alloca i64
  %"<endint>" = alloca i64
  %0 = alloca i64
  store i64 %endsgroup, i64* %"<endsgroup>"
  store i64 %endsint, i64* %"<endsint>"
  store i64 %startgroup, i64* %"<startgroup>"
  store i64 %startint, i64* %"<startint>"
  store i64 %endgroup, i64* %"<endgroup>"
  store i64 %endint, i64* %"<endint>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@IIIIIII"(i64* %0, i64* %"<endsgroup>", i64* %"<endsint>", i64* %"<startgroup>", i64* %"<startint>", i64* %"<endgroup>", i64* %"<endint>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @10, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load i64, i64* %"<endsgroup>"
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @11, i64 0, i64 0), i64 %evalue2) #3
  %evalue4 = load i64, i64* %"<endsint>"
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @12, i64 0, i64 0), i64 %evalue4) #3
  %evalue6 = load i64, i64* %"<startgroup>"
  %gvalue7 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @13, i64 0, i64 0), i64 %evalue6) #3
  %evalue8 = load i64, i64* %"<startint>"
  %gvalue9 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @14, i64 0, i64 0), i64 %evalue8) #3
  %evalue10 = load i64, i64* %"<endgroup>"
  %gvalue11 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @15, i64 0, i64 0), i64 %evalue10) #3
  %evalue12 = load i64, i64* %"<endint>"
  %gvalue13 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @16, i64 0, i64 0), i64 %evalue12) #3
  store i64 %gvalue, i64* @ptnum
  store i64 %gvalue3, i64* @endsgroup
  store i64 %gvalue5, i64* @endsint
  store i64 %gvalue7, i64* @startgroup
  store i64 %gvalue9, i64* @startint
  store i64 %gvalue11, i64* @endgroup
  store i64 %gvalue13, i64* @endint
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

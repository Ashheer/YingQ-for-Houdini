;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"group\00"
@ptnum = external global i64
@primnum = external global i64
@1 = private constant [6 x i8] c"ptnum\00"
@2 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private i64 @"compareIntArrays@I[I[I"(i64** %a, i64** %b) #0 {
__llvm_entry:
  %a1 = load i64*, i64** %a
  %return = call i64 @"len@I[I"(i64* %a1)
  %b2 = load i64*, i64** %b
  %return3 = call i64 @"len@I[I"(i64* %b2)
  %return4 = call i64 @"ne@III"(i64 %return, i64 %return3)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %body, %cond, %__llvm_entry
  %merge = phi i64 [ 0, %__llvm_entry ], [ 1, %cond ], [ 0, %body ]
  ret i64 %merge

end:                                              ; preds = %__llvm_entry
  br label %cond

cond:                                             ; preds = %end20, %end
  %idx.0 = phi i64 [ 0, %end ], [ %output, %end20 ]
  %return9 = call i64 @"lt@III"(i64 %idx.0, i64 %return)
  %1 = icmp ne i64 %return9, 0
  br i1 %1, label %body, label %true

body:                                             ; preds = %cond
  %a11 = load i64*, i64** %a
  %return13 = call i64 @"getcomp@I[II"(i64* %a11, i64 %idx.0)
  %b15 = load i64*, i64** %b
  %return17 = call i64 @"getcomp@I[II"(i64* %b15, i64 %idx.0)
  %return18 = call i64 @"ne@III"(i64 %return13, i64 %return17)
  %2 = icmp ne i64 %return18, 0
  br i1 %2, label %true, label %end20

end20:                                            ; preds = %body
  %output = add i64 %idx.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound_ptnum, i64* %_bound_primnum) #0 {
__llvm_entry:
  %0 = alloca i64*
  %1 = alloca i64*
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0))
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return2 = call i64* @"pointprims@[III"(i64 0, i64 %_bound_ptnum1)
  %return4 = call i64 @"len@I[I"(i64* %return2)
  br label %cond

cond:                                             ; preds = %end14, %__llvm_entry
  %__impl_foreach_index_1b6.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %end14 ]
  %return7 = call i64 @"lt@III"(i64 %__impl_foreach_index_1b6.0, i64 %return4)
  %2 = icmp ne i64 %return7, 0
  br i1 %2, label %body, label %end

body:                                             ; preds = %cond
  %return10 = call i64 @"getcomp@I[II"(i64* %return2, i64 %__impl_foreach_index_1b6.0)
  %return13 = call i64 @"inprimgroup@IISI"(i64 0, i8* %return, i64 %return10)
  %3 = icmp ne i64 %return13, 0
  br i1 %3, label %true, label %end14

end:                                              ; preds = %cond
  br label %UnifiedReturnBlock

true:                                             ; preds = %body
  %_bound_primnum16 = load i64, i64* %_bound_primnum
  %return17 = call i64 @"gt@III"(i64 %return10, i64 %_bound_primnum16)
  %4 = icmp ne i64 %return17, 0
  br i1 %4, label %true18, label %end14

end14:                                            ; preds = %true18, %true, %body
  %output = add i64 %__impl_foreach_index_1b6.0, 1
  br label %cond

true18:                                           ; preds = %true
  %return21 = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum16)
  %return22 = call i64* @"sort@[I[I"(i64* %return21)
  store i64* %return22, i64** %0
  %return24 = call i64* @"primpoints@[III"(i64 0, i64 %return10)
  %return25 = call i64* @"sort@[I[I"(i64* %return24)
  store i64* %return25, i64** %1
  %compareIntArrays = call i64 @"compareIntArrays@I[I[I"(i64** %0, i64** %1)
  %5 = icmp ne i64 %compareIntArrays, 0
  br i1 %5, label %true26, label %end14

true26:                                           ; preds = %true18
  %return28 = call i64 @"geoself@I"()
  %_bound_primnum29 = load i64, i64* %_bound_primnum
  %return30 = call i64 @"removeprim@IIII"(i64 %return28, i64 %_bound_primnum29, i64 0)
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %true26, %end
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64* @"pointprims@[III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"inprimgroup@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #2

; Function Attrs: nounwind
declare i64* @"sort@[I[I"(i64*) #2

; Function Attrs: nounwind
declare i64 @"geoself@I"() #2

; Function Attrs: nounwind
declare i64 @"removeprim@IIII"(i64, i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64 %primnum) #2 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  store i64 %ptnum, i64* %0
  store i64 %primnum, i64* %1
  call void @"__vex_snippet_snippet@II"(i64* %0, i64* %1)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i64 %ptnum) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i64 %primnum) #3
  store i64 %gvalue, i64* @ptnum
  store i64 %gvalue4, i64* @primnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [8 x i8] c"primpts\00"
@1 = private constant [8 x i8] c"ptstart\00"
@primnum = external global i64
@2 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_primnum) #0 {
__llvm_entry:
  %return = call i64* @"detail@[IISI"(i64 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0), i64 0)
  %return1 = call i64* @"detail@[IISI"(i64 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i64 0)
  %_bound_primnum3 = load i64, i64* %_bound_primnum
  %return4 = call i64 @"getcomp@I[II"(i64* %return1, i64 %_bound_primnum3)
  %output = add i64 %_bound_primnum3, 1
  %return7 = call i64 @"getcomp@I[II"(i64* %return1, i64 %output)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %i.0 = phi i64 [ %return4, %__llvm_entry ], [ %output20, %body ]
  %return11 = call i64 @"lt@III"(i64 %i.0, i64 %return7)
  %0 = icmp ne i64 %return11, 0
  br i1 %0, label %body, label %end12

body:                                             ; preds = %cond
  %return13 = call i64 @"geoself@I"()
  %_bound_primnum14 = load i64, i64* %_bound_primnum
  %return17 = call i64 @"getcomp@I[II"(i64* %return, i64 %i.0)
  %return18 = call i64 @"addvertex@IIII"(i64 %return13, i64 %_bound_primnum14, i64 %return17)
  %output20 = add i64 %i.0, 1
  br label %cond

end12:                                            ; preds = %cond
  ret void
}

; Function Attrs: nounwind
declare i64* @"detail@[IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"geoself@I"() #1

; Function Attrs: nounwind
declare i64 @"addvertex@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum) #1 {
__llvm_entry:
  %0 = alloca i64
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i64 %primnum) #3
  store i64 %gvalue, i64* @primnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

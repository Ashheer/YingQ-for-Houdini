;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"axis\00"
@group_reverse = external global i64
@N = external global <3 x double>
@1 = private constant [14 x i8] c"group_reverse\00"
@2 = private constant [2 x i8] c"N\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IV"(i64* %_bound_group_reverse, <3 x double>* %_bound_N) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  %return2 = call i64 @"eq@III"(i64 %return, i64 0)
  %0 = icmp ne i64 %return2, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_N3 = load <3 x double>, <3 x double>* %_bound_N
  %return4 = call double @"getcomp@FVI"(<3 x double> %_bound_N3, i64 0)
  %return5 = fcmp olt double %return4, 5.000000e-01
  %return6 = zext i1 %return5 to i64
  store i64 %return6, i64* %_bound_group_reverse
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %return8 = call i64 @"eq@III"(i64 %return, i64 1)
  %1 = icmp ne i64 %return8, 0
  br i1 %1, label %true9, label %end10

true9:                                            ; preds = %end
  %_bound_N11 = load <3 x double>, <3 x double>* %_bound_N
  %return12 = call double @"getcomp@FVI"(<3 x double> %_bound_N11, i64 1)
  %return13 = fcmp olt double %return12, 5.000000e-01
  %return14 = zext i1 %return13 to i64
  store i64 %return14, i64* %_bound_group_reverse
  br label %end10

end10:                                            ; preds = %true9, %end
  %return16 = call i64 @"eq@III"(i64 %return, i64 2)
  %2 = icmp ne i64 %return16, 0
  br i1 %2, label %true17, label %end18

true17:                                           ; preds = %end10
  %_bound_N19 = load <3 x double>, <3 x double>* %_bound_N
  %return20 = call double @"getcomp@FVI"(<3 x double> %_bound_N19, i64 2)
  %return21 = fcmp olt double %return20, 5.000000e-01
  %return22 = zext i1 %return21 to i64
  store i64 %return22, i64* %_bound_group_reverse
  br label %end18

end18:                                            ; preds = %true17, %end10
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %group_reverse, <3 x double> %N) #2 {
__llvm_entry:
  %0 = alloca <3 x double>
  %"<group_reverse>" = alloca i64
  store i64 %group_reverse, i64* %"<group_reverse>"
  store <3 x double> %N, <3 x double>* %0
  call void @"__vex_snippet_snippet@IV"(i64* %"<group_reverse>", <3 x double>* %0)
  %evalue = load i64, i64* %"<group_reverse>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1, i64 0, i64 0), i64 %evalue) #3
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %N) #3
  store i64 %gvalue, i64* @group_reverse
  store <3 x double> %gvalue3, <3 x double>* @N
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

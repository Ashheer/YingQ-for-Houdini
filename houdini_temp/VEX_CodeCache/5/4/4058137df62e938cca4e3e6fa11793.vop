;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [3 x i8] c"uv\00"
@stroke_texuv = external global <3 x double>
@stroke_prim = external global i64
@stroke_uv = external global <3 x double>
@1 = private constant [13 x i8] c"stroke_texuv\00"
@2 = private constant [12 x i8] c"stroke_prim\00"
@3 = private constant [10 x i8] c"stroke_uv\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VIV"(<3 x double>* %_bound_stroke_texuv, i64* %_bound_stroke_prim, <3 x double>* %_bound_stroke_uv) #0 {
__llvm_entry:
  %_bound_stroke_prim1 = load i64, i64* %_bound_stroke_prim
  %_bound_stroke_uv2 = load <3 x double>, <3 x double>* %_bound_stroke_uv
  %return = call <3 x double> @"primuv@VISIV"(i64 1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), i64 %_bound_stroke_prim1, <3 x double> %_bound_stroke_uv2)
  store <3 x double> %return, <3 x double>* %_bound_stroke_texuv
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"primuv@VISIV"(i64, i8*, i64, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %stroke_texuv, i64 %stroke_prim, <3 x double> %stroke_uv) #1 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca <3 x double>
  %"<stroke_texuv>" = alloca <3 x double>
  store <3 x double> %stroke_texuv, <3 x double>* %"<stroke_texuv>"
  store i64 %stroke_prim, i64* %0
  store <3 x double> %stroke_uv, <3 x double>* %1
  call void @"__vex_snippet_snippet@VIV"(<3 x double>* %"<stroke_texuv>", i64* %0, <3 x double>* %1)
  %evalue = load <3 x double>, <3 x double>* %"<stroke_texuv>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #2
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i64 0, i64 0), i64 %stroke_prim) #2
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), <3 x double> %stroke_uv) #2
  store <3 x double> %gvalue, <3 x double>* @stroke_texuv
  store i64 %gvalue4, i64* @stroke_prim
  store <3 x double> %gvalue6, <3 x double>* @stroke_uv
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

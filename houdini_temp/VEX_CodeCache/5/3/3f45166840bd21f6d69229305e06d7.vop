;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [7 x i8] c"length\00"
@1 = private constant [2 x i8] c"P\00"
@ptnum = external global i64
@pos1 = external global <3 x double>
@v = external global double
@h = external global double
@y = external global double
@c1 = external global double
@a = external global double
@c2 = external global double
@P = external global <3 x double>
@2 = private constant [6 x i8] c"ptnum\00"
@3 = private constant [5 x i8] c"pos1\00"
@4 = private constant [2 x i8] c"v\00"
@5 = private constant [2 x i8] c"h\00"
@6 = private constant [2 x i8] c"y\00"
@7 = private constant [3 x i8] c"c1\00"
@8 = private constant [2 x i8] c"a\00"
@9 = private constant [3 x i8] c"c2\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVFFFFFFV"(i64* %_bound_ptnum, <3 x double>* %_bound_pos1, double* %_bound_v, double* %_bound_h, double* %_bound_y, double* %_bound_c1, double* %_bound_a, double* %_bound_c2, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"npoints@II"(i64 0)
  store i64 %return1, i64* %_bound_ptnum
  %return2 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 0)
  %return3 = call i64 @"npoints@II"(i64 0)
  %return4 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return3)
  store <3 x double> %return4, <3 x double>* %_bound_pos1
  %return7 = call double @"getcomp@FVI"(<3 x double> %return2, i64 1)
  %return9 = call double @"getcomp@FVI"(<3 x double> %return4, i64 1)
  %output = fsub double %return7, %return9
  %return10 = call double @"abs@FF"(double %output)
  %return12 = call double @"getcomp@FVI"(<3 x double> %return2, i64 0)
  %return14 = call double @"getcomp@FVI"(<3 x double> %return4, i64 0)
  %output15 = fsub double %return12, %return14
  %return16 = call double @"abs@FF"(double %output15)
  store double %return10, double* %_bound_v
  store double %return16, double* %_bound_h
  %output21 = fmul double %return, %return
  %output24 = fmul double %return10, %return10
  %output25 = fsub double %output21, %output24
  %return26 = call double @"sqrt@FF"(double %output25)
  %output28 = call double @"div@FF"(double %return26, double %return16)
  store double %output28, double* %_bound_y
  br label %cond

cond:                                             ; preds = %end42, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output50, %end42 ]
  %a.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %a.1, %end42 ]
  %return31 = call i64 @"npoints@II"(i64 1)
  %return32 = call i64 @"lt@III"(i64 %i.0, i64 %return31)
  %0 = icmp ne i64 %return32, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return34 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %i.0)
  %return36 = call double @"getcomp@FVI"(<3 x double> %return34, i64 1)
  %output38 = fsub double %return36, %output28
  %return39 = call double @"abs@FF"(double %output38)
  %return40 = fcmp olt double %return39, 1.000000e-02
  br i1 %return40, label %true, label %end42

end:                                              ; preds = %cond
  %output53 = call double @"div@FF"(double %return16, double %a.0)
  %output56 = call double @"div@FF"(double %return10, double %a.0)
  %return59 = call double @"neg@FF"(double %return12)
  %output62 = fmul double 2.000000e+00, %output56
  %output64 = fmul double 4.000000e+00, %output56
  %output66 = fmul double %output64, %output56
  %return68 = call double @"exp@FF"(double %output53)
  %output69 = fsub double 1.000000e+00, %return68
  %output70 = fmul double 4.000000e+00, %output69
  %return72 = call double @"neg@FF"(double %output53)
  %return73 = call double @"exp@FF"(double %return72)
  %output74 = fsub double 1.000000e+00, %return73
  %output75 = fmul double %output70, %output74
  %output76 = fsub double %output66, %output75
  %return77 = call double @"sqrt@FF"(double %output76)
  %output78 = fsub double %output62, %return77
  %output81 = fmul double 2.000000e+00, %return68
  %output82 = fsub double 2.000000e+00, %output81
  %output83 = call double @"div@FF"(double %output78, double %output82)
  %return84 = call double @"log@FF"(double %output83)
  %output85 = fmul double %a.0, %return84
  %output86 = fadd double %return59, %output85
  %output93 = fadd double %return12, %output86
  %output95 = call double @"div@FF"(double %output93, double %a.0)
  %return96 = call double @"cosh@FF"(double %output95)
  %output97 = fmul double %a.0, %return96
  %output98 = fsub double %return7, %output97
  store double %output86, double* %_bound_c1
  store double %a.0, double* %_bound_a
  store double %output98, double* %_bound_c2
  %_bound_P103 = load <3 x double>, <3 x double>* %_bound_P
  %return104 = call double @"getcomp@FVI"(<3 x double> %_bound_P103, i64 0)
  %output106 = fadd double %return104, %output86
  %output108 = call double @"div@FF"(double %output106, double %a.0)
  %return109 = call double @"cosh@FF"(double %output108)
  %output110 = fmul double %a.0, %return109
  %output112 = fadd double %output110, %output98
  %return113 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %_bound_P103, double %output112, i64 1)
  %output115 = extractvalue { double, <3 x double> } %return113, 1
  store <3 x double> %output115, <3 x double>* %_bound_P
  ret void

true:                                             ; preds = %body
  %return44 = call double @"getcomp@FVI"(<3 x double> %return34, i64 0)
  %output45 = fmul double 2.000000e+00, %return44
  %output47 = call double @"div@FF"(double %output45, double %return16)
  br label %end42

end42:                                            ; preds = %true, %body
  %a.1 = phi double [ %output47, %true ], [ %a.0, %body ]
  %output50 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
declare double @"abs@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"exp@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"log@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"cosh@FF"(double) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 1)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %pos1, double %v, double %h, double %y, double %c1, double %a, double %c2, <3 x double> %P) #2 {
__llvm_entry:
  %"<pos1>" = alloca <3 x double>
  %"<v>" = alloca double
  %"<h>" = alloca double
  %"<y>" = alloca double
  %"<c1>" = alloca double
  %"<a>" = alloca double
  %"<c2>" = alloca double
  %"<P>" = alloca <3 x double>
  %"<ptnum>" = alloca i64
  store i64 %ptnum, i64* %"<ptnum>"
  store <3 x double> %pos1, <3 x double>* %"<pos1>"
  store double %v, double* %"<v>"
  store double %h, double* %"<h>"
  store double %y, double* %"<y>"
  store double %c1, double* %"<c1>"
  store double %a, double* %"<a>"
  store double %c2, double* %"<c2>"
  store <3 x double> %P, <3 x double>* %"<P>"
  call void @"__vex_snippet_snippet@IVFFFFFFV"(i64* %"<ptnum>", <3 x double>* %"<pos1>", double* %"<v>", double* %"<h>", double* %"<y>", double* %"<c1>", double* %"<a>", double* %"<c2>", <3 x double>* %"<P>")
  %evalue = load i64, i64* %"<ptnum>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %evalue) #4
  %evalue1 = load <3 x double>, <3 x double>* %"<pos1>"
  %gvalue2 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), <3 x double> %evalue1) #4
  %evalue3 = load double, double* %"<v>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), double %evalue3) #4
  %evalue5 = load double, double* %"<h>"
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), double %evalue5) #4
  %evalue7 = load double, double* %"<y>"
  %gvalue8 = call double @"_export@FSF"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i64 0, i64 0), double %evalue7) #4
  %evalue9 = load double, double* %"<c1>"
  %gvalue10 = call double @"_export@FSF"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @7, i64 0, i64 0), double %evalue9) #4
  %evalue11 = load double, double* %"<a>"
  %gvalue12 = call double @"_export@FSF"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), double %evalue11) #4
  %evalue13 = load double, double* %"<c2>"
  %gvalue14 = call double @"_export@FSF"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @9, i64 0, i64 0), double %evalue13) #4
  %evalue15 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue16 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue15) #4
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue2, <3 x double>* @pos1
  store double %gvalue4, double* @v
  store double %gvalue6, double* @h
  store double %gvalue8, double* @y
  store double %gvalue10, double* @c1
  store double %gvalue12, double* @a
  store double %gvalue14, double* @c2
  store <3 x double> %gvalue16, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

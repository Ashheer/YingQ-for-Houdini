;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [1 x i64] zeroinitializer
@1 = private constant [0 x i64] zeroinitializer
@workset_begins = external global i64*
@workset_lengths = external global i64*
@numpt = external global i64
@2 = private constant [15 x i8] c"workset_begins\00"
@3 = private constant [16 x i8] c"workset_lengths\00"
@4 = private constant [6 x i8] c"numpt\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[I[II"(i64** %_bound_workset_begins, i64** %_bound_workset_lengths, i64* %_bound_numpt) #0 {
__llvm_entry:
  store i64* getelementptr inbounds ([1 x i64], [1 x i64]* @0, i64 0, i64 0), i64** %_bound_workset_begins
  %_bound_numpt1 = load i64, i64* %_bound_numpt
  %return = call i64* @"array@[I:I"(i64 %_bound_numpt1)
  store i64* %return, i64** %_bound_workset_lengths
  %return2 = call <3 x double> @"volumeres@VII"(i64 0, i64 0)
  %return4 = call double @"getcomp@FVI"(<3 x double> %return2, i64 0)
  %return6 = call double @"getcomp@FVI"(<3 x double> %return2, i64 1)
  %output = fmul double %return4, %return6
  %return8 = call double @"getcomp@FVI"(<3 x double> %return2, i64 2)
  %output9 = fmul double %output, %return8
  %return10 = call i64* @"array@[I:F"(double %output9)
  store i64* %return10, i64** %_bound_workset_lengths
  ret void
}

; Function Attrs: nounwind readnone
declare i64* @"array@[I:I"(i64) #1

; Function Attrs: nounwind
declare <3 x double> @"volumeres@VII"(i64, i64) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare i64* @"array@[I:F"(double) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64* %workset_begins, i64* %workset_lengths, i64 %numpt) #2 {
__llvm_entry:
  %"<workset_lengths>" = alloca i64*
  %0 = alloca i64
  %"<workset_begins>" = alloca i64*
  store i64* %workset_begins, i64** %"<workset_begins>"
  store i64* %workset_lengths, i64** %"<workset_lengths>"
  store i64 %numpt, i64* %0
  call void @"__vex_snippet_snippet@[I[II"(i64** %"<workset_begins>", i64** %"<workset_lengths>", i64* %0)
  %evalue = load i64*, i64** %"<workset_begins>"
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i64 0, i64 0), i64* %evalue) #3
  %evalue2 = load i64*, i64** %"<workset_lengths>"
  %gvalue3 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @3, i64 0, i64 0), i64* %evalue2) #3
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %numpt) #3
  store i64* %gvalue, i64** @workset_begins
  store i64* %gvalue3, i64** @workset_lengths
  store i64 %gvalue5, i64* @numpt
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@P = external global <3 x double>
@0 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@V"(<3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call double @"getcomp@FVI"(<3 x double> %_bound_P1, i64 0)
  %output4 = fmul double %return, 0x400921FB54442D18
  %output5 = fmul double %output4, 2.000000e+00
  %output6 = fmul double %output5, 3.000000e+00
  %return9 = call double @"cos@FF"(double %output6)
  %output10 = fmul double %return, %return9
  %output11 = call double @"div@FF"(double %output10, double 2.000000e+00)
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %_bound_P1, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %_bound_P
  %return17 = call double @"sin@FF"(double %output6)
  %output18 = fmul double %return, %return17
  %return20 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output18, i64 1)
  %output22 = extractvalue { double, <3 x double> } %return20, 1
  store <3 x double> %output22, <3 x double>* %_bound_P
  %output24 = fadd double %return, 5.000000e-01
  %return26 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output22, double %output24, i64 2)
  %output28 = extractvalue { double, <3 x double> } %return26, 1
  store <3 x double> %output28, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P) #3 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  call void @"__vex_snippet_snippet@V"(<3 x double>* %"<P>")
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %evalue) #4
  store <3 x double> %gvalue, <3 x double>* @P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	/obj/HDAs/Desert_Terrain1/heightfield_pattern4/patterns
; ModuleID = 'obj_HDAs_Desert_Terrain1_heightfield_pattern4_patterns'
source_filename = "obj_HDAs_Desert_Terrain1_heightfield_pattern4_patterns"

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [7 x i8] c"linear\00"
@2 = private constant [2 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0)]
@3 = private constant [2 x double] [double 0.000000e+00, double 1.000000e+00]
@density = external global double
@4 = private constant [3 x i8] c"uv\00"
@5 = private constant [3 x i8] c"st\00"
@6 = private constant [8 x i8] c"density\00"

; Function Attrs: alwaysinline nounwind
define private double @"vop_FilterWidth@FF"(double* %x) #0 {
__llvm_entry:
  ret double undef
}

; Function Attrs: alwaysinline nounwind
define private double @"vop_PulseTrain@FFFF"(double* %edge0, double* %x, double* %fwidth) #0 {
__llvm_entry:
  %x2 = load double, double* %x
  %fwidth3 = load double, double* %fwidth
  %output = fmul double %fwidth3, 5.000000e-01
  %output4 = fsub double %x2, %output
  %output7 = fadd double %output4, %fwidth3
  %edge08 = load double, double* %edge0
  %return = call double @"floor@FF"(double %output4)
  %output10 = fmul double %edge08, %return
  %return13 = call double @"frac@FF"(double %output4)
  %return14 = call double @"min@FFF"(double %edge08, double %return13)
  %output15 = fadd double %output10, %return14
  %return18 = call double @"floor@FF"(double %output7)
  %output19 = fmul double %edge08, %return18
  %return22 = call double @"frac@FF"(double %output7)
  %return23 = call double @"min@FFF"(double %edge08, double %return22)
  %output24 = fadd double %output19, %return23
  %output27 = fsub double %output24, %output15
  %output29 = call double @"div@FF"(double %output27, double %fwidth3)
  %output32 = call double @"div@FF"(double 1.000000e+00, double 8.000000e+00)
  %output33 = fmul double %fwidth3, %output32
  %return34 = call double @"clamp@FFFF"(double %output33, double 0.000000e+00, double 1.000000e+00)
  %return35 = call double @"lerp@FFFF"(double %output29, double %edge08, double %return34)
  ret double %return35
}

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"frac@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"min@FFF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #2

; Function Attrs: nounwind
declare double @"lerp@FFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"rotate@4FV"(<16 x double>, double, <3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private <9 x double> @"vop_rotate@33FV"(<9 x double>* %in, double* %angle, <3 x double>* %axis) #0 {
__llvm_entry:
  %in1 = load <9 x double>, <9 x double>* %in
  %angle3 = load double, double* %angle
  %axis4 = load <3 x double>, <3 x double>* %axis
  %output = call <9 x double> @"rotate@3FV"(<9 x double> %in1, double %angle3, <3 x double> %axis4)
  ret <9 x double> %output
}

; Function Attrs: nounwind readnone
declare <9 x double> @"rotate@3FV"(<9 x double>, double, <3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private void @"_obj_HDAs_Desert_Terrain1_heightfield_pattern4_patterns_snippet1@F"(double* %coord) #0 {
__llvm_entry:
  %coord1 = load double, double* %coord
  %return = call double @"mod@FFF"(double 1.000000e+00, double %coord1)
  store double %return, double* %coord
  ret void
}

; Function Attrs: nounwind readnone
declare double @"mod@FFF"(double, double) #1

; Function Attrs: alwaysinline nounwind
define private void @"_obj_HDAs_Desert_Terrain1_heightfield_pattern4_patterns_snippet2@FFFF"(double* %coord, double* %riseoverrun, double* %stepheight, double* %refheight) #0 {
__llvm_entry:
  %coord1 = load double, double* %coord
  %riseoverrun2 = load double, double* %riseoverrun
  %output = fmul double %coord1, %riseoverrun2
  %stepheight3 = load double, double* %stepheight
  %return = fcmp one double %stepheight3, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %refheight6 = load double, double* %refheight
  %output7 = fsub double %output, %refheight6
  %output9 = call double @"div@FF"(double %output7, double %stepheight3)
  %return10 = call double @"floor@FF"(double %output9)
  %output12 = fmul double %return10, %stepheight3
  %output14 = fadd double %output12, %refheight6
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %height.0 = phi double [ %output14, %true ], [ %output, %__llvm_entry ]
  store double %height.0, double* %coord
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"_obj_HDAs_Desert_Terrain1_heightfield_pattern4_patterns_snippet4@UFFFFIFFF"(<2 x double>* %coord, double* %shapeangle, double* %shapeanglerandom, double* %shapesize, double* %shapejitter, i64* %shapesides, double* %shaperoundness, double* %shapehexness, double* %shapesizerandom) #0 {
__llvm_entry:
  %coord1 = load <2 x double>, <2 x double>* %coord
  %return = call <2 x double> @"floor@UU"(<2 x double> %coord1)
  %return2 = call i64 @"neg@II"(i64 1)
  br label %cond

cond:                                             ; preds = %end10, %__llvm_entry
  %dx.0 = phi i64 [ %return2, %__llvm_entry ], [ %output115, %end10 ]
  %result.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %result.2, %end10 ]
  %return4 = call i64 @"le@III"(i64 %dx.0, i64 1)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  br label %cond6

end:                                              ; preds = %cond
  store double %result.0, double* %shapeangle
  ret void

cond6:                                            ; preds = %end109, %body
  %dy.0 = phi i64 [ %return2, %body ], [ %output112, %end109 ]
  %result.1 = phi double [ %result.0, %body ], [ %return105, %end109 ]
  %return9 = call i64 @"le@III"(i64 %dy.0, i64 1)
  %1 = icmp ne i64 %return9, 0
  br i1 %1, label %body7, label %end10

body7:                                            ; preds = %cond6
  %return14 = call double @"getcomp@FUI"(<2 x double> %return, i64 0)
  %cast = sitofp i64 %dx.0 to double
  %output = fadd double %return14, %cast
  %return16 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %return, double %output, i64 0)
  %output18 = extractvalue { double, <2 x double> } %return16, 1
  %return20 = call double @"getcomp@FUI"(<2 x double> %output18, i64 1)
  %cast22 = sitofp i64 %dy.0 to double
  %output23 = fadd double %return20, %cast22
  %return25 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output18, double %output23, i64 1)
  %output27 = extractvalue { double, <2 x double> } %return25, 1
  %return29 = call <4 x double> @"rand@PU"(<2 x double> %output27)
  %coord30 = load <2 x double>, <2 x double>* %coord
  %output32 = call <2 x double> @"sub@UU"(<2 x double> %coord30, <2 x double> %output27)
  %shapesize33 = load double, double* %shapesize
  %return35 = call double @"getcomp@FPI"(<4 x double> %return29, i64 0)
  %shapesizerandom36 = load double, double* %shapesizerandom
  %output37 = fmul double %return35, %shapesizerandom36
  %output38 = fsub double 1.000000e+00, %output37
  %output39 = fmul double %shapesize33, %output38
  %shapeangle40 = load double, double* %shapeangle
  %return42 = call double @"getcomp@FPI"(<4 x double> %return29, i64 1)
  %output43 = fsub double %return42, 5.000000e-01
  %shapeanglerandom44 = load double, double* %shapeanglerandom
  %output45 = fmul double %output43, %shapeanglerandom44
  %output46 = fmul double %output45, 0x400921FB4D12D84A
  %output47 = fmul double %output46, 2.000000e+00
  %output48 = fadd double %shapeangle40, %output47
  %return50 = call double @"getcomp@FUI"(<2 x double> %output32, i64 0)
  %return52 = call double @"getcomp@FPI"(<4 x double> %return29, i64 2)
  %output53 = fsub double %return52, 5.000000e-01
  %shapejitter54 = load double, double* %shapejitter
  %output55 = fmul double %output53, %shapejitter54
  %output56 = fadd double %return50, %output55
  %return58 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output32, double %output56, i64 0)
  %output60 = extractvalue { double, <2 x double> } %return58, 1
  %return62 = call double @"getcomp@FUI"(<2 x double> %output60, i64 1)
  %return64 = call double @"getcomp@FPI"(<4 x double> %return29, i64 3)
  %output65 = fsub double %return64, 5.000000e-01
  %shapejitter66 = load double, double* %shapejitter
  %output67 = fmul double %output65, %shapejitter66
  %output68 = fadd double %return62, %output67
  %return70 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output60, double %output68, i64 1)
  %output72 = extractvalue { double, <2 x double> } %return70, 1
  %cast75 = call <2 x double> @"set@UF"(double %output39)
  %output76 = call <2 x double> @"div@UU"(<2 x double> %output72, <2 x double> %cast75)
  %return78 = call double @"length2@FU"(<2 x double> %output76)
  %return80 = call double @"getcomp@FUI"(<2 x double> %output76, i64 0)
  %return82 = call double @"getcomp@FUI"(<2 x double> %output76, i64 1)
  %return83 = call double @"atan2@FFF"(double %return80, double %return82)
  %output85 = fadd double %return83, %output48
  %shapesides87 = load i64, i64* %shapesides
  %cast88 = sitofp i64 %shapesides87 to double
  %output89 = fmul double %output85, %cast88
  %output90 = call double @"div@FF"(double %output89, double 2.000000e+00)
  %return91 = call double @"cos@FF"(double %output90)
  %return92 = call double @"abs@FF"(double %return91)
  %shaperoundness93 = load double, double* %shaperoundness
  %return94 = call double @"pow@FFF"(double %return92, double %shaperoundness93)
  %shapehexness96 = load double, double* %shapehexness
  %output97 = fmul double %return94, %shapehexness96
  %output101 = fadd double %return78, %output97
  %return102 = fcmp olt double %output101, 1.000000e+00
  %return103 = zext i1 %return102 to i64
  %cast104 = sitofp i64 %return103 to double
  %return105 = call double @"max@FFF"(double %result.1, double %cast104)
  %return107 = fcmp oeq double %return105, 1.000000e+00
  br i1 %return107, label %end10, label %end109

end10:                                            ; preds = %body7, %cond6
  %result.2 = phi double [ %return105, %body7 ], [ %result.1, %cond6 ]
  %output115 = add i64 %dx.0, 1
  br label %cond

end109:                                           ; preds = %body7
  %output112 = add i64 %dy.0, 1
  br label %cond6
}

; Function Attrs: nounwind readnone
declare <2 x double> @"floor@UU"(<2 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"le@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #1

; Function Attrs: alwaysinline
define private { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <2 x double> @"setcomp@UFI"(<2 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <2 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <2 x double> } %mrv, <2 x double> %rw16, 1
  ret { double, <2 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #1

; Function Attrs: nounwind
declare <4 x double> @"rand@PU"(<2 x double>) #2

; Function Attrs: nounwind readnone
declare <2 x double> @"sub@UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FPI"(<4 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UF"(double) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"div@UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind
declare double @"length2@FU"(<2 x double>) #2

; Function Attrs: nounwind readnone
declare double @"atan2@FFF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #1

; Function Attrs: nounwind
declare double @"abs@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"pow@FFF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #1

; Function Attrs: nounwind
define void @obj_HDAs_Desert_Terrain1_heightfield_pattern4_patterns(<3 x double> %P, i64 %ix, i64 %iy, i64 %iz, i64 %resx, i64 %resy, i64 %resz, <3 x double> %dPdx, <3 x double> %dPdy, <3 x double> %dPdz, <3 x double> %center, double %Time, double %Timeinc, double %Frame, i8* %OpInput2, i8* %OpInput3, i8* %OpInput4, i8* %OpInput1, double %density, double %parm_amp, i64 %parm_rampmirror, double %parm_angle, <2 x double> %parm_center, i64 %parm_shapemethod, double %parm_size, <2 x double> %parm_scale, double %parm_phase, double %parm_verticaloffset, double %parm_riseoverrun, double %parm_stepheight, double %parm_referenceheight, <3 x double> %uv, <2 x double> %st, double %parm_stripewidth, double %parm_shaperotate, double %parm_shapeangleradom, double %parm_shapesize, double %parm_shapejitter, i64 %parm_shapesides, double %parm_shaperoundness, double %parm_shapehexness, double %parm_shapesizerandom, double %parm_voronoijitter, double %parm_voronoiwall, i64 %parm_rampmode, i8** %parm_rampremap_the_basis_strings, double* %parm_rampremap_the_key_positions, double* %parm_rampremap_the_key_values, i64 %parm_ramprepeat) #2 {
__llvm_entry:
  %outcoord = alloca double
  %outcoord1 = alloca double
  %outshapeangle = alloca double
  %0 = alloca <9 x double>
  %1 = alloca double
  %2 = alloca <3 x double>
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  %6 = alloca double
  %7 = alloca double
  %8 = alloca double
  %9 = alloca double
  %10 = alloca <2 x double>
  %11 = alloca double
  %12 = alloca double
  %13 = alloca double
  %14 = alloca i64
  %15 = alloca double
  %16 = alloca double
  %17 = alloca double
  store double 0.000000e+00, double* %outcoord, !vex-initializer-store !3
  store double 0.000000e+00, double* %outcoord1, !vex-initializer-store !3
  store double 0.000000e+00, double* %outshapeangle, !vex-initializer-store !3
  %cast = sitofp i64 %resx to double
  %return = call double @"neg@FF"(double 5.000000e-01)
  %output = fmul double %cast, %return
  %cast8 = call <3 x double> @"set@VF"(double %output)
  %output9 = call <3 x double> @"mul@VV"(<3 x double> %dPdx, <3 x double> %cast8)
  %cast11 = sitofp i64 %resy to double
  %output14 = fmul double %cast11, %return
  %cast17 = call <3 x double> @"set@VF"(double %output14)
  %output18 = call <3 x double> @"mul@VV"(<3 x double> %dPdy, <3 x double> %cast17)
  %cast20 = sitofp i64 %resz to double
  %output23 = fmul double %cast20, %return
  %cast26 = call <3 x double> @"set@VF"(double %output23)
  %output27 = call <3 x double> @"mul@VV"(<3 x double> %dPdz, <3 x double> %cast26)
  %output30 = call <3 x double> @"add@VV"(<3 x double> %center, <3 x double> %output9)
  %return36 = call double @"length@FV"(<3 x double> %output9)
  %return38 = call double @"length@FV"(<3 x double> %output18)
  %return40 = call double @"length@FV"(<3 x double> %output27)
  %cast49 = sitofp i64 %ix to double
  %cast51 = sitofp i64 %iy to double
  %cast53 = sitofp i64 %iz to double
  %return61 = call <3 x double> @"set@VFFF"(double %cast, double %cast11, double %cast20)
  %return63 = call i64 @"neg@II"(i64 1)
  %cast64 = call <3 x double> @"set@VI"(i64 %return63)
  %return92 = call <3 x double> @"normalize@VV"(<3 x double> %dPdx)
  %output94 = call { double, double } @"assign@FFU"(<2 x double> %parm_center)
  %output95 = extractvalue { double, double } %output94, 0
  %output96 = extractvalue { double, double } %output94, 1
  %cast99 = call <3 x double> @"set@VF"(double %output95)
  %output100 = call <3 x double> @"mul@VV"(<3 x double> %return92, <3 x double> %cast99)
  %return102 = call <3 x double> @"normalize@VV"(<3 x double> %dPdy)
  %cast105 = call <3 x double> @"set@VF"(double %output96)
  %output106 = call <3 x double> @"mul@VV"(<3 x double> %return102, <3 x double> %cast105)
  %output109 = call <3 x double> @"add@VV"(<3 x double> %output100, <3 x double> %output106)
  %output112 = call <3 x double> @"sub@VV"(<3 x double> %P, <3 x double> %output109)
  %return114 = call double @"radians@FF"(double %parm_angle)
  %return116 = call double @"neg@FF"(double %return114)
  %return118 = call <3 x double> @"normalize@VV"(<3 x double> %dPdz)
  store <9 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>, <9 x double>* %0
  store double %return116, double* %1
  store <3 x double> %return118, <3 x double>* %2
  %vop_rotate = call <9 x double> @"vop_rotate@33FV"(<9 x double>* %0, double* %1, <3 x double>* %2)
  %output123 = call <3 x double> @"mul@V3"(<3 x double> %output112, <9 x double> %vop_rotate)
  %return126 = call double @"dot@FVV"(<3 x double> %output123, <3 x double> %return92)
  %return129 = call double @"dot@FVV"(<3 x double> %output123, <3 x double> %return102)
  %return132 = call <2 x double> @"set@UFF"(double %return126, double %return129)
  %cast135 = call <2 x double> @"set@UF"(double %parm_size)
  %output136 = call <2 x double> @"mul@UU"(<2 x double> %parm_scale, <2 x double> %cast135)
  %output139 = call <2 x double> @"div@UU"(<2 x double> %return132, <2 x double> %output136)
  %output141 = call { double, double } @"assign@FFU"(<2 x double> %output139)
  %output142 = extractvalue { double, double } %output141, 0
  %output143 = extractvalue { double, double } %output141, 1
  %output146 = fadd double %output142, %parm_phase
  %return148 = call double @"length@FU"(<2 x double> %output139)
  %output151 = fadd double %return148, %parm_phase
  %return154 = call double @"atan@FFF"(double %output143, double %output142)
  %return156 = call double @"neg@FF"(double 0x400921FB54442D18)
  %return157 = call double @"fit@FFFFFF"(double %return154, double %return156, double 0x400921FB54442D18, double 0.000000e+00, double 1.000000e+00)
  %output160 = fadd double %return157, %parm_phase
  %return162 = call double @"mod@FFF"(double %output160, double 1.000000e+00)
  %return164 = call i64 @"eq@III"(i64 %parm_rampmode, i64 0)
  %18 = icmp ne i64 %return164, 0
  br i1 %18, label %true, label %false

true:                                             ; preds = %__llvm_entry
  br label %end

false:                                            ; preds = %__llvm_entry
  %return167 = call i64 @"eq@III"(i64 %parm_rampmode, i64 1)
  %19 = icmp ne i64 %return167, 0
  br i1 %19, label %true168, label %false169

end:                                              ; preds = %true168, %false169, %true
  %result1.0 = phi double [ %output146, %true ], [ %output151, %true168 ], [ %return162, %false169 ]
  %return174 = call double @"clamp@FFFF"(double %result1.0, double 0.000000e+00, double 9.999000e-01)
  %return175 = call i64 @"ne@III"(i64 0, i64 0)
  %20 = icmp ne i64 %return175, 0
  %return180 = call i64 @"ne@III"(i64 %parm_ramprepeat, i64 0)
  %21 = icmp ne i64 %return180, 0
  br i1 %20, label %true176, label %false177

true168:                                          ; preds = %false
  br label %end

false169:                                         ; preds = %false
  br label %end

true176:                                          ; preds = %end
  %phi = select i1 %21, double %return174, double %result1.0
  br label %end178

false177:                                         ; preds = %end
  %phi193 = select i1 %21, double %result1.0, double %return174
  br label %end178

end178:                                           ; preds = %false177, %true176
  %phi194 = phi double [ %phi, %true176 ], [ %phi193, %false177 ]
  %return196 = call double @"mod@FFF"(double %phi194, double 2.000000e+00)
  %output198 = fsub double %return196, 1.000000e+00
  %return200 = call double @"abs@FF"(double %output198)
  %return202 = call double @"neg@FF"(double %return200)
  %output204 = fadd double %return202, 1.000000e+00
  %return206 = call double @"mod@FFF"(double %phi194, double 1.000000e+00)
  %return212 = call i64 @"ne@III"(i64 %parm_rampmirror, i64 0)
  %22 = icmp ne i64 %return212, 0
  br i1 %20, label %true208, label %false209

true208:                                          ; preds = %end178
  %phi218 = select i1 %22, double %return206, double %output204
  br label %end210

false209:                                         ; preds = %end178
  %phi226 = select i1 %22, double %output204, double %return206
  br label %end210

end210:                                           ; preds = %false209, %true208
  %phi227 = phi double [ %phi218, %true208 ], [ %phi226, %false209 ]
  %return232 = call double @"spline@F[SF[F[F"(i8** %parm_rampremap_the_basis_strings, double %phi227, double* %parm_rampremap_the_key_values, double* %parm_rampremap_the_key_positions)
  store double %output146, double* %outcoord
  call void @"_obj_HDAs_Desert_Terrain1_heightfield_pattern4_patterns_snippet1@F"(double* %outcoord)
  store double %output146, double* %outcoord1
  store double %parm_riseoverrun, double* %3
  store double %parm_stepheight, double* %4
  store double %parm_referenceheight, double* %5
  call void @"_obj_HDAs_Desert_Terrain1_heightfield_pattern4_patterns_snippet2@FFFF"(double* %outcoord1, double* %3, double* %4, double* %5)
  %return244 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i64 0, i64 0))
  %return245 = call i64 @"isbound@IS"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0))
  %return246 = call i64 @"isbound@IS"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i64 0, i64 0))
  %cast248 = call <3 x double> @"set@VU"(<2 x double> %st)
  %return250 = call i64 @"eq@III"(i64 %return246, i64 0)
  %23 = icmp ne i64 %return250, 0
  br i1 %23, label %true251, label %false252

true251:                                          ; preds = %end210
  br label %end253

false252:                                         ; preds = %end210
  br label %end253

end253:                                           ; preds = %false252, %true251
  %result4.0 = phi <3 x double> [ zeroinitializer, %true251 ], [ %cast248, %false252 ]
  %return257 = call i64 @"eq@III"(i64 %return245, i64 0)
  %24 = icmp ne i64 %return257, 0
  br i1 %24, label %true258, label %false259

true258:                                          ; preds = %end253
  br label %end260

false259:                                         ; preds = %end253
  br label %end260

end260:                                           ; preds = %false259, %true258
  %result5.0 = phi <3 x double> [ %result4.0, %true258 ], [ %uv, %false259 ]
  %return264 = call i64 @"eq@III"(i64 %return244, i64 0)
  %25 = icmp ne i64 %return264, 0
  br i1 %25, label %true265, label %false266

true265:                                          ; preds = %end260
  br label %end267

false266:                                         ; preds = %end260
  br label %end267

end267:                                           ; preds = %false266, %true265
  %result6.0 = phi <3 x double> [ %result5.0, %true265 ], [ zeroinitializer, %false266 ]
  %output271 = call { double, double, double } @"assign@FFFV"(<3 x double> %result6.0)
  %output272 = extractvalue { double, double, double } %output271, 0
  %return279 = call i64 @"ne@III"(i64 1, i64 0)
  %26 = icmp ne i64 %return279, 0
  %phi285 = select i1 %26, double %output146, double %output272
  %output293 = fsub double 1.000000e+00, %parm_stripewidth
  store double %output293, double* %6
  store double %phi285, double* %7
  %vop_FilterWidth = call double @"vop_FilterWidth@FF"(double* %9)
  store double 2.500000e-02, double* %8
  %vop_PulseTrain = call double @"vop_PulseTrain@FFFF"(double* %6, double* %7, double* %8)
  %output297 = fsub double 1.000000e+00, %vop_PulseTrain
  %return300 = call double @"radians@FF"(double %parm_shaperotate)
  store double %return300, double* %outshapeangle
  store <2 x double> %output139, <2 x double>* %10
  store double %parm_shapeangleradom, double* %11
  store double %parm_shapesize, double* %12
  store double %parm_shapejitter, double* %13
  store i64 %parm_shapesides, i64* %14
  store double %parm_shaperoundness, double* %15
  store double %parm_shapehexness, double* %16
  store double %parm_shapesizerandom, double* %17
  call void @"_obj_HDAs_Desert_Terrain1_heightfield_pattern4_patterns_snippet4@UFFFFIFFF"(<2 x double>* %10, double* %outshapeangle, double* %11, double* %12, double* %13, i64* %14, double* %15, double* %16, double* %17)
  %cast319 = call <3 x double> @"set@VU"(<2 x double> %output139)
  %output321 = call <3 x double> @"setcomp@VFI"(<3 x double> %cast319, double 0.000000e+00, i64 2)
  %return324 = call <3 x double> @"set@VFFF"(double %parm_voronoijitter, double %parm_voronoijitter, double 0.000000e+00)
  %output339 = call <3 x double> @"mul@VV"(<3 x double> %output321, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  %output340 = call <3 x double> @"sub@VV"(<3 x double> %output339, <3 x double> zeroinitializer)
  %output342 = call { i64, double, double, <3 x double>, <3 x double> } @"vnoise@VVIFFVV"(<3 x double> %output340, <3 x double> %return324)
  %output344 = extractvalue { i64, double, double, <3 x double>, <3 x double> } %output342, 1
  %output345 = extractvalue { i64, double, double, <3 x double>, <3 x double> } %output342, 2
  %output350 = fsub double %output344, %output345
  %return352 = call double @"abs@FF"(double %output350)
  %return355 = fcmp olt double %return352, %parm_voronoiwall
  %return356 = zext i1 %return355 to i64
  %cast358 = sitofp i64 %return356 to double
  %return360 = call i64 @"eq@III"(i64 %parm_shapemethod, i64 0)
  %27 = icmp ne i64 %return360, 0
  br i1 %27, label %true361, label %false362

true361:                                          ; preds = %end267
  br label %end363

false362:                                         ; preds = %end267
  %return366 = call i64 @"eq@III"(i64 %parm_shapemethod, i64 1)
  %28 = icmp ne i64 %return366, 0
  br i1 %28, label %true367, label %false368

end363:                                           ; preds = %true385, %false386, %true379, %true373, %true367, %true361
  %result8.0 = phi double [ %return232, %true361 ], [ %outcoord370, %true367 ], [ %outcoord1376, %true373 ], [ %output297, %true379 ], [ %outshapeangle388, %true385 ], [ %cast358, %false386 ]
  %output392 = fmul double %result8.0, %parm_amp
  %output395 = fadd double %output392, %parm_verticaloffset
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @6, i64 0, i64 0), double %output395) #4
  store double %gvalue, double* @density
  ret void

true367:                                          ; preds = %false362
  %outcoord370 = load double, double* %outcoord
  br label %end363

false368:                                         ; preds = %false362
  %return372 = call i64 @"eq@III"(i64 %parm_shapemethod, i64 2)
  %29 = icmp ne i64 %return372, 0
  br i1 %29, label %true373, label %false374

true373:                                          ; preds = %false368
  %outcoord1376 = load double, double* %outcoord1
  br label %end363

false374:                                         ; preds = %false368
  %return378 = call i64 @"eq@III"(i64 %parm_shapemethod, i64 3)
  %30 = icmp ne i64 %return378, 0
  br i1 %30, label %true379, label %false380

true379:                                          ; preds = %false374
  br label %end363

false380:                                         ; preds = %false374
  %return384 = call i64 @"eq@III"(i64 %parm_shapemethod, i64 4)
  %31 = icmp ne i64 %return384, 0
  br i1 %31, label %true385, label %false386

true385:                                          ; preds = %false380
  %outshapeangle388 = load double, double* %outshapeangle
  br label %end363

false386:                                         ; preds = %false380
  br label %end363
}

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind
declare { double, double } @"assign@FFU"(<2 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"radians@FF"(double) #2

; Function Attrs: nounwind
declare <3 x double> @"mul@V3"(<3 x double>, <9 x double>) #2

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"mul@UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #2

; Function Attrs: nounwind readnone
declare double @"atan@FFF"(double, double) #1

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"spline@F[SF[F[F"(i8**, double, double*, double*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"isbound@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VU"(<2 x double>) #1

; Function Attrs: nounwind
declare { double, double, double } @"assign@FFFV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare { i64, double, double, <3 x double>, <3 x double> } @"vnoise@VVIFFVVIII"(<3 x double>, <3 x double>, i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, double, double, <3 x double>, <3 x double> } @"vnoise@VVIFFVV"(<3 x double>, <3 x double>) #1

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_HDAs_Desert_Terrain1_heightfield_pattern4_patterns(<3 x double> zeroinitializer, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), double 0.000000e+00, double 0.000000e+00, i64 0, double 6.600000e-01, <2 x double> zeroinitializer, i64 0, double 1.000000e+02, <2 x double> <double 1.000000e+00, double 1.000000e+00>, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, <3 x double> zeroinitializer, <2 x double> zeroinitializer, double 5.000000e-01, double 0.000000e+00, double 0.000000e+00, double 5.000000e-01, double 0.000000e+00, i64 0, double 0.000000e+00, double 0.000000e+00, double 5.000000e-01, double 0.000000e+00, double 0.000000e+00, i64 0, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @2, i64 0, i64 0), double* getelementptr inbounds ([2 x double], [2 x double]* @3, i64 0, i64 0), double* getelementptr inbounds ([2 x double], [2 x double]* @3, i64 0, i64 0), i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end

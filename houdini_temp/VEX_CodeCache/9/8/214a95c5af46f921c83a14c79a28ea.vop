;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [18 x i8] c"AverageEdgeLength\00"
@1 = private constant [10 x i8] c"Threshold\00"
@2 = private constant [7 x i8] c"lhedge\00"
@3 = private constant [2 x i8] c"P\00"
@4 = private constant [3 x i8] c"uv\00"
@5 = private constant [4 x i8] c"set\00"
@6 = private constant [5 x i8] c"poly\00"
@ldist = external global double
@lhedge = external global i64
@primnum = external global i64
@P = external global <3 x double>
@7 = private constant [6 x i8] c"ldist\00"
@8 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FIIV"(double* %_bound_ldist, i64* %_bound_lhedge, i64* %_bound_primnum, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @0, i64 0, i64 0))
  %return1 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0))
  %_bound_ldist2 = load double, double* %_bound_ldist
  %output = fmul double %return, %return1
  %return5 = fcmp ogt double %_bound_ldist2, %output
  br i1 %return5, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_lhedge7 = load i64, i64* %_bound_lhedge
  %return8 = call i64 @"hedge_equivcount@III"(i64 0, i64 %_bound_lhedge7)
  %return9 = call i64 @"eq@III"(i64 %return8, i64 2)
  %0 = icmp ne i64 %return9, 0
  br i1 %0, label %true10, label %end11

end:                                              ; preds = %end11, %true75, %end21, %true10, %__llvm_entry
  ret void

true10:                                           ; preds = %true
  %_bound_lhedge12 = load i64, i64* %_bound_lhedge
  %return13 = call i64 @"hedge_nextequiv@III"(i64 0, i64 %_bound_lhedge12)
  %return15 = call i64 @"hedge_prim@III"(i64 0, i64 %return13)
  %return18 = call i64 @"prim@IISI"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), i64 %return15)
  %return19 = call i64 @"ne@III"(i64 %return13, i64 %return18)
  %1 = icmp ne i64 %return19, 0
  br i1 %1, label %end, label %end21

end11:                                            ; preds = %end26, %true
  %_bound_lhedge72 = load i64, i64* %_bound_lhedge
  %return73 = call i64 @"hedge_equivcount@III"(i64 0, i64 %_bound_lhedge72)
  %return74 = call i64 @"eq@III"(i64 %return73, i64 1)
  %2 = icmp ne i64 %return74, 0
  br i1 %2, label %true75, label %end

end21:                                            ; preds = %true10
  %_bound_primnum22 = load i64, i64* %_bound_primnum
  %return24 = call i64 @"lt@III"(i64 %_bound_primnum22, i64 %return15)
  %3 = icmp ne i64 %return24, 0
  br i1 %3, label %end, label %end26

end26:                                            ; preds = %end21
  %_bound_lhedge27 = load i64, i64* %_bound_lhedge
  %return28 = call i64 @"hedge_next@III"(i64 0, i64 %_bound_lhedge27)
  %return29 = call i64 @"hedge_dstpoint@III"(i64 0, i64 %return28)
  %_bound_lhedge30 = load i64, i64* %_bound_lhedge
  %return31 = call i64 @"hedge_srcpoint@III"(i64 0, i64 %_bound_lhedge30)
  %_bound_lhedge32 = load i64, i64* %_bound_lhedge
  %return33 = call i64 @"hedge_nextequiv@III"(i64 0, i64 %_bound_lhedge32)
  %return34 = call i64 @"hedge_next@III"(i64 0, i64 %return33)
  %return35 = call i64 @"hedge_dstpoint@III"(i64 0, i64 %return34)
  %_bound_lhedge36 = load i64, i64* %_bound_lhedge
  %return37 = call i64 @"hedge_dstpoint@III"(i64 0, i64 %_bound_lhedge36)
  %_bound_P38 = load <3 x double>, <3 x double>* %_bound_P
  %return40 = call <3 x double> @"prim@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), i64 %return15)
  %return41 = call <3 x double> @"avg@VVV"(<3 x double> %_bound_P38, <3 x double> %return40)
  %return42 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return41)
  %return44 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), i64 %return31)
  %return46 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), i64 %return35)
  %return50 = call <3 x double> @"avg@VVV"(<3 x double> %return44, <3 x double> %return46)
  %return51 = call i64 @"setpointattrib@IISIVS"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), i64 %return42, <3 x double> %return50, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @5, i64 0, i64 0))
  %_bound_primnum52 = load i64, i64* %_bound_primnum
  %return53 = call i64 @"removeprim@IIII"(i64 0, i64 %_bound_primnum52, i64 0)
  %return55 = call i64 @"removeprim@IIII"(i64 0, i64 %return15, i64 0)
  %return59 = call i64 @"addprim@IISIII"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i64 0, i64 0), i64 %return29, i64 %return31, i64 %return42)
  %return63 = call i64 @"addprim@IISIII"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i64 0, i64 0), i64 %return31, i64 %return35, i64 %return42)
  %return67 = call i64 @"addprim@IISIII"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i64 0, i64 0), i64 %return35, i64 %return37, i64 %return42)
  %return71 = call i64 @"addprim@IISIII"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i64 0, i64 0), i64 %return37, i64 %return29, i64 %return42)
  br label %end11

true75:                                           ; preds = %end11
  %_bound_lhedge78 = load i64, i64* %_bound_lhedge
  %return79 = call i64 @"hedge_next@III"(i64 0, i64 %_bound_lhedge78)
  %return80 = call i64 @"hedge_dstpoint@III"(i64 0, i64 %return79)
  %_bound_lhedge82 = load i64, i64* %_bound_lhedge
  %return83 = call i64 @"hedge_srcpoint@III"(i64 0, i64 %_bound_lhedge82)
  %_bound_lhedge85 = load i64, i64* %_bound_lhedge
  %return86 = call i64 @"hedge_dstpoint@III"(i64 0, i64 %_bound_lhedge85)
  %return89 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), i64 %return83)
  %return91 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), i64 %return86)
  %return92 = call <3 x double> @"avg@VVV"(<3 x double> %return89, <3 x double> %return91)
  %return93 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return92)
  %return96 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), i64 %return83)
  %return99 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), i64 %return86)
  %return103 = call <3 x double> @"avg@VVV"(<3 x double> %return96, <3 x double> %return99)
  %return104 = call i64 @"setpointattrib@IISIVS"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), i64 %return93, <3 x double> %return103, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @5, i64 0, i64 0))
  %_bound_primnum105 = load i64, i64* %_bound_primnum
  %return106 = call i64 @"removeprim@IIII"(i64 0, i64 %_bound_primnum105, i64 0)
  %return110 = call i64 @"addprim@IISIII"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i64 0, i64 0), i64 %return80, i64 %return83, i64 %return93)
  %return114 = call i64 @"addprim@IISIII"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i64 0, i64 0), i64 %return80, i64 %return93, i64 %return86)
  br label %end
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"hedge_equivcount@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"hedge_nextequiv@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"hedge_prim@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"prim@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"hedge_next@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"hedge_dstpoint@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"hedge_srcpoint@III"(i64, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"prim@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"avg@VVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIVS"(i64, i8*, i64, <3 x double>, i8*) #2

; Function Attrs: nounwind
declare i64 @"removeprim@IIII"(i64, i64, i64) #2

; Function Attrs: nounwind
declare i64 @"addprim@IISIII"(i64, i8*, i64, i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(double %ldist, i64 %lhedge, i64 %primnum, <3 x double> %P) #2 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca <3 x double>
  store double %ldist, double* %0
  store i64 %lhedge, i64* %1
  store i64 %primnum, i64* %2
  store <3 x double> %P, <3 x double>* %3
  call void @"__vex_snippet_snippet@FIIV"(double* %0, i64* %1, i64* %2, <3 x double>* %3)
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @7, i64 0, i64 0), double %ldist) #3
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), i64 %lhedge) #3
  %gvalue8 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0), i64 %primnum) #3
  %gvalue10 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %P) #3
  store double %gvalue, double* @ldist
  store i64 %gvalue6, i64* @lhedge
  store i64 %gvalue8, i64* @primnum
  store <3 x double> %gvalue10, <3 x double>* @P
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, i64 0, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

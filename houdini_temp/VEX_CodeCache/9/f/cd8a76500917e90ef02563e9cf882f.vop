;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"weld\00"
@1 = private constant [3 x i8] c"id\00"
@weld = external global i64

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@III"(i64* %_bound_weld, i64* %_bound_id, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound_weld1 = load i64, i64* %_bound_weld
  %return = call i64 @"ge@III"(i64 %_bound_weld1, i64 0)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return3 = call i64 @"idtopoint@III"(i64 0, i64 %_bound_weld1)
  %return5 = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0), i64 %return3)
  %return7 = call i64 @"ge@III"(i64 %return5, i64 0)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %true8, label %end

end:                                              ; preds = %true, %true8, %__llvm_entry
  %return11 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0))
  %2 = icmp ne i64 %return11, 0
  %_bound_weld14 = load i64, i64* %_bound_weld
  br i1 %2, label %true12, label %false

true8:                                            ; preds = %true
  store i64 %return5, i64* %_bound_weld
  br label %end

true12:                                           ; preds = %end
  %_bound_id15 = load i64, i64* %_bound_id
  %return16 = call i64 @"eq@III"(i64 %_bound_weld14, i64 %_bound_id15)
  %3 = icmp ne i64 %return16, 0
  br i1 %3, label %true17, label %end13

false:                                            ; preds = %end
  %_bound_ptnum21 = load i64, i64* %_bound_ptnum
  %return22 = call i64 @"eq@III"(i64 %_bound_weld14, i64 %_bound_ptnum21)
  %4 = icmp ne i64 %return22, 0
  br i1 %4, label %true23, label %end13

end13:                                            ; preds = %false, %true23, %true12, %true17
  ret void

true17:                                           ; preds = %true12
  %return19 = call i64 @"neg@II"(i64 1)
  store i64 %return19, i64* %_bound_weld
  br label %end13

true23:                                           ; preds = %false
  %return25 = call i64 @"neg@II"(i64 1)
  store i64 %return25, i64* %_bound_weld
  br label %end13
}

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"idtopoint@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"haspointattrib@IIS"(i64, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %weld, i64 %id, i64 %ptnum) #2 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %"<weld>" = alloca i64
  store i64 %weld, i64* %"<weld>"
  store i64 %id, i64* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@III"(i64* %"<weld>", i64* %0, i64* %1)
  %evalue = load i64, i64* %"<weld>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0), i64 %evalue) #3
  store i64 %gvalue, i64* @weld
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 -1, i64 -1, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

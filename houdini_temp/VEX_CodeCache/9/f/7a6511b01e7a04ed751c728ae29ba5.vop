;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [0 x double] zeroinitializer
@isclosed = external global i64
@edgeneighbours = external global i64*
@ptnum = external global i64
@sourcept_indices = external global i64*
@sourcept_weights = external global double*
@group_curveedgepts_subdivide = external global i64
@2 = private constant [9 x i8] c"isclosed\00"
@3 = private constant [15 x i8] c"edgeneighbours\00"
@4 = private constant [6 x i8] c"ptnum\00"
@5 = private constant [17 x i8] c"sourcept_indices\00"
@6 = private constant [17 x i8] c"sourcept_weights\00"
@7 = private constant [29 x i8] c"group_curveedgepts_subdivide\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I[II[I[FI"(i64* %_bound_isclosed, i64** %_bound_edgeneighbours, i64* %_bound_ptnum, i64** %_bound_sourcept_indices, double** %_bound_sourcept_weights, i64* %_bound_group_curveedgepts_subdivide) #0 {
__llvm_entry:
  %_bound_isclosed1 = load i64, i64* %_bound_isclosed
  %return = call i64 @"not@II"(i64 %_bound_isclosed1)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_edgeneighbours2 = load i64*, i64** %_bound_edgeneighbours
  %output = call double @"div@FF"(double 6.000000e+00, double 8.000000e+00)
  %output3 = call double @"div@FF"(double 1.000000e+00, double 8.000000e+00)
  %_bound_ptnum4 = load i64, i64* %_bound_ptnum
  %return5 = call i64* @"array@[I:I"(i64 %_bound_ptnum4)
  %return7 = call double* @"array@[F:F"(double %output)
  %return9 = call i64 @"len@I[I"(i64* %_bound_edgeneighbours2)
  br label %cond

end:                                              ; preds = %end13, %__llvm_entry
  ret void

cond:                                             ; preds = %body, %true
  %indices.0 = phi i64* [ %return5, %true ], [ %output19, %body ]
  %weights.0 = phi double* [ %return7, %true ], [ %output22, %body ]
  %__impl_foreach_index_10.0 = phi i64 [ 0, %true ], [ %output24, %body ]
  %return12 = call i64 @"lt@III"(i64 %__impl_foreach_index_10.0, i64 %return9)
  %1 = icmp ne i64 %return12, 0
  br i1 %1, label %body, label %end13

body:                                             ; preds = %cond
  %return16 = call i64 @"getcomp@I[II"(i64* %_bound_edgeneighbours2, i64 %__impl_foreach_index_10.0)
  %output19 = call i64* @"append@[II"(i64* %indices.0, i64 %return16)
  %output22 = call double* @"append@[FF"(double* %weights.0, double %output3)
  %output24 = add i64 %__impl_foreach_index_10.0, 1
  br label %cond

end13:                                            ; preds = %cond
  store i64* %indices.0, i64** %_bound_sourcept_indices
  store double* %weights.0, double** %_bound_sourcept_weights
  store i64 1, i64* %_bound_group_curveedgepts_subdivide
  br label %end
}

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare i64* @"array@[I:I"(i64) #1

; Function Attrs: nounwind readnone
declare double* @"array@[F:F"(double) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #2

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %isclosed, i64* %edgeneighbours, i64 %ptnum, i64* %sourcept_indices, double* %sourcept_weights, i64 %group_curveedgepts_subdivide) #2 {
__llvm_entry:
  %"<sourcept_indices>" = alloca i64*
  %"<sourcept_weights>" = alloca double*
  %"<group_curveedgepts_subdivide>" = alloca i64
  %0 = alloca i64
  %1 = alloca i64*
  %2 = alloca i64
  store i64* %sourcept_indices, i64** %"<sourcept_indices>"
  store double* %sourcept_weights, double** %"<sourcept_weights>"
  store i64 %group_curveedgepts_subdivide, i64* %"<group_curveedgepts_subdivide>"
  store i64 %isclosed, i64* %0
  store i64* %edgeneighbours, i64** %1
  store i64 %ptnum, i64* %2
  call void @"__vex_snippet_snippet@I[II[I[FI"(i64* %0, i64** %1, i64* %2, i64** %"<sourcept_indices>", double** %"<sourcept_weights>", i64* %"<group_curveedgepts_subdivide>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), i64 %isclosed) #3
  %gvalue5 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @3, i64 0, i64 0), i64* %edgeneighbours) #3
  %gvalue7 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #3
  %evalue8 = load i64*, i64** %"<sourcept_indices>"
  %gvalue9 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @5, i64 0, i64 0), i64* %evalue8) #3
  %evalue10 = load double*, double** %"<sourcept_weights>"
  %gvalue11 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @6, i64 0, i64 0), double* %evalue10) #3
  %evalue12 = load i64, i64* %"<group_curveedgepts_subdivide>"
  %gvalue13 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @7, i64 0, i64 0), i64 %evalue12) #3
  store i64 %gvalue, i64* @isclosed
  store i64* %gvalue5, i64** @edgeneighbours
  store i64 %gvalue7, i64* @ptnum
  store i64* %gvalue9, i64** @sourcept_indices
  store double* %gvalue11, double** @sourcept_weights
  store i64 %gvalue13, i64* @group_curveedgepts_subdivide
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i64* @"_export@[IS[I"(i8*, i64*)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

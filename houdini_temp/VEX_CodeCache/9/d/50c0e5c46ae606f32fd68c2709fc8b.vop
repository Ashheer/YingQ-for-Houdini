;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [20 x i8] c"../fractureperpiece\00"
@1 = private constant [5 x i8] c"prim\00"
@2 = private constant [15 x i8] c"../pieceattrib\00"
@primnum = external global i64
@3 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_primnum) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"not@II"(i64 %return)
  %0 = icmp ne i64 %return1, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %true23, %true38, %false24, %true6, %true17, %__llvm_entry
  ret void

end:                                              ; preds = %__llvm_entry
  %return2 = call i8* @"chs@SS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i64 0, i64 0))
  %return3 = call i64 @"attribtype@IISS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* %return2)
  %return5 = call i64 @"eq@III"(i64 %return3, i64 2)
  %1 = icmp ne i64 %return5, 0
  br i1 %1, label %true6, label %false

true6:                                            ; preds = %end
  %return9 = call { i8*, i64 } @"primattrib@SISII"(i64 1, i8* %return2, i64 0)
  %return10 = extractvalue { i8*, i64 } %return9, 0
  %_bound_primnum12 = load i64, i64* %_bound_primnum
  %return13 = call i8* @"prim@SISI"(i64 0, i8* %return2, i64 %_bound_primnum12)
  %return16 = call i64 @"ne@ISS"(i8* %return13, i8* %return10)
  %2 = icmp ne i64 %return16, 0
  br i1 %2, label %true17, label %true

false:                                            ; preds = %end
  %return22 = call i64 @"eq@III"(i64 %return3, i64 0)
  %3 = icmp ne i64 %return22, 0
  br i1 %3, label %true23, label %false24

true17:                                           ; preds = %true6
  %_bound_primnum19 = load i64, i64* %_bound_primnum
  %return20 = call i64 @"removeprim@IIII"(i64 0, i64 %_bound_primnum19, i64 1)
  br label %true

true23:                                           ; preds = %false
  %return28 = call { i64, i64 } @"primattrib@IISII"(i64 1, i8* %return2, i64 0)
  %return29 = extractvalue { i64, i64 } %return28, 0
  %_bound_primnum33 = load i64, i64* %_bound_primnum
  %return34 = call i64 @"prim@IISI"(i64 0, i8* %return2, i64 %_bound_primnum33)
  %return37 = call i64 @"ne@III"(i64 %return34, i64 %return29)
  %4 = icmp ne i64 %return37, 0
  br i1 %4, label %true38, label %true

false24:                                          ; preds = %false
  %_bound_primnum42 = load i64, i64* %_bound_primnum
  %return43 = call i64 @"removeprim@IIII"(i64 0, i64 %_bound_primnum42, i64 1)
  br label %true

true38:                                           ; preds = %true23
  %_bound_primnum40 = load i64, i64* %_bound_primnum
  %return41 = call i64 @"removeprim@IIII"(i64 0, i64 %_bound_primnum40, i64 1)
  br label %true
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"attribtype@IISS"(i64, i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare { i8*, i64 } @"primattrib@SISII"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i8* @"prim@SISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i64 @"removeprim@IIII"(i64, i64, i64) #2

; Function Attrs: nounwind
declare { i64, i64 } @"primattrib@IISII"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"prim@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum) #2 {
__llvm_entry:
  %0 = alloca i64
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i64 %primnum) #3
  store i64 %gvalue, i64* @primnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

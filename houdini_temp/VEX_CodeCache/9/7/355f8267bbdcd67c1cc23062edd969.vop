;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [12 x i8] c"bezierorder\00"
@1 = private constant [11 x i8] c"outputtype\00"
@2 = private constant [7 x i8] c"closed\00"
@3 = private constant [7 x i8] c"optype\00"
@4 = private constant [8 x i8] c"balance\00"
@5 = private constant [7 x i8] c"smooth\00"
@6 = private constant [7 x i8] c"bezier\00"
@7 = private constant [2 x i8] c"P\00"
@primnum = external global i64
@ptnum = external global i64
@P = external global <3 x double>
@8 = private constant [8 x i8] c"primnum\00"
@9 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIV"(i64* %_bound_primnum, i64* %_bound_ptnum, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i64 0, i64 0))
  %return1 = call i8* @"chs@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0))
  %_bound_primnum2 = load i64, i64* %_bound_primnum
  %return3 = call i64 @"primvertexcount@III"(i64 0, i64 %_bound_primnum2)
  %_bound_primnum4 = load i64, i64* %_bound_primnum
  %return5 = call i64 @"primintrinsic@IISI"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), i64 %_bound_primnum4)
  %return6 = call i8* @"chs@SS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0))
  %return10 = call i64 @"eq@ISS"(i8* %return6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0))
  %return12 = call i64 @"eq@ISS"(i8* %return6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0))
  %_bound_ptnum13 = load i64, i64* %_bound_ptnum
  %return14 = call i64 @"pointvertex@III"(i64 0, i64 %_bound_ptnum13)
  %return16 = call i64 @"vertexprimindex@III"(i64 0, i64 %return14)
  %output = add i64 %return16, 1
  %output19 = sub i64 %return, 1
  %return20 = call i64 @"mod@III"(i64 %output, i64 %output19)
  %return22 = call i64 @"eq@ISS"(i8* %return1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0))
  %return24 = call i64 @"eq@III"(i64 %return20, i64 1)
  %return25 = call i64 @"and@III"(i64 %return22, i64 %return24)
  %return27 = call i64 @"ge@III"(i64 %return, i64 4)
  %return28 = call i64 @"and@III"(i64 %return25, i64 %return27)
  %0 = icmp ne i64 %return28, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %1 = icmp ne i64 %return12, 0
  br i1 %1, label %true30, label %false

end:                                              ; preds = %end108, %true126, %false, %end38, %true55, %__llvm_entry
  ret void

true30:                                           ; preds = %true
  %output33 = sub i64 %return16, 1
  %2 = icmp ne i64 %return5, 0
  br i1 %2, label %true37, label %end38

false:                                            ; preds = %true
  %3 = icmp ne i64 %return10, 0
  br i1 %3, label %true98, label %end

true37:                                           ; preds = %true30
  %output41 = add i64 %return3, %output33
  %return43 = call i64 @"mod@III"(i64 %output41, i64 %return3)
  %return46 = call i64 @"mod@III"(i64 %output, i64 %return3)
  br label %end38

end38:                                            ; preds = %true37, %true30
  %uppercontrol.0 = phi i64 [ %return46, %true37 ], [ %output, %true30 ]
  %lowercontrol.0 = phi i64 [ %return43, %true37 ], [ %output33, %true30 ]
  %_bound_ptnum47 = load i64, i64* %_bound_ptnum
  %return48 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0), i64 %_bound_ptnum47)
  %return50 = call i64 @"ge@III"(i64 %lowercontrol.0, i64 0)
  %return53 = call i64 @"lt@III"(i64 %uppercontrol.0, i64 %return3)
  %return54 = call i64 @"and@III"(i64 %return50, i64 %return53)
  %4 = icmp ne i64 %return54, 0
  br i1 %4, label %true55, label %end

true55:                                           ; preds = %end38
  %_bound_primnum57 = load i64, i64* %_bound_primnum
  %return59 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum57, i64 %lowercontrol.0)
  %_bound_primnum60 = load i64, i64* %_bound_primnum
  %return62 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum60, i64 %uppercontrol.0)
  %return64 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0), i64 %return59)
  %return66 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0), i64 %return62)
  %output69 = call <3 x double> @"sub@VV"(<3 x double> %return66, <3 x double> %return64)
  %return70 = call <3 x double> @"normalize@VV"(<3 x double> %output69)
  %_bound_P72 = load <3 x double>, <3 x double>* %_bound_P
  %output73 = call <3 x double> @"sub@VV"(<3 x double> %return66, <3 x double> %_bound_P72)
  %output76 = call <3 x double> @"sub@VV"(<3 x double> %return64, <3 x double> %_bound_P72)
  %return79 = call double @"length@FV"(<3 x double> %output73)
  %cast = call <3 x double> @"set@VF"(double %return79)
  %output80 = call <3 x double> @"mul@VV"(<3 x double> %return70, <3 x double> %cast)
  %return82 = call <3 x double> @"neg@VV"(<3 x double> %return70)
  %return84 = call double @"length@FV"(<3 x double> %output76)
  %cast85 = call <3 x double> @"set@VF"(double %return84)
  %output86 = call <3 x double> @"mul@VV"(<3 x double> %return82, <3 x double> %cast85)
  %_bound_P88 = load <3 x double>, <3 x double>* %_bound_P
  %output90 = call <3 x double> @"add@VV"(<3 x double> %_bound_P88, <3 x double> %output80)
  %return91 = call i64 @"setpointattrib@IISIV"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0), i64 %return62, <3 x double> %output90)
  %_bound_P93 = load <3 x double>, <3 x double>* %_bound_P
  %output95 = call <3 x double> @"add@VV"(<3 x double> %_bound_P93, <3 x double> %output86)
  %return96 = call i64 @"setpointattrib@IISIV"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0), i64 %return59, <3 x double> %output95)
  br label %end

true98:                                           ; preds = %false
  %output102 = sub i64 %return16, 1
  %5 = icmp ne i64 %return5, 0
  br i1 %5, label %true107, label %end108

true107:                                          ; preds = %true98
  %output111 = add i64 %return3, %output102
  %return113 = call i64 @"mod@III"(i64 %output111, i64 %return3)
  %return116 = call i64 @"mod@III"(i64 %output, i64 %return3)
  br label %end108

end108:                                           ; preds = %true107, %true98
  %uppercontrol103.0 = phi i64 [ %return116, %true107 ], [ %output, %true98 ]
  %lowercontrol100.0 = phi i64 [ %return113, %true107 ], [ %output102, %true98 ]
  %_bound_ptnum118 = load i64, i64* %_bound_ptnum
  %return119 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0), i64 %_bound_ptnum118)
  %return121 = call i64 @"ge@III"(i64 %lowercontrol100.0, i64 0)
  %return124 = call i64 @"lt@III"(i64 %uppercontrol103.0, i64 %return3)
  %return125 = call i64 @"and@III"(i64 %return121, i64 %return124)
  %6 = icmp ne i64 %return125, 0
  br i1 %6, label %true126, label %end

true126:                                          ; preds = %end108
  %_bound_primnum128 = load i64, i64* %_bound_primnum
  %return130 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum128, i64 %lowercontrol100.0)
  %_bound_primnum131 = load i64, i64* %_bound_primnum
  %return133 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum131, i64 %uppercontrol103.0)
  %return136 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0), i64 %return130)
  %return139 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0), i64 %return133)
  %output143 = call <3 x double> @"sub@VV"(<3 x double> %return139, <3 x double> %return136)
  %return144 = call <3 x double> @"normalize@VV"(<3 x double> %output143)
  %_bound_P147 = load <3 x double>, <3 x double>* %_bound_P
  %output148 = call <3 x double> @"sub@VV"(<3 x double> %return139, <3 x double> %_bound_P147)
  %output152 = call <3 x double> @"sub@VV"(<3 x double> %return136, <3 x double> %_bound_P147)
  %return154 = call double @"length@FV"(<3 x double> %output148)
  %return156 = call double @"length@FV"(<3 x double> %output152)
  %output157 = fadd double %return154, %return156
  %output158 = fmul double 5.000000e-01, %output157
  %cast161 = call <3 x double> @"set@VF"(double %output158)
  %output162 = call <3 x double> @"mul@VV"(<3 x double> %return144, <3 x double> %cast161)
  %return164 = call <3 x double> @"neg@VV"(<3 x double> %return144)
  %output167 = call <3 x double> @"mul@VV"(<3 x double> %return164, <3 x double> %cast161)
  %_bound_P169 = load <3 x double>, <3 x double>* %_bound_P
  %output171 = call <3 x double> @"add@VV"(<3 x double> %_bound_P169, <3 x double> %output162)
  %return172 = call i64 @"setpointattrib@IISIV"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0), i64 %return133, <3 x double> %output171)
  %_bound_P174 = load <3 x double>, <3 x double>* %_bound_P
  %output176 = call <3 x double> @"add@VV"(<3 x double> %_bound_P174, <3 x double> %output167)
  %return177 = call i64 @"setpointattrib@IISIV"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0), i64 %return130, <3 x double> %output176)
  br label %end
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"primvertexcount@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"primintrinsic@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i64 @"pointvertex@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"vertexprimindex@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"primpoint@IIII"(i64, i64, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIV"(i64, i8*, i64, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, i64 %ptnum, <3 x double> %P) #2 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca <3 x double>
  store i64 %primnum, i64* %0
  store i64 %ptnum, i64* %1
  store <3 x double> %P, <3 x double>* %2
  call void @"__vex_snippet_snippet@IIV"(i64* %0, i64* %1, <3 x double>* %2)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0), i64 %primnum) #3
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @9, i64 0, i64 0), i64 %ptnum) #3
  %gvalue7 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0), <3 x double> %P) #3
  store i64 %gvalue, i64* @primnum
  store i64 %gvalue5, i64* @ptnum
  store <3 x double> %gvalue7, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

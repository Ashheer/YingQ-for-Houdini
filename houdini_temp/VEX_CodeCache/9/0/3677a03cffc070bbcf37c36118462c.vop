;_name	/obj/geo1/scifi_panels1/sop_lot_subdivision1/sop_color_adjustment1/pointwrangle1/attribvop1
; ModuleID = 'obj_geo1_scifi_panels1_sop_lot_subdivision1_sop_color_adjustment1_pointwrangle1_attribvop1'

@0 = private constant [3 x i8] c"Cd\00"
@1 = private constant [20 x i8] c"../custom_attribute\00"
@2 = private constant [25 x i8] c"../custom_attribute_name\00"
@3 = private constant [14 x i8] c"../brightness\00"
@4 = private constant [12 x i8] c"../contrast\00"
@5 = private constant [14 x i8] c"../saturation\00"
@6 = private constant [12 x i8] c"../do_clamp\00"
@7 = private constant [10 x i8] c"../clampx\00"
@8 = private constant [10 x i8] c"../clampy\00"
@9 = private constant [10 x i8] c"../invert\00"
@10 = private constant [9 x i8] c"../gamma\00"
@ptnum = external global i64
@11 = private constant [6 x i8] c"ptnum\00"

define private void @"_obj_geo1_scifi_panels1_sop_lot_subdivision1_sop_color_adjustment1_pointwrangle1_attribvop1_snippet1@I"(i64* %_bound_ptnum) nounwind alwaysinline {
__llvm_entry:
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([20 x i8]* @1, i64 0, i64 0))
  %cast = fptosi double %return to i64
  %0 = icmp ne i64 %cast, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return1 = call i8* @"chs@SS"(i8* getelementptr inbounds ([25 x i8]* @2, i64 0, i64 0))
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %attribute.0 = phi i8* [ %return1, %true ], [ getelementptr inbounds ([3 x i8]* @0, i64 0, i64 0), %__llvm_entry ]
  %_bound_ptnum3 = load i64* %_bound_ptnum
  %return4 = call { <3 x double>, i64 } @"pointattrib@VISII"(i64 0, i8* %attribute.0, i64 %_bound_ptnum3)
  %return5 = extractvalue { <3 x double>, i64 } %return4, 0
  %return7 = call double @"ch@FS"(i8* getelementptr inbounds ([14 x i8]* @3, i64 0, i64 0))
  %cast8 = call <3 x double> @"set@VF"(double %return7)
  %output9 = call <3 x double> @"add@VV"(<3 x double> %return5, <3 x double> %cast8)
  %cast11 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output12 = call <3 x double> @"sub@VV"(<3 x double> %output9, <3 x double> %cast11)
  %return13 = call double @"ch@FS"(i8* getelementptr inbounds ([12 x i8]* @4, i64 0, i64 0))
  %cast14 = call <3 x double> @"set@VF"(double %return13)
  %output15 = call <3 x double> @"mul@VV"(<3 x double> %output12, <3 x double> %cast14)
  %output17 = call <3 x double> @"add@VV"(<3 x double> %output15, <3 x double> %cast11)
  %return19 = call <3 x double> @"rgbtohsv@VV"(<3 x double> %output17)
  %return21 = call double @"getcomp@FVI"(<3 x double> %return19, i64 1)
  %return22 = call double @"ch@FS"(i8* getelementptr inbounds ([14 x i8]* @5, i64 0, i64 0))
  %output23 = fmul double %return21, %return22
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return19, double %output23, i64 1)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  %return28 = call <3 x double> @"hsvtorgb@VV"(<3 x double> %output26)
  %return29 = call double @"ch@FS"(i8* getelementptr inbounds ([12 x i8]* @6, i64 0, i64 0))
  %cast30 = fptosi double %return29 to i64
  %1 = icmp ne i64 %cast30, 0
  br i1 %1, label %true31, label %end32

true31:                                           ; preds = %end
  %return34 = call double @"ch@FS"(i8* getelementptr inbounds ([10 x i8]* @7, i64 0, i64 0))
  %cast35 = call <3 x double> @"set@VF"(double %return34)
  %return36 = call double @"ch@FS"(i8* getelementptr inbounds ([10 x i8]* @8, i64 0, i64 0))
  %cast37 = call <3 x double> @"set@VF"(double %return36)
  %return38 = call <3 x double> @"clamp@VVVV"(<3 x double> %return28, <3 x double> %cast35, <3 x double> %cast37)
  br label %end32

end32:                                            ; preds = %true31, %end
  %current_val.0 = phi <3 x double> [ %return38, %true31 ], [ %return28, %end ]
  %return39 = call double @"ch@FS"(i8* getelementptr inbounds ([10 x i8]* @9, i64 0, i64 0))
  %cast40 = fptosi double %return39 to i64
  %2 = icmp ne i64 %cast40, 0
  br i1 %2, label %true41, label %end42

true41:                                           ; preds = %end32
  %cast44 = call <3 x double> @"set@VI"(i64 1)
  %output45 = call <3 x double> @"sub@VV"(<3 x double> %cast44, <3 x double> %current_val.0)
  br label %end42

end42:                                            ; preds = %true41, %end32
  %current_val.1 = phi <3 x double> [ %output45, %true41 ], [ %current_val.0, %end32 ]
  %return47 = call double @"ch@FS"(i8* getelementptr inbounds ([9 x i8]* @10, i64 0, i64 0))
  %return48 = call <3 x double> @"pow@VVF"(<3 x double> %current_val.1, double %return47)
  %_bound_ptnum50 = load i64* %_bound_ptnum
  %return52 = call i64 @"setpointattrib@IISIV"(i64 0, i8* %attribute.0, i64 %_bound_ptnum50, <3 x double> %return48)
  ret void
}

declare double @"ch@FS"(i8*) nounwind readnone

declare i8* @"chs@SS"(i8*) nounwind readnone

declare { <3 x double>, i64 } @"pointattrib@VISII"(i64, i8*, i64) nounwind

declare <3 x double> @"set@VF"(double) nounwind readnone

declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) nounwind readnone

declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) nounwind readnone

declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) nounwind readnone

declare <3 x double> @"rgbtohsv@VV"(<3 x double>) nounwind readnone

declare double @"getcomp@FVI"(<3 x double>, i64) nounwind readnone

define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) alwaysinline {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 1)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) nounwind readnone

declare <3 x double> @"hsvtorgb@VV"(<3 x double>) nounwind readnone

declare <3 x double> @"clamp@VVVV"(<3 x double>, <3 x double>, <3 x double>) nounwind

declare <3 x double> @"set@VI"(i64) nounwind readnone

declare <3 x double> @"pow@VVF"(<3 x double>, double) nounwind readnone

declare i64 @"setpointattrib@IISIV"(i64, i8*, i64, <3 x double>) nounwind

define void @obj_geo1_scifi_panels1_sop_lot_subdivision1_sop_color_adjustment1_pointwrangle1_attribvop1(i64 %ptnum) nounwind {
__llvm_entry:
  %0 = alloca i64
  store i64 %ptnum, i64* %0
  call void @"_obj_geo1_scifi_panels1_sop_lot_subdivision1_sop_color_adjustment1_pointwrangle1_attribvop1_snippet1@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8]* @11, i64 0, i64 0), i64 %ptnum) nounwind readonly
  store i64 %gvalue, i64* @ptnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_geo1_scifi_panels1_sop_lot_subdivision1_sop_color_adjustment1_pointwrangle1_attribvop1(i64 0)
  ret void
}

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"18.5.633"}
!2 = metadata !{metadata !"64"}

;_code_end

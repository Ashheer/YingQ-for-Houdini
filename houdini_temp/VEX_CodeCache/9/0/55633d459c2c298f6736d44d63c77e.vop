;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@primnum = external global i64
@restvector = external global <4 x double>
@1 = private constant [8 x i8] c"primnum\00"
@2 = private constant [11 x i8] c"restvector\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IP"(i64* %_bound_primnum, <4 x double>* %_bound_restvector) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum1)
  %return2 = call i64 @"getcomp@I[II"(i64* %return, i64 0)
  %return3 = call i64 @"geoself@I"()
  %_bound_restvector5 = load <4 x double>, <4 x double>* %_bound_restvector
  %cast = call <3 x double> @"set@VP"(<4 x double> %_bound_restvector5)
  %return6 = call i64 @"setpointattrib@IISIV"(i64 %return3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return2, <3 x double> %cast)
  ret void
}

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"geoself@I"() #1

; Function Attrs: nounwind
declare <3 x double> @"set@VP"(<4 x double>) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIV"(i64, i8*, i64, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, <4 x double> %restvector) #1 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca <4 x double>
  store i64 %primnum, i64* %0
  store <4 x double> %restvector, <4 x double>* %1
  call void @"__vex_snippet_snippet@IP"(i64* %0, <4 x double>* %1)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i64 %primnum) #3
  %gvalue4 = call <4 x double> @"_export@PSP"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0), <4 x double> %restvector) #3
  store i64 %gvalue, i64* @primnum
  store <4 x double> %gvalue4, <4 x double>* @restvector
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <4 x double> @"_export@PSP"(i8*, <4 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <4 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

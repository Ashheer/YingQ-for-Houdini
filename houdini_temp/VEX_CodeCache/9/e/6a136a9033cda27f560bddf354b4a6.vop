;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [5 x i8] c"name\00"
@2 = private constant [10 x i8] c"__scatter\00"
@3 = private constant [1 x i8] zeroinitializer
@4 = private constant [23 x i8] c"../originalpieceattrib\00"
@name = external global i8*
@group_scatter = external global i64
@5 = private constant [14 x i8] c"group_scatter\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SI"(i8** %_bound_name, i64* %_bound_group_scatter) #0 {
__llvm_entry:
  %_bound_name1 = load i8*, i8** %_bound_name
  %return2 = call i64* @"findattribval@[IISSS"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* %_bound_name1)
  %return4 = call i64 @"len@I[I"(i64* %return2)
  br label %cond

cond:                                             ; preds = %end13, %__llvm_entry
  %x.0 = phi i64 [ 0, %__llvm_entry ], [ %output20, %end13 ]
  %return7 = call i64 @"lt@III"(i64 %x.0, i64 %return4)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return10 = call i64 @"getcomp@I[II"(i64* %return2, i64 %x.0)
  %return12 = call i64 @"eq@III"(i64 %x.0, i64 0)
  %1 = icmp ne i64 %return12, 0
  br i1 %1, label %true, label %end13

end:                                              ; preds = %cond
  %_bound_group_scatter21 = load i64, i64* %_bound_group_scatter
  %return22 = call i64 @"eq@III"(i64 %_bound_group_scatter21, i64 1)
  %2 = icmp ne i64 %return22, 0
  br i1 %2, label %true23, label %end24

true:                                             ; preds = %body
  store i64 0, i64* %_bound_group_scatter
  br label %end13

end13:                                            ; preds = %true, %body
  %_bound_group_scatter14 = load i64, i64* %_bound_group_scatter
  %return16 = call { i64, i64 } @"pointattrib@IISII"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0), i64 %return10)
  %return17 = extractvalue { i64, i64 } %return16, 0
  %return18 = call i64 @"max@III"(i64 %_bound_group_scatter14, i64 %return17)
  store i64 %return18, i64* %_bound_group_scatter
  %output20 = add i64 %x.0, 1
  br label %cond

true23:                                           ; preds = %true30, %true41, %end24, %end
  ret void

end24:                                            ; preds = %end
  %_bound_name25 = load i8*, i8** %_bound_name
  %return26 = call i64 @"nametopoint@IIS"(i64 2, i8* %_bound_name25)
  %return28 = call i64 @"neg@II"(i64 1)
  %return29 = call i64 @"ne@III"(i64 %return26, i64 %return28)
  %3 = icmp ne i64 %return29, 0
  br i1 %3, label %true30, label %true23

true30:                                           ; preds = %end24
  %return32 = call i8* @"chs@SS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @4, i64 0, i64 0))
  %return34 = call i8* @"point@SISI"(i64 2, i8* %return32, i64 %return26)
  %return36 = call i64 @"nametopoint@IIS"(i64 3, i8* %return34)
  %return38 = call i64* @"pointprims@[III"(i64 3, i64 %return36)
  %return39 = call i64 @"len@I[I"(i64* %return38)
  %return40 = call i64 @"ne@III"(i64 %return39, i64 0)
  %4 = icmp ne i64 %return40, 0
  br i1 %4, label %true41, label %true23

true41:                                           ; preds = %true30
  store i64 1, i64* %_bound_group_scatter
  br label %true23
}

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind
declare i64* @"findattribval@[IISSS"(i64, i8*, i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare { i64, i64 } @"pointattrib@IISII"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"max@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"nametopoint@IIS"(i64, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64* @"pointprims@[III"(i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i8* %name, i64 %group_scatter) #2 {
__llvm_entry:
  %"<group_scatter>" = alloca i64
  %0 = alloca i8*
  store i64 %group_scatter, i64* %"<group_scatter>"
  store i8* %name, i8** %0
  call void @"__vex_snippet_snippet@SI"(i8** %0, i64* %"<group_scatter>")
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* %name) #3
  %evalue2 = load i64, i64* %"<group_scatter>"
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @5, i64 0, i64 0), i64 %evalue2) #3
  store i8* %gvalue, i8** @name
  store i64 %gvalue3, i64* @group_scatter
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @3, i64 0, i64 0), i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

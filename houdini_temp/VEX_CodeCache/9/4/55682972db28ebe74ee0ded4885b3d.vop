;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x <3 x double>] zeroinitializer
@1 = private constant [0 x i64] zeroinitializer
@pts = external global <3 x double>*
@ptcount = external global i64
@primpts = external global i64*
@primcount = external global i64
@ptstart = external global i64*
@colors = external global <3 x double>*
@ncolors = external global i64
@openprims = external global i64*
@2 = private constant [4 x i8] c"pts\00"
@3 = private constant [8 x i8] c"ptcount\00"
@4 = private constant [8 x i8] c"primpts\00"
@5 = private constant [10 x i8] c"primcount\00"
@6 = private constant [8 x i8] c"ptstart\00"
@7 = private constant [7 x i8] c"colors\00"
@8 = private constant [8 x i8] c"ncolors\00"
@9 = private constant [10 x i8] c"openprims\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[VI[II[I[VI[I"(<3 x double>** %_bound_pts, i64* %_bound_ptcount, i64** %_bound_primpts, i64* %_bound_primcount, i64** %_bound_ptstart, <3 x double>** %_bound_colors, i64* %_bound_ncolors, i64** %_bound_openprims) #0 {
__llvm_entry:
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @0, i64 0, i64 0), <3 x double>** %_bound_pts
  %return = call i64 @"len@I[V"(<3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @0, i64 0, i64 0))
  store i64 %return, i64* %_bound_ptcount
  store i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), i64** %_bound_primpts
  %return5 = call i64 @"len@I[I"(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0))
  store i64 %return5, i64* %_bound_primcount
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %__impl_foreach_index.0 = phi i64 [ 0, %__llvm_entry ], [ %output21, %body ]
  %ptstart.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), %__llvm_entry ], [ %output, %body ]
  %start.0 = phi i64 [ 0, %__llvm_entry ], [ %output19, %body ]
  %return11 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return5)
  %0 = icmp ne i64 %return11, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return14 = call i64 @"getcomp@I[II"(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), i64 %__impl_foreach_index.0)
  %output = call i64* @"push@[II"(i64* %ptstart.0, i64 %start.0)
  %output19 = add i64 %start.0, %return14
  %output21 = add i64 %__impl_foreach_index.0, 1
  br label %cond

end:                                              ; preds = %cond
  %output24 = call i64* @"push@[II"(i64* %ptstart.0, i64 %start.0)
  store i64* %output24, i64** %_bound_ptstart
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @0, i64 0, i64 0), <3 x double>** %_bound_colors
  store i64 %return, i64* %_bound_ncolors
  store i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), i64** %_bound_openprims
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"len@I[V"(<3 x double>*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64* @"push@[II"(i64*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double>* %pts, i64 %ptcount, i64* %primpts, i64 %primcount, i64* %ptstart, <3 x double>* %colors, i64 %ncolors, i64* %openprims) #2 {
__llvm_entry:
  %"<ptcount>" = alloca i64
  %"<primpts>" = alloca i64*
  %"<primcount>" = alloca i64
  %"<ptstart>" = alloca i64*
  %"<colors>" = alloca <3 x double>*
  %"<ncolors>" = alloca i64
  %"<openprims>" = alloca i64*
  %"<pts>" = alloca <3 x double>*
  store <3 x double>* %pts, <3 x double>** %"<pts>"
  store i64 %ptcount, i64* %"<ptcount>"
  store i64* %primpts, i64** %"<primpts>"
  store i64 %primcount, i64* %"<primcount>"
  store i64* %ptstart, i64** %"<ptstart>"
  store <3 x double>* %colors, <3 x double>** %"<colors>"
  store i64 %ncolors, i64* %"<ncolors>"
  store i64* %openprims, i64** %"<openprims>"
  call void @"__vex_snippet_snippet@[VI[II[I[VI[I"(<3 x double>** %"<pts>", i64* %"<ptcount>", i64** %"<primpts>", i64* %"<primcount>", i64** %"<ptstart>", <3 x double>** %"<colors>", i64* %"<ncolors>", i64** %"<openprims>")
  %evalue = load <3 x double>*, <3 x double>** %"<pts>"
  %gvalue = call <3 x double>* @"_export@[VS[V"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i64 0, i64 0), <3 x double>* %evalue) #3
  %evalue1 = load i64, i64* %"<ptcount>"
  %gvalue2 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i64 %evalue1) #3
  %evalue3 = load i64*, i64** %"<primpts>"
  %gvalue4 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), i64* %evalue3) #3
  %evalue5 = load i64, i64* %"<primcount>"
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i64 0, i64 0), i64 %evalue5) #3
  %evalue7 = load i64*, i64** %"<ptstart>"
  %gvalue8 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @6, i64 0, i64 0), i64* %evalue7) #3
  %evalue9 = load <3 x double>*, <3 x double>** %"<colors>"
  %gvalue10 = call <3 x double>* @"_export@[VS[V"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), <3 x double>* %evalue9) #3
  %evalue11 = load i64, i64* %"<ncolors>"
  %gvalue12 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0), i64 %evalue11) #3
  %evalue13 = load i64*, i64** %"<openprims>"
  %gvalue14 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @9, i64 0, i64 0), i64* %evalue13) #3
  store <3 x double>* %gvalue, <3 x double>** @pts
  store i64 %gvalue2, i64* @ptcount
  store i64* %gvalue4, i64** @primpts
  store i64 %gvalue6, i64* @primcount
  store i64* %gvalue8, i64** @ptstart
  store <3 x double>* %gvalue10, <3 x double>** @colors
  store i64 %gvalue12, i64* @ncolors
  store i64* %gvalue14, i64** @openprims
  ret void
}

declare <3 x double>* @"_export@[VS[V"(i8*, <3 x double>*)

declare i64 @"_export@ISI"(i8*, i64)

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @0, i64 0, i64 0), i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), <3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @0, i64 0, i64 0), i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@name = external global i64
@new_name = external global i64
@0 = private constant [5 x i8] c"name\00"
@1 = private constant [9 x i8] c"new_name\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound_name, i64* %_bound_new_name) #0 {
__llvm_entry:
  %_bound_new_name1 = load i64, i64* %_bound_new_name
  store i64 %_bound_new_name1, i64* %_bound_name
  ret void
}

; Function Attrs: nounwind
define void @__vex_snippet(i64 %name, i64 %new_name) #1 {
__llvm_entry:
  %0 = alloca i64
  %"<name>" = alloca i64
  store i64 %name, i64* %"<name>"
  store i64 %new_name, i64* %0
  call void @"__vex_snippet_snippet@II"(i64* %"<name>", i64* %0)
  %evalue = load i64, i64* %"<name>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0), i64 %evalue) #2
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0), i64 %new_name) #2
  store i64 %gvalue, i64* @name
  store i64 %gvalue3, i64* @new_name
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [23 x i8] c"../uvtexture1/uvattrib\00"
@ptnum = external global i64
@dir = external global <3 x double>
@P = external global <3 x double>
@uv = external global <3 x double>
@2 = private constant [6 x i8] c"ptnum\00"
@3 = private constant [4 x i8] c"dir\00"
@4 = private constant [3 x i8] c"uv\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVVV"(i64* %_bound_ptnum, <3 x double>* %_bound_dir, <3 x double>* %_bound_P, <3 x double>* %_bound_uv) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64 @"neighbour@IIII"(i64 0, i64 %_bound_ptnum1, i64 0)
  %_bound_ptnum2 = load i64, i64* %_bound_ptnum
  %return3 = call i64 @"neighbourcount@III"(i64 0, i64 %_bound_ptnum2)
  %return5 = call i64 @"eq@III"(i64 %return3, i64 1)
  %0 = icmp ne i64 %return5, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return7 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return)
  %_bound_P9 = load <3 x double>, <3 x double>* %_bound_P
  %output = call <3 x double> @"sub@VV"(<3 x double> %return7, <3 x double> %_bound_P9)
  store <3 x double> %output, <3 x double>* %_bound_dir
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %_bound_ptnum10 = load i64, i64* %_bound_ptnum
  %return11 = call i64 @"neighbour@IIII"(i64 0, i64 %_bound_ptnum10, i64 1)
  %return12 = call i8* @"chs@SS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @1, i64 0, i64 0))
  %return14 = call <3 x double> @"point@VISI"(i64 0, i8* %return12, i64 %return)
  %return17 = call <3 x double> @"point@VISI"(i64 0, i8* %return12, i64 %return11)
  %_bound_uv18 = load <3 x double>, <3 x double>* %_bound_uv
  %return19 = call double @"getcomp@FVI"(<3 x double> %_bound_uv18, i64 0)
  %return20 = fcmp ogt double %return19, 5.000000e-01
  %return25 = call double @"getcomp@FVI"(<3 x double> %return14, i64 0)
  %return27 = call double @"getcomp@FVI"(<3 x double> %return17, i64 0)
  br i1 %return20, label %true22, label %false

true22:                                           ; preds = %end
  %return28 = fcmp olt double %return25, %return27
  br i1 %return28, label %true30, label %false31

false:                                            ; preds = %end
  %return61 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return11)
  %return64 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return)
  %output67 = call <3 x double> @"sub@VV"(<3 x double> %return61, <3 x double> %return64)
  store <3 x double> %output67, <3 x double>* %_bound_dir
  br label %end23

end23:                                            ; preds = %true30, %false31, %false
  br label %UnifiedReturnBlock

true30:                                           ; preds = %true22
  %return35 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return)
  %return37 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return11)
  %output40 = call <3 x double> @"sub@VV"(<3 x double> %return35, <3 x double> %return37)
  store <3 x double> %output40, <3 x double>* %_bound_dir
  br label %end23

false31:                                          ; preds = %true22
  %return43 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return11)
  %return46 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return)
  %output49 = call <3 x double> @"sub@VV"(<3 x double> %return43, <3 x double> %return46)
  store <3 x double> %output49, <3 x double>* %_bound_dir
  br label %end23

UnifiedReturnBlock:                               ; preds = %end23, %true
  ret void
}

; Function Attrs: nounwind
declare i64 @"neighbour@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"neighbourcount@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %dir, <3 x double> %P, <3 x double> %uv) #1 {
__llvm_entry:
  %"<dir>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  store <3 x double> %dir, <3 x double>* %"<dir>"
  store i64 %ptnum, i64* %0
  store <3 x double> %P, <3 x double>* %1
  store <3 x double> %uv, <3 x double>* %2
  call void @"__vex_snippet_snippet@IVVV"(i64* %0, <3 x double>* %"<dir>", <3 x double>* %1, <3 x double>* %2)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %ptnum) #3
  %evalue4 = load <3 x double>, <3 x double>* %"<dir>"
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i64 0, i64 0), <3 x double> %evalue4) #3
  %gvalue7 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %P) #3
  %gvalue9 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), <3 x double> %uv) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue5, <3 x double>* @dir
  store <3 x double> %gvalue7, <3 x double>* @P
  store <3 x double> %gvalue9, <3 x double>* @uv
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"../ezmode\00"
@1 = private constant [15 x i8] c"../minpad_absx\00"
@2 = private constant [15 x i8] c"../minpad_absy\00"
@3 = private constant [15 x i8] c"../minpad_absz\00"
@4 = private constant [15 x i8] c"../maxpad_absx\00"
@5 = private constant [15 x i8] c"../maxpad_absy\00"
@6 = private constant [15 x i8] c"../maxpad_absz\00"
@7 = private constant [27 x i8] c"../refSelf_withoutRefInput\00"
@8 = private constant [15 x i8] c"../dotranslate\00"
@9 = private constant [15 x i8] c"../bbox_ref_tx\00"
@10 = private constant [15 x i8] c"../bbox_ref_ty\00"
@11 = private constant [15 x i8] c"../bbox_ref_tz\00"
@12 = private constant [15 x i8] c"../bbox_ref_cx\00"
@13 = private constant [15 x i8] c"../bbox_ref_cy\00"
@14 = private constant [15 x i8] c"../bbox_ref_cz\00"
@15 = private constant [6 x i8] c"../tx\00"
@16 = private constant [6 x i8] c"../ty\00"
@17 = private constant [6 x i8] c"../tz\00"
@18 = private constant [18 x i8] c"../autobindcenter\00"
@19 = private constant [10 x i8] c"../bboxtx\00"
@20 = private constant [10 x i8] c"../bboxty\00"
@21 = private constant [10 x i8] c"../bboxtz\00"
@22 = private constant [10 x i8] c"../bboxcx\00"
@23 = private constant [10 x i8] c"../bboxcy\00"
@24 = private constant [10 x i8] c"../bboxcz\00"
@25 = private constant [15 x i8] c"../bbox_ref_px\00"
@26 = private constant [15 x i8] c"../bbox_ref_py\00"
@27 = private constant [15 x i8] c"../bbox_ref_pz\00"
@28 = private constant [16 x i8] c"../bbox_ref_pcx\00"
@29 = private constant [16 x i8] c"../bbox_ref_pcy\00"
@30 = private constant [16 x i8] c"../bbox_ref_pcz\00"
@31 = private constant [6 x i8] c"../px\00"
@32 = private constant [6 x i8] c"../py\00"
@33 = private constant [6 x i8] c"../pz\00"
@34 = private constant [11 x i8] c"../doscale\00"
@35 = private constant [16 x i8] c"../uniformscale\00"
@36 = private constant [14 x i8] c"../scale_axis\00"
@37 = private constant [10 x i8] c"../bboxsx\00"
@38 = private constant [10 x i8] c"../bboxsy\00"
@39 = private constant [10 x i8] c"../bboxsz\00"
@40 = private constant [15 x i8] c"../bbox_ref_sx\00"
@41 = private constant [15 x i8] c"../bbox_ref_sy\00"
@42 = private constant [15 x i8] c"../bbox_ref_sz\00"
@43 = private constant [6 x i8] c"../sx\00"
@44 = private constant [6 x i8] c"../sy\00"
@45 = private constant [6 x i8] c"../sz\00"
@46 = private constant [9 x i8] c"../scale\00"
@47 = private constant [9 x i8] c"../padsx\00"
@48 = private constant [9 x i8] c"../padsy\00"
@49 = private constant [9 x i8] c"../padsz\00"
@50 = private constant [10 x i8] c"../lerpsx\00"
@51 = private constant [10 x i8] c"../lerpsy\00"
@52 = private constant [10 x i8] c"../lerpsz\00"
@53 = private constant [5 x i8] c"../r\00"
@54 = private constant [8 x i8] c"../xOrd\00"
@55 = private constant [8 x i8] c"../rOrd\00"
@56 = private constant [6 x i8] c"../pr\00"
@57 = private constant [9 x i8] c"../shear\00"
@58 = private constant [19 x i8] c"../repairPrecision\00"
@59 = private constant [22 x i8] c"../precisionThreshold\00"
@60 = private constant [14 x i8] c"../stashmerge\00"
@xform = external global <16 x double>
@61 = private constant [6 x i8] c"xform\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@4"(<16 x double>* %_bound_xform) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  %return = call i64 @"npoints@II"(i64 2)
  %return1 = call i64 @"gt@III"(i64 %return, i64 0)
  %3 = icmp ne i64 %return1, 0
  %return2 = select i1 %3, i64 2, i64 0
  %output = call { <3 x double>, <3 x double> } @"getbbox@IVV"(i64 %return2)
  %output4 = extractvalue { <3 x double>, <3 x double> } %output, 0
  %output5 = extractvalue { <3 x double>, <3 x double> } %output, 1
  %return6 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0))
  %return7 = call i64 @"not@II"(i64 %return6)
  %4 = icmp ne i64 %return7, 0
  br i1 %4, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return9 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1, i64 0, i64 0))
  %return10 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i64 0, i64 0))
  %return11 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @3, i64 0, i64 0))
  %return12 = call <3 x double> @"set@VFFF"(double %return9, double %return10, double %return11)
  %output13 = call <3 x double> @"sub@VV"(<3 x double> %output4, <3 x double> %return12)
  %return15 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @4, i64 0, i64 0))
  %return16 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @5, i64 0, i64 0))
  %return17 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @6, i64 0, i64 0))
  %return18 = call <3 x double> @"set@VFFF"(double %return15, double %return16, double %return17)
  %output19 = call <3 x double> @"add@VV"(<3 x double> %output5, <3 x double> %return18)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %bboxmax0.0 = phi <3 x double> [ %output19, %true ], [ %output5, %__llvm_entry ]
  %bboxmin0.0 = phi <3 x double> [ %output13, %true ], [ %output4, %__llvm_entry ]
  %output22 = call <3 x double> @"add@VV"(<3 x double> %bboxmin0.0, <3 x double> %bboxmax0.0)
  %cast = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output23 = call <3 x double> @"mul@VV"(<3 x double> %output22, <3 x double> %cast)
  %output26 = call <3 x double> @"sub@VV"(<3 x double> %bboxmax0.0, <3 x double> %bboxmin0.0)
  %return27 = call i64 @"npoints@II"(i64 1)
  %return28 = call i64 @"gt@III"(i64 %return27, i64 0)
  %5 = icmp ne i64 %return28, 0
  br i1 %5, label %true29, label %false

true29:                                           ; preds = %end
  %output31 = call { <3 x double>, <3 x double> } @"getbbox@IVV"(i64 1)
  %output32 = extractvalue { <3 x double>, <3 x double> } %output31, 0
  %output33 = extractvalue { <3 x double>, <3 x double> } %output31, 1
  %output36 = call <3 x double> @"add@VV"(<3 x double> %output32, <3 x double> %output33)
  %output38 = call <3 x double> @"mul@VV"(<3 x double> %output36, <3 x double> %cast)
  %output41 = call <3 x double> @"sub@VV"(<3 x double> %output33, <3 x double> %output32)
  br label %end30

false:                                            ; preds = %end
  %return42 = call i64 @"chi@IS"(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @7, i64 0, i64 0))
  %6 = icmp ne i64 %return42, 0
  br i1 %6, label %true43, label %false44

end30:                                            ; preds = %true43, %false44, %true29
  %bboxsize1.0 = phi <3 x double> [ %output41, %true29 ], [ %output26, %true43 ], [ %cast49, %false44 ]
  %bboxcenter1.0 = phi <3 x double> [ %output38, %true29 ], [ %output23, %true43 ], [ %cast48, %false44 ]
  %cast50 = call <3 x double> @"set@VI"(i64 0)
  %cast51 = call <3 x double> @"set@VI"(i64 1)
  %return52 = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @8, i64 0, i64 0))
  %7 = icmp ne i64 %return52, 0
  br i1 %7, label %true53, label %end54

true43:                                           ; preds = %false
  br label %end30

false44:                                          ; preds = %false
  %cast48 = call <3 x double> @"set@VF"(double 0.000000e+00)
  %cast49 = call <3 x double> @"set@VF"(double 1.000000e+00)
  br label %end30

true53:                                           ; preds = %end30
  %return56 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @9, i64 0, i64 0))
  %return57 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @10, i64 0, i64 0))
  %return58 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @11, i64 0, i64 0))
  %return59 = call <3 x double> @"set@VFFF"(double %return56, double %return57, double %return58)
  %output60 = call <3 x double> @"mul@VV"(<3 x double> %bboxsize1.0, <3 x double> %return59)
  %output62 = call <3 x double> @"mul@VV"(<3 x double> %output60, <3 x double> %cast)
  %return67 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @12, i64 0, i64 0))
  %return68 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @13, i64 0, i64 0))
  %return69 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @14, i64 0, i64 0))
  %return70 = call <3 x double> @"set@VFFF"(double %return67, double %return68, double %return69)
  %output71 = call <3 x double> @"mul@VV"(<3 x double> %bboxcenter1.0, <3 x double> %return70)
  %8 = icmp ne i64 %return6, 0
  %return72 = select i1 %8, <3 x double> %bboxcenter1.0, <3 x double> %output71
  %output73 = call <3 x double> @"add@VV"(<3 x double> %output62, <3 x double> %return72)
  %return75 = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @15, i64 0, i64 0))
  %return76 = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @16, i64 0, i64 0))
  %return77 = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @17, i64 0, i64 0))
  %return78 = call <3 x double> @"set@VFFF"(double %return75, double %return76, double %return77)
  %output79 = call <3 x double> @"add@VV"(<3 x double> %output73, <3 x double> %return78)
  %return80 = call i64 @"chi@IS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @18, i64 0, i64 0))
  %9 = icmp ne i64 %return80, 0
  br i1 %9, label %true81, label %end82

end54:                                            ; preds = %end82, %end30
  %p.0 = phi <3 x double> [ %p.1, %end82 ], [ zeroinitializer, %end30 ]
  %t.0 = phi <3 x double> [ %output104, %end82 ], [ %cast50, %end30 ]
  %return105 = call i64 @"chi@IS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @18, i64 0, i64 0))
  %return106 = call i64 @"not@II"(i64 %return105)
  %return108 = call i64 @"not@II"(i64 %return52)
  %return109 = call i64 @"or@III"(i64 %return106, i64 %return108)
  %10 = icmp ne i64 %return109, 0
  br i1 %10, label %true110, label %end111

true81:                                           ; preds = %true53
  br label %end82

end82:                                            ; preds = %true81, %true53
  %p.1 = phi <3 x double> [ %output79, %true81 ], [ zeroinitializer, %true53 ]
  %return86 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @19, i64 0, i64 0))
  %return87 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @20, i64 0, i64 0))
  %return88 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @21, i64 0, i64 0))
  %return89 = call <3 x double> @"set@VFFF"(double %return86, double %return87, double %return88)
  %output90 = call <3 x double> @"mul@VV"(<3 x double> %output26, <3 x double> %return89)
  %output92 = call <3 x double> @"mul@VV"(<3 x double> %output90, <3 x double> %cast)
  %output93 = call <3 x double> @"add@VV"(<3 x double> %output79, <3 x double> %output92)
  %return98 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @22, i64 0, i64 0))
  %return99 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @23, i64 0, i64 0))
  %return100 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @24, i64 0, i64 0))
  %return101 = call <3 x double> @"set@VFFF"(double %return98, double %return99, double %return100)
  %output102 = call <3 x double> @"mul@VV"(<3 x double> %output23, <3 x double> %return101)
  %return103 = select i1 %8, <3 x double> %output23, <3 x double> %output102
  %output104 = call <3 x double> @"sub@VV"(<3 x double> %output93, <3 x double> %return103)
  br label %end54

true110:                                          ; preds = %end54
  %return113 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @25, i64 0, i64 0))
  %return114 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @26, i64 0, i64 0))
  %return115 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @27, i64 0, i64 0))
  %return116 = call <3 x double> @"set@VFFF"(double %return113, double %return114, double %return115)
  %output117 = call <3 x double> @"mul@VV"(<3 x double> %bboxsize1.0, <3 x double> %return116)
  %output119 = call <3 x double> @"mul@VV"(<3 x double> %output117, <3 x double> %cast)
  %return124 = call double @"chf@FS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @28, i64 0, i64 0))
  %return125 = call double @"chf@FS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @29, i64 0, i64 0))
  %return126 = call double @"chf@FS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @30, i64 0, i64 0))
  %return127 = call <3 x double> @"set@VFFF"(double %return124, double %return125, double %return126)
  %11 = icmp ne i64 %return6, 0
  %return128 = select i1 %11, <3 x double> %cast51, <3 x double> %return127
  %output129 = call <3 x double> @"mul@VV"(<3 x double> %bboxcenter1.0, <3 x double> %return128)
  %output130 = call <3 x double> @"add@VV"(<3 x double> %output119, <3 x double> %output129)
  br label %end111

end111:                                           ; preds = %true110, %end54
  %p.2 = phi <3 x double> [ %output130, %true110 ], [ %p.0, %end54 ]
  %return132 = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @31, i64 0, i64 0))
  %return133 = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @32, i64 0, i64 0))
  %return134 = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @33, i64 0, i64 0))
  %return135 = call <3 x double> @"set@VFFF"(double %return132, double %return133, double %return134)
  %output136 = call <3 x double> @"add@VV"(<3 x double> %p.2, <3 x double> %return135)
  %return137 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @34, i64 0, i64 0))
  %12 = icmp ne i64 %return137, 0
  br i1 %12, label %true138, label %end139

true138:                                          ; preds = %end111
  %return140 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @35, i64 0, i64 0))
  %13 = icmp ne i64 %return140, 0
  br i1 %13, label %true141, label %end142

end139:                                           ; preds = %end275, %end111
  %s.0 = phi <3 x double> [ %return290, %end275 ], [ %cast51, %end111 ]
  %return293 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @53, i64 0, i64 0))
  %14 = icmp ne i64 %return6, 0
  %return294 = select i1 %14, <3 x double> %cast50, <3 x double> %return293
  %return295 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @54, i64 0, i64 0))
  %return296 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @55, i64 0, i64 0))
  %return301 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @56, i64 0, i64 0))
  %return302 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @57, i64 0, i64 0))
  %return303 = call <16 x double> @"maketransform@4IIVVVVVV"(i64 %return295, i64 %return296, <3 x double> %t.0, <3 x double> %return294, <3 x double> %s.0, <3 x double> %output136, <3 x double> %return301, <3 x double> %return302)
  %return304 = call i64 @"chi@IS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @58, i64 0, i64 0))
  %15 = icmp ne i64 %return304, 0
  br i1 %15, label %true305, label %end306

true141:                                          ; preds = %true138
  %return143 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @36, i64 0, i64 0))
  %return144 = call i64 @"lt@III"(i64 %return143, i64 3)
  %16 = icmp ne i64 %return144, 0
  br i1 %16, label %true145, label %false146

end142:                                           ; preds = %end147, %true138
  %bboxsize0.0 = phi <3 x double> [ %cast237, %end147 ], [ %output26, %true138 ]
  %bboxsize1.1 = phi <3 x double> [ %cast241, %end147 ], [ %bboxsize1.0, %true138 ]
  %return242 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @37, i64 0, i64 0))
  %return243 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @38, i64 0, i64 0))
  %return244 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @39, i64 0, i64 0))
  %return245 = call <3 x double> @"set@VFFF"(double %return242, double %return243, double %return244)
  %return250 = call <3 x double> @"efit@VVVVVV"(<3 x double> %return245, <3 x double> %cast50, <3 x double> %cast51, <3 x double> %cast51, <3 x double> %bboxsize0.0)
  %return251 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @40, i64 0, i64 0))
  %return252 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @41, i64 0, i64 0))
  %return253 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @42, i64 0, i64 0))
  %return254 = call <3 x double> @"set@VFFF"(double %return251, double %return252, double %return253)
  %return259 = call <3 x double> @"efit@VVVVVV"(<3 x double> %return254, <3 x double> %cast50, <3 x double> %cast51, <3 x double> %cast51, <3 x double> %bboxsize1.1)
  %output262 = call <3 x double> @"div@VV"(<3 x double> %return259, <3 x double> %return250)
  %return264 = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @43, i64 0, i64 0))
  %return265 = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @44, i64 0, i64 0))
  %return266 = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @45, i64 0, i64 0))
  %return267 = call <3 x double> @"set@VFFF"(double %return264, double %return265, double %return266)
  %return268 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @46, i64 0, i64 0))
  %cast269 = call <3 x double> @"set@VF"(double %return268)
  %output270 = call <3 x double> @"mul@VV"(<3 x double> %return267, <3 x double> %cast269)
  %output271 = call <3 x double> @"mul@VV"(<3 x double> %output262, <3 x double> %output270)
  br i1 %4, label %true274, label %end275

true145:                                          ; preds = %true141
  br label %end147

false146:                                         ; preds = %true141
  %return150 = call i64 @"eq@III"(i64 %return143, i64 3)
  %17 = icmp ne i64 %return150, 0
  br i1 %17, label %true151, label %false152

end147:                                           ; preds = %true217, %false218, %true205, %true193, %true181, %true169, %true163, %true157, %true151, %true145
  %idx.0 = phi i64 [ %return143, %true145 ], [ %minidx, %true151 ], [ %mididx, %true157 ], [ %maxidx, %true163 ], [ %return178, %true169 ], [ %return190, %true181 ], [ %return202, %true193 ], [ %return214, %true205 ], [ %return226, %true217 ], [ %return233, %false218 ]
  %return236 = call double @"getcomp@FVI"(<3 x double> %output26, i64 %idx.0)
  %cast237 = call <3 x double> @"set@VF"(double %return236)
  %return240 = call double @"getcomp@FVI"(<3 x double> %bboxsize1.0, i64 %idx.0)
  %cast241 = call <3 x double> @"set@VF"(double %return240)
  br label %end142

true151:                                          ; preds = %false146
  store <3 x double> %bboxsize1.0, <3 x double>* %0
  %minidx = call i64 @"minidx@IV"(<3 x double>* %0)
  br label %end147

false152:                                         ; preds = %false146
  %return156 = call i64 @"eq@III"(i64 %return143, i64 4)
  %18 = icmp ne i64 %return156, 0
  br i1 %18, label %true157, label %false158

true157:                                          ; preds = %false152
  store <3 x double> %bboxsize1.0, <3 x double>* %1
  %mididx = call i64 @"mididx@IV"(<3 x double>* %1)
  br label %end147

false158:                                         ; preds = %false152
  %return162 = call i64 @"eq@III"(i64 %return143, i64 5)
  %19 = icmp ne i64 %return162, 0
  br i1 %19, label %true163, label %false164

true163:                                          ; preds = %false158
  store <3 x double> %bboxsize1.0, <3 x double>* %2
  %maxidx = call i64 @"maxidx@IV"(<3 x double>* %2)
  br label %end147

false164:                                         ; preds = %false158
  %return168 = call i64 @"eq@III"(i64 %return143, i64 6)
  %20 = icmp ne i64 %return168, 0
  br i1 %20, label %true169, label %false170

true169:                                          ; preds = %false164
  %return173 = call double @"getcomp@FVI"(<3 x double> %bboxsize1.0, i64 0)
  %return175 = call double @"getcomp@FVI"(<3 x double> %bboxsize1.0, i64 1)
  %return176 = fcmp ole double %return173, %return175
  %return178 = select i1 %return176, i64 0, i64 1
  br label %end147

false170:                                         ; preds = %false164
  %return180 = call i64 @"eq@III"(i64 %return143, i64 7)
  %21 = icmp ne i64 %return180, 0
  br i1 %21, label %true181, label %false182

true181:                                          ; preds = %false170
  %return185 = call double @"getcomp@FVI"(<3 x double> %bboxsize1.0, i64 1)
  %return187 = call double @"getcomp@FVI"(<3 x double> %bboxsize1.0, i64 2)
  %return188 = fcmp ole double %return185, %return187
  %return190 = select i1 %return188, i64 1, i64 2
  br label %end147

false182:                                         ; preds = %false170
  %return192 = call i64 @"eq@III"(i64 %return143, i64 8)
  %22 = icmp ne i64 %return192, 0
  br i1 %22, label %true193, label %false194

true193:                                          ; preds = %false182
  %return197 = call double @"getcomp@FVI"(<3 x double> %bboxsize1.0, i64 2)
  %return199 = call double @"getcomp@FVI"(<3 x double> %bboxsize1.0, i64 0)
  %return200 = fcmp ole double %return197, %return199
  %return202 = select i1 %return200, i64 2, i64 0
  br label %end147

false194:                                         ; preds = %false182
  %return204 = call i64 @"eq@III"(i64 %return143, i64 9)
  %23 = icmp ne i64 %return204, 0
  br i1 %23, label %true205, label %false206

true205:                                          ; preds = %false194
  %return209 = call double @"getcomp@FVI"(<3 x double> %bboxsize1.0, i64 0)
  %return211 = call double @"getcomp@FVI"(<3 x double> %bboxsize1.0, i64 1)
  %return212 = fcmp oge double %return209, %return211
  %return214 = select i1 %return212, i64 0, i64 1
  br label %end147

false206:                                         ; preds = %false194
  %return216 = call i64 @"eq@III"(i64 %return143, i64 10)
  %24 = icmp ne i64 %return216, 0
  br i1 %24, label %true217, label %false218

true217:                                          ; preds = %false206
  %return221 = call double @"getcomp@FVI"(<3 x double> %bboxsize1.0, i64 1)
  %return223 = call double @"getcomp@FVI"(<3 x double> %bboxsize1.0, i64 2)
  %return224 = fcmp oge double %return221, %return223
  %return226 = select i1 %return224, i64 1, i64 2
  br label %end147

false218:                                         ; preds = %false206
  %return228 = call double @"getcomp@FVI"(<3 x double> %bboxsize1.0, i64 2)
  %return230 = call double @"getcomp@FVI"(<3 x double> %bboxsize1.0, i64 0)
  %return231 = fcmp oge double %return228, %return230
  %return233 = select i1 %return231, i64 2, i64 0
  br label %end147

true274:                                          ; preds = %end142
  %return277 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @47, i64 0, i64 0))
  %return278 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @48, i64 0, i64 0))
  %return279 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @49, i64 0, i64 0))
  %return280 = call <3 x double> @"set@VFFF"(double %return277, double %return278, double %return279)
  %output281 = call <3 x double> @"add@VV"(<3 x double> %output271, <3 x double> %return280)
  br label %end275

end275:                                           ; preds = %true274, %end142
  %s.1 = phi <3 x double> [ %output281, %true274 ], [ %output271, %end142 ]
  %return282 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @50, i64 0, i64 0))
  %return283 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @51, i64 0, i64 0))
  %return284 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @52, i64 0, i64 0))
  %return285 = call <3 x double> @"set@VFFF"(double %return282, double %return283, double %return284)
  %return290 = call <3 x double> @"efit@VVVVVV"(<3 x double> %return285, <3 x double> %cast50, <3 x double> %cast51, <3 x double> %cast51, <3 x double> %s.1)
  br label %end139

true305:                                          ; preds = %end139
  %output309 = call <3 x double> @"mul@V4"(<3 x double> %bboxmin0.0, <16 x double> %return303)
  %output312 = call <3 x double> @"mul@V4"(<3 x double> %bboxmax0.0, <16 x double> %return303)
  br label %cond

end306:                                           ; preds = %end315, %end139
  %xform.0 = phi <16 x double> [ %output350, %end315 ], [ %return303, %end139 ]
  %return351 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @60, i64 0, i64 0))
  %return352 = call i64 @"eq@III"(i64 %return351, i64 0)
  %25 = icmp ne i64 %return352, 0
  br i1 %25, label %true353, label %false354

cond:                                             ; preds = %end337, %true305
  %bboxmax0.1 = phi <3 x double> [ %output312, %true305 ], [ %bboxmax0.2, %end337 ]
  %i.0 = phi i64 [ 0, %true305 ], [ %output344, %end337 ]
  %bboxmin0.1 = phi <3 x double> [ %output309, %true305 ], [ %bboxmin0.2, %end337 ]
  %return314 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %26 = icmp ne i64 %return314, 0
  br i1 %26, label %body, label %end315

body:                                             ; preds = %cond
  %return318 = call double @"getcomp@FVI"(<3 x double> %bboxmin0.1, i64 %i.0)
  %return319 = call double @"abs@FF"(double %return318)
  %return320 = call double @"chf@FS"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @59, i64 0, i64 0))
  %return321 = fcmp oge double %return319, %return320
  br i1 %return321, label %true323, label %end324

end315:                                           ; preds = %cond
  %output348 = call <3 x double> @"add@VV"(<3 x double> %bboxmin0.1, <3 x double> %bboxmax0.1)
  %return349 = call <3 x double> @"neg@VV"(<3 x double> %output348)
  %output350 = call <16 x double> @"translate@4V"(<16 x double> %return303, <3 x double> %return349)
  br label %end306

true323:                                          ; preds = %body
  %return326 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %bboxmin0.1, double 0.000000e+00, i64 %i.0)
  %output328 = extractvalue { double, <3 x double> } %return326, 1
  br label %end324

end324:                                           ; preds = %true323, %body
  %bboxmin0.2 = phi <3 x double> [ %output328, %true323 ], [ %bboxmin0.1, %body ]
  %return331 = call double @"getcomp@FVI"(<3 x double> %bboxmax0.1, i64 %i.0)
  %return332 = call double @"abs@FF"(double %return331)
  %return334 = fcmp oge double %return332, %return320
  br i1 %return334, label %true336, label %end337

true336:                                          ; preds = %end324
  %return340 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %bboxmax0.1, double 0.000000e+00, i64 %i.0)
  %output342 = extractvalue { double, <3 x double> } %return340, 1
  br label %end337

end337:                                           ; preds = %true336, %end324
  %bboxmax0.2 = phi <3 x double> [ %output342, %true336 ], [ %bboxmax0.1, %end324 ]
  %output344 = add i64 %i.0, 1
  br label %cond

true353:                                          ; preds = %end306
  store <16 x double> %xform.0, <16 x double>* %_bound_xform
  br label %end355

false354:                                         ; preds = %end306
  %return358 = call i64 @"eq@III"(i64 %return351, i64 1)
  %27 = icmp ne i64 %return358, 0
  br i1 %27, label %true359, label %false360

end355:                                           ; preds = %true359, %false360, %true353
  ret void

true359:                                          ; preds = %false354
  %_bound_xform363 = load <16 x double>, <16 x double>* %_bound_xform
  %output364 = call <16 x double> @"mul@44"(<16 x double> %xform.0, <16 x double> %_bound_xform363)
  store <16 x double> %output364, <16 x double>* %_bound_xform
  br label %end355

false360:                                         ; preds = %false354
  %_bound_xform365 = load <16 x double>, <16 x double>* %_bound_xform
  %output367 = call <16 x double> @"mul@44"(<16 x double> %_bound_xform365, <16 x double> %xform.0)
  store <16 x double> %output367, <16 x double>* %_bound_xform
  br label %end355
}

; Function Attrs: alwaysinline nounwind
define private i64 @"minidx@IV"(<3 x double>* %arg) #0 {
__llvm_entry:
  %arg1 = load <3 x double>, <3 x double>* %arg
  %return = call double @"getcomp@FVI"(<3 x double> %arg1, i64 0)
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %val.0 = phi double [ %return, %__llvm_entry ], [ %val.1, %iter ]
  %i.0 = phi i64 [ 1, %__llvm_entry ], [ %output, %iter ]
  %idx.0 = phi i64 [ 0, %__llvm_entry ], [ %idx.1, %iter ]
  %return4 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %arg5 = load <3 x double>, <3 x double>* %arg
  %return7 = call double @"getcomp@FVI"(<3 x double> %arg5, i64 %i.0)
  %return9 = fcmp oge double %return7, %val.0
  br i1 %return9, label %iter, label %end11

end:                                              ; preds = %cond
  ret i64 %idx.0

iter:                                             ; preds = %body, %end11
  %val.1 = phi double [ %val.0, %body ], [ %return7, %end11 ]
  %idx.1 = phi i64 [ %idx.0, %body ], [ %i.0, %end11 ]
  %output = add i64 %i.0, 1
  br label %cond

end11:                                            ; preds = %body
  br label %iter
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: alwaysinline nounwind
define private i64 @"mididx@IV"(<3 x double>* %arg) #0 {
__llvm_entry:
  %arg1 = load <3 x double>, <3 x double>* %arg
  %return = call double @"getcomp@FVI"(<3 x double> %arg1, i64 1)
  %return3 = call double @"getcomp@FVI"(<3 x double> %arg1, i64 0)
  %return4 = fcmp ogt double %return, %return3
  %return7 = call double @"getcomp@FVI"(<3 x double> %arg1, i64 2)
  br i1 %return4, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return10 = fcmp ogt double %return7, %return
  br i1 %return10, label %true12, label %false13

false:                                            ; preds = %__llvm_entry
  %return28 = fcmp ogt double %return7, %return3
  br i1 %return28, label %true12, label %false31

true12:                                           ; preds = %false31, %false, %false13, %true
  %merge = phi i64 [ 1, %true ], [ %., %false13 ], [ 0, %false ], [ %.42, %false31 ]
  ret i64 %merge

false13:                                          ; preds = %true
  %return19 = fcmp ogt double %return7, %return3
  %. = select i1 %return19, i64 2, i64 0
  br label %true12

false31:                                          ; preds = %false
  %return37 = fcmp ogt double %return7, %return
  %.42 = select i1 %return37, i64 2, i64 1
  br label %true12
}

; Function Attrs: alwaysinline nounwind
define private i64 @"maxidx@IV"(<3 x double>* %arg) #0 {
__llvm_entry:
  %arg1 = load <3 x double>, <3 x double>* %arg
  %return = call double @"getcomp@FVI"(<3 x double> %arg1, i64 0)
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %val.0 = phi double [ %return, %__llvm_entry ], [ %val.1, %iter ]
  %i.0 = phi i64 [ 1, %__llvm_entry ], [ %output, %iter ]
  %idx.0 = phi i64 [ 0, %__llvm_entry ], [ %idx.1, %iter ]
  %return4 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %arg5 = load <3 x double>, <3 x double>* %arg
  %return7 = call double @"getcomp@FVI"(<3 x double> %arg5, i64 %i.0)
  %return9 = fcmp ole double %return7, %val.0
  br i1 %return9, label %iter, label %end11

end:                                              ; preds = %cond
  ret i64 %idx.0

iter:                                             ; preds = %body, %end11
  %val.1 = phi double [ %val.0, %body ], [ %return7, %end11 ]
  %idx.1 = phi i64 [ %idx.0, %body ], [ %i.0, %end11 ]
  %output = add i64 %i.0, 1
  br label %cond

end11:                                            ; preds = %body
  br label %iter
}

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind
declare { <3 x double>, <3 x double> } @"getbbox@IVV"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"efit@VVVVVV"(<3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #1

; Function Attrs: nounwind readnone
declare <16 x double> @"maketransform@4IIVVVVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"mul@V4"(<3 x double>, <16 x double>) #2

; Function Attrs: nounwind
declare double @"abs@FF"(double) #2

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double 0.000000e+00, i64 %rw33)
  %mrv9 = insertvalue { double, <3 x double> } { double 0.000000e+00, <3 x double> undef }, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <16 x double> @"translate@4V"(<16 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <16 x double> @"mul@44"(<16 x double>, <16 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(<16 x double> %xform) #2 {
__llvm_entry:
  %"<xform>" = alloca <16 x double>
  store <16 x double> %xform, <16 x double>* %"<xform>"
  call void @"__vex_snippet_snippet@4"(<16 x double>* %"<xform>")
  %evalue = load <16 x double>, <16 x double>* %"<xform>"
  %gvalue = call <16 x double> @"_export@4S4"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @61, i64 0, i64 0), <16 x double> %evalue) #4
  store <16 x double> %gvalue, <16 x double>* @xform
  ret void
}

declare <16 x double> @"_export@4S4"(i8*, <16 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<16 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

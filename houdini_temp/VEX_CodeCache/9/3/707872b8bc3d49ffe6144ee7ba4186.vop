;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"VEX\0A\00"
@1 = private constant [16 x i8] c"float:  %3.70f\0A\00"
@2 = private constant [16 x i8] c"attr32: %3.70f\0A\00"
@3 = private constant [16 x i8] c"attr64: %3.70f\0A\00"
@4 = private constant [24 x i8] c"\0AParameter expressions\0A\00"
@attrib_float = external global double
@attrib_double = external global double
@5 = private constant [13 x i8] c"attrib_float\00"
@6 = private constant [14 x i8] c"attrib_double\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FF"(double* %_bound_attrib_float, double* %_bound_attrib_double) #0 {
__llvm_entry:
  %output = call double @"div@FF"(double 1.000000e+00, double 3.000000e+00)
  call void @"printf@S"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  call void @"printf@S:F"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1, i64 0, i64 0), double %output)
  %_bound_attrib_float2 = load double, double* %_bound_attrib_float
  call void @"printf@S:F"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @2, i64 0, i64 0), double %_bound_attrib_float2)
  %_bound_attrib_double3 = load double, double* %_bound_attrib_double
  call void @"printf@S:F"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @3, i64 0, i64 0), double %_bound_attrib_double3)
  call void @"printf@S"(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @4, i64 0, i64 0))
  ret void
}

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
declare void @"printf@S"(i8*) #2

; Function Attrs: nounwind
declare void @"printf@S:F"(i8*, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(double %attrib_float, double %attrib_double) #2 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  store double %attrib_float, double* %0
  store double %attrib_double, double* %1
  call void @"__vex_snippet_snippet@FF"(double* %0, double* %1)
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @5, i64 0, i64 0), double %attrib_float) #3
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @6, i64 0, i64 0), double %attrib_double) #3
  store double %gvalue, double* @attrib_float
  store double %gvalue4, double* @attrib_double
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

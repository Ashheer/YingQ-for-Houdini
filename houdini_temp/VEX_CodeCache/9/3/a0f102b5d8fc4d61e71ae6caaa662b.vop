;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"opinput:1\00"
@1 = private constant [9 x i8] c"farthest\00"
@2 = private constant [13 x i8] c"hit_farthest\00"
@3 = private constant [9 x i8] c"max_dist\00"
@4 = private constant [9 x i8] c"dojitter\00"
@5 = private constant [7 x i8] c"sample\00"
@6 = private constant [7 x i8] c"jitter\00"
@7 = private constant [14 x i8] c"jittercombine\00"
@8 = private constant [5 x i8] c"seed\00"
@9 = private constant [10 x i8] c"mask_mode\00"
@10 = private constant [13 x i8] c"mask_density\00"
@11 = private constant [12 x i8] c"mask_invert\00"
@12 = private constant [15 x i8] c"mask_direction\00"
@13 = private constant [13 x i8] c"height_layer\00"
@14 = private constant [0 x double] zeroinitializer
@15 = private constant [15 x i8] c"combine_method\00"
@resz = external global i64
@dPdz = external global <3 x double>
@dPdx = external global <3 x double>
@dPdy = external global <3 x double>
@resy = external global i64
@P = external global <3 x double>
@density = external global double
@16 = private constant [5 x i8] c"resz\00"
@17 = private constant [5 x i8] c"dPdz\00"
@18 = private constant [5 x i8] c"dPdx\00"
@19 = private constant [5 x i8] c"dPdy\00"
@20 = private constant [5 x i8] c"resy\00"
@21 = private constant [2 x i8] c"P\00"
@22 = private constant [8 x i8] c"density\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVVVIVF"(i64* %_bound_resz, <3 x double>* %_bound_dPdz, <3 x double>* %_bound_dPdx, <3 x double>* %_bound_dPdy, i64* %_bound_resy, <3 x double>* %_bound_P, double* %_bound_density) #0 {
__llvm_entry:
  %center_dist = alloca double
  %dist = alloca double
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca i64
  %9 = alloca i64
  %_bound_resz1 = load i64, i64* %_bound_resz
  %return = call i64 @"eq@III"(i64 %_bound_resz1, i64 1)
  %10 = icmp ne i64 %return, 0
  br i1 %10, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_bound_dPdz2 = load <3 x double>, <3 x double>* %_bound_dPdz
  %_bound_dPdx3 = load <3 x double>, <3 x double>* %_bound_dPdx
  %_bound_dPdy4 = load <3 x double>, <3 x double>* %_bound_dPdy
  br label %end

false:                                            ; preds = %__llvm_entry
  %_bound_resy5 = load i64, i64* %_bound_resy
  %return6 = call i64 @"eq@III"(i64 %_bound_resy5, i64 1)
  %11 = icmp ne i64 %return6, 0
  br i1 %11, label %true7, label %false8

end:                                              ; preds = %true7, %false8, %true
  %right.0 = phi <3 x double> [ %_bound_dPdy4, %true ], [ %_bound_dPdz12, %true7 ], [ %_bound_dPdy15, %false8 ]
  %forward.0 = phi <3 x double> [ %_bound_dPdx3, %true ], [ %_bound_dPdx11, %true7 ], [ %_bound_dPdz14, %false8 ]
  %up.0 = phi <3 x double> [ %_bound_dPdz2, %true ], [ %_bound_dPdy10, %true7 ], [ %_bound_dPdx13, %false8 ]
  %return17 = call <3 x double> @"normalize@VV"(<3 x double> %up.0)
  %return18 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0))
  %return19 = call double @"ch@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0))
  %return20 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0))
  %return21 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0))
  %return22 = call double @"ch@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0))
  %return23 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @7, i64 0, i64 0))
  %return24 = call i64 @"chi@IS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0))
  store double 0.000000e+00, double* %center_dist
  store double 0.000000e+00, double* %dist, !vex-initializer-store !3
  %return25 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @9, i64 0, i64 0))
  %return26 = call double @"ch@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @10, i64 0, i64 0))
  %return27 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @11, i64 0, i64 0))
  %return28 = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @12, i64 0, i64 0))
  %12 = icmp ne i64 %return25, 0
  br i1 %12, label %true30, label %end31

true7:                                            ; preds = %false
  %_bound_dPdy10 = load <3 x double>, <3 x double>* %_bound_dPdy
  %_bound_dPdx11 = load <3 x double>, <3 x double>* %_bound_dPdx
  %_bound_dPdz12 = load <3 x double>, <3 x double>* %_bound_dPdz
  br label %end

false8:                                           ; preds = %false
  %_bound_dPdx13 = load <3 x double>, <3 x double>* %_bound_dPdx
  %_bound_dPdz14 = load <3 x double>, <3 x double>* %_bound_dPdz
  %_bound_dPdy15 = load <3 x double>, <3 x double>* %_bound_dPdy
  br label %end

true30:                                           ; preds = %end
  %return33 = call i64 @"eq@III"(i64 %return28, i64 0)
  %13 = icmp ne i64 %return33, 0
  br i1 %13, label %end31, label %false35

end31:                                            ; preds = %true39, %false40, %true30, %end
  %hitfarthest.0 = phi i64 [ %return18, %true30 ], [ 1, %true39 ], [ 0, %false40 ], [ %return18, %end ]
  %twosided.0 = phi i64 [ 1, %true30 ], [ 0, %true39 ], [ 0, %false40 ], [ 1, %end ]
  %return43 = call i64 @"not@II"(i64 %return20)
  %14 = icmp ne i64 %return43, 0
  br i1 %14, label %true44, label %end45

false35:                                          ; preds = %true30
  %return38 = call i64 @"eq@III"(i64 %return28, i64 1)
  %15 = icmp ne i64 %return38, 0
  br i1 %15, label %true39, label %false40

true39:                                           ; preds = %false35
  br label %end31

false40:                                          ; preds = %false35
  br label %end31

true44:                                           ; preds = %end31
  br label %end45

end45:                                            ; preds = %true44, %end31
  %numsamples.0 = phi i64 [ 1, %true44 ], [ %return21, %end31 ]
  %_bound_P46 = load <3 x double>, <3 x double>* %_bound_P
  br i1 %12, label %true48, label %end49

true48:                                           ; preds = %end45
  %return52 = call i8* @"chs@SS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @13, i64 0, i64 0))
  %return54 = call double @"volumesample@FISV"(i64 0, i8* %return52, <3 x double> %_bound_P46)
  %cast = call <3 x double> @"set@VF"(double %return54)
  %output = call <3 x double> @"mul@VV"(<3 x double> %return17, <3 x double> %cast)
  %output55 = call <3 x double> @"add@VV"(<3 x double> %_bound_P46, <3 x double> %output)
  br label %end49

end49:                                            ; preds = %true48, %end45
  %basepos.0 = phi <3 x double> [ %output55, %true48 ], [ %_bound_P46, %end45 ]
  store <3 x double> %basepos.0, <3 x double>* %0
  store <3 x double> %return17, <3 x double>* %1
  store double %return19, double* %2
  store i64 %hitfarthest.0, i64* %3
  store i64 %twosided.0, i64* %4
  %getintersectdist = call i64 @"getintersectdist@IFVVFII"(double* %center_dist, <3 x double>* %0, <3 x double>* %1, double* %2, i64* %3, i64* %4)
  %return62 = call i64 @"eq@III"(i64 %numsamples.0, i64 1)
  %16 = icmp ne i64 %return62, 0
  br i1 %16, label %true63, label %false64

true63:                                           ; preds = %end49
  %center_dist66 = load double, double* %center_dist
  br label %end65

false64:                                          ; preds = %end49
  %17 = icmp ne i64 %getintersectdist, 0
  br i1 %17, label %true69, label %end70

end65:                                            ; preds = %false156, %true162, %true155, %true144, %true137, %true130, %true124, %true63
  %combined_dist.0 = phi double [ %center_dist66, %true63 ], [ 0.000000e+00, %true124 ], [ %return134, %true130 ], [ %return141, %true137 ], [ %return152, %true144 ], [ %return159, %true155 ], [ %return165, %true162 ], [ 0.000000e+00, %false156 ]
  %combined_intersected.0 = phi i64 [ %getintersectdist, %true63 ], [ 0, %true124 ], [ 1, %true130 ], [ 1, %true137 ], [ 1, %true144 ], [ 1, %true155 ], [ 1, %true162 ], [ 1, %false156 ]
  br i1 %12, label %true167, label %end168

true69:                                           ; preds = %false64
  %center_dist72 = load double, double* %center_dist
  %output73 = call double* @"append@[FF"(double* getelementptr inbounds ([0 x double], [0 x double]* @14, i64 0, i64 0), double %center_dist72)
  br label %end70

end70:                                            ; preds = %true69, %false64
  %dists.0 = phi double* [ %output73, %true69 ], [ getelementptr inbounds ([0 x double], [0 x double]* @14, i64 0, i64 0), %false64 ]
  br label %cond

cond:                                             ; preds = %end115, %end70
  %dists.1 = phi double* [ %dists.0, %end70 ], [ %dists.2, %end115 ]
  %i.0 = phi i64 [ 1, %end70 ], [ %output120, %end115 ]
  %return76 = call i64 @"lt@III"(i64 %i.0, i64 %numsamples.0)
  %18 = icmp ne i64 %return76, 0
  br i1 %18, label %body, label %end77

body:                                             ; preds = %cond
  %_bound_P78 = load <3 x double>, <3 x double>* %_bound_P
  %return79 = call double @"getcomp@FVI"(<3 x double> %_bound_P78, i64 0)
  %return81 = call double @"getcomp@FVI"(<3 x double> %_bound_P78, i64 1)
  %return83 = call double @"getcomp@FVI"(<3 x double> %_bound_P78, i64 2)
  %output86 = add i64 %i.0, %return24
  %cast87 = sitofp i64 %output86 to double
  %output88 = fmul double %cast87, 0x400921FB4D12D84A
  %return89 = call <4 x double> @"set@PFFFF"(double %return79, double %return81, double %return83, double %output88)
  %return90 = call double @"rand@FP"(<4 x double> %return89)
  %output92 = fmul double %return90, %return22
  %cast93 = call <2 x double> @"set@UF"(double %output92)
  %return95 = call double @"getcomp@FUI"(<2 x double> %cast93, i64 0)
  %cast97 = call <3 x double> @"set@VF"(double %return95)
  %output98 = call <3 x double> @"mul@VV"(<3 x double> %cast97, <3 x double> %right.0)
  %return100 = call double @"getcomp@FUI"(<2 x double> %cast93, i64 1)
  %cast102 = call <3 x double> @"set@VF"(double %return100)
  %output103 = call <3 x double> @"mul@VV"(<3 x double> %cast102, <3 x double> %forward.0)
  %output104 = call <3 x double> @"add@VV"(<3 x double> %output98, <3 x double> %output103)
  %output107 = call <3 x double> @"add@VV"(<3 x double> %basepos.0, <3 x double> %output104)
  store <3 x double> %output107, <3 x double>* %5
  store <3 x double> %return17, <3 x double>* %6
  store double %return19, double* %7
  store i64 %hitfarthest.0, i64* %8
  store i64 %twosided.0, i64* %9
  %getintersectdist112 = call i64 @"getintersectdist@IFVVFII"(double* %dist, <3 x double>* %5, <3 x double>* %6, double* %7, i64* %8, i64* %9)
  %19 = icmp ne i64 %getintersectdist112, 0
  br i1 %19, label %true114, label %end115

end77:                                            ; preds = %cond
  %return122 = call i64 @"len@I[F"(double* %dists.1)
  %return123 = call i64 @"eq@III"(i64 %return122, i64 0)
  %20 = icmp ne i64 %return123, 0
  br i1 %20, label %true124, label %false125

true114:                                          ; preds = %body
  %dist117 = load double, double* %dist
  %output118 = call double* @"append@[FF"(double* %dists.1, double %dist117)
  br label %end115

end115:                                           ; preds = %true114, %body
  %dists.2 = phi double* [ %output118, %true114 ], [ %dists.1, %body ]
  %output120 = add i64 %i.0, 1
  br label %cond

true124:                                          ; preds = %end77
  br label %end65

false125:                                         ; preds = %end77
  %return129 = call i64 @"eq@III"(i64 %return122, i64 1)
  %21 = icmp ne i64 %return129, 0
  br i1 %21, label %true130, label %false131

true130:                                          ; preds = %false125
  %return134 = call double @"getcomp@F[FI"(double* %dists.1, i64 0)
  br label %end65

false131:                                         ; preds = %false125
  %return136 = call i64 @"eq@III"(i64 %return23, i64 0)
  %22 = icmp ne i64 %return136, 0
  br i1 %22, label %true137, label %false138

true137:                                          ; preds = %false131
  %return141 = call double @"avg@F[F"(double* %dists.1)
  br label %end65

false138:                                         ; preds = %false131
  %return143 = call i64 @"eq@III"(i64 %return23, i64 1)
  %23 = icmp ne i64 %return143, 0
  br i1 %23, label %true144, label %false145

true144:                                          ; preds = %false138
  %return148 = call double* @"sort@[F[F"(double* %dists.1)
  %output150 = add i64 %numsamples.0, 1
  %output151 = call i64 @"div@II"(i64 %output150, i64 2)
  %return152 = call double @"getcomp@F[FI"(double* %return148, i64 %output151)
  br label %end65

false145:                                         ; preds = %false138
  %return154 = call i64 @"eq@III"(i64 %return23, i64 2)
  %24 = icmp ne i64 %return154, 0
  br i1 %24, label %true155, label %false156

true155:                                          ; preds = %false145
  %return159 = call double @"min@F[F"(double* %dists.1)
  br label %end65

false156:                                         ; preds = %false145
  %return161 = call i64 @"eq@III"(i64 %return23, i64 3)
  %25 = icmp ne i64 %return161, 0
  br i1 %25, label %true162, label %end65

true162:                                          ; preds = %false156
  %return165 = call double @"max@F[F"(double* %dists.1)
  br label %end65

true167:                                          ; preds = %end65
  %26 = icmp ne i64 %return27, 0
  br i1 %26, label %true170, label %end171

end168:                                           ; preds = %end171, %end65
  %combined_dist.1 = phi double [ %phi, %end171 ], [ %combined_dist.0, %end65 ]
  %combined_intersected.1 = phi i64 [ %combined_intersected.2, %end171 ], [ %combined_intersected.0, %end65 ]
  %27 = icmp ne i64 %combined_intersected.1, 0
  br i1 %27, label %true180, label %end181

true170:                                          ; preds = %true167
  %return173 = call i64 @"not@II"(i64 %combined_intersected.0)
  br label %end171

end171:                                           ; preds = %true170, %true167
  %combined_intersected.2 = phi i64 [ %return173, %true170 ], [ %combined_intersected.0, %true167 ]
  %28 = icmp ne i64 %combined_intersected.2, 0
  %phi = select i1 %28, double %return26, double 0.000000e+00
  br label %end168

true180:                                          ; preds = %end168
  %return182 = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @15, i64 0, i64 0))
  %return184 = call i64 @"eq@III"(i64 %return182, i64 0)
  %29 = icmp ne i64 %return184, 0
  br i1 %29, label %true185, label %false186

end181:                                           ; preds = %false208, %true215, %true207, %true199, %true191, %true185, %end168
  ret void

true185:                                          ; preds = %true180
  store double %combined_dist.1, double* %_bound_density
  br label %end181

false186:                                         ; preds = %true180
  %return190 = call i64 @"eq@III"(i64 %return182, i64 1)
  %30 = icmp ne i64 %return190, 0
  br i1 %30, label %true191, label %false192

true191:                                          ; preds = %false186
  %_bound_density194 = load double, double* %_bound_density
  %output196 = fadd double %_bound_density194, %combined_dist.1
  store double %output196, double* %_bound_density
  br label %end181

false192:                                         ; preds = %false186
  %return198 = call i64 @"eq@III"(i64 %return182, i64 2)
  %31 = icmp ne i64 %return198, 0
  br i1 %31, label %true199, label %false200

true199:                                          ; preds = %false192
  %_bound_density202 = load double, double* %_bound_density
  %output204 = fmul double %_bound_density202, %combined_dist.1
  store double %output204, double* %_bound_density
  br label %end181

false200:                                         ; preds = %false192
  %return206 = call i64 @"eq@III"(i64 %return182, i64 3)
  %32 = icmp ne i64 %return206, 0
  br i1 %32, label %true207, label %false208

true207:                                          ; preds = %false200
  %_bound_density211 = load double, double* %_bound_density
  %return212 = call double @"max@FFF"(double %combined_dist.1, double %_bound_density211)
  store double %return212, double* %_bound_density
  br label %end181

false208:                                         ; preds = %false200
  %return214 = call i64 @"eq@III"(i64 %return182, i64 4)
  %33 = icmp ne i64 %return214, 0
  br i1 %33, label %true215, label %end181

true215:                                          ; preds = %false208
  %_bound_density218 = load double, double* %_bound_density
  %return219 = call double @"min@FFF"(double %combined_dist.1, double %_bound_density218)
  store double %return219, double* %_bound_density
  br label %end181
}

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: alwaysinline nounwind
define private i64 @"getintersectdist@IFVVFII"(double* %dist, <3 x double>* %start, <3 x double>* %up, double* %maxdist, i64* %hitfarthest, i64* %twosided) #0 {
__llvm_entry:
  %up1 = load <3 x double>, <3 x double>* %up
  %maxdist2 = load double, double* %maxdist
  %cast = call <3 x double> @"set@VF"(double %maxdist2)
  %output = call <3 x double> @"mul@VV"(<3 x double> %up1, <3 x double> %cast)
  %hitfarthest3 = load i64, i64* %hitfarthest
  %return = call i64 @"not@II"(i64 %hitfarthest3)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return5 = call i64 @"neg@II"(i64 1)
  %cast6 = call <3 x double> @"set@VI"(i64 %return5)
  %output7 = call <3 x double> @"mul@VV"(<3 x double> %output, <3 x double> %cast6)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %raydir.0 = phi <3 x double> [ %output7, %true ], [ %output, %__llvm_entry ]
  %start8 = load <3 x double>, <3 x double>* %start
  %return10 = call { i64, <3 x double>, double, double } @"intersect@ISVVVFF:SI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), <3 x double> %start8, <3 x double> %raydir.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0), i64 1)
  %return11 = extractvalue { i64, <3 x double>, double, double } %return10, 0
  %output12 = extractvalue { i64, <3 x double>, double, double } %return10, 1
  %return16 = call i64 @"lt@III"(i64 %return11, i64 0)
  %twosided17 = load i64, i64* %twosided
  %return18 = call i64 @"and@III"(i64 %return16, i64 %twosided17)
  %1 = icmp ne i64 %return18, 0
  br i1 %1, label %true19, label %end20

true19:                                           ; preds = %end
  %return23 = call i64 @"neg@II"(i64 1)
  %cast24 = call <3 x double> @"set@VI"(i64 %return23)
  %output25 = call <3 x double> @"mul@VV"(<3 x double> %raydir.0, <3 x double> %cast24)
  %return26 = call { i64, <3 x double>, double, double } @"intersect@ISVVVFF:SI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), <3 x double> %start8, <3 x double> %output25, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0), i64 0)
  %return27 = extractvalue { i64, <3 x double>, double, double } %return26, 0
  %output28 = extractvalue { i64, <3 x double>, double, double } %return26, 1
  br label %end20

end20:                                            ; preds = %true19, %end
  %hitprim.0 = phi i64 [ %return27, %true19 ], [ %return11, %end ]
  %hitpos.0 = phi <3 x double> [ %output28, %true19 ], [ %output12, %end ]
  %return32 = call i64 @"lt@III"(i64 %hitprim.0, i64 0)
  %2 = icmp ne i64 %return32, 0
  br i1 %2, label %true33, label %false

true33:                                           ; preds = %end20
  br label %UnifiedReturnBlock

false:                                            ; preds = %end20
  %start36 = load <3 x double>, <3 x double>* %start
  %output37 = call <3 x double> @"sub@VV"(<3 x double> %hitpos.0, <3 x double> %start36)
  %up38 = load <3 x double>, <3 x double>* %up
  %return39 = call double @"dot@FVV"(<3 x double> %output37, <3 x double> %up38)
  store double %return39, double* %dist
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %false, %true33
  %UnifiedRetVal = phi i64 [ 0, %true33 ], [ 1, %false ]
  ret i64 %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare { i64, <3 x double>, double, double } @"intersect@ISVVVFF:SI"(i8*, <3 x double>, <3 x double>, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare double @"volumesample@FISV"(i64, i8*, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PFFFF"(double, double, double, double) #1

; Function Attrs: nounwind
declare double @"rand@FP"(<4 x double>) #2

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UF"(double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[F"(double*) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #1

; Function Attrs: nounwind
declare double @"avg@F[F"(double*) #2

; Function Attrs: nounwind
declare double* @"sort@[F[F"(double*) #2

; Function Attrs: nounwind readnone
declare i64 @"div@II"(i64, i64) #1

; Function Attrs: nounwind
declare double @"min@F[F"(double*) #2

; Function Attrs: nounwind
declare double @"max@F[F"(double*) #2

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"min@FFF"(double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %resz, <3 x double> %dPdz, <3 x double> %dPdx, <3 x double> %dPdy, i64 %resy, <3 x double> %P, double %density) #2 {
__llvm_entry:
  %"<density>" = alloca double
  %0 = alloca i64
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  %3 = alloca <3 x double>
  %4 = alloca i64
  %5 = alloca <3 x double>
  store double %density, double* %"<density>"
  store i64 %resz, i64* %0
  store <3 x double> %dPdz, <3 x double>* %1
  store <3 x double> %dPdx, <3 x double>* %2
  store <3 x double> %dPdy, <3 x double>* %3
  store i64 %resy, i64* %4
  store <3 x double> %P, <3 x double>* %5
  call void @"__vex_snippet_snippet@IVVVIVF"(i64* %0, <3 x double>* %1, <3 x double>* %2, <3 x double>* %3, i64* %4, <3 x double>* %5, double* %"<density>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @16, i64 0, i64 0), i64 %resz) #3
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i64 0, i64 0), <3 x double> %dPdz) #3
  %gvalue10 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @18, i64 0, i64 0), <3 x double> %dPdx) #3
  %gvalue12 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @19, i64 0, i64 0), <3 x double> %dPdy) #3
  %gvalue14 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @20, i64 0, i64 0), i64 %resy) #3
  %gvalue16 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @21, i64 0, i64 0), <3 x double> %P) #3
  %evalue17 = load double, double* %"<density>"
  %gvalue18 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @22, i64 0, i64 0), double %evalue17) #3
  store i64 %gvalue, i64* @resz
  store <3 x double> %gvalue8, <3 x double>* @dPdz
  store <3 x double> %gvalue10, <3 x double>* @dPdx
  store <3 x double> %gvalue12, <3 x double>* @dPdy
  store i64 %gvalue14, i64* @resy
  store <3 x double> %gvalue16, <3 x double>* @P
  store double %gvalue18, double* @density
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, i64 0, <3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end

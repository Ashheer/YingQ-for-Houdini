;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [0 x double] zeroinitializer
@2 = private constant [11 x i8] c"neighbours\00"
@3 = private constant [8 x i8] c"weights\00"
@4 = private constant [11 x i8] c"weight_sum\00"
@5 = private constant [1 x i8] zeroinitializer
@OpInput1 = external global i8*
@stiff_mat_row = external global i64*
@stiff_mat_col = external global i64*
@stiff_mat_weight = external global double*
@6 = private constant [9 x i8] c"OpInput1\00"
@7 = private constant [14 x i8] c"stiff_mat_row\00"
@8 = private constant [14 x i8] c"stiff_mat_col\00"
@9 = private constant [17 x i8] c"stiff_mat_weight\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@S[I[I[F"(i8** %_bound_OpInput1, i64** %_bound_stiff_mat_row, i64** %_bound_stiff_mat_col, double** %_bound_stiff_mat_weight) #0 {
__llvm_entry:
  br label %cond

cond:                                             ; preds = %end28, %__llvm_entry
  %mat_weight.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), %__llvm_entry ], [ %mat_weight.1, %end28 ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output48, %end28 ]
  %mat_col.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %__llvm_entry ], [ %mat_col.1, %end28 ]
  %mat_row.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %__llvm_entry ], [ %mat_row.1, %end28 ]
  %_bound_OpInput12 = load i8*, i8** %_bound_OpInput1
  %return = call i64 @"npoints@IS"(i8* %_bound_OpInput12)
  %return3 = call i64 @"lt@III"(i64 %i.0, i64 %return)
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return6 = call i64* @"point@[ISSI"(i8* %_bound_OpInput12, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0), i64 %i.0)
  %return9 = call double* @"point@[FSSI"(i8* %_bound_OpInput12, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), i64 %i.0)
  %return12 = call double @"point@FSSI"(i8* %_bound_OpInput12, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0), i64 %i.0)
  %output = call i64* @"append@[II"(i64* %mat_row.0, i64 %i.0)
  %output17 = call i64* @"append@[II"(i64* %mat_col.0, i64 %i.0)
  %return20 = call double @"neg@FF"(double %return12)
  %output21 = call double* @"append@[FF"(double* %mat_weight.0, double %return20)
  br label %cond22

end:                                              ; preds = %cond
  store i64* %mat_row.0, i64** %_bound_stiff_mat_row
  store i64* %mat_col.0, i64** %_bound_stiff_mat_col
  store double* %mat_weight.0, double** %_bound_stiff_mat_weight
  ret void

cond22:                                           ; preds = %body23, %body
  %mat_weight.1 = phi double* [ %output21, %body ], [ %output42, %body23 ]
  %mat_col.1 = phi i64* [ %output17, %body ], [ %output37, %body23 ]
  %n.0 = phi i64 [ 0, %body ], [ %output45, %body23 ]
  %mat_row.1 = phi i64* [ %output, %body ], [ %output32, %body23 ]
  %return26 = call i64 @"len@I[I"(i64* %return6)
  %return27 = call i64 @"lt@III"(i64 %n.0, i64 %return26)
  %1 = icmp ne i64 %return27, 0
  br i1 %1, label %body23, label %end28

body23:                                           ; preds = %cond22
  %output32 = call i64* @"append@[II"(i64* %mat_row.1, i64 %i.0)
  %return36 = call i64 @"getcomp@I[II"(i64* %return6, i64 %n.0)
  %output37 = call i64* @"append@[II"(i64* %mat_col.1, i64 %return36)
  %return41 = call double @"getcomp@F[FI"(double* %return9, i64 %n.0)
  %output42 = call double* @"append@[FF"(double* %mat_weight.1, double %return41)
  %output45 = add i64 %n.0, 1
  br label %cond22

end28:                                            ; preds = %cond22
  %output48 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare i64 @"npoints@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64* @"point@[ISSI"(i8*, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double* @"point@[FSSI"(i8*, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"point@FSSI"(i8*, i8*, i64) #1

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %OpInput1, i64* %stiff_mat_row, i64* %stiff_mat_col, double* %stiff_mat_weight) #2 {
__llvm_entry:
  %"<stiff_mat_row>" = alloca i64*
  %"<stiff_mat_col>" = alloca i64*
  %"<stiff_mat_weight>" = alloca double*
  %0 = alloca i8*
  store i64* %stiff_mat_row, i64** %"<stiff_mat_row>"
  store i64* %stiff_mat_col, i64** %"<stiff_mat_col>"
  store double* %stiff_mat_weight, double** %"<stiff_mat_weight>"
  store i8* %OpInput1, i8** %0
  call void @"__vex_snippet_snippet@S[I[I[F"(i8** %0, i64** %"<stiff_mat_row>", i64** %"<stiff_mat_col>", double** %"<stiff_mat_weight>")
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @6, i64 0, i64 0), i8* %OpInput1) #3
  %evalue2 = load i64*, i64** %"<stiff_mat_row>"
  %gvalue3 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @7, i64 0, i64 0), i64* %evalue2) #3
  %evalue4 = load i64*, i64** %"<stiff_mat_col>"
  %gvalue5 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @8, i64 0, i64 0), i64* %evalue4) #3
  %evalue6 = load double*, double** %"<stiff_mat_weight>"
  %gvalue7 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @9, i64 0, i64 0), double* %evalue6) #3
  store i8* %gvalue, i8** @OpInput1
  store i64* %gvalue3, i64** @stiff_mat_row
  store i64* %gvalue5, i64** @stiff_mat_col
  store double* %gvalue7, double** @stiff_mat_weight
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i64* @"_export@[IS[I"(i8*, i64*)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @5, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [8 x i8] c"distmax\00"
@1 = private constant [7 x i8] c"height\00"
@dist = external global double
@P = external global <3 x double>
@N = external global <3 x double>
@2 = private constant [5 x i8] c"dist\00"
@3 = private constant [2 x i8] c"P\00"
@4 = private constant [2 x i8] c"N\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FVV"(double* %_bound_dist, <3 x double>* %_bound_P, <3 x double>* %_bound_N) #0 {
__llvm_entry:
  %return = call double @"detail@FIS"(i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %_bound_dist1 = load double, double* %_bound_dist
  %return3 = call double @"fit@FFFFFF"(double %_bound_dist1, double 0.000000e+00, double %return, double 0.000000e+00, double 1.000000e+00)
  %return5 = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %output = fmul double %return3, %return5
  %_bound_P6 = load <3 x double>, <3 x double>* %_bound_P
  %_bound_N7 = load <3 x double>, <3 x double>* %_bound_N
  %cast = call <3 x double> @"set@VF"(double %output)
  %output9 = call <3 x double> @"mul@VV"(<3 x double> %_bound_N7, <3 x double> %cast)
  %output10 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P6, <3 x double> %output9)
  store <3 x double> %output10, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind
declare double @"detail@FIS"(i64, i8*) #1

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(double %dist, <3 x double> %P, <3 x double> %N) #1 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca double
  %1 = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store double %dist, double* %0
  store <3 x double> %N, <3 x double>* %1
  call void @"__vex_snippet_snippet@FVV"(double* %0, <3 x double>* %"<P>", <3 x double>* %1)
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), double %dist) #3
  %evalue3 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %evalue3) #3
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), <3 x double> %N) #3
  store double %gvalue, double* @dist
  store <3 x double> %gvalue4, <3 x double>* @P
  store <3 x double> %gvalue6, <3 x double>* @N
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

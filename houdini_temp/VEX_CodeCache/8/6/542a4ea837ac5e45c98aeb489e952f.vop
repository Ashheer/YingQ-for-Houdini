;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [11 x i8] c"attributes\00"
@1 = private constant [2 x i8] c" \00"
@limitprimuv = external global <3 x double>
@limitprim = external global i64
@ptnum = external global i64
@2 = private constant [12 x i8] c"limitprimuv\00"
@3 = private constant [10 x i8] c"limitprim\00"
@4 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VII"(<3 x double>* %_bound_limitprimuv, i64* %_bound_limitprim, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound_limitprimuv1 = load <3 x double>, <3 x double>* %_bound_limitprimuv
  %_bound_limitprim2 = load i64, i64* %_bound_limitprim
  %return = call double @"getcomp@FVI"(<3 x double> %_bound_limitprimuv1, i64 0)
  %return5 = call double @"getcomp@FVI"(<3 x double> %_bound_limitprimuv1, i64 1)
  %return6 = call { i64, i64, double, double } @"osd_lookuppatch@IIIFFIFF"(i64 1, i64 %_bound_limitprim2, double %return, double %return5)
  %output = extractvalue { i64, i64, double, double } %return6, 1
  %output8 = extractvalue { i64, i64, double, double } %return6, 2
  %output9 = extractvalue { i64, i64, double, double } %return6, 3
  %return10 = call i8* @"chs@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i64 0, i64 0))
  %return11 = call i8** @"split@[SSS"(i8* %return10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0))
  %return13 = call i64 @"len@I[S"(i8** %return11)
  br label %cond

cond:                                             ; preds = %end27, %__llvm_entry
  %__impl_foreach_index.0 = phi i64 [ 0, %__llvm_entry ], [ %output34, %end27 ]
  %return16 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return13)
  %0 = icmp ne i64 %return16, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return19 = call i8* @"getcomp@S[SI"(i8** %return11, i64 %__impl_foreach_index.0)
  %return24 = call { i64, double* } @"osd_limitsurface@IISIFF[F"(i64 1, i8* %return19, i64 %output, double %output8, double %output9)
  %return25 = extractvalue { i64, double* } %return24, 0
  %output26 = extractvalue { i64, double* } %return24, 1
  %1 = icmp ne i64 %return25, 0
  br i1 %1, label %true, label %end27

end:                                              ; preds = %cond
  ret void

true:                                             ; preds = %body
  %return28 = call i64 @"geoself@I"()
  %_bound_ptnum30 = load i64, i64* %_bound_ptnum
  %return32 = call i64 @"setpointattrib@IISI[F"(i64 %return28, i8* %return19, i64 %_bound_ptnum30, double* %output26)
  br label %end27

end27:                                            ; preds = %true, %body
  %output34 = add i64 %__impl_foreach_index.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
declare { i64, i64, double, double } @"osd_lookuppatch@IIIFFIFF"(i64, i64, double, double) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8** @"split@[SSS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #1

; Function Attrs: nounwind
declare { i64, double* } @"osd_limitsurface@IISIFF[F"(i64, i8*, i64, double, double) #2

; Function Attrs: nounwind
declare i64 @"geoself@I"() #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISI[F"(i64, i8*, i64, double*) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %limitprimuv, i64 %limitprim, i64 %ptnum) #2 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca i64
  %2 = alloca i64
  store <3 x double> %limitprimuv, <3 x double>* %0
  store i64 %limitprim, i64* %1
  store i64 %ptnum, i64* %2
  call void @"__vex_snippet_snippet@VII"(<3 x double>* %0, i64* %1, i64* %2)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i64 0, i64 0), <3 x double> %limitprimuv) #3
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), i64 %limitprim) #3
  %gvalue7 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #3
  store <3 x double> %gvalue, <3 x double>* @limitprimuv
  store i64 %gvalue5, i64* @limitprim
  store i64 %gvalue7, i64* @ptnum
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

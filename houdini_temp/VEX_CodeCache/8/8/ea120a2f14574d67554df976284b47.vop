;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [6 x i8] c"range\00"
@2 = private constant [14 x i8] c"amount_points\00"
@P = external global <3 x double>
@ptnum = external global i64
@3 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VI"(<3 x double>* %_bound_P, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"pcopen@IISVFI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %_bound_P1, double %return, i64 10)
  %return4 = call i64 @"pcnumfound@II"(i64 %return2)
  %return5 = call double @"ch@FS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @2, i64 0, i64 0))
  %cast = sitofp i64 %return4 to double
  %return6 = fcmp ogt double %cast, %return5
  br i1 %return6, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_ptnum8 = load i64, i64* %_bound_ptnum
  %return9 = call i64 @"removepoint@III"(i64 0, i64 %_bound_ptnum8)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"pcopen@IISVFI"(i64, i8*, <3 x double>, double, i64) #2

; Function Attrs: nounwind
declare i64 @"pcnumfound@II"(i64) #2

; Function Attrs: nounwind
declare i64 @"removepoint@III"(i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, i64 %ptnum) #2 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca i64
  store <3 x double> %P, <3 x double>* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@VI"(<3 x double>* %0, i64* %1)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %P) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store i64 %gvalue4, i64* @ptnum
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

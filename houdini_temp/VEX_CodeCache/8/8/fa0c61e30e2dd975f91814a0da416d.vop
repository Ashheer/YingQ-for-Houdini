;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@nbc = external global i64
@P = external global <3 x double>
@N_1 = external global <3 x double>
@dist = external global double
@0 = private constant [4 x i8] c"nbc\00"
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [4 x i8] c"N_1\00"
@3 = private constant [5 x i8] c"dist\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVVF"(i64* %_bound_nbc, <3 x double>* %_bound_P, <3 x double>* %_bound_N_1, double* %_bound_dist) #0 {
__llvm_entry:
  %_bound_nbc1 = load i64, i64* %_bound_nbc
  %return = call i64 @"ne@III"(i64 %_bound_nbc1, i64 3)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %_bound_N_13 = load <3 x double>, <3 x double>* %_bound_N_1
  %return4 = call <3 x double> @"normalize@VV"(<3 x double> %_bound_N_13)
  %_bound_dist5 = load double, double* %_bound_dist
  %cast = call <3 x double> @"set@VF"(double %_bound_dist5)
  %output = call <3 x double> @"mul@VV"(<3 x double> %return4, <3 x double> %cast)
  %output6 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P2, <3 x double> %output)
  store <3 x double> %output6, <3 x double>* %_bound_P
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %nbc, <3 x double> %P, <3 x double> %N_1, double %dist) #2 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca <3 x double>
  %2 = alloca double
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %nbc, i64* %0
  store <3 x double> %N_1, <3 x double>* %1
  store double %dist, double* %2
  call void @"__vex_snippet_snippet@IVVF"(i64* %0, <3 x double>* %"<P>", <3 x double>* %1, double* %2)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i64 0, i64 0), i64 %nbc) #3
  %evalue4 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue4) #3
  %gvalue7 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i64 0, i64 0), <3 x double> %N_1) #3
  %gvalue9 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), double %dist) #3
  store i64 %gvalue, i64* @nbc
  store <3 x double> %gvalue5, <3 x double>* @P
  store <3 x double> %gvalue7, <3 x double>* @N_1
  store double %gvalue9, double* @dist
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

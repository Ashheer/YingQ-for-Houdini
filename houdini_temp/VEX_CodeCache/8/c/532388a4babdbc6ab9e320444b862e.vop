;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [7 x i8] c"height\00"
@edgedist = external global double
@vtxnum = external global i64
@2 = private constant [9 x i8] c"edgedist\00"
@3 = private constant [7 x i8] c"vtxnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FI"(double* %_bound_edgedist, i64* %_bound_vtxnum) #0 {
__llvm_entry:
  %_bound_edgedist1 = load double, double* %_bound_edgedist
  %return = fcmp ogt double %_bound_edgedist1, 1.000000e-03
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_vtxnum3 = load i64, i64* %_bound_vtxnum
  %return4 = call i64 @"vertexpoint@III"(i64 0, i64 %_bound_vtxnum3)
  %return6 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return4)
  %return9 = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %_bound_edgedist10 = load double, double* %_bound_edgedist
  %output = fmul double %return9, %_bound_edgedist10
  %return11 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double %output, double 0.000000e+00)
  %output12 = call <3 x double> @"add@VV"(<3 x double> %return6, <3 x double> %return11)
  %return13 = call i64 @"setpointattrib@IISIV"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return4, <3 x double> %output12)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind
declare i64 @"vertexpoint@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIV"(i64, i8*, i64, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %edgedist, i64 %vtxnum) #1 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca i64
  store double %edgedist, double* %0
  store i64 %vtxnum, i64* %1
  call void @"__vex_snippet_snippet@FI"(double* %0, i64* %1)
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), double %edgedist) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), i64 %vtxnum) #3
  store double %gvalue, double* @edgedist
  store i64 %gvalue4, i64* @vtxnum
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.383"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"%s %s\00"
@1 = private constant [1 x i8] zeroinitializer
@hashpair = external global i8*
@pthash0 = external global double
@pthash1 = external global double
@2 = private constant [9 x i8] c"hashpair\00"
@3 = private constant [8 x i8] c"pthash0\00"
@4 = private constant [8 x i8] c"pthash1\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SFF"(i8** %_bound_hashpair, double* %_bound_pthash0, double* %_bound_pthash1) #0 {
__llvm_entry:
  %_bound_pthash01 = load double, double* %_bound_pthash0
  %cast = fptosi double %_bound_pthash01 to i64
  %_bound_pthash12 = load double, double* %_bound_pthash1
  %cast3 = fptosi double %_bound_pthash12 to i64
  %return = call i8* @"sprintf@SS:II"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i64 %cast, i64 %cast3)
  store i8* %return, i8** %_bound_hashpair
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"sprintf@SS:II"(i8*, i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %hashpair, double %pthash0, double %pthash1) #2 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %"<hashpair>" = alloca i8*
  store i8* %hashpair, i8** %"<hashpair>"
  store double %pthash0, double* %0
  store double %pthash1, double* %1
  call void @"__vex_snippet_snippet@SFF"(i8** %"<hashpair>", double* %0, double* %1)
  %evalue = load i8*, i8** %"<hashpair>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), i8* %evalue) #3
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), double %pthash0) #3
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), double %pthash1) #3
  store i8* %gvalue, i8** @hashpair
  store double %gvalue4, double* @pthash0
  store double %gvalue6, double* @pthash1
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0), double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [9 x i8] c"__max_id\00"
@__max_id = external global i64

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound___max_id) #0 {
__llvm_entry:
  %return = call i64 @"detail@IISI"(i64 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0), i64 0)
  %_bound___max_id1 = load i64, i64* %_bound___max_id
  %return3 = call i64 @"lt@III"(i64 %_bound___max_id1, i64 %return)
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store i64 %return, i64* %_bound___max_id
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind
declare i64 @"detail@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %__max_id) #1 {
__llvm_entry:
  %"<__max_id>" = alloca i64
  store i64 %__max_id, i64* %"<__max_id>"
  call void @"__vex_snippet_snippet@I"(i64* %"<__max_id>")
  %evalue = load i64, i64* %"<__max_id>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0), i64 %evalue) #3
  store i64 %gvalue, i64* @__max_id
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

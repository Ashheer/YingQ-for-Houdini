;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [11 x i8] c"../opShape\00"
@2 = private constant [2 x i8] c".\00"
@3 = private constant [4 x i8] c"../\00"
@4 = private constant [11 x i8] c"../unitbox\00"
@op = external global i8*
@5 = private constant [3 x i8] c"op\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@S"(i8** %_bound_op) #0 {
__llvm_entry:
  %return = call i8* @"ch@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0))
  %return2 = call i8* @"getcomp@SSI"(i8* %return, i64 0)
  %return3 = call i64 @"eq@ISS"(i8* %return2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0))
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return5 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i64 0, i64 0), i8* %return)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %path.0 = phi i8* [ %return5, %true ], [ %return, %__llvm_entry ]
  %return7 = call i8* @"opfullpath@SS"(i8* %path.0)
  %return9 = call i64 @"eq@ISS"(i8* %return7, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0))
  %1 = icmp ne i64 %return9, 0
  %.return7 = select i1 %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0), i8* %return7
  store i8* %.return7, i8** %_bound_op
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"ch@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"getcomp@SSI"(i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"opfullpath@SS"(i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %op) #2 {
__llvm_entry:
  %"<op>" = alloca i8*
  store i8* %op, i8** %"<op>"
  call void @"__vex_snippet_snippet@S"(i8** %"<op>")
  %evalue = load i8*, i8** %"<op>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i64 0, i64 0), i8* %evalue) #3
  store i8* %gvalue, i8** @op
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

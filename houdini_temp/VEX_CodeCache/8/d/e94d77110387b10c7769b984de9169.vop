;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@N = external global <3 x double>
@up = external global <3 x double>
@trueup = external global <3 x double>
@0 = private constant [2 x i8] c"N\00"
@1 = private constant [3 x i8] c"up\00"
@2 = private constant [7 x i8] c"trueup\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVV"(<3 x double>* %_bound_N, <3 x double>* %_bound_up, <3 x double>* %_bound_trueup) #0 {
__llvm_entry:
  %_bound_N1 = load <3 x double>, <3 x double>* %_bound_N
  %_bound_up2 = load <3 x double>, <3 x double>* %_bound_up
  %return = call <3 x double> @"cross@VVV"(<3 x double> %_bound_N1, <3 x double> %_bound_up2)
  %_bound_N3 = load <3 x double>, <3 x double>* %_bound_N
  %return4 = call <3 x double> @"cross@VVV"(<3 x double> %return, <3 x double> %_bound_N3)
  store <3 x double> %return4, <3 x double>* %_bound_trueup
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %N, <3 x double> %up, <3 x double> %trueup) #1 {
__llvm_entry:
  %"<trueup>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  store <3 x double> %trueup, <3 x double>* %"<trueup>"
  store <3 x double> %N, <3 x double>* %0
  store <3 x double> %up, <3 x double>* %1
  call void @"__vex_snippet_snippet@VVV"(<3 x double>* %0, <3 x double>* %1, <3 x double>* %"<trueup>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %N) #2
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0), <3 x double> %up) #2
  %evalue5 = load <3 x double>, <3 x double>* %"<trueup>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), <3 x double> %evalue5) #2
  store <3 x double> %gvalue, <3 x double>* @N
  store <3 x double> %gvalue4, <3 x double>* @up
  store <3 x double> %gvalue6, <3 x double>* @trueup
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

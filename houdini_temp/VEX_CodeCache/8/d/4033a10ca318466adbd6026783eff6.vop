;_name	/obj/geo1/MOPs_Move_Along_Spline/Apply_Attributes1/apply_attributes1/attribvop1
; ModuleID = 'obj_geo1_MOPs_Move_Along_Spline_Apply_Attributes1_apply_attributes1_attribvop1'

@0 = private constant [3 x i8] c"id\00"
@1 = private constant [12 x i8] c"rotate_mode\00"
@2 = private constant [11 x i8] c"scale_mode\00"
@3 = private constant [12 x i8] c"local_space\00"
@4 = private constant [2 x i8] c"P\00"
@5 = private constant [7 x i8] c"orient\00"
@6 = private constant [6 x i8] c"scale\00"
@7 = private constant [7 x i8] c"pscale\00"
@8 = private constant [13 x i8] c"mops_falloff\00"
@9 = private constant [13 x i8] c"do_translate\00"
@10 = private constant [10 x i8] c"do_rotate\00"
@11 = private constant [9 x i8] c"do_scale\00"
@12 = private constant [10 x i8] c"do_weight\00"
@13 = private constant [10 x i8] c"transform\00"
@14 = private constant [6 x i8] c"euler\00"
@15 = private constant [13 x i8] c"rotate_order\00"
@16 = private constant [12 x i8] c"mops_orient\00"
@17 = private constant [4 x i8] c"set\00"
@ptnum = external global i64
@P = external global <3 x double>
@18 = private constant [6 x i8] c"ptnum\00"

define private void @"_obj_geo1_MOPs_Move_Along_Spline_Apply_Attributes1_apply_attributes1_attribvop1_snippet1@IV"(i64* %_bound_ptnum, <3 x double>* %_bound_P) nounwind alwaysinline {
__llvm_entry:
  %_bound_ptnum1 = load i64* %_bound_ptnum
  %return = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([3 x i8]* @0, i64 0, i64 0))
  %return2 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([3 x i8]* @0, i64 0, i64 0))
  %return3 = call i64 @"and@III"(i64 %return, i64 %return2)
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_ptnum4 = load i64* %_bound_ptnum
  %return5 = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([3 x i8]* @0, i64 0, i64 0), i64 %_bound_ptnum4)
  %return6 = call i64 @"idtopoint@III"(i64 1, i64 %return5)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %matchpt.0 = phi i64 [ %return6, %true ], [ %_bound_ptnum1, %__llvm_entry ]
  %return7 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8]* @1, i64 0, i64 0))
  %return8 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8]* @2, i64 0, i64 0))
  %return9 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8]* @3, i64 0, i64 0))
  %return11 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8]* @4, i64 0, i64 0), i64 %matchpt.0)
  %return13 = call <4 x double> @"point@PISI"(i64 1, i8* getelementptr inbounds ([7 x i8]* @5, i64 0, i64 0), i64 %matchpt.0)
  %return15 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([6 x i8]* @6, i64 0, i64 0), i64 %matchpt.0)
  %return17 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([7 x i8]* @7, i64 0, i64 0), i64 %matchpt.0)
  %return18 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([13 x i8]* @8, i64 0, i64 0))
  %1 = icmp ne i64 %return18, 0
  br i1 %1, label %true19, label %end20

true19:                                           ; preds = %end
  %_bound_ptnum21 = load i64* %_bound_ptnum
  %return22 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([13 x i8]* @8, i64 0, i64 0), i64 %_bound_ptnum21)
  br label %end20

end20:                                            ; preds = %true19, %end
  %weight.0 = phi double [ %return22, %true19 ], [ 1.000000e+00, %end ]
  %return23 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([6 x i8]* @6, i64 0, i64 0))
  %return24 = call i64 @"not@II"(i64 %return23)
  %2 = icmp ne i64 %return24, 0
  br i1 %2, label %true25, label %end26

true25:                                           ; preds = %end20
  br label %end26

end26:                                            ; preds = %true25, %end20
  %scale2.0 = phi <3 x double> [ <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %true25 ], [ %return15, %end20 ]
  %return27 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([7 x i8]* @7, i64 0, i64 0))
  %return28 = call i64 @"not@II"(i64 %return27)
  %3 = icmp ne i64 %return28, 0
  br i1 %3, label %true29, label %end30

true29:                                           ; preds = %end26
  br label %end30

end30:                                            ; preds = %true29, %end26
  %pscale2.0 = phi double [ 1.000000e+00, %true29 ], [ %return17, %end26 ]
  %return31 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([7 x i8]* @5, i64 0, i64 0))
  %return32 = call i64 @"not@II"(i64 %return31)
  %4 = icmp ne i64 %return32, 0
  br i1 %4, label %true33, label %end34

true33:                                           ; preds = %end30
  %return35 = call <9 x double> @"ident@3"()
  %return36 = call <4 x double> @"quaternion@P3"(<9 x double> %return35)
  br label %end34

end34:                                            ; preds = %true33, %end30
  %orient2.0 = phi <4 x double> [ %return36, %true33 ], [ %return13, %end30 ]
  %return37 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8]* @9, i64 0, i64 0))
  %return38 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8]* @10, i64 0, i64 0))
  %return39 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8]* @11, i64 0, i64 0))
  %return40 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8]* @12, i64 0, i64 0))
  %_bound_ptnum41 = load i64* %_bound_ptnum
  %return42 = call <9 x double> @"primintrinsic@3ISI"(i64 0, i8* getelementptr inbounds ([10 x i8]* @13, i64 0, i64 0), i64 %_bound_ptnum41)
  %cast44 = call <16 x double> @"set@43"(<9 x double> %return42)
  %return45 = call <3 x double> @"cracktransform@VIIIV4"(i64 0, i64 0, i64 2, <3 x double> zeroinitializer, <16 x double> %cast44)
  %return47 = call <4 x double> @"quaternion@P3"(<9 x double> %return42)
  %return49 = call i64 @"not@II"(i64 %return40)
  %5 = icmp ne i64 %return49, 0
  br i1 %5, label %true50, label %end51

true50:                                           ; preds = %end34
  br label %end51

end51:                                            ; preds = %true50, %end34
  %weight.1 = phi double [ 1.000000e+00, %true50 ], [ %weight.0, %end34 ]
  %return52 = call i64 @"haspointattrib@IIS"(i64 1, i8* getelementptr inbounds ([6 x i8]* @14, i64 0, i64 0))
  %return53 = call i64 @"not@II"(i64 %return52)
  %6 = icmp ne i64 %return53, 0
  br i1 %6, label %true54, label %false

true54:                                           ; preds = %end51
  %return59 = call <4 x double> @"slerp@PPPF"(<4 x double> %return47, <4 x double> %orient2.0, double %weight.1)
  br label %end55

false:                                            ; preds = %end51
  %return61 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([6 x i8]* @14, i64 0, i64 0), i64 %matchpt.0)
  %cast64 = call <3 x double> @"set@VF"(double %weight.1)
  %output = call <3 x double> @"mul@VV"(<3 x double> %return61, <3 x double> %cast64)
  %return65 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8]* @15, i64 0, i64 0))
  %return66 = call <9 x double> @"ident@3"()
  %return68 = call i64 @"eq@III"(i64 %return65, i64 0)
  %7 = icmp ne i64 %return68, 0
  br i1 %7, label %true69, label %false70

end55:                                            ; preds = %end71, %true54
  %orient2.1 = phi <4 x double> [ %return59, %true54 ], [ %return205, %end71 ]
  %8 = icmp ne i64 %return39, 0
  br i1 %8, label %true207, label %end208

true69:                                           ; preds = %false
  %return74 = call double @"getcomp@FVI"(<3 x double> %output, i64 0)
  %return75 = call double @"radians@FF"(double %return74)
  %output77 = call <9 x double> @"rotate@3FV"(<9 x double> %return66, double %return75, <3 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>)
  %return80 = call double @"getcomp@FVI"(<3 x double> %output, i64 1)
  %return81 = call double @"radians@FF"(double %return80)
  %output83 = call <9 x double> @"rotate@3FV"(<9 x double> %output77, double %return81, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>)
  %return86 = call double @"getcomp@FVI"(<3 x double> %output, i64 2)
  %return87 = call double @"radians@FF"(double %return86)
  %output89 = call <9 x double> @"rotate@3FV"(<9 x double> %output83, double %return87, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  br label %end71

false70:                                          ; preds = %false
  %return91 = call i64 @"eq@III"(i64 %return65, i64 1)
  %9 = icmp ne i64 %return91, 0
  br i1 %9, label %true92, label %false93

end71:                                            ; preds = %false162, %true184, %true161, %true138, %true115, %true92, %true69
  %em.0 = phi <9 x double> [ %output89, %true69 ], [ %output112, %true92 ], [ %output135, %true115 ], [ %output158, %true138 ], [ %output181, %true161 ], [ %output203, %true184 ], [ %return66, %false162 ]
  %return205 = call <4 x double> @"quaternion@P3"(<9 x double> %em.0)
  br label %end55

true92:                                           ; preds = %false70
  %return97 = call double @"getcomp@FVI"(<3 x double> %output, i64 0)
  %return98 = call double @"radians@FF"(double %return97)
  %output100 = call <9 x double> @"rotate@3FV"(<9 x double> %return66, double %return98, <3 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>)
  %return103 = call double @"getcomp@FVI"(<3 x double> %output, i64 2)
  %return104 = call double @"radians@FF"(double %return103)
  %output106 = call <9 x double> @"rotate@3FV"(<9 x double> %output100, double %return104, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  %return109 = call double @"getcomp@FVI"(<3 x double> %output, i64 1)
  %return110 = call double @"radians@FF"(double %return109)
  %output112 = call <9 x double> @"rotate@3FV"(<9 x double> %output106, double %return110, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>)
  br label %end71

false93:                                          ; preds = %false70
  %return114 = call i64 @"eq@III"(i64 %return65, i64 2)
  %10 = icmp ne i64 %return114, 0
  br i1 %10, label %true115, label %false116

true115:                                          ; preds = %false93
  %return120 = call double @"getcomp@FVI"(<3 x double> %output, i64 1)
  %return121 = call double @"radians@FF"(double %return120)
  %output123 = call <9 x double> @"rotate@3FV"(<9 x double> %return66, double %return121, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>)
  %return126 = call double @"getcomp@FVI"(<3 x double> %output, i64 0)
  %return127 = call double @"radians@FF"(double %return126)
  %output129 = call <9 x double> @"rotate@3FV"(<9 x double> %output123, double %return127, <3 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>)
  %return132 = call double @"getcomp@FVI"(<3 x double> %output, i64 2)
  %return133 = call double @"radians@FF"(double %return132)
  %output135 = call <9 x double> @"rotate@3FV"(<9 x double> %output129, double %return133, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  br label %end71

false116:                                         ; preds = %false93
  %return137 = call i64 @"eq@III"(i64 %return65, i64 3)
  %11 = icmp ne i64 %return137, 0
  br i1 %11, label %true138, label %false139

true138:                                          ; preds = %false116
  %return143 = call double @"getcomp@FVI"(<3 x double> %output, i64 1)
  %return144 = call double @"radians@FF"(double %return143)
  %output146 = call <9 x double> @"rotate@3FV"(<9 x double> %return66, double %return144, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>)
  %return149 = call double @"getcomp@FVI"(<3 x double> %output, i64 2)
  %return150 = call double @"radians@FF"(double %return149)
  %output152 = call <9 x double> @"rotate@3FV"(<9 x double> %output146, double %return150, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  %return155 = call double @"getcomp@FVI"(<3 x double> %output, i64 0)
  %return156 = call double @"radians@FF"(double %return155)
  %output158 = call <9 x double> @"rotate@3FV"(<9 x double> %output152, double %return156, <3 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>)
  br label %end71

false139:                                         ; preds = %false116
  %return160 = call i64 @"eq@III"(i64 %return65, i64 4)
  %12 = icmp ne i64 %return160, 0
  br i1 %12, label %true161, label %false162

true161:                                          ; preds = %false139
  %return166 = call double @"getcomp@FVI"(<3 x double> %output, i64 2)
  %return167 = call double @"radians@FF"(double %return166)
  %output169 = call <9 x double> @"rotate@3FV"(<9 x double> %return66, double %return167, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  %return172 = call double @"getcomp@FVI"(<3 x double> %output, i64 0)
  %return173 = call double @"radians@FF"(double %return172)
  %output175 = call <9 x double> @"rotate@3FV"(<9 x double> %output169, double %return173, <3 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>)
  %return178 = call double @"getcomp@FVI"(<3 x double> %output, i64 1)
  %return179 = call double @"radians@FF"(double %return178)
  %output181 = call <9 x double> @"rotate@3FV"(<9 x double> %output175, double %return179, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>)
  br label %end71

false162:                                         ; preds = %false139
  %return183 = call i64 @"eq@III"(i64 %return65, i64 5)
  %13 = icmp ne i64 %return183, 0
  br i1 %13, label %true184, label %end71

true184:                                          ; preds = %false162
  %return188 = call double @"getcomp@FVI"(<3 x double> %output, i64 2)
  %return189 = call double @"radians@FF"(double %return188)
  %output191 = call <9 x double> @"rotate@3FV"(<9 x double> %return66, double %return189, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  %return194 = call double @"getcomp@FVI"(<3 x double> %output, i64 1)
  %return195 = call double @"radians@FF"(double %return194)
  %output197 = call <9 x double> @"rotate@3FV"(<9 x double> %output191, double %return195, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>)
  %return200 = call double @"getcomp@FVI"(<3 x double> %output, i64 0)
  %return201 = call double @"radians@FF"(double %return200)
  %output203 = call <9 x double> @"rotate@3FV"(<9 x double> %output197, double %return201, <3 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>)
  br label %end71

true207:                                          ; preds = %end55
  %return210 = call i64 @"eq@III"(i64 %return8, i64 0)
  %14 = icmp ne i64 %return210, 0
  br i1 %14, label %true211, label %false212

end208:                                           ; preds = %true211, %false212, %end55
  %scale.0 = phi <3 x double> [ %return222, %true211 ], [ %return229, %false212 ], [ %return45, %end55 ]
  %return230 = call <9 x double> @"ident@3"()
  %return231 = call <4 x double> @"quaternion@P3"(<9 x double> %return230)
  %return232 = call i64 @"haspointattrib@IIS"(i64 0, i8* getelementptr inbounds ([12 x i8]* @16, i64 0, i64 0))
  %15 = icmp ne i64 %return232, 0
  br i1 %15, label %true233, label %end234

true211:                                          ; preds = %true207
  %output217 = call <3 x double> @"mul@VV"(<3 x double> %return45, <3 x double> %scale2.0)
  %cast219 = call <3 x double> @"set@VF"(double %pscale2.0)
  %output220 = call <3 x double> @"mul@VV"(<3 x double> %output217, <3 x double> %cast219)
  %return222 = call <3 x double> @"lerp@VVVF"(<3 x double> %return45, <3 x double> %output220, double %weight.1)
  br label %end208

false212:                                         ; preds = %true207
  %cast226 = call <3 x double> @"set@VF"(double %pscale2.0)
  %output227 = call <3 x double> @"mul@VV"(<3 x double> %scale2.0, <3 x double> %cast226)
  %return229 = call <3 x double> @"lerp@VVVF"(<3 x double> %return45, <3 x double> %output227, double %weight.1)
  br label %end208

true233:                                          ; preds = %end208
  %_bound_ptnum235 = load i64* %_bound_ptnum
  %return236 = call <4 x double> @"point@PISI"(i64 0, i8* getelementptr inbounds ([12 x i8]* @16, i64 0, i64 0), i64 %_bound_ptnum235)
  br label %end234

end234:                                           ; preds = %true233, %end208
  %mops_orient.0 = phi <4 x double> [ %return236, %true233 ], [ %return231, %end208 ]
  %16 = icmp ne i64 %return38, 0
  br i1 %16, label %true238, label %end239

true238:                                          ; preds = %end234
  %return241 = call i64 @"eq@III"(i64 %return7, i64 0)
  %17 = icmp ne i64 %return241, 0
  br i1 %17, label %true242, label %false243

end239:                                           ; preds = %end244, %true265, %end234
  %orient.0 = phi <4 x double> [ %return269, %true265 ], [ %orient.1, %end244 ], [ %return47, %end234 ]
  %18 = icmp ne i64 %return37, 0
  br i1 %18, label %true271, label %end272

true242:                                          ; preds = %true238
  %19 = icmp ne i64 %return9, 0
  br i1 %19, label %true246, label %end247

false243:                                         ; preds = %true238
  br label %end244

end244:                                           ; preds = %false243, %end258
  %orient.1 = phi <4 x double> [ %out_orient.0, %end258 ], [ %orient2.1, %false243 ]
  %20 = icmp ne i64 %return9, 0
  br i1 %20, label %true265, label %end239

true246:                                          ; preds = %true242
  %return250 = call <4 x double> @"qinvert@PP"(<4 x double> %mops_orient.0)
  %return251 = call <4 x double> @"qmultiply@PPP"(<4 x double> %orient2.1, <4 x double> %return250)
  br label %end247

end247:                                           ; preds = %true246, %true242
  %orient2.2 = phi <4 x double> [ %return251, %true246 ], [ %orient2.1, %true242 ]
  %return254 = call <4 x double> @"qmultiply@PPP"(<4 x double> %return47, <4 x double> %orient2.2)
  %return256 = call i64 @"not@II"(i64 %return9)
  %21 = icmp ne i64 %return256, 0
  br i1 %21, label %true257, label %end258

true257:                                          ; preds = %end247
  %return261 = call <4 x double> @"qmultiply@PPP"(<4 x double> %orient2.2, <4 x double> %return47)
  br label %end258

end258:                                           ; preds = %true257, %end247
  %out_orient.0 = phi <4 x double> [ %return261, %true257 ], [ %return254, %end247 ]
  br label %end244

true265:                                          ; preds = %end244
  %return269 = call <4 x double> @"qmultiply@PPP"(<4 x double> %orient.1, <4 x double> %mops_orient.0)
  br label %end239

true271:                                          ; preds = %end239
  %_bound_P273 = load <3 x double>* %_bound_P
  %return276 = call <3 x double> @"lerp@VVVF"(<3 x double> %_bound_P273, <3 x double> %return11, double %weight.1)
  store <3 x double> %return276, <3 x double>* %_bound_P
  br label %end272

end272:                                           ; preds = %true271, %end239
  %return277 = call <9 x double> @"ident@3"()
  %output280 = call <9 x double> @"scale@3V"(<9 x double> %return277, <3 x double> %scale.0)
  %return282 = call <9 x double> @"qconvert@3P"(<4 x double> %orient.0)
  %output285 = call <9 x double> @"mul@33"(<9 x double> %output280, <9 x double> %return282)
  %_bound_ptnum286 = load i64* %_bound_ptnum
  %return288 = call i64 @"setprimintrinsic@IISI3S"(i64 0, i8* getelementptr inbounds ([10 x i8]* @13, i64 0, i64 0), i64 %_bound_ptnum286, <9 x double> %output285, i8* getelementptr inbounds ([4 x i8]* @17, i64 0, i64 0))
  ret void
}

declare i64 @"haspointattrib@IIS"(i64, i8*) nounwind

declare i64 @"and@III"(i64, i64) nounwind readnone

declare i64 @"point@IISI"(i64, i8*, i64) nounwind

declare i64 @"idtopoint@III"(i64, i64) nounwind

declare i64 @"chi@IS"(i8*) nounwind readnone

declare <3 x double> @"point@VISI"(i64, i8*, i64) nounwind

declare <4 x double> @"point@PISI"(i64, i8*, i64) nounwind

declare double @"point@FISI"(i64, i8*, i64) nounwind

declare i64 @"not@II"(i64) nounwind readnone

declare <9 x double> @"ident@3"() nounwind

declare <4 x double> @"quaternion@P3"(<9 x double>) nounwind readnone

declare <9 x double> @"primintrinsic@3ISI"(i64, i8*, i64) nounwind

declare <3 x double> @"set@VI"(i64) nounwind readnone

declare <16 x double> @"set@43"(<9 x double>) nounwind

declare <3 x double> @"cracktransform@VIIIV4"(i64, i64, i64, <3 x double>, <16 x double>) nounwind readnone

declare <4 x double> @"slerp@PPPF"(<4 x double>, <4 x double>, double) nounwind readnone

declare <3 x double> @"set@VF"(double) nounwind readnone

declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) nounwind readnone

declare i64 @"eq@III"(i64, i64) nounwind readnone

declare double @"getcomp@FVI"(<3 x double>, i64) nounwind readnone

declare double @"radians@FF"(double) nounwind

declare <9 x double> @"rotate@3FV"(<9 x double>, double, <3 x double>) nounwind readnone

declare <3 x double> @"lerp@VVVF"(<3 x double>, <3 x double>, double) nounwind

declare <4 x double> @"qinvert@PP"(<4 x double>) nounwind readnone

declare <4 x double> @"qmultiply@PPP"(<4 x double>, <4 x double>) nounwind readnone

declare <9 x double> @"scale@3V"(<9 x double>, <3 x double>) nounwind readnone

declare <9 x double> @"qconvert@3P"(<4 x double>) nounwind readnone

declare <9 x double> @"mul@33"(<9 x double>, <9 x double>) nounwind

declare i64 @"setprimintrinsic@IISI3S"(i64, i8*, i64, <9 x double>, i8*) nounwind

define void @obj_geo1_MOPs_Move_Along_Spline_Apply_Attributes1_apply_attributes1_attribvop1(i64 %ptnum, <3 x double> %P) nounwind {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  call void @"_obj_geo1_MOPs_Move_Along_Spline_Apply_Attributes1_apply_attributes1_attribvop1_snippet1@IV"(i64* %0, <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8]* @18, i64 0, i64 0), i64 %ptnum) nounwind readonly
  %evalue2 = load <3 x double>* %"<P>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8]* @4, i64 0, i64 0), <3 x double> %evalue2) nounwind readonly
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue3, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_geo1_MOPs_Move_Along_Spline_Apply_Attributes1_apply_attributes1_attribvop1(i64 0, <3 x double> zeroinitializer)
  ret void
}

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"18.5.633"}
!2 = metadata !{metadata !"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"levelpath\00"
@1 = private constant [8 x i8] c"proxies\00"
@2 = private constant [1 x i8] zeroinitializer
@unreal_level_path = external global i8*
@unreal_landscape_tile_actor_type = external global i64
@3 = private constant [18 x i8] c"unreal_level_path\00"
@4 = private constant [33 x i8] c"unreal_landscape_tile_actor_type\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SI"(i8** %_bound_unreal_level_path, i64* %_bound_unreal_landscape_tile_actor_type) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0))
  store i8* %return, i8** %_bound_unreal_level_path
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0))
  store i64 %return1, i64* %_bound_unreal_landscape_tile_actor_type
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %unreal_level_path, i64 %unreal_landscape_tile_actor_type) #2 {
__llvm_entry:
  %"<unreal_landscape_tile_actor_type>" = alloca i64
  %"<unreal_level_path>" = alloca i8*
  store i8* %unreal_level_path, i8** %"<unreal_level_path>"
  store i64 %unreal_landscape_tile_actor_type, i64* %"<unreal_landscape_tile_actor_type>"
  call void @"__vex_snippet_snippet@SI"(i8** %"<unreal_level_path>", i64* %"<unreal_landscape_tile_actor_type>")
  %evalue = load i8*, i8** %"<unreal_level_path>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @3, i64 0, i64 0), i8* %evalue) #3
  %evalue1 = load i64, i64* %"<unreal_landscape_tile_actor_type>"
  %gvalue2 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @4, i64 0, i64 0), i64 %evalue1) #3
  store i8* %gvalue, i8** @unreal_level_path
  store i64 %gvalue2, i64* @unreal_landscape_tile_actor_type
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

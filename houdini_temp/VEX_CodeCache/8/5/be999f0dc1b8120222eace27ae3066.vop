;_name	/obj/geo1/attribvop1
; ModuleID = 'obj_geo1_attribvop1'
source_filename = "obj_geo1_attribvop1"

@0 = private constant [1 x i8] zeroinitializer
@Cd = external global <3 x double>
@grad = external global double
@1 = private constant [7 x i8] c"snoise\00"
@2 = private constant [7 x i8] c"onoise\00"
@3 = private constant [7 x i8] c"anoise\00"
@4 = private constant [13 x i8] c"correctnoise\00"
@5 = private constant [7 x i8] c"xnoise\00"
@6 = private constant [3 x i8] c"Cd\00"
@7 = private constant [5 x i8] c"grad\00"

; Function Attrs: alwaysinline nounwind
define private double @"vop_perlinNoiseVF@FVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %output11, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output19, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output14, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output16, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return8 = call double @"noise@FV"(<3 x double> %pp.0)
  %output9 = fadd double %return8, 0.000000e+00
  %output10 = fmul double %scale.0, %output9
  %output11 = fadd double %nval.0, %output10
  %output14 = add i64 %i.0, 1
  %cast = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output16 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast)
  %rough18 = load double, double* %rough
  %output19 = fmul double %scale.0, %rough18
  br label %cond

end:                                              ; preds = %cond
  %atten21 = load double, double* %atten
  %return22 = call double @"pow@FFF"(double %nval.0, double %atten21)
  ret double %return22
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"noise@FV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"pow@FFF"(double, double) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"vop_perlinNoiseVV@VVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  %cast = call <3 x double> @"set@VI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %output13, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output22, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output16, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output19, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return8 = call <3 x double> @"noise@VV"(<3 x double> %pp.0)
  %output10 = call <3 x double> @"add@VV"(<3 x double> %return8, <3 x double> %cast)
  %cast11 = call <3 x double> @"set@VF"(double %scale.0)
  %output12 = call <3 x double> @"mul@VV"(<3 x double> %cast11, <3 x double> %output10)
  %output13 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output12)
  %output16 = add i64 %i.0, 1
  %cast18 = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output19 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast18)
  %rough21 = load double, double* %rough
  %output22 = fmul double %scale.0, %rough21
  br label %cond

end:                                              ; preds = %cond
  %atten24 = load double, double* %atten
  %return25 = call <3 x double> @"pow@VVF"(<3 x double> %nval.0, double %atten24)
  ret <3 x double> %return25
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"noise@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"pow@VVF"(<3 x double>, double) #1

; Function Attrs: alwaysinline nounwind
define private double @"vop_correctperlinNoiseVF@FVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %output12, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output20, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output15, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output17, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %output = fmul double 5.000000e-01, %scale.0
  %return8 = call double @"noise@FV"(<3 x double> %pp.0)
  %return9 = call double @"neg@FF"(double 5.000000e-01)
  %output10 = fadd double %return8, %return9
  %output11 = fmul double %output, %output10
  %output12 = fadd double %nval.0, %output11
  %output15 = add i64 %i.0, 1
  %cast = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output17 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast)
  %rough19 = load double, double* %rough
  %output20 = fmul double %scale.0, %rough19
  br label %cond

end:                                              ; preds = %cond
  %atten22 = load double, double* %atten
  %return23 = call double @"pow@FFF"(double %nval.0, double %atten22)
  ret double %return23
}

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"vop_correctperlinNoiseVV@VVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  %cast = call <3 x double> @"set@VI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %output14, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output23, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output17, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output20, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %output = fmul double 5.000000e-01, %scale.0
  %return8 = call <3 x double> @"noise@VV"(<3 x double> %pp.0)
  %return9 = call double @"neg@FF"(double 5.000000e-01)
  %cast10 = call <3 x double> @"set@VF"(double %return9)
  %output11 = call <3 x double> @"add@VV"(<3 x double> %return8, <3 x double> %cast10)
  %cast12 = call <3 x double> @"set@VF"(double %output)
  %output13 = call <3 x double> @"mul@VV"(<3 x double> %cast12, <3 x double> %output11)
  %output14 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output13)
  %output17 = add i64 %i.0, 1
  %cast19 = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output20 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast19)
  %rough22 = load double, double* %rough
  %output23 = fmul double %scale.0, %rough22
  br label %cond

end:                                              ; preds = %cond
  %atten25 = load double, double* %atten
  %return26 = call <3 x double> @"pow@VVF"(<3 x double> %nval.0, double %atten25)
  ret <3 x double> %return26
}

; Function Attrs: alwaysinline nounwind
define private double @"vop_simplexNoiseVF@FVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %output12, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output20, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output15, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output17, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %output = fmul double 5.000000e-01, %scale.0
  %return8 = call double @"xnoise@FV"(<3 x double> %pp.0)
  %return9 = call double @"neg@FF"(double 5.000000e-01)
  %output10 = fadd double %return8, %return9
  %output11 = fmul double %output, %output10
  %output12 = fadd double %nval.0, %output11
  %output15 = add i64 %i.0, 1
  %cast = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output17 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast)
  %rough19 = load double, double* %rough
  %output20 = fmul double %scale.0, %rough19
  br label %cond

end:                                              ; preds = %cond
  %atten22 = load double, double* %atten
  %return23 = call double @"pow@FFF"(double %nval.0, double %atten22)
  ret double %return23
}

; Function Attrs: nounwind readnone
declare double @"xnoise@FV"(<3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"vop_simplexNoiseVV@VVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  %cast = call <3 x double> @"set@VI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %output14, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output23, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output17, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output20, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %output = fmul double 5.000000e-01, %scale.0
  %return8 = call <3 x double> @"xnoise@VV"(<3 x double> %pp.0)
  %return9 = call double @"neg@FF"(double 5.000000e-01)
  %cast10 = call <3 x double> @"set@VF"(double %return9)
  %output11 = call <3 x double> @"add@VV"(<3 x double> %return8, <3 x double> %cast10)
  %cast12 = call <3 x double> @"set@VF"(double %output)
  %output13 = call <3 x double> @"mul@VV"(<3 x double> %cast12, <3 x double> %output11)
  %output14 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output13)
  %output17 = add i64 %i.0, 1
  %cast19 = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output20 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast19)
  %rough22 = load double, double* %rough
  %output23 = fmul double %scale.0, %rough22
  br label %cond

end:                                              ; preds = %cond
  %atten25 = load double, double* %atten
  %return26 = call <3 x double> @"pow@VVF"(<3 x double> %nval.0, double %atten25)
  ret <3 x double> %return26
}

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VV"(<3 x double>) #1

; Function Attrs: nounwind
define void @obj_geo1_attribvop1(i64 %ptnum, i64 %vtxnum, i64 %primnum, i64 %id, i64 %numpt, i64 %numvtx, i64 %numprim, double %Time, double %TimeInc, double %Frame, double %life, double %age, i8* %OpInput2, i8* %OpInput3, i8* %OpInput4, i8* %OpInput1, <3 x double> %uv, <3 x double> %P, <3 x double> %v, <3 x double> %force, <3 x double> %Cd, <3 x double> %N, double %grad) #2 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca i64
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca <3 x double>
  %6 = alloca i64
  %7 = alloca double
  %8 = alloca double
  %9 = alloca double
  %10 = alloca <3 x double>
  %11 = alloca i64
  %12 = alloca double
  %13 = alloca double
  %14 = alloca double
  %15 = alloca <3 x double>
  %16 = alloca i64
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %return = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0))
  %20 = icmp ne i64 %return, 0
  br i1 %20, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output = call <3 x double> @"mul@VV"(<3 x double> %P, <3 x double> <double 2.000000e-01, double 2.000000e-01, double 2.000000e-01>)
  %output31 = call <3 x double> @"sub@VV"(<3 x double> %output, <3 x double> <double 1.122000e+02, double 1.122000e+02, double 1.122000e+02>)
  %return32 = call <3 x double> @"onoise@VVIFF"(<3 x double> %output31, i64 5, double 5.000000e-01, double 1.000000e+00)
  %cast = call <3 x double> @"set@VI"(i64 2)
  %output34 = call <3 x double> @"mul@VV"(<3 x double> %return32, <3 x double> %cast)
  br label %end

false:                                            ; preds = %__llvm_entry
  %return35 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %21 = icmp ne i64 %return35, 0
  br i1 %21, label %true36, label %false37

end:                                              ; preds = %true65, %false66, %true58, %true47, %true36, %true
  %noise.0 = phi <3 x double> [ %output34, %true ], [ %output45, %true36 ], [ %output56, %true47 ], [ %vop_correctperlinNoiseVV, %true58 ], [ %vop_simplexNoiseVV, %true65 ], [ %vop_perlinNoiseVV, %false66 ]
  %output76 = call <3 x double> @"add@VV"(<3 x double> %P, <3 x double> %noise.0)
  br i1 %20, label %true78, label %false79

true36:                                           ; preds = %false
  %output40 = call <3 x double> @"mul@VV"(<3 x double> %P, <3 x double> <double 2.000000e-01, double 2.000000e-01, double 2.000000e-01>)
  %output41 = call <3 x double> @"sub@VV"(<3 x double> %output40, <3 x double> <double 1.122000e+02, double 1.122000e+02, double 1.122000e+02>)
  %return42 = call <3 x double> @"snoise@VVIFF"(<3 x double> %output41, i64 5, double 5.000000e-01, double 1.000000e+00)
  %cast44 = call <3 x double> @"set@VI"(i64 2)
  %output45 = call <3 x double> @"mul@VV"(<3 x double> %return42, <3 x double> %cast44)
  br label %end

false37:                                          ; preds = %false
  %return46 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0))
  %22 = icmp ne i64 %return46, 0
  br i1 %22, label %true47, label %false48

true47:                                           ; preds = %false37
  %output51 = call <3 x double> @"mul@VV"(<3 x double> %P, <3 x double> <double 2.000000e-01, double 2.000000e-01, double 2.000000e-01>)
  %output52 = call <3 x double> @"sub@VV"(<3 x double> %output51, <3 x double> <double 1.122000e+02, double 1.122000e+02, double 1.122000e+02>)
  %return53 = call <3 x double> @"anoise@VVIFF"(<3 x double> %output52, i64 5, double 5.000000e-01, double 1.000000e+00)
  %cast55 = call <3 x double> @"set@VI"(i64 2)
  %output56 = call <3 x double> @"mul@VV"(<3 x double> %return53, <3 x double> %cast55)
  br label %end

false48:                                          ; preds = %false37
  %return57 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @4, i64 0, i64 0))
  %23 = icmp ne i64 %return57, 0
  br i1 %23, label %true58, label %false59

true58:                                           ; preds = %false48
  %output62 = call <3 x double> @"mul@VV"(<3 x double> %P, <3 x double> <double 2.000000e-01, double 2.000000e-01, double 2.000000e-01>)
  %output63 = call <3 x double> @"sub@VV"(<3 x double> %output62, <3 x double> <double 1.122000e+02, double 1.122000e+02, double 1.122000e+02>)
  store <3 x double> %output63, <3 x double>* %0
  store i64 5, i64* %1
  store double 2.000000e+00, double* %2
  store double 5.000000e-01, double* %3
  store double 1.000000e+00, double* %4
  %vop_correctperlinNoiseVV = call <3 x double> @"vop_correctperlinNoiseVV@VVIFFF"(<3 x double>* %0, i64* %1, double* %2, double* %3, double* %4)
  br label %end

false59:                                          ; preds = %false48
  %return64 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0))
  %24 = icmp ne i64 %return64, 0
  %output69 = call <3 x double> @"mul@VV"(<3 x double> %P, <3 x double> <double 2.000000e-01, double 2.000000e-01, double 2.000000e-01>)
  %output70 = call <3 x double> @"sub@VV"(<3 x double> %output69, <3 x double> <double 1.122000e+02, double 1.122000e+02, double 1.122000e+02>)
  store <3 x double> %output70, <3 x double>* %5
  store i64 5, i64* %6
  store double 2.000000e+00, double* %7
  store double 5.000000e-01, double* %8
  store double 1.000000e+00, double* %9
  br i1 %24, label %true65, label %false66

true65:                                           ; preds = %false59
  %vop_simplexNoiseVV = call <3 x double> @"vop_simplexNoiseVV@VVIFFF"(<3 x double>* %5, i64* %6, double* %7, double* %8, double* %9)
  br label %end

false66:                                          ; preds = %false59
  %vop_perlinNoiseVV = call <3 x double> @"vop_perlinNoiseVV@VVIFFF"(<3 x double>* %5, i64* %6, double* %7, double* %8, double* %9)
  br label %end

true78:                                           ; preds = %end
  %output82 = call <3 x double> @"mul@VV"(<3 x double> %output76, <3 x double> <double 5.000000e-02, double 5.000000e-02, double 5.000000e-02>)
  %output83 = call <3 x double> @"sub@VV"(<3 x double> %output82, <3 x double> <double 6.800000e+00, double 4.500000e+00, double 4.050000e+01>)
  %return84 = call double @"onoise@FVIFF"(<3 x double> %output83, i64 5, double 5.000000e-01, double 1.000000e+00)
  %output86 = fmul double %return84, 2.000000e+00
  br label %end80

false79:                                          ; preds = %end
  %return87 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %25 = icmp ne i64 %return87, 0
  br i1 %25, label %true88, label %false89

end80:                                            ; preds = %true115, %false116, %true108, %true98, %true88, %true78
  %noise1.0 = phi double [ %output86, %true78 ], [ %output96, %true88 ], [ %output106, %true98 ], [ %vop_correctperlinNoiseVF, %true108 ], [ %vop_simplexNoiseVF, %true115 ], [ %vop_perlinNoiseVF, %false116 ]
  %return127 = call <3 x double> @"set@VFFF"(double %noise1.0, double %noise1.0, double %noise1.0)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @6, i64 0, i64 0), <3 x double> %return127) #3
  %gvalue132 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i64 0, i64 0), double %noise1.0) #3
  store <3 x double> %gvalue, <3 x double>* @Cd
  store double %gvalue132, double* @grad
  ret void

true88:                                           ; preds = %false79
  %output92 = call <3 x double> @"mul@VV"(<3 x double> %output76, <3 x double> <double 5.000000e-02, double 5.000000e-02, double 5.000000e-02>)
  %output93 = call <3 x double> @"sub@VV"(<3 x double> %output92, <3 x double> <double 6.800000e+00, double 4.500000e+00, double 4.050000e+01>)
  %return94 = call double @"snoise@FVIFF"(<3 x double> %output93, i64 5, double 5.000000e-01, double 1.000000e+00)
  %output96 = fmul double %return94, 2.000000e+00
  br label %end80

false89:                                          ; preds = %false79
  %return97 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0))
  %26 = icmp ne i64 %return97, 0
  br i1 %26, label %true98, label %false99

true98:                                           ; preds = %false89
  %output102 = call <3 x double> @"mul@VV"(<3 x double> %output76, <3 x double> <double 5.000000e-02, double 5.000000e-02, double 5.000000e-02>)
  %output103 = call <3 x double> @"sub@VV"(<3 x double> %output102, <3 x double> <double 6.800000e+00, double 4.500000e+00, double 4.050000e+01>)
  %return104 = call double @"anoise@FVIFF"(<3 x double> %output103, i64 5, double 5.000000e-01, double 1.000000e+00)
  %output106 = fmul double %return104, 2.000000e+00
  br label %end80

false99:                                          ; preds = %false89
  %return107 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @4, i64 0, i64 0))
  %27 = icmp ne i64 %return107, 0
  br i1 %27, label %true108, label %false109

true108:                                          ; preds = %false99
  %output112 = call <3 x double> @"mul@VV"(<3 x double> %output76, <3 x double> <double 5.000000e-02, double 5.000000e-02, double 5.000000e-02>)
  %output113 = call <3 x double> @"sub@VV"(<3 x double> %output112, <3 x double> <double 6.800000e+00, double 4.500000e+00, double 4.050000e+01>)
  store <3 x double> %output113, <3 x double>* %10
  store i64 5, i64* %11
  store double 2.000000e+00, double* %12
  store double 5.000000e-01, double* %13
  store double 1.000000e+00, double* %14
  %vop_correctperlinNoiseVF = call double @"vop_correctperlinNoiseVF@FVIFFF"(<3 x double>* %10, i64* %11, double* %12, double* %13, double* %14)
  br label %end80

false109:                                         ; preds = %false99
  %return114 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0))
  %28 = icmp ne i64 %return114, 0
  %output119 = call <3 x double> @"mul@VV"(<3 x double> %output76, <3 x double> <double 5.000000e-02, double 5.000000e-02, double 5.000000e-02>)
  %output120 = call <3 x double> @"sub@VV"(<3 x double> %output119, <3 x double> <double 6.800000e+00, double 4.500000e+00, double 4.050000e+01>)
  store <3 x double> %output120, <3 x double>* %15
  store i64 5, i64* %16
  store double 2.000000e+00, double* %17
  store double 5.000000e-01, double* %18
  store double 1.000000e+00, double* %19
  br i1 %28, label %true115, label %false116

true115:                                          ; preds = %false109
  %vop_simplexNoiseVF = call double @"vop_simplexNoiseVF@FVIFFF"(<3 x double>* %15, i64* %16, double* %17, double* %18, double* %19)
  br label %end80

false116:                                         ; preds = %false109
  %vop_perlinNoiseVF = call double @"vop_perlinNoiseVF@FVIFFF"(<3 x double>* %15, i64* %16, double* %17, double* %18, double* %19)
  br label %end80
}

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"onoise@VVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"snoise@VVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"anoise@VVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind readnone
declare double @"onoise@FVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind readnone
declare double @"snoise@FVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind readnone
declare double @"anoise@FVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_geo1_attribvop1(i64 0, i64 0, i64 0, i64 -1, i64 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

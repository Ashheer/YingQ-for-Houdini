;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"alpha\00"
@1 = private constant [6 x i8] c"omega\00"
@2 = private constant [7 x i8] c"lambda\00"
@P = external global <3 x double>
@3 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@V"(<3 x double>* %_bound_P) #0 {
__llvm_entry:
  %output = call double @"div@FF"(double 0x400921FB4D12D84A, double 1.800000e+02)
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0))
  %output1 = fmul double %output, %return
  %return2 = call double @"ch@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0))
  %return3 = call double @"ch@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0))
  %_bound_P4 = load <3 x double>, <3 x double>* %_bound_P
  %return5 = call double @"getcomp@FVI"(<3 x double> %_bound_P4, i64 0)
  %return7 = call double @"cos@FF"(double %output1)
  %return9 = call double @"sin@FF"(double %output1)
  %output12 = fmul double %return3, %return5
  %return13 = call double @"exp@FF"(double %output12)
  %output16 = fmul double %return13, %return9
  %output19 = fmul double %return2, %return5
  %return20 = call double @"cos@FF"(double %output19)
  %output21 = fmul double %output16, %return20
  %return22 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %_bound_P4, double %output21, i64 2)
  %output24 = extractvalue { double, <3 x double> } %return22, 1
  store <3 x double> %output24, <3 x double>* %_bound_P
  %return31 = call double @"sin@FF"(double %output19)
  %output32 = fmul double %output16, %return31
  %return34 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output24, double %output32, i64 0)
  %output36 = extractvalue { double, <3 x double> } %return34, 1
  store <3 x double> %output36, <3 x double>* %_bound_P
  %output39 = fmul double %return13, %return7
  %return41 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output36, double %output39, i64 1)
  %output43 = extractvalue { double, <3 x double> } %return41, 1
  store <3 x double> %output43, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"exp@FF"(double) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P) #3 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  call void @"__vex_snippet_snippet@V"(<3 x double>* %"<P>")
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %evalue) #4
  store <3 x double> %gvalue, <3 x double>* @P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

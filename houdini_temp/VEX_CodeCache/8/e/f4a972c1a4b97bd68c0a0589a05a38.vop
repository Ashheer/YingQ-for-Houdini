;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"iteration\00"
@uv = external global <3 x double>
@primnum = external global i64
@1 = private constant [3 x i8] c"uv\00"
@2 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VI"(<3 x double>* %_bound_uv, i64* %_bound_primnum) #0 {
__llvm_entry:
  %return = call i64 @"detail@IISI"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), i64 0)
  %_bound_uv1 = load <3 x double>, <3 x double>* %_bound_uv
  %return2 = call double @"getcomp@FVI"(<3 x double> %_bound_uv1, i64 0)
  %_bound_primnum3 = load i64, i64* %_bound_primnum
  %output = mul i64 %_bound_primnum3, %return
  %cast = sitofp i64 %output to double
  %return5 = call double @"rand@FF"(double %cast)
  %output6 = fadd double %return2, %return5
  %tmp = load <3 x double>, <3 x double>* %_bound_uv
  %return7 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output6, i64 0)
  %output9 = extractvalue { double, <3 x double> } %return7, 1
  store <3 x double> %output9, <3 x double>* %_bound_uv
  ret void
}

; Function Attrs: nounwind
declare i64 @"detail@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #2

; Function Attrs: nounwind
declare double @"rand@FF"(double) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 0)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %uv, i64 %primnum) #1 {
__llvm_entry:
  %0 = alloca i64
  %"<uv>" = alloca <3 x double>
  store <3 x double> %uv, <3 x double>* %"<uv>"
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@VI"(<3 x double>* %"<uv>", i64* %0)
  %evalue = load <3 x double>, <3 x double>* %"<uv>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #4
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), i64 %primnum) #4
  store <3 x double> %gvalue, <3 x double>* @uv
  store i64 %gvalue3, i64* @primnum
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	/obj/rigid/cloudnoise1/cloudnoise
; ModuleID = 'obj_rigid_cloudnoise1_cloudnoise'
source_filename = "obj_rigid_cloudnoise1_cloudnoise"

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [7 x i8] c"onoise\00"
@2 = private constant [6 x i8] c"noise\00"
@density = external global double
@3 = private constant [5 x i8] c"file\00"
@4 = private constant [4 x i8] c"sdf\00"
@5 = private constant [7 x i8] c"snoise\00"
@6 = private constant [7 x i8] c"anoise\00"
@7 = private constant [13 x i8] c"correctnoise\00"
@8 = private constant [7 x i8] c"xnoise\00"
@9 = private constant [2 x i8] c"P\00"
@10 = private constant [5 x i8] c"ndot\00"
@11 = private constant [8 x i8] c"preload\00"
@12 = private constant [8 x i8] c"density\00"

; Function Attrs: alwaysinline nounwind
define private <4 x double> @"vop_FlowNoiseGrad4P@PPFF"(<4 x double>* %pos, double* %flow, double* %delta) #0 {
__llvm_entry:
  %pos1 = load <4 x double>, <4 x double>* %pos
  %return = call double @"getcomp@FPI"(<4 x double> %pos1, i64 0)
  %delta2 = load double, double* %delta
  %output = fadd double %return, %delta2
  %return4 = call double @"getcomp@FPI"(<4 x double> %pos1, i64 1)
  %return6 = call double @"getcomp@FPI"(<4 x double> %pos1, i64 2)
  %return8 = call double @"getcomp@FPI"(<4 x double> %pos1, i64 3)
  %return9 = call <4 x double> @"set@PFFFF"(double %output, double %return4, double %return6, double %return8)
  %flow10 = load double, double* %flow
  %return11 = call <3 x double> @"flownoise@VPF"(<4 x double> %return9, double %flow10)
  %output15 = fsub double %return, %delta2
  %return22 = call <4 x double> @"set@PFFFF"(double %output15, double %return4, double %return6, double %return8)
  %return24 = call <3 x double> @"flownoise@VPF"(<4 x double> %return22, double %flow10)
  %output25 = call <3 x double> @"sub@VV"(<3 x double> %return11, <3 x double> %return24)
  %output31 = fadd double %return4, %delta2
  %return36 = call <4 x double> @"set@PFFFF"(double %return, double %output31, double %return6, double %return8)
  %return38 = call <3 x double> @"flownoise@VPF"(<4 x double> %return36, double %flow10)
  %output44 = fsub double %return4, %delta2
  %return49 = call <4 x double> @"set@PFFFF"(double %return, double %output44, double %return6, double %return8)
  %return51 = call <3 x double> @"flownoise@VPF"(<4 x double> %return49, double %flow10)
  %output52 = call <3 x double> @"sub@VV"(<3 x double> %return38, <3 x double> %return51)
  %output60 = fadd double %return6, %delta2
  %return63 = call <4 x double> @"set@PFFFF"(double %return, double %return4, double %output60, double %return8)
  %return65 = call <3 x double> @"flownoise@VPF"(<4 x double> %return63, double %flow10)
  %output73 = fsub double %return6, %delta2
  %return76 = call <4 x double> @"set@PFFFF"(double %return, double %return4, double %output73, double %return8)
  %return78 = call <3 x double> @"flownoise@VPF"(<4 x double> %return76, double %flow10)
  %output79 = call <3 x double> @"sub@VV"(<3 x double> %return65, <3 x double> %return78)
  %output89 = fadd double %return8, %delta2
  %return90 = call <4 x double> @"set@PFFFF"(double %return, double %return4, double %return6, double %output89)
  %return92 = call <3 x double> @"flownoise@VPF"(<4 x double> %return90, double %flow10)
  %output102 = fsub double %return8, %delta2
  %return103 = call <4 x double> @"set@PFFFF"(double %return, double %return4, double %return6, double %output102)
  %return105 = call <3 x double> @"flownoise@VPF"(<4 x double> %return103, double %flow10)
  %output106 = call <3 x double> @"sub@VV"(<3 x double> %return92, <3 x double> %return105)
  %return108 = call double @"getcomp@FVI"(<3 x double> %output25, i64 0)
  %return110 = call double @"getcomp@FVI"(<3 x double> %output25, i64 1)
  %return112 = call double @"getcomp@FVI"(<3 x double> %output25, i64 2)
  %return114 = call double @"getcomp@FVI"(<3 x double> %output52, i64 0)
  %return116 = call double @"getcomp@FVI"(<3 x double> %output52, i64 1)
  %return118 = call double @"getcomp@FVI"(<3 x double> %output52, i64 2)
  %return120 = call double @"getcomp@FVI"(<3 x double> %output79, i64 0)
  %return122 = call double @"getcomp@FVI"(<3 x double> %output79, i64 1)
  %return124 = call double @"getcomp@FVI"(<3 x double> %output79, i64 2)
  %return126 = call double @"getcomp@FVI"(<3 x double> %output106, i64 0)
  %return128 = call double @"getcomp@FVI"(<3 x double> %output106, i64 1)
  %return130 = call double @"getcomp@FVI"(<3 x double> %output106, i64 2)
  %return131 = call <16 x double> @"set@4FFFFFFFFFFFFFFFF"(double %return108, double %return110, double %return112, double 0.000000e+00, double %return114, double %return116, double %return118, double 0.000000e+00, double %return120, double %return122, double %return124, double 0.000000e+00, double %return126, double %return128, double %return130, double 0.000000e+00)
  %output134 = fmul double %delta2, 2.000000e+00
  %output135 = call <16 x double> @"div@4F"(<16 x double> %return131, double %output134)
  %cast = call <4 x double> @"set@PF"(double 5.000000e-01)
  %output138 = call <4 x double> @"mul@P4"(<4 x double> %cast, <16 x double> %output135)
  ret <4 x double> %output138
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FPI"(<4 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PFFFF"(double, double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"flownoise@VPF"(<4 x double>, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <16 x double> @"set@4FFFFFFFFFFFFFFFF"(double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double) #1

; Function Attrs: nounwind
declare <16 x double> @"div@4F"(<16 x double>, double) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PF"(double) #1

; Function Attrs: nounwind
declare <4 x double> @"mul@P4"(<4 x double>, <16 x double>) #2

; Function Attrs: alwaysinline nounwind
define private double @"vop_fbmlength_vector@FV"(<3 x double>* %val) #0 {
__llvm_entry:
  %val1 = load <3 x double>, <3 x double>* %val
  %return = call double @"length@FV"(<3 x double> %val1)
  ret double %return
}

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"vop_fbmFlowNoiseVP@VPFIFFF"(<4 x double>* %pos, double* %rough, i64* %maxoctaves, double* %flow, double* %flowrate, double* %advect) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca <4 x double>
  %2 = alloca double
  %3 = alloca double
  %return = call double @"sqrt@FF"(double 1.000000e-06)
  %pos1 = load <4 x double>, <4 x double>* %pos
  %output = fmul double 2.000000e+00, %return
  %advect3 = load double, double* %advect
  %flow4 = load double, double* %flow
  %cast = call <3 x double> @"set@VI"(i64 0)
  br label %cond

cond:                                             ; preds = %end35, %__llvm_entry
  %pp.0 = phi <4 x double> [ %pos1, %__llvm_entry ], [ %output47, %end35 ]
  %nval.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %output23, %end35 ]
  %amp.0 = phi double [ 1.000000e+00, %__llvm_entry ], [ %output26, %end35 ]
  %scale.0 = phi double [ 1.000000e+00, %__llvm_entry ], [ %output31, %end35 ]
  %M.0 = phi double [ %advect3, %__llvm_entry ], [ %output50, %end35 ]
  %flowv.0 = phi double [ %flow4, %__llvm_entry ], [ %output29, %end35 ]
  %octaves.0 = phi i64 [ 0, %__llvm_entry ], [ %output53, %end35 ]
  %return7 = fcmp ogt double %scale.0, %output
  %return8 = zext i1 %return7 to i64
  %maxoctaves10 = load i64, i64* %maxoctaves
  %return11 = call i64 @"lt@III"(i64 %octaves.0, i64 %maxoctaves10)
  %return12 = call i64 @"and@III"(i64 %return8, i64 %return11)
  %4 = icmp ne i64 %return12, 0
  br i1 %4, label %body, label %end

body:                                             ; preds = %cond
  %return16 = call <3 x double> @"flownoise@VPF"(<4 x double> %pp.0, double %flowv.0)
  %cast17 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output18 = call <3 x double> @"sub@VV"(<3 x double> %return16, <3 x double> %cast17)
  %cast19 = call <3 x double> @"set@VF"(double %amp.0)
  %output20 = call <3 x double> @"mul@VV"(<3 x double> %cast19, <3 x double> %output18)
  %output23 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output20)
  %rough25 = load double, double* %rough
  %output26 = fmul double %amp.0, %rough25
  %flowrate28 = load double, double* %flowrate
  %output29 = fmul double %flowv.0, %flowrate28
  %output31 = fmul double %scale.0, 5.000000e-01
  %return33 = fcmp one double %M.0, 0.000000e+00
  br i1 %return33, label %true, label %end35

end:                                              ; preds = %cond
  %return56 = fcmp ogt double %scale.0, %return
  br i1 %return56, label %true58, label %end59

true:                                             ; preds = %body
  store <3 x double> %output20, <3 x double>* %0
  %vop_fbmlength_vector = call double @"vop_fbmlength_vector@FV"(<3 x double>* %0)
  %output39 = fmul double %M.0, %vop_fbmlength_vector
  store <4 x double> %pp.0, <4 x double>* %1
  %flow41 = load double, double* %flow
  store double %flow41, double* %2
  store double 1.000000e-02, double* %3
  %vop_FlowNoiseGrad4P = call <4 x double> @"vop_FlowNoiseGrad4P@PPFF"(<4 x double>* %1, double* %2, double* %3)
  %cast42 = call <4 x double> @"set@PF"(double %output39)
  %output43 = call <4 x double> @"mul@PP"(<4 x double> %cast42, <4 x double> %vop_FlowNoiseGrad4P)
  %output44 = call <4 x double> @"sub@PP"(<4 x double> %pp.0, <4 x double> %output43)
  br label %end35

end35:                                            ; preds = %true, %body
  %pp.1 = phi <4 x double> [ %output44, %true ], [ %pp.0, %body ]
  %cast46 = call <4 x double> @"set@PI"(i64 2)
  %output47 = call <4 x double> @"mul@PP"(<4 x double> %pp.1, <4 x double> %cast46)
  %advect49 = load double, double* %advect
  %output50 = fmul double %M.0, %advect49
  %output53 = add i64 %octaves.0, 1
  br label %cond

true58:                                           ; preds = %end
  %output63 = call double @"div@FF"(double %scale.0, double %return)
  %output64 = fsub double %output63, 1.000000e+00
  %return65 = call double @"clamp@FFFF"(double %output64, double 0.000000e+00, double 1.000000e+00)
  %output66 = fmul double %amp.0, %return65
  %return71 = call <3 x double> @"flownoise@VPF"(<4 x double> %pp.0, double %flowv.0)
  %cast72 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output73 = call <3 x double> @"sub@VV"(<3 x double> %return71, <3 x double> %cast72)
  %cast74 = call <3 x double> @"set@VF"(double %output66)
  %output75 = call <3 x double> @"mul@VV"(<3 x double> %cast74, <3 x double> %output73)
  %output76 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output75)
  br label %end59

end59:                                            ; preds = %true58, %end
  %nval.1 = phi <3 x double> [ %output76, %true58 ], [ %nval.0, %end ]
  ret <3 x double> %nval.1
}

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"mul@PP"(<4 x double>, <4 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"sub@PP"(<4 x double>, <4 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PI"(i64) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #2

; Function Attrs: alwaysinline nounwind
define private double @"vop_perlinNoiseVF@FVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %output11, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output19, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output14, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output16, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return8 = call double @"noise@FV"(<3 x double> %pp.0)
  %output9 = fadd double %return8, 0.000000e+00
  %output10 = fmul double %scale.0, %output9
  %output11 = fadd double %nval.0, %output10
  %output14 = add i64 %i.0, 1
  %cast = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output16 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast)
  %rough18 = load double, double* %rough
  %output19 = fmul double %scale.0, %rough18
  br label %cond

end:                                              ; preds = %cond
  %atten21 = load double, double* %atten
  %return22 = call double @"pow@FFF"(double %nval.0, double %atten21)
  ret double %return22
}

; Function Attrs: nounwind readnone
declare double @"noise@FV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"pow@FFF"(double, double) #1

; Function Attrs: alwaysinline nounwind
define private double @"vop_correctperlinNoiseVF@FVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %output12, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output20, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output15, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output17, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %output = fmul double 5.000000e-01, %scale.0
  %return8 = call double @"noise@FV"(<3 x double> %pp.0)
  %return9 = call double @"neg@FF"(double 5.000000e-01)
  %output10 = fadd double %return8, %return9
  %output11 = fmul double %output, %output10
  %output12 = fadd double %nval.0, %output11
  %output15 = add i64 %i.0, 1
  %cast = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output17 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast)
  %rough19 = load double, double* %rough
  %output20 = fmul double %scale.0, %rough19
  br label %cond

end:                                              ; preds = %cond
  %atten22 = load double, double* %atten
  %return23 = call double @"pow@FFF"(double %nval.0, double %atten22)
  ret double %return23
}

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private double @"vop_simplexNoiseVF@FVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %output12, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output20, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output15, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output17, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %output = fmul double 5.000000e-01, %scale.0
  %return8 = call double @"xnoise@FV"(<3 x double> %pp.0)
  %return9 = call double @"neg@FF"(double 5.000000e-01)
  %output10 = fadd double %return8, %return9
  %output11 = fmul double %output, %output10
  %output12 = fadd double %nval.0, %output11
  %output15 = add i64 %i.0, 1
  %cast = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output17 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast)
  %rough19 = load double, double* %rough
  %output20 = fmul double %scale.0, %rough19
  br label %cond

end:                                              ; preds = %cond
  %atten22 = load double, double* %atten
  %return23 = call double @"pow@FFF"(double %nval.0, double %atten22)
  ret double %return23
}

; Function Attrs: nounwind readnone
declare double @"xnoise@FV"(<3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private void @"_obj_rigid_cloudnoise1_cloudnoise_snippet1@F"(double* %pulselen) #0 {
__llvm_entry:
  %pulselen1 = load double, double* %pulselen
  %output = call double @"div@FF"(double 1.000000e+00, double %pulselen1)
  store double %output, double* %pulselen
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"_obj_rigid_cloudnoise1_cloudnoise_snippet2@V"(<3 x double>* %noisesize) #0 {
__llvm_entry:
  %noisesize1 = load <3 x double>, <3 x double>* %noisesize
  %cast = call <3 x double> @"set@VI"(i64 1)
  %output = call <3 x double> @"div@VV"(<3 x double> %cast, <3 x double> %noisesize1)
  store <3 x double> %output, <3 x double>* %noisesize
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @obj_rigid_cloudnoise1_cloudnoise(<3 x double> %P, i64 %ix, i64 %iy, i64 %iz, i64 %resx, i64 %resy, i64 %resz, <3 x double> %dPdx, <3 x double> %dPdy, <3 x double> %dPdz, <3 x double> %center, double %Time, double %Timeinc, double %Frame, i8* %OpInput2, i8* %OpInput3, i8* %OpInput4, i8* %OpInput1, double %density, i8* %type, double %noiserough, i64 %smoothvalleys, i64 %absnoise, double %noisesum, <3 x double> %noiseoffset, double %amp, double %noiseamount, i64 %noiseoctaves, <3 x double> %upvector, double %upvectorbias, <3 x double> %advectoffset, double %advectamp, double %advectrough, i64 %upvectorfalloff, i64 %advectnoise, double %time, i64 %usenoisemask, double %noisemaskmultiplier, double %radius, i8* %channel, i64 %maxpoints, <3 x double> %advectelemscale, double %advectelemsize, double %advectpulselength, <3 x double> %noiseelementscale, double %noiseelementsize) #2 {
__llvm_entry:
  %outpulselen = alloca double
  %outnoisesize = alloca <3 x double>
  %0 = alloca <4 x double>
  %1 = alloca double
  %2 = alloca i64
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  %6 = alloca <3 x double>
  %7 = alloca i64
  %8 = alloca double
  %9 = alloca double
  %10 = alloca double
  %11 = alloca <3 x double>
  %12 = alloca i64
  %13 = alloca double
  %14 = alloca double
  %15 = alloca double
  store double 0.000000e+00, double* %outpulselen, !vex-initializer-store !3
  store <3 x double> zeroinitializer, <3 x double>* %outnoisesize, !vex-initializer-store !3
  %cast = sitofp i64 %resx to double
  %return = call double @"neg@FF"(double 5.000000e-01)
  %output = fmul double %cast, %return
  %cast7 = call <3 x double> @"set@VF"(double %output)
  %output8 = call <3 x double> @"mul@VV"(<3 x double> %dPdx, <3 x double> %cast7)
  %cast10 = sitofp i64 %resy to double
  %output13 = fmul double %cast10, %return
  %cast16 = call <3 x double> @"set@VF"(double %output13)
  %output17 = call <3 x double> @"mul@VV"(<3 x double> %dPdy, <3 x double> %cast16)
  %cast19 = sitofp i64 %resz to double
  %output22 = fmul double %cast19, %return
  %cast25 = call <3 x double> @"set@VF"(double %output22)
  %output26 = call <3 x double> @"mul@VV"(<3 x double> %dPdz, <3 x double> %cast25)
  %output29 = call <3 x double> @"add@VV"(<3 x double> %center, <3 x double> %output8)
  %return35 = call double @"length@FV"(<3 x double> %output8)
  %return37 = call double @"length@FV"(<3 x double> %output17)
  %return39 = call double @"length@FV"(<3 x double> %output26)
  %cast48 = sitofp i64 %ix to double
  %cast50 = sitofp i64 %iy to double
  %cast52 = sitofp i64 %iz to double
  %return60 = call <3 x double> @"set@VFFF"(double %cast, double %cast10, double %cast19)
  %return62 = call i64 @"neg@II"(i64 1)
  %cast63 = call <3 x double> @"set@VI"(i64 %return62)
  %return90 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0))
  %16 = icmp ne i64 %return90, 0
  br i1 %16, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %sourcefile.0 = phi i8* [ %OpInput1, %true ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), %__llvm_entry ]
  %return94 = call <3 x double> @"volumegradient@VSSV"(i8* %sourcefile.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0), <3 x double> %P)
  %return96 = call <3 x double> @"normalize@VV"(<3 x double> %return94)
  %return98 = call <3 x double> @"neg@VV"(<3 x double> %return96)
  %cast100 = call <4 x double> @"set@PV"(<3 x double> %P)
  %output103 = call <4 x double> @"setcomp@PFI"(<4 x double> %cast100, double %time, i64 3)
  %cast106 = call <3 x double> @"set@VF"(double %advectelemsize)
  %output107 = call <3 x double> @"mul@VV"(<3 x double> %advectelemscale, <3 x double> %cast106)
  %output110 = call <3 x double> @"div@VV"(<3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> %output107)
  store double %advectpulselength, double* %outpulselen
  call void @"_obj_rigid_cloudnoise1_cloudnoise_snippet1@F"(double* %outpulselen)
  %cast113 = call <4 x double> @"set@PV"(<3 x double> %output110)
  %outpulselen115 = load double, double* %outpulselen
  %output116 = call <4 x double> @"setcomp@PFI"(<4 x double> %cast113, double %outpulselen115, i64 3)
  %cast118 = call <4 x double> @"set@PV"(<3 x double> %advectoffset)
  %output120 = call <4 x double> @"setcomp@PFI"(<4 x double> %cast118, double 8.300000e-02, i64 3)
  %output123 = call <4 x double> @"mul@PP"(<4 x double> %output103, <4 x double> %output116)
  %output125 = call <4 x double> @"sub@PP"(<4 x double> %output123, <4 x double> %output120)
  store <4 x double> %output125, <4 x double>* %0
  store double %advectrough, double* %1
  store i64 5, i64* %2
  store double 0.000000e+00, double* %3
  store double 1.000000e+00, double* %4
  store double 0.000000e+00, double* %5
  %vop_fbmFlowNoiseVP = call <3 x double> @"vop_fbmFlowNoiseVP@VPFIFFF"(<4 x double>* %0, double* %1, i64* %2, double* %3, double* %4, double* %5)
  %cast129 = call <3 x double> @"set@VF"(double %advectamp)
  %output130 = call <3 x double> @"mul@VV"(<3 x double> %vop_fbmFlowNoiseVP, <3 x double> %cast129)
  %return132 = call i64 @"eq@III"(i64 %advectnoise, i64 0)
  %17 = icmp ne i64 %return132, 0
  br i1 %17, label %true133, label %false

true133:                                          ; preds = %end
  br label %end134

false:                                            ; preds = %end
  br label %end134

end134:                                           ; preds = %false, %true133
  %result.0 = phi <3 x double> [ zeroinitializer, %true133 ], [ %output130, %false ]
  %output139 = call <3 x double> @"add@VV"(<3 x double> %P, <3 x double> %result.0)
  %cast142 = call <3 x double> @"set@VF"(double %noiseelementsize)
  %output143 = call <3 x double> @"mul@VV"(<3 x double> %noiseelementscale, <3 x double> %cast142)
  store <3 x double> %output143, <3 x double>* %outnoisesize
  call void @"_obj_rigid_cloudnoise1_cloudnoise_snippet2@V"(<3 x double>* %outnoisesize)
  %outnoisesize148 = load <3 x double>, <3 x double>* %outnoisesize
  br label %cond

cond:                                             ; preds = %end277, %end134
  %_i.0 = phi i64 [ 0, %end134 ], [ %output156, %end277 ]
  %_noisesum.0 = phi double [ %noisesum, %end134 ], [ %output282, %end277 ]
  %return153 = call i64 @"lt@III"(i64 %_i.0, i64 %noiseoctaves)
  %18 = icmp ne i64 %return153, 0
  br i1 %18, label %body, label %end154

body:                                             ; preds = %cond
  %output156 = add i64 %_i.0, 1
  %cast159 = call <3 x double> @"set@VI"(i64 %output156)
  %output160 = call <3 x double> @"mul@VV"(<3 x double> %outnoisesize148, <3 x double> %cast159)
  %output162 = mul i64 %_i.0, 1234
  %cast165 = call <3 x double> @"set@VI"(i64 %output162)
  %output166 = call <3 x double> @"add@VV"(<3 x double> %noiseoffset, <3 x double> %cast165)
  %cast168 = sitofp i64 %output156 to double
  %return170 = call double @"pow@FFF"(double %cast168, double 1.000000e+00)
  %output173 = call double @"div@FF"(double %amp, double %return170)
  %return175 = call i64 @"eq@ISS"(i8* %type, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %19 = icmp ne i64 %return175, 0
  br i1 %19, label %true176, label %false177

end154:                                           ; preds = %cond
  %cast289 = call <3 x double> @"set@VF"(double %_noisesum.0)
  %output290 = call <3 x double> @"mul@VV"(<3 x double> %return98, <3 x double> %cast289)
  %return293 = call double @"dot@FVV"(<3 x double> %return96, <3 x double> %upvector)
  %cast296 = sitofp i64 %return62 to double
  %return297 = call double @"fit@FFFFFF"(double %return293, double %cast296, double 1.000000e+00, double 0.000000e+00, double 1.000000e+00)
  %return300 = call double @"pow@FFF"(double %return297, double %upvectorbias)
  %return302 = call i64 @"eq@III"(i64 %upvectorfalloff, i64 0)
  %20 = icmp ne i64 %return302, 0
  br i1 %20, label %true303, label %false304

true176:                                          ; preds = %body
  %output181 = call <3 x double> @"mul@VV"(<3 x double> %output139, <3 x double> %output160)
  %output183 = call <3 x double> @"sub@VV"(<3 x double> %output181, <3 x double> %output166)
  %return185 = call double @"onoise@FVIFF"(<3 x double> %output183, i64 1, double %noiserough, double 1.000000e+00)
  %output188 = fmul double %return185, %output173
  br label %end178

false177:                                         ; preds = %body
  %return190 = call i64 @"eq@ISS"(i8* %type, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0))
  %21 = icmp ne i64 %return190, 0
  br i1 %21, label %true191, label %false192

end178:                                           ; preds = %true233, %false234, %true221, %true206, %true191, %true176
  %noise1.0 = phi double [ %output188, %true176 ], [ %output203, %true191 ], [ %output218, %true206 ], [ %vop_correctperlinNoiseVF, %true221 ], [ %vop_simplexNoiseVF, %true233 ], [ %vop_perlinNoiseVF, %false234 ]
  %return251 = call double @"abs@FF"(double %noise1.0)
  %return253 = call double @"pow@FFF"(double %return251, double 5.000000e-01)
  %return255 = call i64 @"eq@III"(i64 %absnoise, i64 0)
  %22 = icmp ne i64 %return255, 0
  br i1 %22, label %true256, label %false257

true191:                                          ; preds = %false177
  %output196 = call <3 x double> @"mul@VV"(<3 x double> %output139, <3 x double> %output160)
  %output198 = call <3 x double> @"sub@VV"(<3 x double> %output196, <3 x double> %output166)
  %return200 = call double @"snoise@FVIFF"(<3 x double> %output198, i64 1, double %noiserough, double 1.000000e+00)
  %output203 = fmul double %return200, %output173
  br label %end178

false192:                                         ; preds = %false177
  %return205 = call i64 @"eq@ISS"(i8* %type, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0))
  %23 = icmp ne i64 %return205, 0
  br i1 %23, label %true206, label %false207

true206:                                          ; preds = %false192
  %output211 = call <3 x double> @"mul@VV"(<3 x double> %output139, <3 x double> %output160)
  %output213 = call <3 x double> @"sub@VV"(<3 x double> %output211, <3 x double> %output166)
  %return215 = call double @"anoise@FVIFF"(<3 x double> %output213, i64 1, double %noiserough, double 1.000000e+00)
  %output218 = fmul double %return215, %output173
  br label %end178

false207:                                         ; preds = %false192
  %return220 = call i64 @"eq@ISS"(i8* %type, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @7, i64 0, i64 0))
  %24 = icmp ne i64 %return220, 0
  br i1 %24, label %true221, label %false222

true221:                                          ; preds = %false207
  %output226 = call <3 x double> @"mul@VV"(<3 x double> %output139, <3 x double> %output160)
  %output228 = call <3 x double> @"sub@VV"(<3 x double> %output226, <3 x double> %output166)
  store <3 x double> %output228, <3 x double>* %6
  store i64 1, i64* %7
  store double %output173, double* %8
  store double %noiserough, double* %9
  store double 1.000000e+00, double* %10
  %vop_correctperlinNoiseVF = call double @"vop_correctperlinNoiseVF@FVIFFF"(<3 x double>* %6, i64* %7, double* %8, double* %9, double* %10)
  br label %end178

false222:                                         ; preds = %false207
  %return232 = call i64 @"eq@ISS"(i8* %type, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @8, i64 0, i64 0))
  %25 = icmp ne i64 %return232, 0
  %output238 = call <3 x double> @"mul@VV"(<3 x double> %output139, <3 x double> %output160)
  %output240 = call <3 x double> @"sub@VV"(<3 x double> %output238, <3 x double> %output166)
  store <3 x double> %output240, <3 x double>* %11
  store i64 1, i64* %12
  store double %output173, double* %13
  store double %noiserough, double* %14
  store double 1.000000e+00, double* %15
  br i1 %25, label %true233, label %false234

true233:                                          ; preds = %false222
  %vop_simplexNoiseVF = call double @"vop_simplexNoiseVF@FVIFFF"(<3 x double>* %11, i64* %12, double* %13, double* %14, double* %15)
  br label %end178

false234:                                         ; preds = %false222
  %vop_perlinNoiseVF = call double @"vop_perlinNoiseVF@FVIFFF"(<3 x double>* %11, i64* %12, double* %13, double* %14, double* %15)
  br label %end178

true256:                                          ; preds = %end178
  br label %end258

false257:                                         ; preds = %end178
  br label %end258

end258:                                           ; preds = %false257, %true256
  %result1.0 = phi double [ %noise1.0, %true256 ], [ %return253, %false257 ]
  %return262 = call i64 @"lt@III"(i64 %_i.0, i64 1)
  %return264 = call i64 @"eq@III"(i64 %return262, i64 0)
  %26 = icmp ne i64 %return264, 0
  br i1 %26, label %true265, label %false266

true265:                                          ; preds = %end258
  br label %end267

false266:                                         ; preds = %end258
  br label %end267

end267:                                           ; preds = %false266, %true265
  %result2.0 = phi double [ %_noisesum.0, %true265 ], [ 1.000000e+00, %false266 ]
  %output272 = fmul double %result2.0, %result1.0
  %return274 = call i64 @"eq@III"(i64 %smoothvalleys, i64 0)
  %27 = icmp ne i64 %return274, 0
  br i1 %27, label %true275, label %false276

true275:                                          ; preds = %end267
  br label %end277

false276:                                         ; preds = %end267
  br label %end277

end277:                                           ; preds = %false276, %true275
  %result3.0 = phi double [ %result1.0, %true275 ], [ %output272, %false276 ]
  %output282 = fadd double %_noisesum.0, %result3.0
  br label %cond

true303:                                          ; preds = %end154
  br label %end305

false304:                                         ; preds = %end154
  br label %end305

end305:                                           ; preds = %false304, %true303
  %result4.0 = phi double [ 1.000000e+00, %true303 ], [ %return300, %false304 ]
  %return309 = call i64 @"ne@ISS"(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0))
  %28 = icmp ne i64 %return309, 0
  br i1 %28, label %true310, label %false311

true310:                                          ; preds = %end305
  %return317 = call double @"radians@FF"(double 9.000000e+01)
  %return318 = call double @"cos@FF"(double %return317)
  %return319 = call i64 @"pcopen@ISSVSVFI:SFSI"(i8* %OpInput2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i64 0, i64 0), <3 x double> %P, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), <3 x double> zeroinitializer, double %radius, i64 %maxpoints, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i64 0, i64 0), double %return318, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @11, i64 0, i64 0), i64 1)
  br label %end312

false311:                                         ; preds = %end305
  %return324 = call i64 @"pcopen@ISSVFI:SI"(i8* %OpInput2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i64 0, i64 0), <3 x double> %P, double %radius, i64 %maxpoints, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @11, i64 0, i64 0), i64 1)
  br label %end312

end312:                                           ; preds = %false311, %true310
  %handle.0 = phi i64 [ %return319, %true310 ], [ %return324, %false311 ]
  %return327 = call double @"pcfilter@FIS"(i64 %handle.0, i8* %channel)
  %output330 = fmul double %return327, %noisemaskmultiplier
  %return332 = call i64 @"eq@III"(i64 %usenoisemask, i64 0)
  %29 = icmp ne i64 %return332, 0
  br i1 %29, label %true333, label %false334

true333:                                          ; preds = %end312
  br label %end335

false334:                                         ; preds = %end312
  br label %end335

end335:                                           ; preds = %false334, %true333
  %result5.0 = phi double [ 1.000000e+00, %true333 ], [ %output330, %false334 ]
  %cast340 = call <3 x double> @"set@VF"(double %noiseamount)
  %output341 = call <3 x double> @"mul@VV"(<3 x double> %output290, <3 x double> %cast340)
  %cast343 = call <3 x double> @"set@VF"(double %result4.0)
  %output344 = call <3 x double> @"mul@VV"(<3 x double> %output341, <3 x double> %cast343)
  %cast346 = call <3 x double> @"set@VF"(double %result5.0)
  %output347 = call <3 x double> @"mul@VV"(<3 x double> %output344, <3 x double> %cast346)
  %output350 = call <3 x double> @"add@VV"(<3 x double> %output347, <3 x double> %P)
  br i1 %16, label %true352, label %end353

true352:                                          ; preds = %end335
  br label %end353

end353:                                           ; preds = %true352, %end335
  %sourcefile1.0 = phi i8* [ %OpInput1, %true352 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), %end335 ]
  %return357 = call double @"volumesample@FSSV"(i8* %sourcefile1.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @12, i64 0, i64 0), <3 x double> %output350)
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @12, i64 0, i64 0), double %return357) #3
  store double %gvalue, double* @density
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"volumegradient@VSSV"(i8*, i8*, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare <4 x double> @"set@PV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"setcomp@PFI"(<4 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"onoise@FVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind readnone
declare double @"snoise@FVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind readnone
declare double @"anoise@FVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind
declare double @"abs@FF"(double) #2

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #1

; Function Attrs: nounwind
declare double @"radians@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #1

; Function Attrs: nounwind
declare i64 @"pcopen@ISSVSVFI:SFSI"(i8*, i8*, <3 x double>, i8*, <3 x double>, double, i64, i8*, double, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"pcopen@ISSVFI:SI"(i8*, i8*, <3 x double>, double, i64, i8*, i64) #2

; Function Attrs: nounwind
declare double @"pcfilter@FIS"(i64, i8*) #2

; Function Attrs: nounwind
declare double @"volumesample@FSSV"(i8*, i8*, <3 x double>) #2

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_rigid_cloudnoise1_cloudnoise(<3 x double> zeroinitializer, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), double 0.000000e+00, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), double 5.000000e-01, i64 0, i64 0, double 0.000000e+00, <3 x double> zeroinitializer, double 1.000000e+00, double 1.000000e+00, i64 3, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>, double 1.000000e+00, <3 x double> zeroinitializer, double 1.000000e-01, double 7.500000e-01, i64 0, i64 0, double 0.000000e+00, i64 0, double 0.000000e+00, double 1.000000e+00, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 10, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, double 1.000000e+00, double 1.000000e+00, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, double 1.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end

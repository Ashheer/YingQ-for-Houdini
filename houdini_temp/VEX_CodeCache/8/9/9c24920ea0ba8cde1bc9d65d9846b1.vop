;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [15 x i8] c"../innerradius\00"
@1 = private constant [15 x i8] c"../outerradius\00"
@pscale = external global double
@uv = external global <3 x double>
@tangentv = external global <3 x double>
@tangentu = external global <3 x double>
@N = external global <3 x double>
@up = external global <3 x double>
@2 = private constant [7 x i8] c"pscale\00"
@3 = private constant [3 x i8] c"uv\00"
@4 = private constant [9 x i8] c"tangentv\00"
@5 = private constant [9 x i8] c"tangentu\00"
@6 = private constant [2 x i8] c"N\00"
@7 = private constant [3 x i8] c"up\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FVVVVV"(double* %_bound_pscale, <3 x double>* %_bound_uv, <3 x double>* %_bound_tangentv, <3 x double>* %_bound_tangentu, <3 x double>* %_bound_N, <3 x double>* %_bound_up) #0 {
__llvm_entry:
  %_bound_uv1 = load <3 x double>, <3 x double>* %_bound_uv
  %return = call double @"getcomp@FVI"(<3 x double> %_bound_uv1, i64 1)
  %return2 = call double @"ch@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i64 0, i64 0))
  %return3 = call double @"ch@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1, i64 0, i64 0))
  %return4 = call double @"fit01@FFFF"(double %return, double %return2, double %return3)
  store double %return4, double* %_bound_pscale
  %_bound_tangentu5 = load <3 x double>, <3 x double>* %_bound_tangentu
  %return6 = call <3 x double> @"cross@VVV"(<3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>, <3 x double> %_bound_tangentu5)
  store <3 x double> %return6, <3 x double>* %_bound_tangentv
  %_bound_tangentu7 = load <3 x double>, <3 x double>* %_bound_tangentu
  %return8 = call double @"dot@FVV"(<3 x double> %_bound_tangentu7, <3 x double> <double 0.000000e+00, double 1.000000e+00, double 0.000000e+00>)
  %return9 = fcmp oeq double %return8, 1.000000e+00
  br i1 %return9, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_tangentu11 = load <3 x double>, <3 x double>* %_bound_tangentu
  %return12 = call <3 x double> @"cross@VVV"(<3 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>, <3 x double> %_bound_tangentu11)
  store <3 x double> %return12, <3 x double>* %_bound_tangentv
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %_bound_tangentu13 = load <3 x double>, <3 x double>* %_bound_tangentu
  %_bound_tangentv14 = load <3 x double>, <3 x double>* %_bound_tangentv
  %return15 = call <3 x double> @"cross@VVV"(<3 x double> %_bound_tangentu13, <3 x double> %_bound_tangentv14)
  %_bound_tangentv16 = load <3 x double>, <3 x double>* %_bound_tangentv
  store <3 x double> %_bound_tangentv16, <3 x double>* %_bound_N
  %_bound_tangentu17 = load <3 x double>, <3 x double>* %_bound_tangentu
  store <3 x double> %_bound_tangentu17, <3 x double>* %_bound_up
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"fit01@FFFF"(double, double, double) #2

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(double %pscale, <3 x double> %uv, <3 x double> %tangentv, <3 x double> %tangentu, <3 x double> %N, <3 x double> %up) #2 {
__llvm_entry:
  %"<tangentv>" = alloca <3 x double>
  %"<N>" = alloca <3 x double>
  %"<up>" = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca <3 x double>
  %"<pscale>" = alloca double
  store double %pscale, double* %"<pscale>"
  store <3 x double> %tangentv, <3 x double>* %"<tangentv>"
  store <3 x double> %N, <3 x double>* %"<N>"
  store <3 x double> %up, <3 x double>* %"<up>"
  store <3 x double> %uv, <3 x double>* %0
  store <3 x double> %tangentu, <3 x double>* %1
  call void @"__vex_snippet_snippet@FVVVVV"(double* %"<pscale>", <3 x double>* %0, <3 x double>* %"<tangentv>", <3 x double>* %1, <3 x double>* %"<N>", <3 x double>* %"<up>")
  %evalue = load double, double* %"<pscale>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), double %evalue) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), <3 x double> %uv) #3
  %evalue5 = load <3 x double>, <3 x double>* %"<tangentv>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i64 0, i64 0), <3 x double> %evalue5) #3
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i64 0, i64 0), <3 x double> %tangentu) #3
  %evalue9 = load <3 x double>, <3 x double>* %"<N>"
  %gvalue10 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i64 0, i64 0), <3 x double> %evalue9) #3
  %evalue11 = load <3 x double>, <3 x double>* %"<up>"
  %gvalue12 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @7, i64 0, i64 0), <3 x double> %evalue11) #3
  store double %gvalue, double* @pscale
  store <3 x double> %gvalue4, <3 x double>* @uv
  store <3 x double> %gvalue6, <3 x double>* @tangentv
  store <3 x double> %gvalue8, <3 x double>* @tangentu
  store <3 x double> %gvalue10, <3 x double>* @N
  store <3 x double> %gvalue12, <3 x double>* @up
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

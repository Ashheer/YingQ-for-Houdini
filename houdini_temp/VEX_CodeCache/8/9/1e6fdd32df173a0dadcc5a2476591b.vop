;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [16 x i8] c"falloff_heatmap\00"
@mops_falloff = external global double
@Cd = external global <3 x double>
@1 = private constant [13 x i8] c"mops_falloff\00"
@2 = private constant [3 x i8] c"Cd\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FV"(double* %_bound_mops_falloff, <3 x double>* %_bound_Cd) #0 {
__llvm_entry:
  %_bound_mops_falloff1 = load double, double* %_bound_mops_falloff
  %return = call double @"clamp@FFFF"(double %_bound_mops_falloff1, double 0.000000e+00, double 1.000000e+00)
  %return2 = call <3 x double> @"chramp@VSF"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i64 0, i64 0), double %return)
  store <3 x double> %return2, <3 x double>* %_bound_Cd
  ret void
}

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"chramp@VSF"(i8*, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(double %mops_falloff, <3 x double> %Cd) #1 {
__llvm_entry:
  %"<Cd>" = alloca <3 x double>
  %0 = alloca double
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store double %mops_falloff, double* %0
  call void @"__vex_snippet_snippet@FV"(double* %0, <3 x double>* %"<Cd>")
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0), double %mops_falloff) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<Cd>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), <3 x double> %evalue2) #3
  store double %gvalue, double* @mops_falloff
  store <3 x double> %gvalue3, <3 x double>* @Cd
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

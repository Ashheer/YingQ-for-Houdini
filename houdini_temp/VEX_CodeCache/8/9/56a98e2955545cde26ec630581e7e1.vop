;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x <3 x double>] zeroinitializer
@sourceprimuv = external global <3 x double>*
@hitprimuv = external global double
@1 = private constant [13 x i8] c"sourceprimuv\00"
@2 = private constant [10 x i8] c"hitprimuv\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[VF"(<3 x double>** %_bound_sourceprimuv, double* %_bound_hitprimuv) #0 {
__llvm_entry:
  %_bound_sourceprimuv1 = load <3 x double>*, <3 x double>** %_bound_sourceprimuv
  %return = call i64 @"len@I[V"(<3 x double>* %_bound_sourceprimuv1)
  %return2 = call i64 @"eq@III"(i64 %return, i64 2)
  %0 = icmp ne i64 %return2, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return4 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_bound_sourceprimuv1, i64 1)
  %return5 = call double @"getcomp@FVI"(<3 x double> %return4, i64 0)
  store double %return5, double* %_bound_hitprimuv
  br label %end

false:                                            ; preds = %__llvm_entry
  %return7 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_bound_sourceprimuv1, i64 2)
  %return8 = call double @"getcomp@FVI"(<3 x double> %return7, i64 0)
  store double %return8, double* %_bound_hitprimuv
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"len@I[V"(<3 x double>*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double>* %sourceprimuv, double %hitprimuv) #2 {
__llvm_entry:
  %"<hitprimuv>" = alloca double
  %0 = alloca <3 x double>*
  store double %hitprimuv, double* %"<hitprimuv>"
  store <3 x double>* %sourceprimuv, <3 x double>** %0
  call void @"__vex_snippet_snippet@[VF"(<3 x double>** %0, double* %"<hitprimuv>")
  %gvalue = call <3 x double>* @"_export@[VS[V"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0), <3 x double>* %sourceprimuv) #3
  %evalue2 = load double, double* %"<hitprimuv>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0), double %evalue2) #3
  store <3 x double>* %gvalue, <3 x double>** @sourceprimuv
  store double %gvalue3, double* @hitprimuv
  ret void
}

declare <3 x double>* @"_export@[VS[V"(i8*, <3 x double>*)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @0, i64 0, i64 0), double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

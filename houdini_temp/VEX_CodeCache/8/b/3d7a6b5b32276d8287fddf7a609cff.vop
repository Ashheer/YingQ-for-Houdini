;_name	/obj/grid1/vellumsolver1/dopnet1/vellumsolver1/init_inertia/geometryvop1
; ModuleID = 'obj_grid1_vellumsolver1_dopnet1_vellumsolver1_init_inertia_geometryvop1'
source_filename = "obj_grid1_vellumsolver1_dopnet1_vellumsolver1_init_inertia_geometryvop1"

@0 = private constant [5 x i8] c"mass\00"
@spinshape = external global <3 x double>
@inertia = external global double
@1 = private constant [10 x i8] c"spinshape\00"
@2 = private constant [8 x i8] c"inertia\00"

; Function Attrs: alwaysinline nounwind
define private void @"_obj_grid1_vellumsolver1_dopnet1_vellumsolver1_init_inertia_geometryvop1_snippet1@VFF"(<3 x double>* %_bound_spinshape, double* %_bound_mass, double* %_bound_inertia) #0 {
__llvm_entry:
  %_bound_mass1 = load double, double* %_bound_mass
  %return = fcmp oeq double %_bound_mass1, 0.000000e+00
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return4 = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %mass.0 = phi double [ %return4, %true ], [ %_bound_mass1, %__llvm_entry ]
  %_bound_inertia5 = load double, double* %_bound_inertia
  %return7 = call double @"neg@FF"(double %mass.0)
  %output = fmul double %_bound_inertia5, %return7
  store double %output, double* %_bound_inertia
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind
define void @obj_grid1_vellumsolver1_dopnet1_vellumsolver1_init_inertia_geometryvop1(<3 x double> %spinshape, double %mass, double %inertia) #2 {
__llvm_entry:
  %"<inertia>" = alloca double
  %0 = alloca <3 x double>
  %1 = alloca double
  store double %inertia, double* %"<inertia>"
  store double %mass, double* %1
  call void @"_obj_grid1_vellumsolver1_dopnet1_vellumsolver1_init_inertia_geometryvop1_snippet1@VFF"(<3 x double>* %0, double* %1, double* %"<inertia>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0), <3 x double> %spinshape) #3
  %evalue2 = load double, double* %"<inertia>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), double %evalue2) #3
  store <3 x double> %gvalue, <3 x double>* @spinshape
  store double %gvalue3, double* @inertia
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_grid1_vellumsolver1_dopnet1_vellumsolver1_init_inertia_geometryvop1(<3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

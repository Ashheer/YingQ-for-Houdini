;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [2 x i8] c"1\00"
@2 = private constant [2 x i8] c"2\00"
@3 = private constant [1 x i8] zeroinitializer
@primnum = external global i64
@Dir = external global i8*
@4 = private constant [8 x i8] c"primnum\00"
@5 = private constant [4 x i8] c"Dir\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IS"(i64* %_bound_primnum, i8** %_bound_Dir) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum1)
  %return3 = call i64 @"getcomp@I[II"(i64* %return, i64 0)
  %return4 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return3)
  %return6 = call i64 @"getcomp@I[II"(i64* %return, i64 1)
  %return7 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return6)
  %output = call <3 x double> @"sub@VV"(<3 x double> %return4, <3 x double> %return7)
  %return10 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %return12 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 1.000000e+00)
  %return13 = call double @"dot@FVV"(<3 x double> %return10, <3 x double> %return12)
  %return14 = call double @"abs@FF"(double %return13)
  %return15 = fcmp oge double %return14, 9.500000e-01
  br i1 %return15, label %true, label %false

true:                                             ; preds = %__llvm_entry
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i8** %_bound_Dir
  br label %end

false:                                            ; preds = %__llvm_entry
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), i8** %_bound_Dir
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, i8* %Dir) #1 {
__llvm_entry:
  %"<Dir>" = alloca i8*
  %0 = alloca i64
  store i8* %Dir, i8** %"<Dir>"
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@IS"(i64* %0, i8** %"<Dir>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), i64 %primnum) #3
  %evalue2 = load i8*, i8** %"<Dir>"
  %gvalue3 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @5, i64 0, i64 0), i8* %evalue2) #3
  store i64 %gvalue, i64* @primnum
  store i8* %gvalue3, i8** @Dir
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @3, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

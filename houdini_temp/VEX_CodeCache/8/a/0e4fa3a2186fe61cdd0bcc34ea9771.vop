;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"bias\00"
@1 = private constant [13 x i8] c"mops_falloff\00"
@id = external global i64
@mops_falloff = external global double
@2 = private constant [3 x i8] c"id\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IF"(i64* %_bound_id, double* %_bound_mops_falloff) #0 {
__llvm_entry:
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  %_bound_id1 = load i64, i64* %_bound_id
  %return2 = call i64 @"idtopoint@III"(i64 1, i64 %_bound_id1)
  %return4 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0), i64 %return2)
  %_bound_mops_falloff5 = load double, double* %_bound_mops_falloff
  %return8 = call double @"lerp@FFFF"(double %_bound_mops_falloff5, double %return4, double %return)
  store double %return8, double* %_bound_mops_falloff
  ret void
}

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare i64 @"idtopoint@III"(i64, i64) #2

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare double @"lerp@FFFF"(double, double, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %id, double %mops_falloff) #2 {
__llvm_entry:
  %"<mops_falloff>" = alloca double
  %0 = alloca i64
  store double %mops_falloff, double* %"<mops_falloff>"
  store i64 %id, i64* %0
  call void @"__vex_snippet_snippet@IF"(i64* %0, double* %"<mops_falloff>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), i64 %id) #3
  %evalue2 = load double, double* %"<mops_falloff>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1, i64 0, i64 0), double %evalue2) #3
  store i64 %gvalue, i64* @id
  store double %gvalue3, double* @mops_falloff
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 -1, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"color\00"
@Cd = external global <3 x double>
@pscale = external global double
@1 = private constant [3 x i8] c"Cd\00"
@2 = private constant [7 x i8] c"pscale\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VFF"(<3 x double>* %_bound_Cd, double* %_bound_overlap_self, double* %_bound_pscale) #0 {
__llvm_entry:
  %return = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0))
  store <3 x double> %return, <3 x double>* %_bound_Cd
  %_bound_overlap_self1 = load double, double* %_bound_overlap_self
  %return2 = fcmp olt double %_bound_overlap_self1, 9.990000e+02
  br i1 %return2, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_pscale4 = load double, double* %_bound_pscale
  %output = call double @"div@FF"(double %_bound_overlap_self1, double 2.000000e+00)
  %output6 = fsub double %_bound_pscale4, %output
  store double %output6, double* %_bound_pscale
  %_bound_overlap_self7 = load double, double* %_bound_overlap_self
  %return8 = fcmp ogt double %_bound_overlap_self7, 0.000000e+00
  br i1 %return8, label %true10, label %end

end:                                              ; preds = %true, %true10, %__llvm_entry
  ret void

true10:                                           ; preds = %true
  %tmp = load <3 x double>, <3 x double>* %_bound_Cd
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double 1.000000e+00, i64 2)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %_bound_Cd
  br label %end
}

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double 1.000000e+00, i64 2)
  %mrv9 = insertvalue { double, <3 x double> } { double 1.000000e+00, <3 x double> undef }, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %Cd, double %overlap_self, double %pscale) #3 {
__llvm_entry:
  %"<pscale>" = alloca double
  %0 = alloca double
  %"<Cd>" = alloca <3 x double>
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store double %pscale, double* %"<pscale>"
  store double %overlap_self, double* %0
  call void @"__vex_snippet_snippet@VFF"(<3 x double>* %"<Cd>", double* %0, double* %"<pscale>")
  %evalue = load <3 x double>, <3 x double>* %"<Cd>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #4
  %evalue2 = load double, double* %"<pscale>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), double %evalue2) #4
  store <3 x double> %gvalue, <3 x double>* @Cd
  store double %gvalue3, double* @pscale
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

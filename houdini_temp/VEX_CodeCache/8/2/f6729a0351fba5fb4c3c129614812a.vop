;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [8 x i8] c"utility\00"
@1 = private constant [0 x double] zeroinitializer
@2 = private constant [0 x <3 x double>] zeroinitializer
@value = external global double*
@actions = external global <3 x double>*
@center = external global <3 x double>
@primnum = external global i64
@utility = external global double
@reward = external global double
@optimalpolicy = external global <3 x double>
@3 = private constant [6 x i8] c"value\00"
@4 = private constant [8 x i8] c"actions\00"
@5 = private constant [7 x i8] c"center\00"
@6 = private constant [8 x i8] c"primnum\00"
@7 = private constant [7 x i8] c"reward\00"
@8 = private constant [14 x i8] c"optimalpolicy\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[F[VVIFFV"(double** %_bound_value, <3 x double>** %_bound_actions, <3 x double>* %_bound_center, i64* %_bound_primnum, double* %_bound_utility, double* %_bound_reward, <3 x double>* %_bound_optimalpolicy) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  br label %cond

cond:                                             ; preds = %end10, %__llvm_entry
  %h.0 = phi i64 [ 0, %__llvm_entry ], [ %output46, %end10 ]
  %return = call i64 @"lt@III"(i64 %h.0, i64 4)
  %1 = icmp ne i64 %return, 0
  br i1 %1, label %body, label %end

body:                                             ; preds = %cond
  %_bound_actions3 = load <3 x double>*, <3 x double>** %_bound_actions
  %return5 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_bound_actions3, i64 %h.0)
  store <3 x double> %return5, <3 x double>* %0
  %TransitionFunction = call <4 x double>* @"TransitionFunction@[PV"(<3 x double>* %0)
  br label %cond6

end:                                              ; preds = %cond
  %_bound_primnum47 = load i64, i64* %_bound_primnum
  %return48 = call i64 @"ne@III"(i64 %_bound_primnum47, i64 11)
  %return50 = call i64 @"ne@III"(i64 %_bound_primnum47, i64 7)
  %return51 = call i64 @"and@III"(i64 %return48, i64 %return50)
  %return53 = call i64 @"ne@III"(i64 %_bound_primnum47, i64 5)
  %return54 = call i64 @"and@III"(i64 %return51, i64 %return53)
  %2 = icmp ne i64 %return54, 0
  %_bound_reward57 = load double, double* %_bound_reward
  br i1 %2, label %true55, label %false

cond6:                                            ; preds = %end26, %body
  %i.0 = phi i64 [ 0, %body ], [ %output40, %end26 ]
  %sum.0 = phi double [ 0.000000e+00, %body ], [ %output37, %end26 ]
  %return9 = call i64 @"lt@III"(i64 %i.0, i64 3)
  %3 = icmp ne i64 %return9, 0
  br i1 %3, label %body7, label %end10

body7:                                            ; preds = %cond6
  %_bound_center12 = load <3 x double>, <3 x double>* %_bound_center
  %return15 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %TransitionFunction, i64 %i.0)
  %cast = call <3 x double> @"set@VP"(<4 x double> %return15)
  %cast16 = call <3 x double> @"set@VI"(i64 2)
  %output = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %cast16)
  %output17 = call <3 x double> @"add@VV"(<3 x double> %_bound_center12, <3 x double> %output)
  %return20 = call { double, i64, <3 x double> } @"xyzdist@FIVIV"(i64 0, <3 x double> %output17)
  %output22 = extractvalue { double, i64, <3 x double> } %return20, 1
  %return25 = call i64 @"eq@III"(i64 %output22, i64 5)
  %4 = icmp ne i64 %return25, 0
  br i1 %4, label %true, label %end26

end10:                                            ; preds = %cond6
  %_bound_value41 = load double*, double** %_bound_value
  %output43 = call double* @"append@[FF"(double* %_bound_value41, double %sum.0)
  store double* %output43, double** %_bound_value
  %output46 = add i64 %h.0, 1
  br label %cond

true:                                             ; preds = %body7
  %_bound_primnum27 = load i64, i64* %_bound_primnum
  br label %end26

end26:                                            ; preds = %true, %body7
  %prim.0 = phi i64 [ %_bound_primnum27, %true ], [ %output22, %body7 ]
  %return29 = call double @"prim@FISI"(i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0), i64 %prim.0)
  %return35 = call double @"getcomp@FPI"(<4 x double> %return15, i64 3)
  %output36 = fmul double %return29, %return35
  %output37 = fadd double %sum.0, %output36
  %output40 = add i64 %i.0, 1
  br label %cond6

true55:                                           ; preds = %end
  %_bound_value58 = load double*, double** %_bound_value
  %return59 = call double @"max@F[F"(double* %_bound_value58)
  %output60 = fmul double 9.990000e-01, %return59
  %output61 = fadd double %_bound_reward57, %output60
  store double %output61, double* %_bound_utility
  %_bound_value62 = load double*, double** %_bound_value
  %return64 = call double @"max@F[F"(double* %_bound_value62)
  %return65 = call i64 @"find@I[FF"(double* %_bound_value62, double %return64)
  %_bound_actions66 = load <3 x double>*, <3 x double>** %_bound_actions
  %return68 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_bound_actions66, i64 %return65)
  store <3 x double> %return68, <3 x double>* %_bound_optimalpolicy
  br label %end56

false:                                            ; preds = %end
  store double %_bound_reward57, double* %_bound_utility
  br label %end56

end56:                                            ; preds = %false, %true55
  ret void
}

; Function Attrs: alwaysinline nounwind
define private <4 x double>* @"TransitionFunction@[PV"(<3 x double>* %action) #0 {
__llvm_entry:
  %return = call double @"radians@FF"(double 9.000000e+01)
  %return1 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double 0.000000e+00, double 0.000000e+00)
  %return2 = call <9 x double> @"ident@3"()
  %output = call <9 x double> @"rotate@3FV"(<9 x double> %return2, double %return, <3 x double> %return1)
  %action7 = load <3 x double>, <3 x double>* %action
  %output8 = call <3 x double> @"mul@V3"(<3 x double> %action7, <9 x double> %output)
  %action9 = load <3 x double>, <3 x double>* %action
  %return11 = call <9 x double> @"neg@33"(<9 x double> %output)
  %output13 = call <3 x double> @"mul@V3"(<3 x double> %action9, <9 x double> %return11)
  %return15 = call double @"getcomp@FVI"(<3 x double> %output13, i64 0)
  %return17 = call double @"getcomp@FVI"(<3 x double> %output13, i64 1)
  %return19 = call double @"getcomp@FVI"(<3 x double> %output13, i64 2)
  %return20 = call <4 x double> @"set@PFFFF"(double %return15, double %return17, double %return19, double 1.000000e-01)
  %return22 = call double @"getcomp@FVI"(<3 x double> %action9, i64 0)
  %return24 = call double @"getcomp@FVI"(<3 x double> %action9, i64 1)
  %return26 = call double @"getcomp@FVI"(<3 x double> %action9, i64 2)
  %return27 = call <4 x double> @"set@PFFFF"(double %return22, double %return24, double %return26, double 8.000000e-01)
  %return29 = call double @"getcomp@FVI"(<3 x double> %output8, i64 0)
  %return31 = call double @"getcomp@FVI"(<3 x double> %output8, i64 1)
  %return33 = call double @"getcomp@FVI"(<3 x double> %output8, i64 2)
  %return34 = call <4 x double> @"set@PFFFF"(double %return29, double %return31, double %return33, double 1.000000e-01)
  %return35 = call <4 x double>* @"array@[P:PPP"(<4 x double> %return20, <4 x double> %return27, <4 x double> %return34)
  ret <4 x double>* %return35
}

; Function Attrs: nounwind
declare double @"radians@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind
declare <9 x double> @"ident@3"() #1

; Function Attrs: nounwind readnone
declare <9 x double> @"rotate@3FV"(<9 x double>, double, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"mul@V3"(<3 x double>, <9 x double>) #1

; Function Attrs: nounwind readnone
declare <9 x double> @"neg@33"(<9 x double>) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PFFFF"(double, double, double, double) #2

; Function Attrs: nounwind readnone
declare <4 x double>* @"array@[P:PPP"(<4 x double>, <4 x double>, <4 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"getcomp@P[PI"(<4 x double>*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"set@VP"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare { double, i64, <3 x double> } @"xyzdist@FIVIV"(i64, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
declare double @"prim@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FPI"(<4 x double>, i64) #2

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind
declare double @"max@F[F"(double*) #1

; Function Attrs: nounwind
declare i64 @"find@I[FF"(double*, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(double* %value, <3 x double>* %actions, <3 x double> %center, i64 %primnum, double %utility, double %reward, <3 x double> %optimalpolicy) #1 {
__llvm_entry:
  %"<utility>" = alloca double
  %"<optimalpolicy>" = alloca <3 x double>
  %0 = alloca <3 x double>*
  %1 = alloca <3 x double>
  %2 = alloca i64
  %3 = alloca double
  %"<value>" = alloca double*
  store double* %value, double** %"<value>"
  store double %utility, double* %"<utility>"
  store <3 x double> %optimalpolicy, <3 x double>* %"<optimalpolicy>"
  store <3 x double>* %actions, <3 x double>** %0
  store <3 x double> %center, <3 x double>* %1
  store i64 %primnum, i64* %2
  store double %reward, double* %3
  call void @"__vex_snippet_snippet@[F[VVIFFV"(double** %"<value>", <3 x double>** %0, <3 x double>* %1, i64* %2, double* %"<utility>", double* %3, <3 x double>* %"<optimalpolicy>")
  %evalue = load double*, double** %"<value>"
  %gvalue = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), double* %evalue) #3
  %gvalue6 = call <3 x double>* @"_export@[VS[V"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), <3 x double>* %actions) #3
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0), <3 x double> %center) #3
  %gvalue10 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @6, i64 0, i64 0), i64 %primnum) #3
  %evalue11 = load double, double* %"<utility>"
  %gvalue12 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0), double %evalue11) #3
  %gvalue14 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), double %reward) #3
  %evalue15 = load <3 x double>, <3 x double>* %"<optimalpolicy>"
  %gvalue16 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @8, i64 0, i64 0), <3 x double> %evalue15) #3
  store double* %gvalue, double** @value
  store <3 x double>* %gvalue6, <3 x double>** @actions
  store <3 x double> %gvalue8, <3 x double>* @center
  store i64 %gvalue10, i64* @primnum
  store double %gvalue12, double* @utility
  store double %gvalue14, double* @reward
  store <3 x double> %gvalue16, <3 x double>* @optimalpolicy
  ret void
}

declare double* @"_export@[FS[F"(i8*, double*)

declare <3 x double>* @"_export@[VS[V"(i8*, <3 x double>*)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), <3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @2, i64 0, i64 0), <3 x double> zeroinitializer, i64 0, double 0.000000e+00, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

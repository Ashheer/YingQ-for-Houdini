;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [12 x i8] c"__cutterdir\00"
@1 = private constant [16 x i8] c"splinter_length\00"
@2 = private constant [12 x i8] c"cut_spacing\00"
@3 = private constant [14 x i8] c"splinter_seed\00"
@P = external global <3 x double>
@4 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IV"(i64* %_bound_ptnum, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %return = call <3 x double> @"prim@VISI"(i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i64 0, i64 0), i64 0)
  %return1 = call double @"chf@FS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1, i64 0, i64 0))
  %return2 = call double @"chf@FS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i64 0, i64 0))
  %output = fmul double %return1, %return2
  %return3 = call double @"chf@FS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @3, i64 0, i64 0))
  %_bound_ptnum4 = load i64, i64* %_bound_ptnum
  %cast = sitofp i64 %_bound_ptnum4 to double
  %output5 = fadd double %return3, %cast
  %return6 = call double @"random@FF"(double %output5)
  %return8 = call double @"neg@FF"(double %output)
  %return10 = call double @"fit@FFFFFF"(double %return6, double 0.000000e+00, double 1.000000e+00, double %return8, double %output)
  %_bound_P11 = load <3 x double>, <3 x double>* %_bound_P
  %cast14 = call <3 x double> @"set@VF"(double %return10)
  %output15 = call <3 x double> @"mul@VV"(<3 x double> %cast14, <3 x double> %return)
  %output16 = call <3 x double> @"add@VV"(<3 x double> %_bound_P11, <3 x double> %output15)
  store <3 x double> %output16, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"prim@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: alwaysinline
define private double @"random@FF"(double %rw11) #3 {
__llvm_entry:
  %t_0_ = call i64 @"floor@IF"(double %rw11)
  %rw03 = call double @"random@FI"(i64 %t_0_)
  ret double %rw03
}

; Function Attrs: nounwind
declare i64 @"floor@IF"(double) #1

; Function Attrs: nounwind readnone
declare double @"random@FI"(i64) #2

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #2

; Function Attrs: nounwind
declare double @"fit@FFFFFF"(double, double, double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %P) #1 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@IV"(i64* %0, <3 x double>* %"<P>")
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), <3 x double> %evalue) #4
  store <3 x double> %gvalue, <3 x double>* @P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

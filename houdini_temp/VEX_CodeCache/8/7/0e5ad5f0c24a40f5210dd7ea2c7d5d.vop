;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"pivot\00"
@primnum = external global i64
@__pivot_updated = external global i64
@1 = private constant [8 x i8] c"primnum\00"
@2 = private constant [16 x i8] c"__pivot_updated\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound_primnum, i64* %_bound___pivot_updated) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call <3 x double> @"primintrinsic@VISI"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i64 %_bound_primnum1)
  %_bound_primnum2 = load i64, i64* %_bound_primnum
  %return3 = call <3 x double> @"primintrinsic@VISI"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i64 %_bound_primnum2)
  %return6 = call double @"distance@FVV"(<3 x double> %return, <3 x double> %return3)
  %return7 = fcmp ogt double %return6, 2.000000e-02
  br i1 %return7, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store i64 1, i64* %_bound___pivot_updated
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"primintrinsic@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, i64 %__pivot_updated) #1 {
__llvm_entry:
  %"<__pivot_updated>" = alloca i64
  %0 = alloca i64
  store i64 %__pivot_updated, i64* %"<__pivot_updated>"
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@II"(i64* %0, i64* %"<__pivot_updated>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0), i64 %primnum) #2
  %evalue2 = load i64, i64* %"<__pivot_updated>"
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @2, i64 0, i64 0), i64 %evalue2) #2
  store i64 %gvalue, i64* @primnum
  store i64 %gvalue3, i64* @__pivot_updated
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

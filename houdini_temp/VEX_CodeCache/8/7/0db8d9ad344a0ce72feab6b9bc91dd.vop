;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@active = external global i64
@ptnum = external global i64
@Frame = external global double
@v = external global <3 x double>
@0 = private constant [7 x i8] c"active\00"
@1 = private constant [6 x i8] c"ptnum\00"
@2 = private constant [6 x i8] c"Frame\00"
@3 = private constant [2 x i8] c"v\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIFV"(i64* %_bound_active, i64* %_bound_ptnum, double* %_bound_Frame, <3 x double>* %_bound_v) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %output = add i64 %_bound_ptnum1, 1
  %cast = sitofp i64 %output to double
  %output2 = fmul double %cast, 1.500000e+01
  %_bound_Frame3 = load double, double* %_bound_Frame
  %return = fcmp olt double %output2, %_bound_Frame3
  %return4 = zext i1 %return to i64
  store i64 %return4, i64* %_bound_active
  store <3 x double> <double 0.000000e+00, double 0.000000e+00, double -2.000000e+02>, <3 x double>* %_bound_v
  ret void
}

; Function Attrs: nounwind
define void @__vex_snippet(i64 %active, i64 %ptnum, double %Frame, <3 x double> %v) #1 {
__llvm_entry:
  %"<v>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca double
  %"<active>" = alloca i64
  store i64 %active, i64* %"<active>"
  store <3 x double> %v, <3 x double>* %"<v>"
  store i64 %ptnum, i64* %0
  store double %Frame, double* %1
  call void @"__vex_snippet_snippet@IIFV"(i64* %"<active>", i64* %0, double* %1, <3 x double>* %"<v>")
  %evalue = load i64, i64* %"<active>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0), i64 %evalue) #2
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i64 %ptnum) #2
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), double %Frame) #2
  %evalue7 = load <3 x double>, <3 x double>* %"<v>"
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %evalue7) #2
  store i64 %gvalue, i64* @active
  store i64 %gvalue4, i64* @ptnum
  store double %gvalue6, double* @Frame
  store <3 x double> %gvalue8, <3 x double>* @v
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [13 x i8] c"stroke_layer\00"
@1 = private constant [23 x i8] c"stroke_opacitypressure\00"
@2 = private constant [15 x i8] c"stroke_opacity\00"
@3 = private constant [6 x i8] c"width\00"
@4 = private constant [22 x i8] c"stroke_radiuspressure\00"
@P = external global <3 x double>
@stroke_pressure = external global double
@density = external global double
@pscale = external global double
@5 = private constant [2 x i8] c"P\00"
@6 = private constant [16 x i8] c"stroke_pressure\00"
@7 = private constant [8 x i8] c"density\00"
@8 = private constant [7 x i8] c"pscale\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VFFF"(<3 x double>* %_bound_P, double* %_bound_stroke_pressure, double* %_bound_density, double* %_bound_pscale) #0 {
__llvm_entry:
  %return = call i8* @"prim@SISI"(i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0), i64 0)
  %return2 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  %return3 = call <3 x double> @"volumeindextopos@VISV"(i64 1, i8* %return, <3 x double> %return2)
  %return5 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 1.000000e+00)
  %return6 = call <3 x double> @"volumeindextopos@VISV"(i64 1, i8* %return, <3 x double> %return5)
  %output = call <3 x double> @"sub@VV"(<3 x double> %return6, <3 x double> %return3)
  %return9 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %_bound_P10 = load <3 x double>, <3 x double>* %_bound_P
  %return13 = call double @"dot@FVV"(<3 x double> %_bound_P10, <3 x double> %return9)
  %cast = call <3 x double> @"set@VF"(double %return13)
  %output15 = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %return9)
  %output16 = call <3 x double> @"sub@VV"(<3 x double> %_bound_P10, <3 x double> %output15)
  store <3 x double> %output16, <3 x double>* %_bound_P
  %return17 = call double @"prim@FISI"(i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @1, i64 0, i64 0), i64 0)
  %_bound_stroke_pressure18 = load double, double* %_bound_stroke_pressure
  %return20 = call double @"lerp@FFFF"(double 1.000000e+00, double %_bound_stroke_pressure18, double %return17)
  %return22 = call double @"prim@FISI"(i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i64 0, i64 0), i64 0)
  %output23 = fmul double %return20, %return22
  %return24 = call double @"prim@FISI"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 0)
  %output25 = call double @"div@FF"(double %output23, double %return24)
  store double %output25, double* %_bound_density
  %return26 = call double @"prim@FISI"(i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @4, i64 0, i64 0), i64 0)
  %_bound_stroke_pressure27 = load double, double* %_bound_stroke_pressure
  %return29 = call double @"lerp@FFFF"(double 1.000000e+00, double %_bound_stroke_pressure27, double %return26)
  %return30 = call double @"prim@FISI"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 0)
  %output32 = fmul double %return30, %return29
  store double %output32, double* %_bound_pscale
  ret void
}

; Function Attrs: nounwind
declare i8* @"prim@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind
declare <3 x double> @"volumeindextopos@VISV"(i64, i8*, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"prim@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare double @"lerp@FFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, double %stroke_pressure, double %density, double %pscale) #1 {
__llvm_entry:
  %"<density>" = alloca double
  %"<pscale>" = alloca double
  %0 = alloca double
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store double %density, double* %"<density>"
  store double %pscale, double* %"<pscale>"
  store double %stroke_pressure, double* %0
  call void @"__vex_snippet_snippet@VFFF"(<3 x double>* %"<P>", double* %0, double* %"<density>", double* %"<pscale>")
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @6, i64 0, i64 0), double %stroke_pressure) #3
  %evalue4 = load double, double* %"<density>"
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @7, i64 0, i64 0), double %evalue4) #3
  %evalue6 = load double, double* %"<pscale>"
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @8, i64 0, i64 0), double %evalue6) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store double %gvalue3, double* @stroke_pressure
  store double %gvalue5, double* @density
  store double %gvalue7, double* @pscale
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

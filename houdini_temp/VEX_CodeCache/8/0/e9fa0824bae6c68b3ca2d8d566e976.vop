;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [10 x i8] c"iteration\00"
@3 = private constant [5 x i8] c"seed\00"
@primnum = external global i64
@P = external global <3 x double>
@rprim = external global i64
@prims = external global i64*
@4 = private constant [8 x i8] c"primnum\00"
@5 = private constant [6 x i8] c"rprim\00"
@6 = private constant [6 x i8] c"prims\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVI[I"(i64* %_bound_primnum, <3 x double>* %_bound_P, i64* %_bound_rprim, i64** %_bound_prims) #0 {
__llvm_entry:
  %_bound_primnum1 = load i64, i64* %_bound_primnum
  %return = call i64* @"primpoints@[III"(i64 0, i64 %_bound_primnum1)
  %return2 = call i64* @"array@[I"()
  br label %cond

cond:                                             ; preds = %end19, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output25, %end19 ]
  %prims.0 = phi i64* [ %return2, %__llvm_entry ], [ %prims.1, %end19 ]
  %return5 = call i64 @"len@I[I"(i64* %return)
  %return6 = call i64 @"lt@III"(i64 %i.0, i64 %return5)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return9 = call i64 @"getcomp@I[II"(i64* %return, i64 %i.0)
  %return11 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %return9)
  %return13 = call { double, i64, <3 x double> } @"xyzdist@FIVIV"(i64 1, <3 x double> %return11)
  %return14 = extractvalue { double, i64, <3 x double> } %return13, 0
  %output = extractvalue { double, i64, <3 x double> } %return13, 1
  %return17 = fcmp olt double %return14, 1.000000e-03
  br i1 %return17, label %true, label %end19

end:                                              ; preds = %cond
  %return26 = call i64 @"detail@IIS"(i64 2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0))
  %_bound_P28 = load <3 x double>, <3 x double>* %_bound_P
  %return29 = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0))
  %cast = call <3 x double> @"set@VF"(double %return29)
  %output30 = call <3 x double> @"add@VV"(<3 x double> %_bound_P28, <3 x double> %cast)
  %cast32 = sitofp i64 %return26 to double
  %output33 = fmul double %cast32, 4.250000e+00
  %cast34 = call <3 x double> @"set@VF"(double %output33)
  %output35 = call <3 x double> @"add@VV"(<3 x double> %output30, <3 x double> %cast34)
  %return36 = call double @"rand@FV"(<3 x double> %output35)
  %return38 = call i64 @"len@I[I"(i64* %prims.0)
  %cast39 = sitofp i64 %return38 to double
  %output40 = fmul double %return36, %cast39
  %return41 = call i64 @"floor@IF"(double %output40)
  %return42 = call i64 @"getcomp@I[II"(i64* %prims.0, i64 %return41)
  store i64 %return42, i64* %_bound_rprim
  store i64* %prims.0, i64** %_bound_prims
  ret void

true:                                             ; preds = %body
  %output22 = call i64* @"append@[II"(i64* %prims.0, i64 %output)
  br label %end19

end19:                                            ; preds = %true, %body
  %prims.1 = phi i64* [ %output22, %true ], [ %prims.0, %body ]
  %output25 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64* @"array@[I"() #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare { double, i64, <3 x double> } @"xyzdist@FIVIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64 @"detail@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare double @"rand@FV"(<3 x double>) #1

; Function Attrs: nounwind
declare i64 @"floor@IF"(double) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum, <3 x double> %P, i64 %rprim, i64* %prims) #1 {
__llvm_entry:
  %"<rprim>" = alloca i64
  %"<prims>" = alloca i64*
  %0 = alloca i64
  %1 = alloca <3 x double>
  store i64 %rprim, i64* %"<rprim>"
  store i64* %prims, i64** %"<prims>"
  store i64 %primnum, i64* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@IVI[I"(i64* %0, <3 x double>* %1, i64* %"<rprim>", i64** %"<prims>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0), i64 %primnum) #3
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %P) #3
  %evalue5 = load i64, i64* %"<rprim>"
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i64 0, i64 0), i64 %evalue5) #3
  %evalue7 = load i64*, i64** %"<prims>"
  %gvalue8 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i64 0, i64 0), i64* %evalue7) #3
  store i64 %gvalue, i64* @primnum
  store <3 x double> %gvalue4, <3 x double>* @P
  store i64 %gvalue6, i64* @rprim
  store i64* %gvalue8, i64** @prims
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

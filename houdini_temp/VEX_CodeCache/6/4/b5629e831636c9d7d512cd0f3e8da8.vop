;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [18 x i8] c"measuredperimeter\00"
@P = external global <3 x double>
@curveu = external global double
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [7 x i8] c"curveu\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VF"(<3 x double>* %_bound_P, double* %_bound_curveu) #0 {
__llvm_entry:
  %tmp = load <3 x double>, <3 x double>* %_bound_P
  %return = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double 0.000000e+00, i64 0)
  %output = extractvalue { double, <3 x double> } %return, 1
  store <3 x double> %output, <3 x double>* %_bound_P
  %return3 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output, double 0.000000e+00, i64 1)
  %output5 = extractvalue { double, <3 x double> } %return3, 1
  store <3 x double> %output5, <3 x double>* %_bound_P
  %_bound_curveu6 = load double, double* %_bound_curveu
  %return7 = call double @"primintrinsic@FISI"(i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @0, i64 0, i64 0), i64 0)
  %output8 = fmul double %_bound_curveu6, %return7
  %tmp9 = load <3 x double>, <3 x double>* %_bound_P
  %return10 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp9, double %output8, i64 2)
  %output12 = extractvalue { double, <3 x double> } %return10, 1
  store <3 x double> %output12, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #1 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #2

; Function Attrs: nounwind
declare double @"primintrinsic@FISI"(i64, i8*, i64) #3

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, double %curveu) #3 {
__llvm_entry:
  %0 = alloca double
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store double %curveu, double* %0
  call void @"__vex_snippet_snippet@VF"(<3 x double>* %"<P>", double* %0)
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #4
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), double %curveu) #4
  store <3 x double> %gvalue, <3 x double>* @P
  store double %gvalue3, double* @curveu
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { alwaysinline }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"pivot\00"
@1 = private constant [19 x i8] c"__last_frame_pivot\00"
@2 = private constant [4 x i8] c"set\00"
@ptnum = external global i64
@pivot = external global <3 x double>
@P = external global <3 x double>
@3 = private constant [6 x i8] c"ptnum\00"
@4 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVV"(i64* %_bound_ptnum, <3 x double>* %_bound_pivot, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i64 %_bound_ptnum1)
  %_bound_ptnum2 = load i64, i64* %_bound_ptnum
  %return3 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1, i64 0, i64 0), i64 %_bound_ptnum2)
  %_bound_ptnum5 = load i64, i64* %_bound_ptnum
  %return6 = call <3 x double> @"primintrinsic@VISI"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i64 %_bound_ptnum5)
  %output = call <3 x double> @"sub@VV"(<3 x double> %return3, <3 x double> %return6)
  %_bound_ptnum7 = load i64, i64* %_bound_ptnum
  %return9 = call i64 @"setprimintrinsic@IISIVS"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i64 %_bound_ptnum7, <3 x double> %return3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i64 0, i64 0))
  store <3 x double> %return, <3 x double>* %_bound_pivot
  %_bound_P11 = load <3 x double>, <3 x double>* %_bound_P
  %output13 = call <3 x double> @"add@VV"(<3 x double> %_bound_P11, <3 x double> %output)
  store <3 x double> %output13, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"primintrinsic@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"setprimintrinsic@IISIVS"(i64, i8*, i64, <3 x double>, i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %pivot, <3 x double> %P) #1 {
__llvm_entry:
  %"<pivot>" = alloca <3 x double>
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  store <3 x double> %pivot, <3 x double>* %"<pivot>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@IVV"(i64* %0, <3 x double>* %"<pivot>", <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<pivot>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), <3 x double> %evalue2) #3
  %evalue4 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0), <3 x double> %evalue4) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue3, <3 x double>* @pivot
  store <3 x double> %gvalue5, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

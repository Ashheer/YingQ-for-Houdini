;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"scale\00"
@P = external global <3 x double>
@seed = external global double
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [5 x i8] c"seed\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VF"(<3 x double>* %_bound_P, double* %_bound_seed) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0))
  %cast = call <3 x double> @"set@VF"(double %return)
  %output = call <3 x double> @"mul@VV"(<3 x double> %_bound_P1, <3 x double> %cast)
  %output2 = call { i64, double, double } @"wnoise@VIFF"(<3 x double> %output)
  %output3 = extractvalue { i64, double, double } %output2, 0
  %output4 = extractvalue { i64, double, double } %output2, 1
  %output5 = extractvalue { i64, double, double } %output2, 2
  %output8 = fsub double %output5, %output4
  %output9 = fmul double %output8, 5.000000e-01
  %return10 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %_bound_P1, double %output9, i64 1)
  %output12 = extractvalue { double, <3 x double> } %return10, 1
  store <3 x double> %output12, <3 x double>* %_bound_P
  %cast14 = sitofp i64 %output3 to double
  %output15 = fmul double %cast14, 1.000000e-05
  store double %output15, double* %_bound_seed
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare { i64, double, double } @"wnoise@VIFF"(<3 x double>) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 1)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, double %seed) #3 {
__llvm_entry:
  %"<seed>" = alloca double
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store double %seed, double* %"<seed>"
  call void @"__vex_snippet_snippet@VF"(<3 x double>* %"<P>", double* %"<seed>")
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #4
  %evalue1 = load double, double* %"<seed>"
  %gvalue2 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), double %evalue1) #4
  store <3 x double> %gvalue, <3 x double>* @P
  store double %gvalue2, double* @seed
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

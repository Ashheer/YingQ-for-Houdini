;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [9 x i8] c"%g_%g_%g\00"
@1 = private constant [1 x i8] zeroinitializer
@Cd = external global <3 x double>
@name = external global i8*
@2 = private constant [3 x i8] c"Cd\00"
@3 = private constant [5 x i8] c"name\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VS"(<3 x double>* %_bound_Cd, i8** %_bound_name) #0 {
__llvm_entry:
  %_bound_Cd1 = load <3 x double>, <3 x double>* %_bound_Cd
  %cast = call <3 x double> @"set@VI"(i64 1000)
  %output = call <3 x double> @"mul@VV"(<3 x double> %_bound_Cd1, <3 x double> %cast)
  %return = call <3 x double> @"floor@VV"(<3 x double> %output)
  %output5 = call <3 x double> @"div@VV"(<3 x double> %return, <3 x double> %cast)
  store <3 x double> %output5, <3 x double>* %_bound_Cd
  %return7 = call double @"getcomp@FVI"(<3 x double> %output5, i64 0)
  %return9 = call double @"getcomp@FVI"(<3 x double> %output5, i64 1)
  %return11 = call double @"getcomp@FVI"(<3 x double> %output5, i64 2)
  %return12 = call i8* @"sprintf@SS:FFF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i64 0, i64 0), double %return7, double %return9, double %return11)
  store i8* %return12, i8** %_bound_name
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"floor@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"sprintf@SS:FFF"(i8*, double, double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %Cd, i8* %name) #2 {
__llvm_entry:
  %"<name>" = alloca i8*
  %"<Cd>" = alloca <3 x double>
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store i8* %name, i8** %"<name>"
  call void @"__vex_snippet_snippet@VS"(<3 x double>* %"<Cd>", i8** %"<name>")
  %evalue = load <3 x double>, <3 x double>* %"<Cd>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), <3 x double> %evalue) #3
  %evalue1 = load i8*, i8** %"<name>"
  %gvalue2 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0), i8* %evalue1) #3
  store <3 x double> %gvalue, <3 x double>* @Cd
  store i8* %gvalue2, i8** @name
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

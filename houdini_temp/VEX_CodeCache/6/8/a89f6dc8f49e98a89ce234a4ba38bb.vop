;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [11 x i8] c"FloorIndex\00"
@2 = private constant [19 x i8] c"FloorHeightAtIndex\00"
@3 = private constant [30 x i8] c"FloorBottomLedgeHeightAtIndex\00"
@4 = private constant [27 x i8] c"FloorTopLedgeHeightAtIndex\00"
@floorHeight = external global double
@bottomcutheight = external global double
@topcutheight = external global double
@5 = private constant [12 x i8] c"floorHeight\00"
@6 = private constant [16 x i8] c"bottomcutheight\00"
@7 = private constant [13 x i8] c"topcutheight\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FFF"(double* %_bound_floorHeight, double* %_bound_bottomcutheight, double* %_bound_topcutheight) #0 {
__llvm_entry:
  %return = call i64 @"prim@IISI"(i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0), i64 0)
  %return1 = call i64 @"findattribval@IISSII"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0), i64 %return, i64 0)
  %return3 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @2, i64 0, i64 0), i64 %return1)
  store double %return3, double* %_bound_floorHeight
  %return5 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @3, i64 0, i64 0), i64 %return1)
  store double %return5, double* %_bound_bottomcutheight
  %return7 = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @4, i64 0, i64 0), i64 %return1)
  store double %return7, double* %_bound_topcutheight
  ret void
}

; Function Attrs: nounwind
declare i64 @"prim@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"findattribval@IISSII"(i64, i8*, i8*, i64, i64) #1

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %floorHeight, double %bottomcutheight, double %topcutheight) #1 {
__llvm_entry:
  %"<bottomcutheight>" = alloca double
  %"<topcutheight>" = alloca double
  %"<floorHeight>" = alloca double
  store double %floorHeight, double* %"<floorHeight>"
  store double %bottomcutheight, double* %"<bottomcutheight>"
  store double %topcutheight, double* %"<topcutheight>"
  call void @"__vex_snippet_snippet@FFF"(double* %"<floorHeight>", double* %"<bottomcutheight>", double* %"<topcutheight>")
  %evalue = load double, double* %"<floorHeight>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i64 0, i64 0), double %evalue) #2
  %evalue1 = load double, double* %"<bottomcutheight>"
  %gvalue2 = call double @"_export@FSF"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @6, i64 0, i64 0), double %evalue1) #2
  %evalue3 = load double, double* %"<topcutheight>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @7, i64 0, i64 0), double %evalue3) #2
  store double %gvalue, double* @floorHeight
  store double %gvalue2, double* @bottomcutheight
  store double %gvalue4, double* @topcutheight
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@pref = external global double
@P = external global <3 x double>
@0 = private constant [5 x i8] c"pref\00"
@1 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FV"(double* %_bound_pref, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call double @"getcomp@FVI"(<3 x double> %_bound_P1, i64 0)
  store double %return, double* %_bound_pref
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %pref, <3 x double> %P) #2 {
__llvm_entry:
  %0 = alloca <3 x double>
  %"<pref>" = alloca double
  store double %pref, double* %"<pref>"
  store <3 x double> %P, <3 x double>* %0
  call void @"__vex_snippet_snippet@FV"(double* %"<pref>", <3 x double>* %0)
  %evalue = load double, double* %"<pref>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0), double %evalue) #3
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %P) #3
  store double %gvalue, double* @pref
  store <3 x double> %gvalue3, <3 x double>* @P
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

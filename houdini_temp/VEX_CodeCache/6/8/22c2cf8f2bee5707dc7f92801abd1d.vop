;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [2 x i8] c"-\00"
@2 = private constant [6 x i8] c"point\00"
@3 = private constant [6 x i8] c"__grp\00"
@4 = private constant [5 x i8] c"name\00"
@P = external global <3 x double>
@num = external global i64
@newname = external global i8*
@5 = private constant [2 x i8] c"P\00"
@6 = private constant [4 x i8] c"num\00"
@7 = private constant [8 x i8] c"newname\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VIS"(<3 x double>* %_bound_P, i64* %_bound_num, i8** %_bound_newname) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call i64* @"nearpoints@[IIVFI"(i64 1, <3 x double> %_bound_P1, double 1.000000e+02, i64 10)
  %return3 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %end22, %__llvm_entry
  %__impl_foreach_index_c.0 = phi i64 [ 0, %__llvm_entry ], [ %output26, %end22 ]
  %return6 = call i64 @"lt@III"(i64 %__impl_foreach_index_c.0, i64 %return3)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return9 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_c.0)
  %_bound_num10 = load i64, i64* %_bound_num
  %return12 = call i64 @"min@III"(i64 %_bound_num10, i64 %return9)
  %return13 = call i8* @"itoa@SI"(i64 %return12)
  %output = call i8* @"add@SS"(i8* %return13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0))
  %return16 = call i64 @"max@III"(i64 %_bound_num10, i64 %return9)
  %return17 = call i8* @"itoa@SI"(i64 %return16)
  %output18 = call i8* @"add@SS"(i8* %output, i8* %return17)
  %return20 = call i64 @"findattribval@IISSS"(i64 2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i8* %output18)
  %return21 = call i64 @"ge@III"(i64 %return20, i64 0)
  %1 = icmp ne i64 %return21, 0
  br i1 %1, label %true, label %end22

end:                                              ; preds = %true, %cond
  %found.0 = phi i64 [ 1, %true ], [ 0, %cond ]
  %return28 = call i64 @"eq@III"(i64 %found.0, i64 0)
  %2 = icmp ne i64 %return28, 0
  br i1 %2, label %true29, label %end30

true:                                             ; preds = %body
  %return24 = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0), i64 %return9)
  store i8* %return24, i8** %_bound_newname
  br label %end

end22:                                            ; preds = %body
  %output26 = add i64 %__impl_foreach_index_c.0, 1
  br label %cond

true29:                                           ; preds = %end
  %3 = icmp ne i64 %return3, 0
  br i1 %3, label %true33, label %false

end30:                                            ; preds = %true33, %false, %end
  ret void

true33:                                           ; preds = %true29
  %return36 = call i64 @"getcomp@I[II"(i64* %return, i64 0)
  %return37 = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0), i64 %return36)
  store i8* %return37, i8** %_bound_newname
  br label %end30

false:                                            ; preds = %true29
  %_bound_P39 = load <3 x double>, <3 x double>* %_bound_P
  %return40 = call i64 @"nearpoint@IIV"(i64 1, <3 x double> %_bound_P39)
  %return42 = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0), i64 %return40)
  store i8* %return42, i8** %_bound_newname
  br label %end30
}

; Function Attrs: nounwind
declare i64* @"nearpoints@[IIVFI"(i64, <3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"min@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #2

; Function Attrs: nounwind readnone
declare i8* @"add@SS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"max@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"findattribval@IISSS"(i64, i8*, i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #2

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"nearpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, i64 %num, i8* %newname) #1 {
__llvm_entry:
  %"<newname>" = alloca i8*
  %0 = alloca <3 x double>
  %1 = alloca i64
  store i8* %newname, i8** %"<newname>"
  store <3 x double> %P, <3 x double>* %0
  store i64 %num, i64* %1
  call void @"__vex_snippet_snippet@VIS"(<3 x double>* %0, i64* %1, i8** %"<newname>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), <3 x double> %P) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @6, i64 0, i64 0), i64 %num) #3
  %evalue5 = load i8*, i8** %"<newname>"
  %gvalue6 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @7, i64 0, i64 0), i8* %evalue5) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store i64 %gvalue4, i64* @num
  store i8* %gvalue6, i8** @newname
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [26 x i8] c"../glue_randomizestrength\00"
@1 = private constant [25 x i8] c"../glue_strengthvariance\00"
@strength = external global double
@2 = private constant [9 x i8] c"strength\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FI"(double* %_bound_strength, i64* %_bound_primnum) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @0, i64 0, i64 0))
  %return2 = call i64 @"not@II"(i64 %return)
  %0 = icmp ne i64 %return2, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %end, %true7, %__llvm_entry
  ret void

end:                                              ; preds = %__llvm_entry
  %return3 = call double @"chf@FS"(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @1, i64 0, i64 0))
  %_bound_strength4 = load double, double* %_bound_strength
  %return5 = fcmp oge double %_bound_strength4, 0.000000e+00
  br i1 %return5, label %true7, label %true

true7:                                            ; preds = %end
  %_bound_primnum9 = load i64, i64* %_bound_primnum
  %cast = sitofp i64 %_bound_primnum9 to double
  %return10 = call double @"rand@FF"(double %cast)
  %output = fsub double 1.000000e+00, %return3
  %_bound_strength12 = load double, double* %_bound_strength
  %output13 = fmul double %output, %_bound_strength12
  %return14 = call double @"max@FFF"(double 0.000000e+00, double %output13)
  %output16 = fadd double 1.000000e+00, %return3
  %output18 = fmul double %output16, %_bound_strength12
  %return19 = call double @"fit01@FFFF"(double %return10, double %return14, double %output18)
  store double %return19, double* %_bound_strength
  br label %true
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"rand@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #1

; Function Attrs: nounwind
declare double @"fit01@FFFF"(double, double, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(double %strength, i64 %primnum) #2 {
__llvm_entry:
  %0 = alloca i64
  %"<strength>" = alloca double
  store double %strength, double* %"<strength>"
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@FI"(double* %"<strength>", i64* %0)
  %evalue = load double, double* %"<strength>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), double %evalue) #3
  store double %gvalue, double* @strength
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

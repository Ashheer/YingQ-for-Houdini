;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [12 x i8] c"scattermode\00"
@1 = private constant [9 x i8] c"coverage\00"
@2 = private constant [8 x i8] c"density\00"
@3 = private constant [13 x i8] c"outer_radius\00"
@4 = private constant [14 x i8] c"falloff_prime\00"
@5 = private constant [19 x i8] c"variability_method\00"
@6 = private constant [18 x i8] c"variability_scale\00"
@7 = private constant [24 x i8] c"variability_unifrom_min\00"
@8 = private constant [24 x i8] c"variability_unifrom_max\00"
@9 = private constant [16 x i8] c"_expected_value\00"
@density = external global double

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@F"(double* %_bound_density) #0 {
__llvm_entry:
  %min_max = alloca <2 x double>
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i64 0, i64 0))
  %return1 = call double @"ch@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0))
  %return2 = call double @"ch@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  %return3 = call double @"ch@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @3, i64 0, i64 0))
  %return4 = call double @"ch@FS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @4, i64 0, i64 0))
  %return5 = call i64 @"chi@IS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @5, i64 0, i64 0))
  %return6 = call double @"ch@FS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @6, i64 0, i64 0))
  %return7 = call double @"ch@FS"(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @7, i64 0, i64 0))
  %return8 = call double @"ch@FS"(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @8, i64 0, i64 0))
  store double 0.000000e+00, double* %_bound_density
  %return10 = call i64 @"eq@III"(i64 %return, i64 0)
  %0 = icmp ne i64 %return10, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return12 = call i64 @"eq@III"(i64 %return5, i64 1)
  %1 = icmp ne i64 %return12, 0
  br i1 %1, label %true13, label %false14

false:                                            ; preds = %__llvm_entry
  %return77 = call i64 @"eq@III"(i64 %return, i64 1)
  %2 = icmp ne i64 %return77, 0
  br i1 %2, label %true78, label %end

end:                                              ; preds = %false, %true78, %true70, %false71
  ret void

true13:                                           ; preds = %true
  %return16 = call { double, i64 } @"detailattrib@FISII"(i64 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @9, i64 0, i64 0), i64 0)
  %return17 = extractvalue { double, i64 } %return16, 0
  br label %end15

false14:                                          ; preds = %true
  %return19 = call i64 @"eq@III"(i64 %return5, i64 0)
  %3 = icmp ne i64 %return19, 0
  br i1 %3, label %true20, label %false21

end15:                                            ; preds = %true20, %false21, %true13
  %scale.0 = phi double [ %return17, %true13 ], [ %output48, %true20 ], [ %output51, %false21 ]
  %output55 = fmul double %return3, %return3
  %output56 = fmul double %scale.0, %output55
  %output57 = call double @"div@FF"(double 0x400921FB4D12D84A, double 3.000000e+00)
  %output59 = fmul double %output57, %output56
  %output61 = fadd double 1.000000e+00, %return4
  %output64 = fmul double %return4, %return4
  %output65 = fadd double %output61, %output64
  %output66 = fmul double %output59, %output65
  %return68 = fcmp one double %output66, 0.000000e+00
  br i1 %return68, label %true70, label %false71

true20:                                           ; preds = %false14
  %return25 = call <2 x double> @"set@UFF"(double %return7, double %return8)
  store <2 x double> %return25, <2 x double>* %min_max
  %swap_min_max_if_needed = call <2 x double> @"swap_min_max_if_needed@UU"(<2 x double>* %min_max)
  store <2 x double> %swap_min_max_if_needed, <2 x double>* %min_max
  %return27 = call double @"getcomp@FUI"(<2 x double> %swap_min_max_if_needed, i64 1)
  %return29 = call double @"getcomp@FUI"(<2 x double> %swap_min_max_if_needed, i64 0)
  %output30 = fadd double %return27, %return29
  %output31 = call double @"div@FF"(double %output30, double 2.000000e+00)
  %output36 = fsub double %return27, %return29
  %output42 = fmul double %output36, %output36
  %output43 = call double @"div@FF"(double %output42, double 1.200000e+01)
  %output46 = fmul double %output31, %output31
  %output48 = fadd double %output46, %output43
  br label %end15

false21:                                          ; preds = %false14
  %output51 = fmul double %return6, %return6
  br label %end15

true70:                                           ; preds = %end15
  %output75 = call double @"div@FF"(double %return1, double %output66)
  store double %output75, double* %_bound_density
  br label %end

false71:                                          ; preds = %end15
  store double 1.000000e+04, double* %_bound_density
  br label %end

true78:                                           ; preds = %false
  %return81 = fcmp olt double %return2, 0.000000e+00
  %phi = select i1 %return81, double 0.000000e+00, double %return2
  store double %phi, double* %_bound_density
  br label %end
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: alwaysinline nounwind
define private <2 x double> @"swap_min_max_if_needed@UU"(<2 x double>* %min_max) #0 {
__llvm_entry:
  %min_max1 = load <2 x double>, <2 x double>* %min_max
  %return = call double @"getcomp@FUI"(<2 x double> %min_max1, i64 1)
  %return3 = call double @"getcomp@FUI"(<2 x double> %min_max1, i64 0)
  %return4 = fcmp olt double %return, %return3
  br i1 %return4, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return11 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %min_max1, double %return, i64 0)
  %output = extractvalue { double, <2 x double> } %return11, 1
  store <2 x double> %output, <2 x double>* %min_max
  %return15 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output, double %return3, i64 1)
  %output17 = extractvalue { double, <2 x double> } %return15, 1
  store <2 x double> %output17, <2 x double>* %min_max
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %min_max18 = load <2 x double>, <2 x double>* %min_max
  ret <2 x double> %min_max18
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #1

; Function Attrs: alwaysinline
define private { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <2 x double> @"setcomp@UFI"(<2 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <2 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <2 x double> } %mrv, <2 x double> %rw16, 1
  ret { double, <2 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare { double, i64 } @"detailattrib@FISII"(i64, i8*, i64) #3

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %density) #3 {
__llvm_entry:
  %"<density>" = alloca double
  store double %density, double* %"<density>"
  call void @"__vex_snippet_snippet@F"(double* %"<density>")
  %evalue = load double, double* %"<density>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0), double %evalue) #4
  store double %gvalue, double* @density
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

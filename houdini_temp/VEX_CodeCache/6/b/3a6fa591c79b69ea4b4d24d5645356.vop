;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"%s-%s\00"
@1 = private constant [1 x i8] zeroinitializer
@__pointpairs = external global i8*
@2 = private constant [13 x i8] c"__pointpairs\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIS"(i64* %_bound_ptnum, i64* %_bound_primnum, i8** %_bound___pointpairs) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %_bound_primnum2 = load i64, i64* %_bound_primnum
  %return = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum2, i64 1)
  %return5 = call i64 @"min@III"(i64 %_bound_ptnum1, i64 %return)
  %return8 = call i64 @"max@III"(i64 %_bound_ptnum1, i64 %return)
  %return9 = call i8* @"sprintf@SS:II"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i64 %return5, i64 %return8)
  store i8* %return9, i8** %_bound___pointpairs
  ret void
}

; Function Attrs: nounwind
declare i64 @"primpoint@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"min@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"max@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"sprintf@SS:II"(i8*, i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64 %primnum, i8* %__pointpairs) #1 {
__llvm_entry:
  %"<__pointpairs>" = alloca i8*
  %0 = alloca i64
  %1 = alloca i64
  store i8* %__pointpairs, i8** %"<__pointpairs>"
  store i64 %ptnum, i64* %0
  store i64 %primnum, i64* %1
  call void @"__vex_snippet_snippet@IIS"(i64* %0, i64* %1, i8** %"<__pointpairs>")
  %evalue = load i8*, i8** %"<__pointpairs>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i64 0, i64 0), i8* %evalue) #3
  store i8* %gvalue, i8** @__pointpairs
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

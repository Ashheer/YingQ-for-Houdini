;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [14 x i8] c"pointdistance\00"
@OutputResolution = external global i64
@size = external global double
@1 = private constant [17 x i8] c"OutputResolution\00"
@2 = private constant [5 x i8] c"size\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IF"(i64* %_bound_OutputResolution, double* %_bound_size) #0 {
__llvm_entry:
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @0, i64 0, i64 0))
  %return1 = call <3 x double> @"getpointbbox_size@VI"(i64 0)
  %return3 = call double @"max@FV"(<3 x double> %return1)
  %output = fadd double %return3, %return
  %output8 = call double @"div@FF"(double %output, double %return)
  %cast = fptosi double %output8 to i64
  store i64 %cast, i64* %_bound_OutputResolution
  store double %output, double* %_bound_size
  ret void
}

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"getpointbbox_size@VI"(i64) #2

; Function Attrs: nounwind
declare double @"max@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %OutputResolution, double %size) #2 {
__llvm_entry:
  %"<size>" = alloca double
  %"<OutputResolution>" = alloca i64
  store i64 %OutputResolution, i64* %"<OutputResolution>"
  store double %size, double* %"<size>"
  call void @"__vex_snippet_snippet@IF"(i64* %"<OutputResolution>", double* %"<size>")
  %evalue = load i64, i64* %"<OutputResolution>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1, i64 0, i64 0), i64 %evalue) #3
  %evalue1 = load double, double* %"<size>"
  %gvalue2 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), double %evalue1) #3
  store i64 %gvalue, i64* @OutputResolution
  store double %gvalue2, double* @size
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

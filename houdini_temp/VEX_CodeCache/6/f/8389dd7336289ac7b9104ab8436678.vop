;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [8 x i8] c"../trsw\00"
@1 = private constant [8 x i8] c"../xyzw\00"
@2 = private constant [6 x i8] c"../tw\00"
@3 = private constant [6 x i8] c"../rw\00"
@4 = private constant [6 x i8] c"../sw\00"
@5 = private constant [6 x i8] c"../pw\00"
@6 = private constant [7 x i8] c"../trs\00"
@7 = private constant [7 x i8] c"../xyz\00"
@8 = private constant [5 x i8] c"../t\00"
@9 = private constant [5 x i8] c"../r\00"
@10 = private constant [5 x i8] c"../s\00"
@11 = private constant [5 x i8] c"../p\00"
@12 = private constant [13 x i8] c"../transform\00"
@13 = private constant [6 x i8] c"xform\00"
@14 = private constant [9 x i8] c"../xform\00"
@15 = private constant [8 x i8] c"../path\00"
@__xform = external global <16 x double>
@16 = private constant [8 x i8] c"__xform\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@4"(<16 x double>* %_bound___xform) #0 {
__llvm_entry:
  %return = call <16 x double> @"ident@4"()
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0))
  %return3 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0))
  %return4 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0))
  %return5 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0))
  %return6 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i64 0, i64 0))
  %return7 = call <16 x double> @"maketransform@4IIVVVV"(i64 %return1, i64 %return2, <3 x double> %return3, <3 x double> %return4, <3 x double> %return5, <3 x double> %return6)
  %return8 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0))
  %return9 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0))
  %return10 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0))
  %return11 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i64 0, i64 0))
  %return12 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i64 0, i64 0))
  %return13 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0))
  %return14 = call <16 x double> @"maketransform@4IIVVVV"(i64 %return8, i64 %return9, <3 x double> %return10, <3 x double> %return11, <3 x double> %return12, <3 x double> %return13)
  %return15 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @12, i64 0, i64 0))
  %return16 = call i64 @"hasdetailattrib@IIS"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @13, i64 0, i64 0))
  %return17 = call i64 @"and@III"(i64 %return15, i64 %return16)
  %0 = icmp ne i64 %return17, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return18 = call i64 @"detailattribsize@IIS"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @13, i64 0, i64 0))
  %return20 = call i64 @"eq@III"(i64 %return18, i64 9)
  %1 = icmp ne i64 %return20, 0
  br i1 %1, label %true21, label %false22

false:                                            ; preds = %__llvm_entry
  %return33 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @14, i64 0, i64 0))
  %return34 = call i64 @"eq@III"(i64 %return33, i64 0)
  %2 = icmp ne i64 %return34, 0
  br i1 %2, label %true35, label %false36

end:                                              ; preds = %false36, %true43, %true35, %end23
  %xform.0 = phi <16 x double> [ %output, %end23 ], [ %output40, %true35 ], [ %output48, %true43 ], [ %return, %false36 ]
  store <16 x double> %xform.0, <16 x double>* %_bound___xform
  ret void

true21:                                           ; preds = %true
  %return24 = call <9 x double> @"detail@3IS"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @13, i64 0, i64 0))
  %cast = call <16 x double> @"set@43"(<9 x double> %return24)
  br label %end23

false22:                                          ; preds = %true
  %return27 = call i64 @"eq@III"(i64 %return18, i64 16)
  %3 = icmp ne i64 %return27, 0
  br i1 %3, label %true28, label %end23

end23:                                            ; preds = %false22, %true28, %true21
  %xform.1 = phi <16 x double> [ %cast, %true21 ], [ %return30, %true28 ], [ %return, %false22 ]
  %output = call <16 x double> @"mul@44"(<16 x double> %return14, <16 x double> %xform.1)
  br label %end

true28:                                           ; preds = %false22
  %return30 = call <16 x double> @"detail@4IS"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @13, i64 0, i64 0))
  br label %end23

true35:                                           ; preds = %false
  %output40 = call <16 x double> @"mul@44"(<16 x double> %return14, <16 x double> %return7)
  br label %end

false36:                                          ; preds = %false
  %return42 = call i64 @"eq@III"(i64 %return33, i64 1)
  %4 = icmp ne i64 %return42, 0
  br i1 %4, label %true43, label %end

true43:                                           ; preds = %false36
  %return46 = call i8* @"chs@SS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @15, i64 0, i64 0))
  %return47 = call <16 x double> @"optransform@4S"(i8* %return46)
  %output48 = call <16 x double> @"mul@44"(<16 x double> %return14, <16 x double> %return47)
  br label %end
}

; Function Attrs: nounwind
declare <16 x double> @"ident@4"() #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"maketransform@4IIVVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"hasdetailattrib@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"detailattribsize@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
declare <9 x double> @"detail@3IS"(i64, i8*) #1

; Function Attrs: nounwind
declare <16 x double> @"set@43"(<9 x double>) #1

; Function Attrs: nounwind
declare <16 x double> @"detail@4IS"(i64, i8*) #1

; Function Attrs: nounwind
declare <16 x double> @"mul@44"(<16 x double>, <16 x double>) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"optransform@4S"(i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(<16 x double> %__xform) #1 {
__llvm_entry:
  %"<__xform>" = alloca <16 x double>
  store <16 x double> %__xform, <16 x double>* %"<__xform>"
  call void @"__vex_snippet_snippet@4"(<16 x double>* %"<__xform>")
  %evalue = load <16 x double>, <16 x double>* %"<__xform>"
  %gvalue = call <16 x double> @"_export@4S4"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @16, i64 0, i64 0), <16 x double> %evalue) #3
  store <16 x double> %gvalue, <16 x double>* @__xform
  ret void
}

declare <16 x double> @"_export@4S4"(i8*, <16 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<16 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@sourceptnum = external global i64
@ptnum = external global i64
@0 = private constant [12 x i8] c"sourceptnum\00"
@1 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound_sourceptnum, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum1, i64* %_bound_sourceptnum
  ret void
}

; Function Attrs: nounwind
define void @__vex_snippet(i64 %sourceptnum, i64 %ptnum) #1 {
__llvm_entry:
  %0 = alloca i64
  %"<sourceptnum>" = alloca i64
  store i64 %sourceptnum, i64* %"<sourceptnum>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@II"(i64* %"<sourceptnum>", i64* %0)
  %evalue = load i64, i64* %"<sourceptnum>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i64 0, i64 0), i64 %evalue) #2
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i64 %ptnum) #2
  store i64 %gvalue, i64* @sourceptnum
  store i64 %gvalue3, i64* @ptnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 -1, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [5 x i8] c"name\00"
@2 = private constant [4 x i8] c"num\00"
@3 = private constant [1 x i8] zeroinitializer
@4 = private constant [2 x i8] c"-\00"
@5 = private constant [6 x i8] c"__grp\00"
@P = external global <3 x double>
@name = external global i8*
@ptnum = external global i64
@6 = private constant [2 x i8] c"P\00"
@7 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VSI"(<3 x double>* %_bound_P, i8** %_bound_name, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call i64* @"nearpoints@[IIVF"(i64 1, <3 x double> %_bound_P1, double 1.000000e-05)
  %_bound_name2 = load i8*, i8** %_bound_name
  %return3 = call i64 @"findattribval@IISSS"(i64 2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* %_bound_name2)
  %return5 = call i64 @"point@IISI"(i64 2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i64 0, i64 0), i64 %return3)
  %return7 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %__impl_foreach_index_b.0 = phi i64 [ 0, %__llvm_entry ], [ %output32, %body ]
  %return10 = call i64 @"lt@III"(i64 %__impl_foreach_index_b.0, i64 %return7)
  %0 = icmp ne i64 %return10, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return13 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_b.0)
  %return15 = call i8* @"point@SISI"(i64 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i64 %return13)
  %return17 = call i64 @"findattribval@IISSS"(i64 3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* %return15)
  %return18 = call i64 @"addpoint@IIV"(i64 0, <3 x double> zeroinitializer)
  %return21 = call i64 @"min@III"(i64 %return5, i64 %return17)
  %return22 = call i8* @"itoa@SI"(i64 %return21)
  %output = call i8* @"add@SS"(i8* %return22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i64 0, i64 0))
  %return25 = call i64 @"max@III"(i64 %return5, i64 %return17)
  %return26 = call i8* @"itoa@SI"(i64 %return25)
  %output27 = call i8* @"add@SS"(i8* %output, i8* %return26)
  %return30 = call i64 @"setpointattrib@IISIS"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i64 0, i64 0), i64 %return18, i8* %output27)
  %output32 = add i64 %__impl_foreach_index_b.0, 1
  br label %cond

end:                                              ; preds = %cond
  %_bound_ptnum33 = load i64, i64* %_bound_ptnum
  %return34 = call i64 @"removepoint@III"(i64 0, i64 %_bound_ptnum33)
  ret void
}

; Function Attrs: nounwind
declare i64* @"nearpoints@[IIVF"(i64, <3 x double>, double) #1

; Function Attrs: nounwind
declare i64 @"findattribval@IISSS"(i64, i8*, i8*, i8*) #1

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"min@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #2

; Function Attrs: nounwind readnone
declare i8* @"add@SS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"max@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIS"(i64, i8*, i64, i8*) #1

; Function Attrs: nounwind
declare i64 @"removepoint@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, i8* %name, i64 %ptnum) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca i8*
  %2 = alloca i64
  store <3 x double> %P, <3 x double>* %0
  store i8* %name, i8** %1
  store i64 %ptnum, i64* %2
  call void @"__vex_snippet_snippet@VSI"(<3 x double>* %0, i8** %1, i64* %2)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i64 0, i64 0), <3 x double> %P) #3
  %gvalue5 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* %name) #3
  %gvalue7 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @7, i64 0, i64 0), i64 %ptnum) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store i8* %gvalue5, i8** @name
  store i64 %gvalue7, i64* @ptnum
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @3, i64 0, i64 0), i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

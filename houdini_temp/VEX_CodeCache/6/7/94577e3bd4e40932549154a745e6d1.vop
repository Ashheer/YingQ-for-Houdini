;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [5 x i8] c"prim\00"
@2 = private constant [28 x i8] c"../connectivity1/attribname\00"
@3 = private constant [30 x i8] c"../uvlayout1/outputislandattr\00"
@4 = private constant [11 x i8] c"primpoints\00"
@opinput1_class = external global i64
@opinput1_primpoints = external global i64*
@island = external global i64
@5 = private constant [15 x i8] c"opinput1_class\00"
@6 = private constant [20 x i8] c"opinput1_primpoints\00"
@7 = private constant [7 x i8] c"island\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I[II"(i64* %_bound_opinput1_class, i64** %_bound_opinput1_primpoints, i64* %_bound_island) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @2, i64 0, i64 0))
  %_bound_opinput1_class1 = load i64, i64* %_bound_opinput1_class
  %return2 = call i64* @"findattribval@[IISSI"(i64 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* %return, i64 %_bound_opinput1_class1)
  %return4 = call i64 @"len@I[I"(i64* %return2)
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %__impl_foreach_index.0 = phi i64 [ 0, %__llvm_entry ], [ %output47, %iter ]
  %return7 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return4)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return10 = call i64 @"getcomp@I[II"(i64* %return2, i64 %__impl_foreach_index.0)
  %return11 = call i8* @"chs@SS"(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @3, i64 0, i64 0))
  %return13 = call i64 @"prim@IISI"(i64 0, i8* %return11, i64 %return10)
  %return15 = call i64* @"prim@[IISI"(i64 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0), i64 %return10)
  %_bound_opinput1_primpoints16 = load i64*, i64** %_bound_opinput1_primpoints
  %return17 = call i64 @"len@I[I"(i64* %_bound_opinput1_primpoints16)
  %return19 = call i64 @"len@I[I"(i64* %return15)
  %return20 = call i64 @"ne@III"(i64 %return17, i64 %return19)
  %1 = icmp ne i64 %return20, 0
  br i1 %1, label %iter, label %end21

end:                                              ; preds = %cond
  ret void

iter:                                             ; preds = %end28, %true41, %body
  %output47 = add i64 %__impl_foreach_index.0, 1
  br label %cond

end21:                                            ; preds = %body
  br label %cond22

cond22:                                           ; preds = %end38, %end21
  %i.0 = phi i64 [ 0, %end21 ], [ %output, %end38 ]
  %return27 = call i64 @"lt@III"(i64 %i.0, i64 %return19)
  %2 = icmp ne i64 %return27, 0
  br i1 %2, label %body23, label %end28

body23:                                           ; preds = %cond22
  %_bound_opinput1_primpoints30 = load i64*, i64** %_bound_opinput1_primpoints
  %return32 = call i64 @"getcomp@I[II"(i64* %_bound_opinput1_primpoints30, i64 %i.0)
  %return35 = call i64 @"getcomp@I[II"(i64* %return15, i64 %i.0)
  %return36 = call i64 @"ne@III"(i64 %return32, i64 %return35)
  %3 = icmp ne i64 %return36, 0
  br i1 %3, label %true37, label %end38

end28:                                            ; preds = %true37, %cond22
  %flag.0 = phi i64 [ 0, %true37 ], [ 1, %cond22 ]
  %4 = icmp ne i64 %flag.0, 0
  br i1 %4, label %true41, label %iter

true37:                                           ; preds = %body23
  br label %end28

end38:                                            ; preds = %body23
  %output = add i64 %i.0, 1
  br label %cond22

true41:                                           ; preds = %end28
  %_bound_island43 = load i64, i64* %_bound_island
  %return45 = call i64 @"min@III"(i64 %_bound_island43, i64 %return13)
  store i64 %return45, i64* %_bound_island
  br label %iter
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64* @"findattribval@[IISSI"(i64, i8*, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64 @"prim@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64* @"prim@[IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"min@III"(i64, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %opinput1_class, i64* %opinput1_primpoints, i64 %island) #2 {
__llvm_entry:
  %"<island>" = alloca i64
  %0 = alloca i64
  %1 = alloca i64*
  store i64 %island, i64* %"<island>"
  store i64 %opinput1_class, i64* %0
  store i64* %opinput1_primpoints, i64** %1
  call void @"__vex_snippet_snippet@I[II"(i64* %0, i64** %1, i64* %"<island>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @5, i64 0, i64 0), i64 %opinput1_class) #3
  %gvalue4 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @6, i64 0, i64 0), i64* %opinput1_primpoints) #3
  %evalue5 = load i64, i64* %"<island>"
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), i64 %evalue5) #3
  store i64 %gvalue, i64* @opinput1_class
  store i64* %gvalue4, i64** @opinput1_primpoints
  store i64 %gvalue6, i64* @island
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

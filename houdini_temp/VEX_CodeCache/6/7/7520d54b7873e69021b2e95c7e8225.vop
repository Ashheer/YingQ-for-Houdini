;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [19 x i8] c"variability_method\00"
@1 = private constant [18 x i8] c"variability_scale\00"
@2 = private constant [24 x i8] c"variability_unifrom_min\00"
@3 = private constant [24 x i8] c"variability_unifrom_max\00"
@4 = private constant [23 x i8] c"variability_normal_min\00"
@5 = private constant [23 x i8] c"variability_normal_max\00"
@6 = private constant [26 x i8] c"variability_normal_stddev\00"
@7 = private constant [12 x i8] c"global_seed\00"
@8 = private constant [20 x i8] c"quantization_amount\00"
@P = external global <3 x double>
@pscale = external global double
@footprint = external global double
@9 = private constant [2 x i8] c"P\00"
@10 = private constant [7 x i8] c"pscale\00"
@11 = private constant [10 x i8] c"footprint\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VFF"(<3 x double>* %_bound_P, double* %_bound_pscale, double* %_bound_footprint) #0 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca double
  %min_max = alloca <2 x double>
  %2 = alloca <3 x double>
  %3 = alloca double
  %min_max46 = alloca <2 x double>
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @0, i64 0, i64 0))
  %return1 = call double @"ch@FS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1, i64 0, i64 0))
  %return2 = call double @"ch@FS"(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @2, i64 0, i64 0))
  %return3 = call double @"ch@FS"(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @3, i64 0, i64 0))
  %return4 = call double @"ch@FS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @4, i64 0, i64 0))
  %return5 = call double @"ch@FS"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @5, i64 0, i64 0))
  %return6 = call double @"ch@FS"(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @6, i64 0, i64 0))
  %return7 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i64 0, i64 0))
  %return8 = call double @"ch@FS"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @8, i64 0, i64 0))
  %return10 = call i64 @"eq@III"(i64 %return, i64 1)
  %4 = icmp ne i64 %return10, 0
  br i1 %4, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_bound_P11 = load <3 x double>, <3 x double>* %_bound_P
  store <3 x double> %_bound_P11, <3 x double>* %0
  store double %return8, double* %1
  %quantize_pos = call <3 x double> @"quantize_pos@VVF"(<3 x double>* %0, double* %1)
  %cast = call <3 x double> @"set@VI"(i64 %return7)
  %output = call <3 x double> @"add@VV"(<3 x double> %quantize_pos, <3 x double> %cast)
  %return15 = call double @"rand@FV"(<3 x double> %output)
  %output18 = fadd double %return4, %return5
  %output19 = call double @"div@FF"(double %output18, double 2.000000e+00)
  %return22 = call <2 x double> @"set@UFF"(double %return4, double %return5)
  store <2 x double> %return22, <2 x double>* %min_max
  %swap_min_max_if_needed = call <2 x double> @"swap_min_max_if_needed@UU"(<2 x double>* %min_max)
  store <2 x double> %swap_min_max_if_needed, <2 x double>* %min_max
  %return26 = call double @"getcomp@FUI"(<2 x double> %swap_min_max_if_needed, i64 0)
  %return28 = call double @"getcomp@FUI"(<2 x double> %swap_min_max_if_needed, i64 1)
  %return30 = call double @"sample_normal@FFFFFF"(double %output19, double %return6, double %return26, double %return28, double %return15)
  store double %return30, double* %_bound_pscale
  br label %end

false:                                            ; preds = %__llvm_entry
  %return32 = call i64 @"eq@III"(i64 %return, i64 0)
  %5 = icmp ne i64 %return32, 0
  br i1 %5, label %true33, label %false34

end:                                              ; preds = %false34, %true64, %true33, %true
  %_bound_pscale67 = load double, double* %_bound_pscale
  %_bound_footprint68 = load double, double* %_bound_footprint
  %output69 = fmul double %_bound_pscale67, %_bound_footprint68
  store double %output69, double* %_bound_footprint
  ret void

true33:                                           ; preds = %false
  %_bound_P37 = load <3 x double>, <3 x double>* %_bound_P
  store <3 x double> %_bound_P37, <3 x double>* %2
  store double %return8, double* %3
  %quantize_pos39 = call <3 x double> @"quantize_pos@VVF"(<3 x double>* %2, double* %3)
  %cast43 = call <3 x double> @"set@VI"(i64 %return7)
  %output44 = call <3 x double> @"add@VV"(<3 x double> %quantize_pos39, <3 x double> %cast43)
  %return45 = call double @"rand@FV"(<3 x double> %output44)
  %return49 = call <2 x double> @"set@UFF"(double %return2, double %return3)
  store <2 x double> %return49, <2 x double>* %min_max46
  %swap_min_max_if_needed50 = call <2 x double> @"swap_min_max_if_needed@UU"(<2 x double>* %min_max46)
  store <2 x double> %swap_min_max_if_needed50, <2 x double>* %min_max46
  %return52 = call double @"getcomp@FUI"(<2 x double> %swap_min_max_if_needed50, i64 1)
  %return54 = call double @"getcomp@FUI"(<2 x double> %swap_min_max_if_needed50, i64 0)
  %output55 = fsub double %return52, %return54
  %output58 = fmul double %output55, %return45
  %output61 = fadd double %output58, %return54
  store double %output61, double* %_bound_pscale
  br label %end

false34:                                          ; preds = %false
  %return63 = call i64 @"eq@III"(i64 %return, i64 2)
  %6 = icmp ne i64 %return63, 0
  br i1 %6, label %true64, label %end

true64:                                           ; preds = %false34
  store double %return1, double* %_bound_pscale
  br label %end
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"quantize_pos@VVF"(<3 x double>* %pos, double* %quantization_amount) #0 {
__llvm_entry:
  %quantization_amount1 = load double, double* %quantization_amount
  %return = fcmp one double %quantization_amount1, 0.000000e+00
  %pos3 = load <3 x double>, <3 x double>* %pos
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %cast = call <3 x double> @"set@VF"(double %quantization_amount1)
  %output = call <3 x double> @"div@VV"(<3 x double> %pos3, <3 x double> %cast)
  %return5 = call <3 x double> @"floor@VV"(<3 x double> %output)
  %output8 = call <3 x double> @"mul@VV"(<3 x double> %return5, <3 x double> %cast)
  br label %UnifiedReturnBlock

false:                                            ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %false, %true
  %UnifiedRetVal = phi <3 x double> [ %output8, %true ], [ %pos3, %false ]
  ret <3 x double> %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"floor@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: alwaysinline nounwind
define private <2 x double> @"swap_min_max_if_needed@UU"(<2 x double>* %min_max) #0 {
__llvm_entry:
  %min_max1 = load <2 x double>, <2 x double>* %min_max
  %return = call double @"getcomp@FUI"(<2 x double> %min_max1, i64 1)
  %return3 = call double @"getcomp@FUI"(<2 x double> %min_max1, i64 0)
  %return4 = fcmp olt double %return, %return3
  br i1 %return4, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return11 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %min_max1, double %return, i64 0)
  %output = extractvalue { double, <2 x double> } %return11, 1
  store <2 x double> %output, <2 x double>* %min_max
  %return15 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output, double %return3, i64 1)
  %output17 = extractvalue { double, <2 x double> } %return15, 1
  store <2 x double> %output17, <2 x double>* %min_max
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %min_max18 = load <2 x double>, <2 x double>* %min_max
  ret <2 x double> %min_max18
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #1

; Function Attrs: alwaysinline
define private { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <2 x double> @"setcomp@UFI"(<2 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <2 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <2 x double> } %mrv, <2 x double> %rw16, 1
  ret { double, <2 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"rand@FV"(<3 x double>) #3

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #1

; Function Attrs: nounwind
declare double @"sample_normal@FFFFFF"(double, double, double, double, double) #3

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, double %pscale, double %footprint) #3 {
__llvm_entry:
  %"<pscale>" = alloca double
  %"<footprint>" = alloca double
  %0 = alloca <3 x double>
  store double %pscale, double* %"<pscale>"
  store double %footprint, double* %"<footprint>"
  store <3 x double> %P, <3 x double>* %0
  call void @"__vex_snippet_snippet@VFF"(<3 x double>* %0, double* %"<pscale>", double* %"<footprint>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i64 0, i64 0), <3 x double> %P) #4
  %evalue2 = load double, double* %"<pscale>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @10, i64 0, i64 0), double %evalue2) #4
  %evalue4 = load double, double* %"<footprint>"
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @11, i64 0, i64 0), double %evalue4) #4
  store <3 x double> %gvalue, <3 x double>* @P
  store double %gvalue3, double* @pscale
  store double %gvalue5, double* @footprint
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

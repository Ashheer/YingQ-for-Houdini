;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@ptnum = external global i64
@P = external global <3 x double>
@1 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: nounwind
declare <2 x double> @"normalize@UU"(<2 x double>) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UF"(double) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"mul@UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <4 x double> @"normalize@PP"(<4 x double>) #0

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PF"(double) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"mul@PP"(<4 x double>, <4 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[F"(double*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #1

; Function Attrs: nounwind readnone
declare double* @"push@[FF"(double*, double) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[U"(<2 x double>*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"getcomp@U[UI"(<2 x double>*, i64) #1

; Function Attrs: nounwind readnone
declare <2 x double>* @"push@[UU"(<2 x double>*, <2 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[V"(<3 x double>*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double>* @"push@[VV"(<3 x double>*, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[P"(<4 x double>*) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"getcomp@P[PI"(<4 x double>*, i64) #1

; Function Attrs: nounwind readnone
declare <4 x double>* @"push@[PP"(<4 x double>*, <4 x double>) #1

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IV"(i64* %_bound_ptnum, <3 x double>* %_bound_P) #2 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64 @"neighbour@IIII"(i64 0, i64 %_bound_ptnum1, i64 0)
  %return3 = call i64* @"neighbours@[III"(i64 0, i64 %return)
  %return5 = call i64 @"getcomp@I[II"(i64* %return3, i64 0)
  %_bound_ptnum6 = load i64, i64* %_bound_ptnum
  %return7 = call i64 @"eq@III"(i64 %return5, i64 %_bound_ptnum6)
  %return9 = call i64 @"getcomp@I[II"(i64* %return3, i64 1)
  %0 = icmp ne i64 %return7, 0
  %return12 = select i1 %0, i64 %return9, i64 %return5
  %return14 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return)
  %return16 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return12)
  %_bound_P17 = load <3 x double>, <3 x double>* %_bound_P
  %output = call <3 x double> @"sub@VV"(<3 x double> %_bound_P17, <3 x double> %return14)
  %return19 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %output22 = call <3 x double> @"sub@VV"(<3 x double> %return14, <3 x double> %return16)
  %_bound_P23 = load <3 x double>, <3 x double>* %_bound_P
  %return26 = call <3 x double> @"reflect@VVV"(<3 x double> %output22, <3 x double> %return19)
  %return27 = call <3 x double> @"neg@VV"(<3 x double> %return26)
  %return28 = call <3 x double> @"normalize@VV"(<3 x double> %return27)
  %cast = call <3 x double> @"set@VF"(double 1.000000e+05)
  %output29 = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %return28)
  %return30 = call { i64, <3 x double>, <3 x double> } @"intersect@IIVVVV"(i64 1, <3 x double> %_bound_P23, <3 x double> %output29)
  %output32 = extractvalue { i64, <3 x double>, <3 x double> } %return30, 1
  store <3 x double> %output32, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind
declare i64 @"neighbour@IIII"(i64, i64, i64) #0

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"reflect@VVV"(<3 x double>, <3 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #1

; Function Attrs: nounwind
declare { i64, <3 x double>, <3 x double> } @"intersect@IIVVVV"(i64, <3 x double>, <3 x double>) #0

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %P) #0 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@IV"(i64* %0, <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %evalue2) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue3, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

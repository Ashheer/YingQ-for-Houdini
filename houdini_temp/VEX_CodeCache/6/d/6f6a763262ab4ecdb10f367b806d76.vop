;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [12 x i8] c"attrib_name\00"
@1 = private constant [12 x i8] c"attrib_type\00"
@2 = private constant [9 x i8] c"_attrib_\00"
@3 = private constant [2 x i8] c"_\00"
@4 = private constant [4 x i8] c"vfi\00"
@5 = private constant [1 x i8] zeroinitializer
@attrib_name = external global i8*
@attrib_type = external global i64
@stencil_name = external global i8*
@6 = private constant [13 x i8] c"stencil_name\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SIS"(i8** %_bound_attrib_name, i64* %_bound_attrib_type, i8** %_bound_stencil_name) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i64 0, i64 0))
  store i8* %return, i8** %_bound_attrib_name
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i64 0, i64 0))
  store i64 %return1, i64* %_bound_attrib_type
  %_bound_attrib_name2 = load i8*, i8** %_bound_attrib_name
  %output = call i8* @"add@SS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), i8* %_bound_attrib_name2)
  %output3 = call i8* @"add@SS"(i8* %output, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0))
  %return5 = call i8* @"getcomp@SSI"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0), i64 %return1)
  %output6 = call i8* @"add@SS"(i8* %output3, i8* %return5)
  store i8* %output6, i8** %_bound_stencil_name
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"add@SS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"getcomp@SSI"(i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %attrib_name, i64 %attrib_type, i8* %stencil_name) #2 {
__llvm_entry:
  %"<attrib_type>" = alloca i64
  %"<stencil_name>" = alloca i8*
  %"<attrib_name>" = alloca i8*
  store i8* %attrib_name, i8** %"<attrib_name>"
  store i64 %attrib_type, i64* %"<attrib_type>"
  store i8* %stencil_name, i8** %"<stencil_name>"
  call void @"__vex_snippet_snippet@SIS"(i8** %"<attrib_name>", i64* %"<attrib_type>", i8** %"<stencil_name>")
  %evalue = load i8*, i8** %"<attrib_name>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i64 0, i64 0), i8* %evalue) #3
  %evalue1 = load i64, i64* %"<attrib_type>"
  %gvalue2 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i64 0, i64 0), i64 %evalue1) #3
  %evalue3 = load i8*, i8** %"<stencil_name>"
  %gvalue4 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @6, i64 0, i64 0), i8* %evalue3) #3
  store i8* %gvalue, i8** @attrib_name
  store i64 %gvalue2, i64* @attrib_type
  store i8* %gvalue4, i8** @stencil_name
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @5, i64 0, i64 0), i64 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @5, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

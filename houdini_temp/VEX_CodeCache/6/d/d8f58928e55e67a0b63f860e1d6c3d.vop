;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@uv = external global <3 x double>
@uvx = external global double
@uy = external global double
@0 = private constant [3 x i8] c"uv\00"
@1 = private constant [4 x i8] c"uvx\00"
@2 = private constant [3 x i8] c"uy\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VFF"(<3 x double>* %_bound_uv, double* %_bound_uvx, double* %_bound_uy) #0 {
__llvm_entry:
  %_bound_uvx1 = load double, double* %_bound_uvx
  %tmp = load <3 x double>, <3 x double>* %_bound_uv
  %return = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %_bound_uvx1, i64 0)
  %output = extractvalue { double, <3 x double> } %return, 1
  store <3 x double> %output, <3 x double>* %_bound_uv
  %_bound_uy3 = load double, double* %_bound_uy
  %return5 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output, double %_bound_uy3, i64 1)
  %output7 = extractvalue { double, <3 x double> } %return5, 1
  store <3 x double> %output7, <3 x double>* %_bound_uv
  ret void
}

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #1 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %uv, double %uvx, double %uy) #3 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %"<uv>" = alloca <3 x double>
  store <3 x double> %uv, <3 x double>* %"<uv>"
  store double %uvx, double* %0
  store double %uy, double* %1
  call void @"__vex_snippet_snippet@VFF"(<3 x double>* %"<uv>", double* %0, double* %1)
  %evalue = load <3 x double>, <3 x double>* %"<uv>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), <3 x double> %evalue) #4
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i64 0, i64 0), double %uvx) #4
  %gvalue6 = call double @"_export@FSF"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), double %uy) #4
  store <3 x double> %gvalue, <3 x double>* @uv
  store double %gvalue4, double* @uvx
  store double %gvalue6, double* @uy
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { alwaysinline }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

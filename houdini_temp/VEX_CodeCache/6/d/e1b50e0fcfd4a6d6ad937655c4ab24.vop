;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@px = external global double
@P = external global <3 x double>
@py = external global double
@pz = external global double
@dist = external global double
@ext3dx = external global double
@ext3dy = external global double
@ext3dz = external global double
@ext = external global double
@logmapu = external global double
@logmapv = external global double
@0 = private constant [3 x i8] c"px\00"
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [3 x i8] c"py\00"
@3 = private constant [3 x i8] c"pz\00"
@4 = private constant [5 x i8] c"dist\00"
@5 = private constant [7 x i8] c"ext3dx\00"
@6 = private constant [7 x i8] c"ext3dy\00"
@7 = private constant [7 x i8] c"ext3dz\00"
@8 = private constant [4 x i8] c"ext\00"
@9 = private constant [8 x i8] c"logmapu\00"
@10 = private constant [8 x i8] c"logmapv\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FVFFFFFFFFF"(double* %_bound_px, <3 x double>* %_bound_P, double* %_bound_py, double* %_bound_pz, double* %_bound_dist, double* %_bound_ext3dx, double* %_bound_ext3dy, double* %_bound_ext3dz, double* %_bound_ext, double* %_bound_logmapu, double* %_bound_logmapv) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call double @"getcomp@FVI"(<3 x double> %_bound_P1, i64 0)
  store double %return, double* %_bound_px
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %return3 = call double @"getcomp@FVI"(<3 x double> %_bound_P2, i64 1)
  store double %return3, double* %_bound_py
  %_bound_P4 = load <3 x double>, <3 x double>* %_bound_P
  %return5 = call double @"getcomp@FVI"(<3 x double> %_bound_P4, i64 2)
  store double %return5, double* %_bound_pz
  store double 0.000000e+00, double* %_bound_dist
  store double 0.000000e+00, double* %_bound_ext3dx
  store double 0.000000e+00, double* %_bound_ext3dy
  store double 0.000000e+00, double* %_bound_ext3dz
  %return6 = call i64 @"neg@II"(i64 1)
  %cast = sitofp i64 %return6 to double
  store double %cast, double* %_bound_ext
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %px, <3 x double> %P, double %py, double %pz, double %dist, double %ext3dx, double %ext3dy, double %ext3dz, double %ext, double %logmapu, double %logmapv) #2 {
__llvm_entry:
  %"<py>" = alloca double
  %"<pz>" = alloca double
  %"<dist>" = alloca double
  %"<ext3dx>" = alloca double
  %"<ext3dy>" = alloca double
  %"<ext3dz>" = alloca double
  %"<ext>" = alloca double
  %0 = alloca <3 x double>
  %1 = alloca double
  %2 = alloca double
  %"<px>" = alloca double
  store double %px, double* %"<px>"
  store double %py, double* %"<py>"
  store double %pz, double* %"<pz>"
  store double %dist, double* %"<dist>"
  store double %ext3dx, double* %"<ext3dx>"
  store double %ext3dy, double* %"<ext3dy>"
  store double %ext3dz, double* %"<ext3dz>"
  store double %ext, double* %"<ext>"
  store <3 x double> %P, <3 x double>* %0
  store double %logmapu, double* %1
  store double %logmapv, double* %2
  call void @"__vex_snippet_snippet@FVFFFFFFFFF"(double* %"<px>", <3 x double>* %0, double* %"<py>", double* %"<pz>", double* %"<dist>", double* %"<ext3dx>", double* %"<ext3dy>", double* %"<ext3dz>", double* %"<ext>", double* %1, double* %2)
  %evalue = load double, double* %"<px>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i64 0, i64 0), double %evalue) #3
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %P) #3
  %evalue6 = load double, double* %"<py>"
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i64 0, i64 0), double %evalue6) #3
  %evalue8 = load double, double* %"<pz>"
  %gvalue9 = call double @"_export@FSF"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), double %evalue8) #3
  %evalue10 = load double, double* %"<dist>"
  %gvalue11 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0), double %evalue10) #3
  %evalue12 = load double, double* %"<ext3dx>"
  %gvalue13 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0), double %evalue12) #3
  %evalue14 = load double, double* %"<ext3dy>"
  %gvalue15 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0), double %evalue14) #3
  %evalue16 = load double, double* %"<ext3dz>"
  %gvalue17 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i64 0, i64 0), double %evalue16) #3
  %evalue18 = load double, double* %"<ext>"
  %gvalue19 = call double @"_export@FSF"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @8, i64 0, i64 0), double %evalue18) #3
  %gvalue21 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @9, i64 0, i64 0), double %logmapu) #3
  %gvalue23 = call double @"_export@FSF"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @10, i64 0, i64 0), double %logmapv) #3
  store double %gvalue, double* @px
  store <3 x double> %gvalue5, <3 x double>* @P
  store double %gvalue7, double* @py
  store double %gvalue9, double* @pz
  store double %gvalue11, double* @dist
  store double %gvalue13, double* @ext3dx
  store double %gvalue15, double* @ext3dy
  store double %gvalue17, double* @ext3dz
  store double %gvalue19, double* @ext
  store double %gvalue21, double* @logmapu
  store double %gvalue23, double* @logmapv
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, <3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

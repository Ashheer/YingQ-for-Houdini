;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [9 x i8] c"hashpair\00"
@2 = private constant [1 x i8] zeroinitializer
@hashpair = external global i8*
@ptnum = external global i64
@group_fuseborderpts_adaptivesubd = external global i64
@targetpt = external global i64
@3 = private constant [6 x i8] c"ptnum\00"
@4 = private constant [33 x i8] c"group_fuseborderpts_adaptivesubd\00"
@5 = private constant [9 x i8] c"targetpt\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SIII"(i8** %_bound_hashpair, i64* %_bound_ptnum, i64* %_bound_group_fuseborderpts_adaptivesubd, i64* %_bound_targetpt) #0 {
__llvm_entry:
  %_bound_hashpair1 = load i8*, i8** %_bound_hashpair
  %return = call i64* @"findattribval@[IISSS"(i64 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0), i8* %_bound_hashpair1)
  %return3 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %end13, %__llvm_entry
  %__impl_foreach_index_d.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %end13 ]
  %return6 = call i64 @"lt@III"(i64 %__impl_foreach_index_d.0, i64 %return3)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return9 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_d.0)
  %_bound_ptnum11 = load i64, i64* %_bound_ptnum
  %return12 = call i64 @"ne@III"(i64 %return9, i64 %_bound_ptnum11)
  %1 = icmp ne i64 %return12, 0
  br i1 %1, label %true, label %end13

end:                                              ; preds = %true, %cond
  ret void

true:                                             ; preds = %body
  store i64 1, i64* %_bound_group_fuseborderpts_adaptivesubd
  store i64 %return9, i64* %_bound_targetpt
  br label %end

end13:                                            ; preds = %body
  %output = add i64 %__impl_foreach_index_d.0, 1
  br label %cond
}

; Function Attrs: nounwind
declare i64* @"findattribval@[IISSS"(i64, i8*, i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i8* %hashpair, i64 %ptnum, i64 %group_fuseborderpts_adaptivesubd, i64 %targetpt) #1 {
__llvm_entry:
  %"<group_fuseborderpts_adaptivesubd>" = alloca i64
  %"<targetpt>" = alloca i64
  %0 = alloca i8*
  %1 = alloca i64
  store i64 %group_fuseborderpts_adaptivesubd, i64* %"<group_fuseborderpts_adaptivesubd>"
  store i64 %targetpt, i64* %"<targetpt>"
  store i8* %hashpair, i8** %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@SIII"(i8** %0, i64* %1, i64* %"<group_fuseborderpts_adaptivesubd>", i64* %"<targetpt>")
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0), i8* %hashpair) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i64 %ptnum) #3
  %evalue5 = load i64, i64* %"<group_fuseborderpts_adaptivesubd>"
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @4, i64 0, i64 0), i64 %evalue5) #3
  %evalue7 = load i64, i64* %"<targetpt>"
  %gvalue8 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i64 0, i64 0), i64 %evalue7) #3
  store i8* %gvalue, i8** @hashpair
  store i64 %gvalue4, i64* @ptnum
  store i64 %gvalue6, i64* @group_fuseborderpts_adaptivesubd
  store i64 %gvalue8, i64* @targetpt
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), i64 0, i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

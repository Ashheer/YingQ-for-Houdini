;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [1 x i8] zeroinitializer
@1 = private constant [8 x i8] c"pattern\00"
@2 = private constant [16 x i8] c"attribute_class\00"
@3 = private constant [0 x i8*] zeroinitializer
@4 = private constant [7 x i8] c"detail\00"
@5 = private constant [17 x i8] c"globalattributes\00"
@6 = private constant [5 x i8] c"prim\00"
@7 = private constant [20 x i8] c"primitiveattributes\00"
@8 = private constant [6 x i8] c"point\00"
@9 = private constant [16 x i8] c"pointattributes\00"
@10 = private constant [17 x i8] c"vertexattributes\00"
@11 = private constant [10 x i8] c"dimension\00"
@12 = private constant [5 x i8] c"name\00"
@13 = private constant [5 x i8] c"size\00"
@14 = private constant [7 x i8] c"exists\00"
@15 = private constant [9 x i8] c"mismatch\00"
@16 = private constant [3 x i8] c", \00"
@17 = private constant [24 x i8] c"[_a-zA-Z]+[_a-zA-Z0-9]*\00"
@18 = private constant [8 x i8] c"__noise\00"
@mismatch_attribs = external global i8*
@has_mismatch_attribs = external global i64
@keep__noise = external global i64
@19 = private constant [17 x i8] c"mismatch_attribs\00"
@20 = private constant [21 x i8] c"has_mismatch_attribs\00"
@21 = private constant [12 x i8] c"keep__noise\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SII"(i8** %_bound_mismatch_attribs, i64* %_bound_has_mismatch_attribs, i64* %_bound_keep__noise) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0))
  %return1 = call i8* @"chs@SS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @2, i64 0, i64 0))
  %return3 = call i64 @"eq@ISS"(i8* %return1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0))
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return4 = call i8** @"detailintrinsic@[SIS"(i64 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @5, i64 0, i64 0))
  br label %end

false:                                            ; preds = %__llvm_entry
  %return6 = call i64 @"eq@ISS"(i8* %return1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i64 0, i64 0))
  %1 = icmp ne i64 %return6, 0
  br i1 %1, label %true7, label %false8

end:                                              ; preds = %true13, %false14, %true7, %true
  %existing_attribs.0 = phi i8** [ %return4, %true ], [ %return10, %true7 ], [ %return16, %true13 ], [ %return17, %false14 ]
  %return18 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @11, i64 0, i64 0))
  %return20 = call i64 @"len@I[S"(i8** %existing_attribs.0)
  br label %cond

true7:                                            ; preds = %false
  %return10 = call i8** @"detailintrinsic@[SIS"(i64 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @7, i64 0, i64 0))
  br label %end

false8:                                           ; preds = %false
  %return12 = call i64 @"eq@ISS"(i8* %return1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @8, i64 0, i64 0))
  %2 = icmp ne i64 %return12, 0
  br i1 %2, label %true13, label %false14

true13:                                           ; preds = %false8
  %return16 = call i8** @"detailintrinsic@[SIS"(i64 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @9, i64 0, i64 0))
  br label %end

false14:                                          ; preds = %false8
  %return17 = call i8** @"detailintrinsic@[SIS"(i64 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @10, i64 0, i64 0))
  br label %end

cond:                                             ; preds = %end46, %end
  %skip_attribs.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @3, i64 0, i64 0), %end ], [ %skip_attribs.1, %end46 ]
  %__impl_foreach_index_c8.0 = phi i64 [ 0, %end ], [ %output67, %end46 ]
  %return23 = call i64 @"lt@III"(i64 %__impl_foreach_index_c8.0, i64 %return20)
  %3 = icmp ne i64 %return23, 0
  br i1 %3, label %body, label %end24

body:                                             ; preds = %cond
  %return27 = call i8* @"getcomp@S[SI"(i8** %existing_attribs.0, i64 %__impl_foreach_index_c8.0)
  %return30 = call i64 @"attribsize@IISS"(i64 1, i8* %return1, i8* %return27)
  %return33 = call i64 @"match@ISS"(i8* %return, i8* %return27)
  %return36 = call i64 @"attribtype@IISS"(i64 1, i8* %return1, i8* %return27)
  %return37 = call i64 @"eq@III"(i64 %return36, i64 1)
  %return38 = call i64 @"and@III"(i64 %return33, i64 %return37)
  %return40 = call i64 @"eq@III"(i64 %return30, i64 1)
  %return42 = call i64 @"eq@III"(i64 %return30, i64 3)
  %return43 = call i64 @"or@III"(i64 %return40, i64 %return42)
  %return44 = call i64 @"and@III"(i64 %return38, i64 %return43)
  %4 = icmp ne i64 %return44, 0
  br i1 %4, label %true45, label %end46

end24:                                            ; preds = %cond
  %return69 = call i8* @"join@S[SS"(i8** %skip_attribs.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @16, i64 0, i64 0))
  store i8* %return69, i8** %_bound_mismatch_attribs
  %return71 = call i64 @"len@I[S"(i8** %skip_attribs.0)
  %return72 = call i64 @"gt@III"(i64 %return71, i64 0)
  %5 = icmp ne i64 %return72, 0
  %. = select i1 %5, i64 1, i64 0
  store i64 %., i64* %_bound_has_mismatch_attribs
  %return77 = call i8** @"split@[SS"(i8* %return)
  %return79 = call i64 @"len@I[S"(i8** %return77)
  br label %cond80

true45:                                           ; preds = %body
  %return47 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  %return48 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return47)
  %return51 = call i64 @"setpointattrib@IISIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @12, i64 0, i64 0), i64 %return48, i8* %return27)
  %return54 = call i64 @"setpointattrib@IISII"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @13, i64 0, i64 0), i64 %return48, i64 %return30)
  %return56 = call i64 @"setpointattrib@IISII"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @14, i64 0, i64 0), i64 %return48, i64 1)
  %return59 = call i64 @"ne@III"(i64 %return30, i64 %return18)
  %6 = icmp ne i64 %return59, 0
  br i1 %6, label %true60, label %end46

end46:                                            ; preds = %true45, %true60, %body
  %skip_attribs.1 = phi i8** [ %output, %true60 ], [ %skip_attribs.0, %true45 ], [ %skip_attribs.0, %body ]
  %output67 = add i64 %__impl_foreach_index_c8.0, 1
  br label %cond

true60:                                           ; preds = %true45
  %output = call i8** @"append@[SS"(i8** %skip_attribs.0, i8* %return27)
  %return65 = call i64 @"setpointattrib@IISII"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @15, i64 0, i64 0), i64 %return48, i64 1)
  br label %end46

cond80:                                           ; preds = %end93, %end24
  %__impl_foreach_index_c9.0 = phi i64 [ 0, %end24 ], [ %output116, %end93 ]
  %return84 = call i64 @"lt@III"(i64 %__impl_foreach_index_c9.0, i64 %return79)
  %7 = icmp ne i64 %return84, 0
  br i1 %7, label %body81, label %end85

body81:                                           ; preds = %cond80
  %return89 = call i8* @"getcomp@S[SI"(i8** %return77, i64 %__impl_foreach_index_c9.0)
  %return91 = call i64 @"re_match@ISS"(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @17, i64 0, i64 0), i8* %return89)
  %8 = icmp ne i64 %return91, 0
  br i1 %8, label %true92, label %end93

end85:                                            ; preds = %cond80
  ret void

true92:                                           ; preds = %body81
  %return96 = call i64 @"hasattrib@IISS"(i64 1, i8* %return1, i8* %return89)
  %return97 = call i64 @"not@II"(i64 %return96)
  %9 = icmp ne i64 %return97, 0
  br i1 %9, label %true98, label %end93

end93:                                            ; preds = %true98, %true113, %true92, %body81
  %output116 = add i64 %__impl_foreach_index_c9.0, 1
  br label %cond80

true98:                                           ; preds = %true92
  %return101 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  %return102 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return101)
  %return105 = call i64 @"setpointattrib@IISIS"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @12, i64 0, i64 0), i64 %return102, i8* %return89)
  %return108 = call i64 @"setpointattrib@IISII"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @13, i64 0, i64 0), i64 %return102, i64 %return18)
  %return110 = call i64 @"setpointattrib@IISII"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @14, i64 0, i64 0), i64 %return102, i64 0)
  %return112 = call i64 @"eq@ISS"(i8* %return89, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @18, i64 0, i64 0))
  %10 = icmp ne i64 %return112, 0
  br i1 %10, label %true113, label %end93

true113:                                          ; preds = %true98
  store i64 1, i64* %_bound_keep__noise
  br label %end93
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i8** @"detailintrinsic@[SIS"(i64, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #1

; Function Attrs: nounwind
declare i64 @"attribsize@IISS"(i64, i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"match@ISS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i64 @"attribtype@IISS"(i64, i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIS"(i64, i8*, i64, i8*) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISII"(i64, i8*, i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"join@S[SS"(i8**, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8** @"split@[SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"re_match@ISS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i64 @"hasattrib@IISS"(i64, i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %mismatch_attribs, i64 %has_mismatch_attribs, i64 %keep__noise) #2 {
__llvm_entry:
  %"<has_mismatch_attribs>" = alloca i64
  %"<keep__noise>" = alloca i64
  %"<mismatch_attribs>" = alloca i8*
  store i8* %mismatch_attribs, i8** %"<mismatch_attribs>"
  store i64 %has_mismatch_attribs, i64* %"<has_mismatch_attribs>"
  store i64 %keep__noise, i64* %"<keep__noise>"
  call void @"__vex_snippet_snippet@SII"(i8** %"<mismatch_attribs>", i64* %"<has_mismatch_attribs>", i64* %"<keep__noise>")
  %evalue = load i8*, i8** %"<mismatch_attribs>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @19, i64 0, i64 0), i8* %evalue) #3
  %evalue1 = load i64, i64* %"<has_mismatch_attribs>"
  %gvalue2 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @20, i64 0, i64 0), i64 %evalue1) #3
  %evalue3 = load i64, i64* %"<keep__noise>"
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @21, i64 0, i64 0), i64 %evalue3) #3
  store i8* %gvalue, i8** @mismatch_attribs
  store i64 %gvalue2, i64* @has_mismatch_attribs
  store i64 %gvalue4, i64* @keep__noise
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

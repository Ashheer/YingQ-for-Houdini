;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"upval\00"
@uv = external global <3 x double>
@P = external global <3 x double>
@upval = external global double
@1 = private constant [3 x i8] c"uv\00"
@2 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VVF"(<3 x double>* %_bound_uv, <3 x double>* %_bound_P, double* %_bound_upval) #0 {
__llvm_entry:
  %return = call double @"point@FISI"(i64 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i64 0)
  %return1 = fcmp ogt double %return, 5.000000e-01
  br i1 %return1, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return3 = call i64 @"neg@II"(i64 1)
  %cast = sitofp i64 %return3 to double
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %flip.0 = phi double [ %cast, %true ], [ 1.000000e+00, %__llvm_entry ]
  %_bound_P4 = load <3 x double>, <3 x double>* %_bound_P
  %return5 = call double @"getcomp@FVI"(<3 x double> %_bound_P4, i64 2)
  %return8 = call double @"getcomp@FVI"(<3 x double> %_bound_P4, i64 0)
  %output = fmul double %flip.0, %return8
  %return9 = call <3 x double> @"set@VFFF"(double %return5, double %output, double 0.000000e+00)
  store <3 x double> %return9, <3 x double>* %_bound_uv
  %_bound_P10 = load <3 x double>, <3 x double>* %_bound_P
  %return11 = call <3 x double> @"relpointbbox@VIV"(i64 0, <3 x double> %_bound_P10)
  %return13 = call double @"getcomp@FVI"(<3 x double> %return11, i64 0)
  store double %return13, double* %_bound_upval
  ret void
}

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind
declare <3 x double> @"relpointbbox@VIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %uv, <3 x double> %P, double %upval) #1 {
__llvm_entry:
  %"<upval>" = alloca double
  %0 = alloca <3 x double>
  %"<uv>" = alloca <3 x double>
  store <3 x double> %uv, <3 x double>* %"<uv>"
  store double %upval, double* %"<upval>"
  store <3 x double> %P, <3 x double>* %0
  call void @"__vex_snippet_snippet@VVF"(<3 x double>* %"<uv>", <3 x double>* %0, double* %"<upval>")
  %evalue = load <3 x double>, <3 x double>* %"<uv>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), <3 x double> %P) #3
  %evalue4 = load double, double* %"<upval>"
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), double %evalue4) #3
  store <3 x double> %gvalue, <3 x double>* @uv
  store <3 x double> %gvalue3, <3 x double>* @P
  store double %gvalue5, double* @upval
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

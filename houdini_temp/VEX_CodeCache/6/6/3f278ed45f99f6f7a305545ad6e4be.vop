;_name	/obj/vops/noise_it_up
; ModuleID = 'obj_vops_noise_it_up'
source_filename = "obj_vops_noise_it_up"

@0 = private constant [7 x i8] c"xnoise\00"
@1 = private constant [1 x i8] zeroinitializer
@P = external global <3 x double>
@2 = private constant [6 x i8] c"noise\00"
@3 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"vop_fbmNoiseVP@VPFIS"(<4 x double>* %pos, double* %rough, i64* %maxoctaves, i8** %noisetype) #0 {
__llvm_entry:
  %return = call double @"sqrt@FF"(double 1.000000e-06)
  %pos1 = load <4 x double>, <4 x double>* %pos
  %output = fmul double 2.000000e+00, %return
  %cast = call <3 x double> @"set@VI"(i64 0)
  br label %cond

cond:                                             ; preds = %end13, %__llvm_entry
  %pp.0 = phi <4 x double> [ %pos1, %__llvm_entry ], [ %output39, %end13 ]
  %nval.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %nval.1, %end13 ]
  %amp.0 = phi double [ 1.000000e+00, %__llvm_entry ], [ %output34, %end13 ]
  %scale.0 = phi double [ 1.000000e+00, %__llvm_entry ], [ %output36, %end13 ]
  %octaves.0 = phi i64 [ 0, %__llvm_entry ], [ %output42, %end13 ]
  %return5 = fcmp ogt double %scale.0, %output
  %return6 = zext i1 %return5 to i64
  %maxoctaves8 = load i64, i64* %maxoctaves
  %return9 = call i64 @"lt@III"(i64 %octaves.0, i64 %maxoctaves8)
  %return10 = call i64 @"and@III"(i64 %return6, i64 %return9)
  %0 = icmp ne i64 %return10, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %noisetype11 = load i8*, i8** %noisetype
  %return12 = call i64 @"eq@ISS"(i8* %noisetype11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0))
  %1 = icmp ne i64 %return12, 0
  br i1 %1, label %true, label %false

end:                                              ; preds = %cond
  %return45 = fcmp ogt double %scale.0, %return
  br i1 %return45, label %true47, label %end48

true:                                             ; preds = %body
  %return17 = call <3 x double> @"xnoise@VP"(<4 x double> %pp.0)
  %cast18 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output19 = call <3 x double> @"sub@VV"(<3 x double> %return17, <3 x double> %cast18)
  %cast20 = call <3 x double> @"set@VF"(double %amp.0)
  %output21 = call <3 x double> @"mul@VV"(<3 x double> %cast20, <3 x double> %output19)
  %output22 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output21)
  br label %end13

false:                                            ; preds = %body
  %return26 = call <3 x double> @"noise@VP"(<4 x double> %pp.0)
  %cast27 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output28 = call <3 x double> @"sub@VV"(<3 x double> %return26, <3 x double> %cast27)
  %cast29 = call <3 x double> @"set@VF"(double %amp.0)
  %output30 = call <3 x double> @"mul@VV"(<3 x double> %cast29, <3 x double> %output28)
  %output31 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output30)
  br label %end13

end13:                                            ; preds = %false, %true
  %nval.1 = phi <3 x double> [ %output22, %true ], [ %output31, %false ]
  %rough33 = load double, double* %rough
  %output34 = fmul double %amp.0, %rough33
  %output36 = fmul double %scale.0, 5.000000e-01
  %cast38 = call <4 x double> @"set@PI"(i64 2)
  %output39 = call <4 x double> @"mul@PP"(<4 x double> %pp.0, <4 x double> %cast38)
  %output42 = add i64 %octaves.0, 1
  br label %cond

true47:                                           ; preds = %end
  %output52 = call double @"div@FF"(double %scale.0, double %return)
  %output53 = fsub double %output52, 1.000000e+00
  %return54 = call double @"clamp@FFFF"(double %output53, double 0.000000e+00, double 1.000000e+00)
  %output55 = fmul double %amp.0, %return54
  %noisetype56 = load i8*, i8** %noisetype
  %return57 = call i64 @"eq@ISS"(i8* %noisetype56, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0))
  %2 = icmp ne i64 %return57, 0
  br i1 %2, label %true58, label %false59

end48:                                            ; preds = %true58, %false59, %end
  %nval.2 = phi <3 x double> [ %output69, %true58 ], [ %output78, %false59 ], [ %nval.0, %end ]
  ret <3 x double> %nval.2

true58:                                           ; preds = %true47
  %return64 = call <3 x double> @"xnoise@VP"(<4 x double> %pp.0)
  %cast65 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output66 = call <3 x double> @"sub@VV"(<3 x double> %return64, <3 x double> %cast65)
  %cast67 = call <3 x double> @"set@VF"(double %output55)
  %output68 = call <3 x double> @"mul@VV"(<3 x double> %cast67, <3 x double> %output66)
  %output69 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output68)
  br label %end48

false59:                                          ; preds = %true47
  %return73 = call <3 x double> @"noise@VP"(<4 x double> %pp.0)
  %cast74 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output75 = call <3 x double> @"sub@VV"(<3 x double> %return73, <3 x double> %cast74)
  %cast76 = call <3 x double> @"set@VF"(double %output55)
  %output77 = call <3 x double> @"mul@VV"(<3 x double> %cast76, <3 x double> %output75)
  %output78 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output77)
  br label %end48
}

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VP"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"noise@VP"(<4 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"set@PI"(i64) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"mul@PP"(<4 x double>, <4 x double>) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #2

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"vop_setcomp@VVFI"(<3 x double>* %in, double* %fval, i64* %part) #0 {
__llvm_entry:
  %in1 = load <3 x double>, <3 x double>* %in
  %fval3 = load double, double* %fval
  %part4 = load i64, i64* %part
  %output = call <3 x double> @"setcomp@VFI"(<3 x double> %in1, double %fval3, i64 %part4)
  ret <3 x double> %output
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind
define void @obj_vops_noise_it_up(i64 %ptnum, i64 %vtxnum, i64 %primnum, i64 %id, i64 %numpt, i64 %numvtx, i64 %numprim, double %Time, double %TimeInc, double %Frame, double %life, double %age, i8* %OpInput2, i8* %OpInput3, i8* %OpInput4, i8* %OpInput1, <3 x double> %uv, <3 x double> %P, <3 x double> %v, <3 x double> %force, <3 x double> %Cd, <3 x double> %N, double %amp, double %rough, <4 x double> %freq, double %pulse_speed, double %exp) #2 {
__llvm_entry:
  %0 = alloca <4 x double>
  %1 = alloca double
  %2 = alloca i64
  %3 = alloca i8*
  %4 = alloca <3 x double>
  %5 = alloca double
  %6 = alloca i64
  %cast = call <4 x double> @"set@PV"(<3 x double> %P)
  %output = call <4 x double> @"setcomp@PFI"(<4 x double> %cast, double %Time, i64 3)
  %output35 = call <4 x double> @"mul@PP"(<4 x double> %output, <4 x double> %freq)
  %output36 = call <4 x double> @"sub@PP"(<4 x double> %output35, <4 x double> zeroinitializer)
  store <4 x double> %output36, <4 x double>* %0
  store double %rough, double* %1
  store i64 8, i64* %2
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i8** %3
  %vop_fbmNoiseVP = call <3 x double> @"vop_fbmNoiseVP@VPFIS"(<4 x double>* %0, double* %1, i64* %2, i8** %3)
  %cast40 = call <3 x double> @"set@VF"(double %amp)
  %output41 = call <3 x double> @"mul@VV"(<3 x double> %vop_fbmNoiseVP, <3 x double> %cast40)
  %return = call double @"getcomp@FVI"(<3 x double> %P, i64 1)
  %output45 = fmul double %Time, %pulse_speed
  %output48 = fadd double %return, %output45
  store <3 x double> %P, <3 x double>* %4
  store double %output48, double* %5
  store i64 1, i64* %6
  %vop_setcomp = call <3 x double> @"vop_setcomp@VVFI"(<3 x double>* %4, double* %5, i64* %6)
  %return55 = call <3 x double> @"relbbox@VSSV"(i8* %OpInput1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0), <3 x double> %vop_setcomp)
  %return57 = call double @"getcomp@FVI"(<3 x double> %return55, i64 1)
  %return59 = call double @"frac@FF"(double %return57)
  %output61 = fsub double %return59, 5.000000e-01
  %output63 = fmul double %output61, 2.000000e+00
  %return65 = call double @"abs@FF"(double %output63)
  %return67 = call double @"neg@FF"(double %return65)
  %output69 = fadd double %return67, 1.000000e+00
  %return72 = call double @"pow@FFF"(double %output69, double %exp)
  %cast75 = call <3 x double> @"set@VF"(double %return72)
  %output76 = call <3 x double> @"mul@VV"(<3 x double> %output41, <3 x double> %cast75)
  %output79 = call <3 x double> @"add@VV"(<3 x double> %P, <3 x double> %output76)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %output79) #3
  store <3 x double> %gvalue, <3 x double>* @P
  ret void
}

; Function Attrs: nounwind
declare <4 x double> @"set@PV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"setcomp@PFI"(<4 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"sub@PP"(<4 x double>, <4 x double>) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"relbbox@VSSV"(i8*, i8*, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"frac@FF"(double) #1

; Function Attrs: nounwind
declare double @"abs@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"pow@FFF"(double, double) #1

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_vops_noise_it_up(i64 0, i64 0, i64 0, i64 -1, i64 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1, i64 0, i64 0), <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> zeroinitializer, double 5.510000e-01, double 5.000000e-01, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, double 1.000000e+00, double 1.000000e+01)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [5 x i8] c"meta\00"
@2 = private constant [9 x i8] c"topology\00"
@3 = private constant [14 x i8] c"primitivelist\00"
@4 = private constant [6 x i8] c"point\00"
@5 = private constant [3 x i8] c"id\00"
@6 = private constant [5 x i8] c"weld\00"
@7 = private constant [11 x i8] c"branchweld\00"
@coloredtopology = external global i64*
@8 = private constant [16 x i8] c"coloredtopology\00"

; Function Attrs: alwaysinline nounwind
define private i64* @"calcConstraintTopology@[III"(i64* %constraintgeo, i64* %pointgeo) #0 {
__llvm_entry:
  %constraintgeo1 = load i64, i64* %constraintgeo
  %return = call i64* @"attribdataid@[IISS"(i64 %constraintgeo1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0))
  %constraintgeo3 = load i64, i64* %constraintgeo
  %return4 = call i64* @"attribdataid@[IISS"(i64 %constraintgeo3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @3, i64 0, i64 0))
  %output = call i64* @"append@[I[I"(i64* %return, i64* %return4)
  %pointgeo6 = load i64, i64* %pointgeo
  %return7 = call i64* @"attribdataid@[IISS"(i64 %pointgeo6, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i64 0, i64 0))
  %output8 = call i64* @"append@[I[I"(i64* %output, i64* %return7)
  %pointgeo10 = load i64, i64* %pointgeo
  %return11 = call i64* @"attribdataid@[IISS"(i64 %pointgeo10, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i64 0, i64 0))
  %output12 = call i64* @"append@[I[I"(i64* %output8, i64* %return11)
  %pointgeo14 = load i64, i64* %pointgeo
  %return15 = call i64* @"attribdataid@[IISS"(i64 %pointgeo14, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @7, i64 0, i64 0))
  %output16 = call i64* @"append@[I[I"(i64* %output12, i64* %return15)
  ret i64* %output16
}

; Function Attrs: nounwind
declare i64* @"attribdataid@[IISS"(i64, i8*, i8*) #1

; Function Attrs: nounwind
declare i64* @"append@[I[I"(i64*, i64*) #1

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@[I"(i64** %_bound_coloredtopology) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  store i64 0, i64* %1
  store i64 1, i64* %0
  %calcConstraintTopology = call i64* @"calcConstraintTopology@[III"(i64* %1, i64* %0)
  store i64* %calcConstraintTopology, i64** %_bound_coloredtopology
  ret void
}

; Function Attrs: nounwind
define void @__vex_snippet(i64* %coloredtopology) #1 {
__llvm_entry:
  %"<coloredtopology>" = alloca i64*
  store i64* %coloredtopology, i64** %"<coloredtopology>"
  call void @"__vex_snippet_snippet@[I"(i64** %"<coloredtopology>")
  %evalue = load i64*, i64** %"<coloredtopology>"
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @8, i64 0, i64 0), i64* %evalue) #2
  store i64* %gvalue, i64** @coloredtopology
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@ptnum = external global i64
@__smooth_all_pts__ = external global i64
@0 = private constant [6 x i8] c"ptnum\00"
@1 = private constant [19 x i8] c"__smooth_all_pts__\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound_ptnum, i64* %_bound___smooth_all_pts__) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64 @"pointhedge@III"(i64 0, i64 %_bound_ptnum1)
  br label %cond

cond:                                             ; preds = %end8, %__llvm_entry
  %hout.0 = phi i64 [ %return, %__llvm_entry ], [ %return10, %end8 ]
  %return3 = call i64 @"neg@II"(i64 1)
  %return4 = call i64 @"ne@III"(i64 %hout.0, i64 %return3)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return6 = call i64 @"hedge_equivcount@III"(i64 0, i64 %hout.0)
  %return7 = call i64 @"ne@III"(i64 %return6, i64 2)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %true, label %end8

end:                                              ; preds = %true, %cond
  %isboundary.0 = phi i64 [ 1, %true ], [ 0, %cond ]
  %return12 = call i64 @"not@II"(i64 %isboundary.0)
  store i64 %return12, i64* %_bound___smooth_all_pts__
  ret void

true:                                             ; preds = %body
  br label %end

end8:                                             ; preds = %body
  %return10 = call i64 @"pointhedgenext@III"(i64 0, i64 %hout.0)
  br label %cond
}

; Function Attrs: nounwind
declare i64 @"pointhedge@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"hedge_equivcount@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"pointhedgenext@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64 %__smooth_all_pts__) #1 {
__llvm_entry:
  %"<__smooth_all_pts__>" = alloca i64
  %0 = alloca i64
  store i64 %__smooth_all_pts__, i64* %"<__smooth_all_pts__>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@II"(i64* %0, i64* %"<__smooth_all_pts__>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load i64, i64* %"<__smooth_all_pts__>"
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1, i64 0, i64 0), i64 %evalue2) #3
  store i64 %gvalue, i64* @ptnum
  store i64 %gvalue3, i64* @__smooth_all_pts__
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

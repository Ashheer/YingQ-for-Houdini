;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [8 x i8] c"../seed\00"
@Cd = external global <3 x double>
@attribname = external global i64
@1 = private constant [3 x i8] c"Cd\00"
@2 = private constant [11 x i8] c"attribname\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VI"(<3 x double>* %_bound_Cd, i64* %_bound_attribname) #0 {
__llvm_entry:
  %_bound_attribname1 = load i64, i64* %_bound_attribname
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output = fadd double 1.286000e+00, %return
  %output2 = fmul double %output, 5.434345e+03
  %cast = sitofp i64 %_bound_attribname1 to double
  %output3 = fadd double %cast, %output2
  %output4 = fadd double %output3, 0x40BBCC53126E978D
  %return5 = call <3 x double> @"rand@VF"(double %output4)
  store <3 x double> %return5, <3 x double>* %_bound_Cd
  ret void
}

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"rand@VF"(double) #2

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %Cd, i64 %attribname) #2 {
__llvm_entry:
  %0 = alloca i64
  %"<Cd>" = alloca <3 x double>
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store i64 %attribname, i64* %0
  call void @"__vex_snippet_snippet@VI"(<3 x double>* %"<Cd>", i64* %0)
  %evalue = load <3 x double>, <3 x double>* %"<Cd>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0), <3 x double> %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0), i64 %attribname) #3
  store <3 x double> %gvalue, <3 x double>* @Cd
  store i64 %gvalue3, i64* @attribname
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

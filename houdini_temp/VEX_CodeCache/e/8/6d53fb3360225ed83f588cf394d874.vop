;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [7 x i8] c"length\00"
@1 = private constant [2 x i8] c"P\00"
@a = external global double
@c1 = external global double
@c2 = external global double
@2 = private constant [2 x i8] c"a\00"
@3 = private constant [3 x i8] c"c1\00"
@4 = private constant [3 x i8] c"c2\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FFF"(double* %_bound_a, double* %_bound_c1, double* %_bound_c2) #0 {
__llvm_entry:
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0))
  %return1 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 0)
  %return2 = call i64 @"npoints@II"(i64 0)
  %output = sub i64 %return2, 1
  %return3 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %output)
  %return5 = call double @"getcomp@FVI"(<3 x double> %return1, i64 1)
  %return7 = call double @"getcomp@FVI"(<3 x double> %return3, i64 1)
  %output8 = fsub double %return5, %return7
  %return9 = call double @"abs@FF"(double %output8)
  %return11 = call double @"getcomp@FVI"(<3 x double> %return1, i64 0)
  %return13 = call double @"getcomp@FVI"(<3 x double> %return3, i64 0)
  %output14 = fsub double %return11, %return13
  %return15 = call double @"abs@FF"(double %output14)
  %output18 = fmul double %return, %return
  %output21 = fmul double %return9, %return9
  %output22 = fsub double %output18, %output21
  %return23 = call double @"sqrt@FF"(double %output22)
  %output25 = call double @"div@FF"(double %return23, double %return15)
  br label %cond

cond:                                             ; preds = %end38, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output46, %end38 ]
  %a.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %a.1, %end38 ]
  %return27 = call i64 @"npoints@II"(i64 1)
  %return28 = call i64 @"lt@III"(i64 %i.0, i64 %return27)
  %0 = icmp ne i64 %return28, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return30 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %i.0)
  %return32 = call double @"getcomp@FVI"(<3 x double> %return30, i64 1)
  %output34 = fsub double %return32, %output25
  %return35 = call double @"abs@FF"(double %output34)
  %return36 = fcmp olt double %return35, 1.000000e-01
  br i1 %return36, label %true, label %end38

end:                                              ; preds = %cond
  %output50 = call double @"div@FF"(double %return15, double %a.0)
  %output53 = call double @"div@FF"(double %return9, double %a.0)
  %return56 = call double @"neg@FF"(double %return11)
  %output59 = fmul double 2.000000e+00, %output53
  %output61 = fmul double 4.000000e+00, %output53
  %output63 = fmul double %output61, %output53
  %return65 = call double @"exp@FF"(double %output50)
  %output66 = fsub double 1.000000e+00, %return65
  %output67 = fmul double 4.000000e+00, %output66
  %return69 = call double @"neg@FF"(double %output50)
  %return70 = call double @"exp@FF"(double %return69)
  %output71 = fsub double 1.000000e+00, %return70
  %output72 = fmul double %output67, %output71
  %output73 = fsub double %output63, %output72
  %return74 = call double @"sqrt@FF"(double %output73)
  %output75 = fsub double %output59, %return74
  %output78 = fmul double 2.000000e+00, %return65
  %output79 = fsub double 2.000000e+00, %output78
  %output80 = call double @"div@FF"(double %output75, double %output79)
  %return81 = call double @"log@FF"(double %output80)
  %output82 = fmul double %a.0, %return81
  %output83 = fadd double %return56, %output82
  %output90 = fadd double %return11, %output83
  %output92 = call double @"div@FF"(double %output90, double %a.0)
  %return93 = call double @"cosh@FF"(double %output92)
  %output94 = fmul double %a.0, %return93
  %output95 = fsub double %return5, %output94
  store double %output83, double* %_bound_c1
  store double %output95, double* %_bound_c2
  store double %a.0, double* %_bound_a
  ret void

true:                                             ; preds = %body
  %return40 = call double @"getcomp@FVI"(<3 x double> %return30, i64 0)
  %output41 = fmul double 2.000000e+00, %return40
  %output43 = call double @"div@FF"(double %output41, double %return15)
  br label %end38

end38:                                            ; preds = %true, %body
  %a.1 = phi double [ %output43, %true ], [ %a.0, %body ]
  %output46 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind
declare double @"abs@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"exp@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"log@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"cosh@FF"(double) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %a, double %c1, double %c2) #2 {
__llvm_entry:
  %"<c1>" = alloca double
  %"<c2>" = alloca double
  %"<a>" = alloca double
  store double %a, double* %"<a>"
  store double %c1, double* %"<c1>"
  store double %c2, double* %"<c2>"
  call void @"__vex_snippet_snippet@FFF"(double* %"<a>", double* %"<c1>", double* %"<c2>")
  %evalue = load double, double* %"<a>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), double %evalue) #3
  %evalue1 = load double, double* %"<c1>"
  %gvalue2 = call double @"_export@FSF"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), double %evalue1) #3
  %evalue3 = load double, double* %"<c2>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), double %evalue3) #3
  store double %gvalue, double* @a
  store double %gvalue2, double* @c1
  store double %gvalue4, double* @c2
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

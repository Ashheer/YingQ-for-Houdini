;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@ptnum = external global i64
@P = external global <3 x double>
@1 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IV"(i64* %_bound_ptnum, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64* @"neighbours@[III"(i64 0, i64 %_bound_ptnum1)
  %_bound_P2 = load <3 x double>, <3 x double>* %_bound_P
  %return4 = call i64 @"len@I[I"(i64* %return)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %avgP.0 = phi <3 x double> [ %_bound_P2, %__llvm_entry ], [ %output, %body ]
  %__impl_foreach_index_6.0 = phi i64 [ 0, %__llvm_entry ], [ %output15, %body ]
  %return7 = call i64 @"lt@III"(i64 %__impl_foreach_index_6.0, i64 %return4)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return10 = call i64 @"getcomp@I[II"(i64* %return, i64 %__impl_foreach_index_6.0)
  %return13 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return10)
  %output = call <3 x double> @"add@VV"(<3 x double> %avgP.0, <3 x double> %return13)
  %output15 = add i64 %__impl_foreach_index_6.0, 1
  br label %cond

end:                                              ; preds = %cond
  %output19 = add i64 %return4, 1
  %cast = call <3 x double> @"set@VI"(i64 %output19)
  %output20 = call <3 x double> @"div@VV"(<3 x double> %avgP.0, <3 x double> %cast)
  store <3 x double> %output20, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %P) #1 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@IV"(i64* %0, <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue3 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %evalue2) #3
  store i64 %gvalue, i64* @ptnum
  store <3 x double> %gvalue3, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

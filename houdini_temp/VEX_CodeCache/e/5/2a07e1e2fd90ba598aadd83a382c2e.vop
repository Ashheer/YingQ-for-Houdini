;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [6 x i8] c"radii\00"
@2 = private constant [35 x i8] c"VEX Assertion Failed %s:%d - (%s)\0A\00"
@3 = private constant [170 x i8] c"/obj/Wall_Breaking/rbdmaterialfracture1/CONCRETE_FRACTURE0/CSGVoronoi/generate_local_cutters/build_cutter_geo/voronoi_diagram_3d/add_points_for_boundary_faces/attribvop1\00"
@4 = private constant [13 x i8] c"hitprim >= 0\00"
@5 = private constant [7 x i8] c"global\00"
@6 = private constant [18 x i8] c"__sourcetetvertex\00"
@7 = private constant [9 x i8] c"__raydir\00"
@__sourcetetvertex = external global i64

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIV"(i64* %_bound_ptnum, i64* %_bound___sourcetetvertex, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64 @"neg@II"(i64 1)
  store i64 %return, i64* %_bound___sourcetetvertex
  %return2 = call <3 x double> @"detail@VIS"(i64 2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0))
  %return4 = call double @"getcomp@FVI"(<3 x double> %return2, i64 0)
  %output = fmul double 2.000000e+00, %return4
  br label %cond

cond:                                             ; preds = %end11, %__llvm_entry
  %faceno.0 = phi i64 [ 0, %__llvm_entry ], [ %output56, %end11 ]
  %return6 = call i64 @"lt@III"(i64 %faceno.0, i64 4)
  %12 = icmp ne i64 %return6, 0
  br i1 %12, label %body, label %end

body:                                             ; preds = %cond
  %return9 = call i64 @"tet_adjacent@IIII"(i64 1, i64 %_bound_ptnum1, i64 %faceno.0)
  %return10 = call i64 @"lt@III"(i64 %return9, i64 0)
  %13 = icmp ne i64 %return10, 0
  br i1 %13, label %true, label %end11

end:                                              ; preds = %cond
  ret void

true:                                             ; preds = %body
  store i64 1, i64* %0
  store i64 %_bound_ptnum1, i64* %1
  store i64 %faceno.0, i64* %2
  store i64 0, i64* %3
  %evaltetpos = call <3 x double> @"evaltetpos@VIIII"(i64* %0, i64* %1, i64* %2, i64* %3)
  store i64 1, i64* %4
  store i64 %_bound_ptnum1, i64* %5
  store i64 %faceno.0, i64* %6
  store i64 1, i64* %7
  %evaltetpos16 = call <3 x double> @"evaltetpos@VIIII"(i64* %4, i64* %5, i64* %6, i64* %7)
  store i64 1, i64* %8
  store i64 %_bound_ptnum1, i64* %9
  store i64 %faceno.0, i64* %10
  store i64 2, i64* %11
  %evaltetpos19 = call <3 x double> @"evaltetpos@VIIII"(i64* %8, i64* %9, i64* %10, i64* %11)
  %output22 = call <3 x double> @"sub@VV"(<3 x double> %evaltetpos19, <3 x double> %evaltetpos)
  %output25 = call <3 x double> @"sub@VV"(<3 x double> %evaltetpos16, <3 x double> %evaltetpos)
  %return26 = call <3 x double> @"cross@VVV"(<3 x double> %output22, <3 x double> %output25)
  %return27 = call <3 x double> @"normalize@VV"(<3 x double> %return26)
  %_bound_P28 = load <3 x double>, <3 x double>* %_bound_P
  %cast = call <3 x double> @"set@VF"(double %output)
  %output31 = call <3 x double> @"mul@VV"(<3 x double> %return27, <3 x double> %cast)
  %return32 = call { i64, <3 x double>, <3 x double> } @"intersect@IIVVVV"(i64 2, <3 x double> %_bound_P28, <3 x double> %output31)
  %return33 = extractvalue { i64, <3 x double>, <3 x double> } %return32, 0
  %output34 = extractvalue { i64, <3 x double>, <3 x double> } %return32, 1
  %return36 = call i64 @"assert_enabled@I"()
  %14 = icmp ne i64 %return36, 0
  br i1 %14, label %true37, label %end38

end11:                                            ; preds = %end38, %body
  %output56 = add i64 %faceno.0, 1
  br label %cond

true37:                                           ; preds = %true
  %return40 = call i64 @"ge@III"(i64 %return33, i64 0)
  %return41 = call i64 @"not@II"(i64 %return40)
  %15 = icmp ne i64 %return41, 0
  br i1 %15, label %true42, label %end38

end38:                                            ; preds = %true37, %true42, %true
  %return46 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %output34)
  %return50 = call i64 @"primvertex@IIII"(i64 1, i64 %_bound_ptnum1, i64 %faceno.0)
  %return51 = call i64 @"setpointattrib@IISII"(i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @6, i64 0, i64 0), i64 %return46, i64 %return50)
  %return54 = call i64 @"setpointattrib@IISIV"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @7, i64 0, i64 0), i64 %return46, <3 x double> %return27)
  br label %end11

true42:                                           ; preds = %true37
  %return44 = call i8* @"sprintf@SS:SIS"(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @2, i64 0, i64 0), i8* getelementptr inbounds ([170 x i8], [170 x i8]* @3, i64 0, i64 0), i64 41, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @4, i64 0, i64 0))
  call void @"print_once@S:SI"(i8* %return44, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0), i64 1)
  br label %end38
}

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"evaltetpos@VIIII"(i64* %input, i64* %primidx, i64* %faceno, i64* %vtxno) #0 {
__llvm_entry:
  %input1 = load i64, i64* %input
  %primidx2 = load i64, i64* %primidx
  %faceno3 = load i64, i64* %faceno
  %vtxno4 = load i64, i64* %vtxno
  %return = call i64 @"tet_faceindex@III"(i64 %faceno3, i64 %vtxno4)
  %return5 = call i64 @"primpoint@IIII"(i64 %input1, i64 %primidx2, i64 %return)
  %input6 = load i64, i64* %input
  %return8 = call <3 x double> @"point@VISI"(i64 %input6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return5)
  ret <3 x double> %return8
}

; Function Attrs: nounwind
declare i64 @"tet_faceindex@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"primpoint@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind
declare <3 x double> @"detail@VIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"tet_adjacent@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"cross@VVV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare { i64, <3 x double>, <3 x double> } @"intersect@IIVVVV"(i64, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"assert_enabled@I"() #2

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind readnone
declare i8* @"sprintf@SS:SIS"(i8*, i8*, i64, i8*) #2

; Function Attrs: nounwind
declare void @"print_once@S:SI"(i8*, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"primvertex@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISII"(i64, i8*, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIV"(i64, i8*, i64, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64 %__sourcetetvertex, <3 x double> %P) #1 {
__llvm_entry:
  %"<__sourcetetvertex>" = alloca i64
  %0 = alloca i64
  %1 = alloca <3 x double>
  store i64 %__sourcetetvertex, i64* %"<__sourcetetvertex>"
  store i64 %ptnum, i64* %0
  store <3 x double> %P, <3 x double>* %1
  call void @"__vex_snippet_snippet@IIV"(i64* %0, i64* %"<__sourcetetvertex>", <3 x double>* %1)
  %evalue = load i64, i64* %"<__sourcetetvertex>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @6, i64 0, i64 0), i64 %evalue) #3
  store i64 %gvalue, i64* @__sourcetetvertex
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

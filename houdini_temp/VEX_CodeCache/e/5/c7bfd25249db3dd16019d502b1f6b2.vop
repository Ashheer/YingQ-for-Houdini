;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"point\00"
@1 = private constant [11 x i8] c"FloorIndex\00"
@2 = private constant [1 x i8] zeroinitializer
@3 = private constant [21 x i8] c"FacadePatternAtIndex\00"
@MODULE_ID = external global i8*
@PATTERN = external global i8*
@4 = private constant [10 x i8] c"MODULE_ID\00"
@5 = private constant [8 x i8] c"PATTERN\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SS"(i8** %_bound_MODULE_ID, i8** %_bound_PATTERN) #0 {
__llvm_entry:
  %return = call i64 @"prim@IISI"(i64 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0), i64 0)
  %return1 = call i64 @"findattribval@IISSII"(i64 2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0), i64 %return, i64 0)
  %_bound_MODULE_ID2 = load i8*, i8** %_bound_MODULE_ID
  %return3 = call i64 @"eq@ISS"(i8* %_bound_MODULE_ID2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0))
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return5 = call i8* @"point@SISI"(i64 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @3, i64 0, i64 0), i64 %return1)
  store i8* %return5, i8** %_bound_PATTERN
  br label %end

false:                                            ; preds = %__llvm_entry
  store i8* %_bound_MODULE_ID2, i8** %_bound_PATTERN
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: nounwind
declare i64 @"prim@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"findattribval@IISSII"(i64, i8*, i8*, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #2

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %MODULE_ID, i8* %PATTERN) #1 {
__llvm_entry:
  %"<PATTERN>" = alloca i8*
  %0 = alloca i8*
  store i8* %PATTERN, i8** %"<PATTERN>"
  store i8* %MODULE_ID, i8** %0
  call void @"__vex_snippet_snippet@SS"(i8** %0, i8** %"<PATTERN>")
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @4, i64 0, i64 0), i8* %MODULE_ID) #3
  %evalue2 = load i8*, i8** %"<PATTERN>"
  %gvalue3 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @5, i64 0, i64 0), i8* %evalue2) #3
  store i8* %gvalue, i8** @MODULE_ID
  store i8* %gvalue3, i8** @PATTERN
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @2, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

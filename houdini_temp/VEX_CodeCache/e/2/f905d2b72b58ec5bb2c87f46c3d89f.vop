;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [28 x i8] c"../tmpAttrib_primpoints_out\00"
@1 = private constant [18 x i8] c"../tmpAttrib_ndir\00"
@lastdist = external global double
@nextdist = external global double
@pointprim = external global i64
@ptnum = external global i64
@ndir = external global <3 x double>
@P = external global <3 x double>
@2 = private constant [9 x i8] c"lastdist\00"
@3 = private constant [9 x i8] c"nextdist\00"
@4 = private constant [10 x i8] c"pointprim\00"
@5 = private constant [6 x i8] c"ptnum\00"
@6 = private constant [5 x i8] c"ndir\00"
@7 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FFIIVV"(double* %_bound_lastdist, double* %_bound_nextdist, i64* %_bound_pointprim, i64* %_bound_ptnum, <3 x double>* %_bound_ndir, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %_bound_lastdist1 = load double, double* %_bound_lastdist
  %return = fcmp ole double %_bound_lastdist1, 0.000000e+00
  %return2 = zext i1 %return to i64
  %_bound_nextdist3 = load double, double* %_bound_nextdist
  %return4 = fcmp ole double %_bound_nextdist3, 0.000000e+00
  %return5 = zext i1 %return4 to i64
  %return6 = call i64 @"and@III"(i64 %return2, i64 %return5)
  %0 = icmp ne i64 %return6, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %end30, %true42, %__llvm_entry
  ret void

end:                                              ; preds = %__llvm_entry
  %return7 = call i8* @"chs@SS"(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @0, i64 0, i64 0))
  %_bound_pointprim8 = load i64, i64* %_bound_pointprim
  %return9 = call i64* @"prim@[IISI"(i64 0, i8* %return7, i64 %_bound_pointprim8)
  %_bound_ptnum11 = load i64, i64* %_bound_ptnum
  %return12 = call i64 @"find@I[II"(i64* %return9, i64 %_bound_ptnum11)
  %return13 = call i8* @"chs@SS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1, i64 0, i64 0))
  %output = sub i64 %return12, 1
  %return16 = call i64 @"getcomp@I[II"(i64* %return9, i64 %output)
  %return17 = call <3 x double> @"point@VISI"(i64 0, i8* %return13, i64 %return16)
  %_bound_ndir19 = load <3 x double>, <3 x double>* %_bound_ndir
  %return20 = call double @"dot@FVV"(<3 x double> %return17, <3 x double> %_bound_ndir19)
  %output23 = fmul double %return20, %return20
  %output24 = fsub double 1.000000e+00, %output23
  %return25 = call double @"sqrt@FF"(double %output24)
  %_bound_lastdist26 = load double, double* %_bound_lastdist
  %return27 = fcmp ogt double %_bound_lastdist26, 0.000000e+00
  br i1 %return27, label %true29, label %end30

true29:                                           ; preds = %end
  %_bound_P31 = load <3 x double>, <3 x double>* %_bound_P
  %_bound_ndir32 = load <3 x double>, <3 x double>* %_bound_ndir
  %return33 = call <3 x double> @"neg@VV"(<3 x double> %_bound_ndir32)
  %output36 = call double @"div@FF"(double %_bound_lastdist26, double %return25)
  %cast = call <3 x double> @"set@VF"(double %output36)
  %output37 = call <3 x double> @"mul@VV"(<3 x double> %return33, <3 x double> %cast)
  %output38 = call <3 x double> @"add@VV"(<3 x double> %_bound_P31, <3 x double> %output37)
  store <3 x double> %output38, <3 x double>* %_bound_P
  br label %end30

end30:                                            ; preds = %true29, %end
  %_bound_nextdist39 = load double, double* %_bound_nextdist
  %return40 = fcmp ogt double %_bound_nextdist39, 0.000000e+00
  br i1 %return40, label %true42, label %true

true42:                                           ; preds = %end30
  %_bound_P44 = load <3 x double>, <3 x double>* %_bound_P
  %output48 = call double @"div@FF"(double %_bound_nextdist39, double %return25)
  %cast49 = call <3 x double> @"set@VF"(double %output48)
  %output50 = call <3 x double> @"mul@VV"(<3 x double> %return17, <3 x double> %cast49)
  %output51 = call <3 x double> @"add@VV"(<3 x double> %_bound_P44, <3 x double> %output50)
  store <3 x double> %output51, <3 x double>* %_bound_P
  br label %true
}

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare i64* @"prim@[IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"find@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %lastdist, double %nextdist, i64 %pointprim, i64 %ptnum, <3 x double> %ndir, <3 x double> %P) #2 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca double
  %1 = alloca double
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store double %lastdist, double* %0
  store double %nextdist, double* %1
  store i64 %pointprim, i64* %2
  store i64 %ptnum, i64* %3
  store <3 x double> %ndir, <3 x double>* %4
  call void @"__vex_snippet_snippet@FFIIVV"(double* %0, double* %1, i64* %2, i64* %3, <3 x double>* %4, <3 x double>* %"<P>")
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), double %lastdist) #3
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0), double %nextdist) #3
  %gvalue9 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @4, i64 0, i64 0), i64 %pointprim) #3
  %gvalue11 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i64 0, i64 0), i64 %ptnum) #3
  %gvalue13 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i64 0, i64 0), <3 x double> %ndir) #3
  %evalue14 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue15 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0), <3 x double> %evalue14) #3
  store double %gvalue, double* @lastdist
  store double %gvalue7, double* @nextdist
  store i64 %gvalue9, i64* @pointprim
  store i64 %gvalue11, i64* @ptnum
  store <3 x double> %gvalue13, <3 x double>* @ndir
  store <3 x double> %gvalue15, <3 x double>* @P
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00, i64 0, i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

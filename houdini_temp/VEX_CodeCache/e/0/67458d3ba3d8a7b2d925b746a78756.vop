;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"slop\00"
@1 = private constant [11 x i8] c"FloorIndex\00"
@group_ILLEGALFLOOR = external global i64
@group_SLOP = external global i64
@group_FLOORBOTTOM = external global i64
@N = external global <3 x double>
@group_FLOORTOP = external global i64
@FloorIndex = external global i64
@2 = private constant [19 x i8] c"group_ILLEGALFLOOR\00"
@3 = private constant [11 x i8] c"group_SLOP\00"
@4 = private constant [18 x i8] c"group_FLOORBOTTOM\00"
@5 = private constant [2 x i8] c"N\00"
@6 = private constant [15 x i8] c"group_FLOORTOP\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIIVII"(i64* %_bound_group_ILLEGALFLOOR, i64* %_bound_group_SLOP, i64* %_bound_group_FLOORBOTTOM, <3 x double>* %_bound_N, i64* %_bound_group_FLOORTOP, i64* %_bound_FloorIndex) #0 {
__llvm_entry:
  %return = call i64 @"npoints@II"(i64 1)
  %return1 = call i64 @"gt@III"(i64 %return, i64 0)
  store i64 %return1, i64* %_bound_group_ILLEGALFLOOR
  %return2 = call i64 @"inprimgroup@IISI"(i64 2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0), i64 0)
  store i64 %return2, i64* %_bound_group_SLOP
  %_bound_N3 = load <3 x double>, <3 x double>* %_bound_N
  %return4 = call double @"getcomp@FVI"(<3 x double> %_bound_N3, i64 1)
  %return5 = call double @"neg@FF"(double 9.999000e-01)
  %return6 = fcmp ole double %return4, %return5
  %return7 = zext i1 %return6 to i64
  store i64 %return7, i64* %_bound_group_FLOORBOTTOM
  %_bound_N8 = load <3 x double>, <3 x double>* %_bound_N
  %return9 = call double @"getcomp@FVI"(<3 x double> %_bound_N8, i64 1)
  %return10 = fcmp oge double %return9, 9.999000e-01
  %return11 = zext i1 %return10 to i64
  store i64 %return11, i64* %_bound_group_FLOORTOP
  %return12 = call i64 @"prim@IISI"(i64 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0), i64 0)
  store i64 %return12, i64* %_bound_FloorIndex
  ret void
}

; Function Attrs: nounwind
declare i64 @"npoints@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"inprimgroup@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #2

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #2

; Function Attrs: nounwind
declare i64 @"prim@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(i64 %group_ILLEGALFLOOR, i64 %group_SLOP, i64 %group_FLOORBOTTOM, <3 x double> %N, i64 %group_FLOORTOP, i64 %FloorIndex) #1 {
__llvm_entry:
  %"<group_SLOP>" = alloca i64
  %"<group_FLOORBOTTOM>" = alloca i64
  %"<group_FLOORTOP>" = alloca i64
  %"<FloorIndex>" = alloca i64
  %0 = alloca <3 x double>
  %"<group_ILLEGALFLOOR>" = alloca i64
  store i64 %group_ILLEGALFLOOR, i64* %"<group_ILLEGALFLOOR>"
  store i64 %group_SLOP, i64* %"<group_SLOP>"
  store i64 %group_FLOORBOTTOM, i64* %"<group_FLOORBOTTOM>"
  store i64 %group_FLOORTOP, i64* %"<group_FLOORTOP>"
  store i64 %FloorIndex, i64* %"<FloorIndex>"
  store <3 x double> %N, <3 x double>* %0
  call void @"__vex_snippet_snippet@IIIVII"(i64* %"<group_ILLEGALFLOOR>", i64* %"<group_SLOP>", i64* %"<group_FLOORBOTTOM>", <3 x double>* %0, i64* %"<group_FLOORTOP>", i64* %"<FloorIndex>")
  %evalue = load i64, i64* %"<group_ILLEGALFLOOR>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @2, i64 0, i64 0), i64 %evalue) #3
  %evalue2 = load i64, i64* %"<group_SLOP>"
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0), i64 %evalue2) #3
  %evalue4 = load i64, i64* %"<group_FLOORBOTTOM>"
  %gvalue5 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @4, i64 0, i64 0), i64 %evalue4) #3
  %gvalue7 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i64 0, i64 0), <3 x double> %N) #3
  %evalue8 = load i64, i64* %"<group_FLOORTOP>"
  %gvalue9 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @6, i64 0, i64 0), i64 %evalue8) #3
  %evalue10 = load i64, i64* %"<FloorIndex>"
  %gvalue11 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0), i64 %evalue10) #3
  store i64 %gvalue, i64* @group_ILLEGALFLOOR
  store i64 %gvalue3, i64* @group_SLOP
  store i64 %gvalue5, i64* @group_FLOORBOTTOM
  store <3 x double> %gvalue7, <3 x double>* @N
  store i64 %gvalue9, i64* @group_FLOORTOP
  store i64 %gvalue11, i64* @FloorIndex
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, i64 0, <3 x double> zeroinitializer, i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

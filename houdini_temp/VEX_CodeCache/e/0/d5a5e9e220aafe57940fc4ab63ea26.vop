;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [16 x i8] c"../searchradius\00"
@1 = private constant [19 x i8] c"../maxsearchpoints\00"
@2 = private constant [18 x i8] c"../maxconnections\00"
@3 = private constant [1 x i8] zeroinitializer
@4 = private constant [15 x i8] c"../pieceattrib\00"
@5 = private constant [16 x i8] c"../useconeangle\00"
@6 = private constant [13 x i8] c"../coneangle\00"
@7 = private constant [20 x i8] c"../useclusterattrib\00"
@8 = private constant [17 x i8] c"../clusterattrib\00"
@9 = private constant [0 x i8*] zeroinitializer
@10 = private constant [2 x i8] c"P\00"
@11 = private constant [11 x i8] c"__anchorpt\00"
@12 = private constant [9 x i8] c"polyline\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IVVSI"(i64* %_bound_ptnum, <3 x double>* %_bound_N, <3 x double>* %_bound_P, i8** %_bound___piecename, i64* %_bound___anchorpt) #0 {
__llvm_entry:
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @2, i64 0, i64 0))
  %return3 = call i8* @"chs@SS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @4, i64 0, i64 0))
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @5, i64 0, i64 0))
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return6 = call double @"chf@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @6, i64 0, i64 0))
  %return7 = call double @"radians@FF"(double %return6)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %cone_angle.0 = phi double [ %return7, %true ], [ 0.000000e+00, %__llvm_entry ]
  %return8 = call i64 @"chi@IS"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @7, i64 0, i64 0))
  %return9 = call i8* @"chs@SS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @8, i64 0, i64 0))
  %return10 = call i64 @"neg@II"(i64 1)
  %1 = icmp ne i64 %return8, 0
  br i1 %1, label %true12, label %end13

true12:                                           ; preds = %end
  %return15 = call i64 @"pointattribtype@IIS"(i64 0, i8* %return9)
  %return17 = call i64 @"eq@III"(i64 %return15, i64 2)
  %2 = icmp ne i64 %return17, 0
  %_bound_ptnum21 = load i64, i64* %_bound_ptnum
  br i1 %2, label %true18, label %false

end13:                                            ; preds = %true18, %false, %end
  %cluster_attribtype.0 = phi i64 [ %return15, %true18 ], [ %return15, %false ], [ %return10, %end ]
  %my_cluster_i.0 = phi i64 [ 0, %true18 ], [ %return25, %false ], [ 0, %end ]
  %my_cluster_s.0 = phi i8* [ %return22, %true18 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @3, i64 0, i64 0), %false ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @3, i64 0, i64 0), %end ]
  %return27 = call i64 @"not@II"(i64 %return4)
  %_bound_N28 = load <3 x double>, <3 x double>* %_bound_N
  %return29 = call double @"length2@FV"(<3 x double> %_bound_N28)
  %return30 = fcmp olt double %return29, 1.000000e-05
  %return31 = zext i1 %return30 to i64
  %return32 = call i64 @"or@III"(i64 %return27, i64 %return31)
  %3 = icmp ne i64 %return32, 0
  %_bound_P36 = load <3 x double>, <3 x double>* %_bound_P
  br i1 %3, label %true33, label %false34

true18:                                           ; preds = %true12
  %return22 = call i8* @"point@SISI"(i64 0, i8* %return9, i64 %_bound_ptnum21)
  br label %end13

false:                                            ; preds = %true12
  %return25 = call i64 @"point@IISI"(i64 0, i8* %return9, i64 %_bound_ptnum21)
  br label %end13

true33:                                           ; preds = %end13
  %return39 = call i64* @"nearpoints@[IIVFI"(i64 0, <3 x double> %_bound_P36, double %return, i64 %return1)
  br label %end35

false34:                                          ; preds = %end13
  %_bound_N41 = load <3 x double>, <3 x double>* %_bound_N
  %return45 = call i64* @"pccone@[IISVVFFI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i64 0, i64 0), <3 x double> %_bound_P36, <3 x double> %_bound_N41, double %cone_angle.0, double %return, i64 %return1)
  br label %end35

end35:                                            ; preds = %false34, %true33
  %other_pts.0 = phi i64* [ %return39, %true33 ], [ %return45, %false34 ]
  %return47 = call i64 @"len@I[I"(i64* %other_pts.0)
  br label %cond

cond:                                             ; preds = %iter, %end35
  %known_pieces.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @9, i64 0, i64 0), %end35 ], [ %known_pieces.1, %iter ]
  %num_connections.0 = phi i64 [ 0, %end35 ], [ %num_connections.1, %iter ]
  %__impl_foreach_index_14.0 = phi i64 [ 0, %end35 ], [ %output111, %iter ]
  %return50 = call i64 @"lt@III"(i64 %__impl_foreach_index_14.0, i64 %return47)
  %4 = icmp ne i64 %return50, 0
  br i1 %4, label %body, label %end51

body:                                             ; preds = %cond
  %return54 = call i64 @"getcomp@I[II"(i64* %other_pts.0, i64 %__impl_foreach_index_14.0)
  br i1 %1, label %true56, label %end57

end51:                                            ; preds = %true94, %cond
  ret void

iter:                                             ; preds = %true88, %end106, %end57, %false61, %true60
  %known_pieces.1 = phi i8** [ %known_pieces.0, %true60 ], [ %output109, %end106 ], [ %known_pieces.0, %true88 ], [ %known_pieces.0, %end57 ], [ %known_pieces.0, %false61 ]
  %num_connections.1 = phi i64 [ %num_connections.0, %true60 ], [ %output, %end106 ], [ %num_connections.0, %true88 ], [ %num_connections.0, %end57 ], [ %num_connections.0, %false61 ]
  %output111 = add i64 %__impl_foreach_index_14.0, 1
  br label %cond

true56:                                           ; preds = %body
  %return59 = call i64 @"eq@III"(i64 %cluster_attribtype.0, i64 2)
  %5 = icmp ne i64 %return59, 0
  br i1 %5, label %true60, label %false61

end57:                                            ; preds = %false61, %true60, %body
  %return82 = call i8* @"point@SISI"(i64 0, i8* %return3, i64 %return54)
  %return84 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i64 0, i64 0), i64 %return54)
  %_bound___piecename85 = load i8*, i8** %_bound___piecename
  %return87 = call i64 @"ne@ISS"(i8* %_bound___piecename85, i8* %return82)
  %6 = icmp ne i64 %return87, 0
  br i1 %6, label %true88, label %iter

true60:                                           ; preds = %true56
  %return65 = call i8* @"point@SISI"(i64 0, i8* %return9, i64 %return54)
  %return68 = call i64 @"eq@ISS"(i8* %my_cluster_s.0, i8* %return65)
  %7 = icmp ne i64 %return68, 0
  br i1 %7, label %iter, label %end57

false61:                                          ; preds = %true56
  %return74 = call i64 @"point@IISI"(i64 0, i8* %return9, i64 %return54)
  %return77 = call i64 @"eq@III"(i64 %my_cluster_i.0, i64 %return74)
  %8 = icmp ne i64 %return77, 0
  br i1 %8, label %iter, label %end57

true88:                                           ; preds = %end57
  %return92 = call i64 @"find@I[SS"(i8** %known_pieces.0, i8* %return82)
  %return93 = call i64 @"lt@III"(i64 %return92, i64 0)
  %9 = icmp ne i64 %return93, 0
  br i1 %9, label %true94, label %iter

true94:                                           ; preds = %true88
  %return97 = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @11, i64 0, i64 0), i64 %return54)
  %_bound___anchorpt98 = load i64, i64* %_bound___anchorpt
  %return100 = call i64 @"addprim@IISII"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @12, i64 0, i64 0), i64 %_bound___anchorpt98, i64 %return97)
  %output = add i64 %num_connections.0, 1
  %return104 = call i64 @"ge@III"(i64 %output, i64 %return2)
  %10 = icmp ne i64 %return104, 0
  br i1 %10, label %end51, label %end106

end106:                                           ; preds = %true94
  %output109 = call i8** @"append@[SS"(i8** %known_pieces.0, i8* %return82)
  br label %iter
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
declare double @"radians@FF"(double) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind
declare i64 @"pointattribtype@IIS"(i64, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind
declare i8* @"point@SISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind
declare double @"length2@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64* @"nearpoints@[IIVFI"(i64, <3 x double>, double, i64) #2

; Function Attrs: nounwind
declare i64* @"pccone@[IISVVFFI"(i64, i8*, <3 x double>, <3 x double>, double, double, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i64 @"find@I[SS"(i8**, i8*) #2

; Function Attrs: nounwind
declare i64 @"addprim@IISII"(i64, i8*, i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #1

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, <3 x double> %N, <3 x double> %P, i8* %__piecename, i64 %__anchorpt) #2 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca <3 x double>
  %2 = alloca <3 x double>
  %3 = alloca i8*
  %4 = alloca i64
  store i64 %ptnum, i64* %0
  store <3 x double> %N, <3 x double>* %1
  store <3 x double> %P, <3 x double>* %2
  store i8* %__piecename, i8** %3
  store i64 %__anchorpt, i64* %4
  call void @"__vex_snippet_snippet@IVVSI"(i64* %0, <3 x double>* %1, <3 x double>* %2, i8** %3, i64* %4)
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @3, i64 0, i64 0), i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

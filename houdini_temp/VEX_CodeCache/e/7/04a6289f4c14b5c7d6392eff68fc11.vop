;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [0 x double] zeroinitializer
@ptnum = external global i64
@weights = external global double*
@neighbours = external global i64*
@weight_sum = external global double
@2 = private constant [6 x i8] c"ptnum\00"
@3 = private constant [8 x i8] c"weights\00"
@4 = private constant [11 x i8] c"neighbours\00"
@5 = private constant [11 x i8] c"weight_sum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I[F[IF"(i64* %_bound_ptnum, double** %_bound_weights, i64** %_bound_neighbours, double* %_bound_weight_sum) #0 {
__llvm_entry:
  %weights = alloca double*
  %0 = alloca i64*
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i64* @"neighbours@[III"(i64 0, i64 %_bound_ptnum1)
  %return4 = call i64 @"len@I[I"(i64* %return)
  %output = call double* @"resize@[FI"(double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), i64 %return4)
  store double* %output, double** %weights
  store i64* %return, i64** %0
  call void @"graph_laplace@[I[F"(i64** %0, double** %weights)
  %weights6 = load double*, double** %weights
  store double* %weights6, double** %_bound_weights
  store i64* %return, i64** %_bound_neighbours
  %weights8 = load double*, double** %weights
  %return9 = call double @"sum@F[F"(double* %weights8)
  store double %return9, double* %_bound_weight_sum
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"graph_laplace@[I[F"(i64** %neighbours, double** %weights) #0 {
__llvm_entry:
  %neighbours1 = load i64*, i64** %neighbours
  %return = call i64 @"len@I[I"(i64* %neighbours1)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output10, %body ]
  %return4 = call i64 @"lt@III"(i64 %i.0, i64 %return)
  %0 = icmp ne i64 %return4, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %tmp = load double*, double** %weights
  %return6 = call { double, double* } @"setcomp@F[FFI"(double* %tmp, double 1.000000e+00, i64 %i.0)
  %output = extractvalue { double, double* } %return6, 1
  store double* %output, double** %weights
  %output10 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare { double, double* } @"setcomp@F[FFI"(double*, double, i64) #1

; Function Attrs: nounwind
declare i64* @"neighbours@[III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare double* @"resize@[FI"(double*, i64) #1

; Function Attrs: nounwind
declare double @"sum@F[F"(double*) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, double* %weights, i64* %neighbours, double %weight_sum) #2 {
__llvm_entry:
  %"<weights>" = alloca double*
  %"<neighbours>" = alloca i64*
  %"<weight_sum>" = alloca double
  %0 = alloca i64
  store double* %weights, double** %"<weights>"
  store i64* %neighbours, i64** %"<neighbours>"
  store double %weight_sum, double* %"<weight_sum>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@I[F[IF"(i64* %0, double** %"<weights>", i64** %"<neighbours>", double* %"<weight_sum>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load double*, double** %"<weights>"
  %gvalue3 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0), double* %evalue2) #3
  %evalue4 = load i64*, i64** %"<neighbours>"
  %gvalue5 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0), i64* %evalue4) #3
  %evalue6 = load double, double* %"<weight_sum>"
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0), double %evalue6) #3
  store i64 %gvalue, i64* @ptnum
  store double* %gvalue3, double** @weights
  store i64* %gvalue5, i64** @neighbours
  store double %gvalue7, double* @weight_sum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double* @"_export@[FS[F"(i8*, double*)

declare i64* @"_export@[IS[I"(i8*, i64*)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

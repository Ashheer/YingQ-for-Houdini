;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"P\00"
@1 = private constant [19 x i8] c"../cornerbeamwidth\00"
@ptnum = external global i64
@outgrp = external global i64
@P = external global <3 x double>
@2 = private constant [6 x i8] c"ptnum\00"
@3 = private constant [7 x i8] c"outgrp\00"

; Function Attrs: alwaysinline nounwind
define private i64 @"pointprim@III"(i64* %geo, i64* %ptnum) #0 {
__llvm_entry:
  %geo1 = load i64, i64* %geo
  %ptnum2 = load i64, i64* %ptnum
  %return = call i64 @"pointvertex@III"(i64 %geo1, i64 %ptnum2)
  %geo3 = load i64, i64* %geo
  %return5 = call i64 @"vertexprim@III"(i64 %geo3, i64 %return)
  ret i64 %return5
}

; Function Attrs: nounwind
declare i64 @"pointvertex@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"vertexprim@III"(i64, i64) #1

; Function Attrs: alwaysinline nounwind
define private i64 @"pointprimindex@IIII"(i64* %geo, i64* %primnum, i64* %ptnum) #0 {
__llvm_entry:
  %geo1 = load i64, i64* %geo
  %primnum2 = load i64, i64* %primnum
  %return = call i64 @"primvertexcount@III"(i64 %geo1, i64 %primnum2)
  br label %cond

cond:                                             ; preds = %end16, %__llvm_entry
  %primvtxnum.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %end16 ]
  %return5 = call i64 @"lt@III"(i64 %primvtxnum.0, i64 %return)
  %0 = icmp ne i64 %return5, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %geo6 = load i64, i64* %geo
  %primnum7 = load i64, i64* %primnum
  %return9 = call i64 @"primvertex@IIII"(i64 %geo6, i64 %primnum7, i64 %primvtxnum.0)
  %geo10 = load i64, i64* %geo
  %return12 = call i64 @"vertexpoint@III"(i64 %geo10, i64 %return9)
  %ptnum14 = load i64, i64* %ptnum
  %return15 = call i64 @"eq@III"(i64 %return12, i64 %ptnum14)
  %1 = icmp ne i64 %return15, 0
  br i1 %1, label %true, label %end16

end:                                              ; preds = %cond
  %return19 = call i64 @"neg@II"(i64 1)
  br label %UnifiedReturnBlock

true:                                             ; preds = %body
  br label %UnifiedReturnBlock

end16:                                            ; preds = %body
  %output = add i64 %primvtxnum.0, 1
  br label %cond

UnifiedReturnBlock:                               ; preds = %true, %end
  %UnifiedRetVal = phi i64 [ %return19, %end ], [ %primvtxnum.0, %true ]
  ret i64 %UnifiedRetVal
}

; Function Attrs: nounwind
declare i64 @"primvertexcount@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"primvertex@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"vertexpoint@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: alwaysinline nounwind
define private i64 @"pointprimindex@III"(i64* %geo, i64* %ptnum) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %geo1 = load i64, i64* %geo
  store i64 %geo1, i64* %4
  %geo2 = load i64, i64* %geo
  store i64 %geo2, i64* %1
  %ptnum3 = load i64, i64* %ptnum
  store i64 %ptnum3, i64* %2
  %pointprim = call i64 @"pointprim@III"(i64* %1, i64* %2)
  store i64 %pointprim, i64* %0
  %ptnum4 = load i64, i64* %ptnum
  store i64 %ptnum4, i64* %3
  %pointprimindex = call i64 @"pointprimindex@IIII"(i64* %4, i64* %0, i64* %3)
  ret i64 %pointprimindex
}

; Function Attrs: nounwind
declare i64* @"pointprims@[III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #2

; Function Attrs: nounwind
declare { i64, i64* } @"removevalue@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64* @"push@[II"(i64*, i64) #2

; Function Attrs: nounwind
declare i64 @"find@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"vertexindex@IIII"(i64, i64, i64) #1

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIV"(i64* %_bound_ptnum, i64* %_bound_outgrp, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  store i64 0, i64* %0
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  store i64 %_bound_ptnum1, i64* %1
  %pointprimindex2 = call i64 @"pointprimindex@III"(i64* %0, i64* %1)
  %return = call i64 @"eq@III"(i64 %pointprimindex2, i64 0)
  %2 = icmp ne i64 %return, 0
  br i1 %2, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store i64 1, i64* %_bound_outgrp
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %_bound_ptnum4 = load i64, i64* %_bound_ptnum
  %return5 = call i64 @"neighbour@IIII"(i64 0, i64 %_bound_ptnum4, i64 0)
  %return7 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), i64 %return5)
  %_bound_P8 = load <3 x double>, <3 x double>* %_bound_P
  %return9 = call double @"chf@FS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1, i64 0, i64 0))
  %return10 = call double @"sqrt@FF"(double 2.000000e+00)
  %output = call double @"div@FF"(double %return9, double %return10)
  %output13 = call <3 x double> @"sub@VV"(<3 x double> %return7, <3 x double> %_bound_P8)
  %return14 = call <3 x double> @"normalize@VV"(<3 x double> %output13)
  %cast = call <3 x double> @"set@VF"(double %output)
  %output15 = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %return14)
  %output16 = call <3 x double> @"add@VV"(<3 x double> %_bound_P8, <3 x double> %output15)
  store <3 x double> %output16, <3 x double>* %_bound_P
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end, %true
  ret void
}

; Function Attrs: nounwind
declare i64 @"neighbour@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #2

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %ptnum, i64 %outgrp, <3 x double> %P) #1 {
__llvm_entry:
  %"<outgrp>" = alloca i64
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  store i64 %outgrp, i64* %"<outgrp>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@IIV"(i64* %0, i64* %"<outgrp>", <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i64 %ptnum) #3
  %evalue2 = load i64, i64* %"<outgrp>"
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), i64 %evalue2) #3
  %evalue4 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue5 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %evalue4) #3
  store i64 %gvalue, i64* @ptnum
  store i64 %gvalue3, i64* @outgrp
  store <3 x double> %gvalue5, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [18 x i8] c"coveragescalemode\00"
@1 = private constant [7 x i8] c"attrib\00"
@2 = private constant [15 x i8] c"coverageattrib\00"
@__density = external global double
@ptnum = external global i64
@3 = private constant [10 x i8] c"__density\00"
@4 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FI"(double* %_bound___density, i64* %_bound_ptnum) #0 {
__llvm_entry:
  store double 1.000000e+00, double* %_bound___density
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"eq@ISS"(i8* %return, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %0 = icmp ne i64 %return1, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return2 = call i8* @"chs@SS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i64 0, i64 0))
  %return3 = call i8* @"strip@SS"(i8* %return2)
  %_bound_ptnum5 = load i64, i64* %_bound_ptnum
  %return6 = call double @"point@FISI"(i64 0, i8* %return3, i64 %_bound_ptnum5)
  %return8 = call double @"clamp@FFFF"(double %return6, double 0.000000e+00, double 1.000000e+00)
  store double %return8, double* %_bound___density
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i8* @"strip@SS"(i8*) #2

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #2

; Function Attrs: nounwind
define void @__vex_snippet(double %__density, i64 %ptnum) #2 {
__llvm_entry:
  %0 = alloca i64
  %"<__density>" = alloca double
  store double %__density, double* %"<__density>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@FI"(double* %"<__density>", i64* %0)
  %evalue = load double, double* %"<__density>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @3, i64 0, i64 0), double %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #3
  store double %gvalue, double* @__density
  store i64 %gvalue3, i64* @ptnum
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

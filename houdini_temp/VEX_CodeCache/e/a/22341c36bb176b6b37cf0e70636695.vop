;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [2 x i8] c"K\00"
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [16 x i8] c"repulsive_force\00"
@3 = private constant [3 x i8] c"uv\00"
@4 = private constant [28 x i8] c"Particle_Particle_Repulsion\00"
@numpt = external global i64
@ptnum = external global i64
@P = external global <3 x double>
@5 = private constant [6 x i8] c"numpt\00"
@6 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@IIV"(i64* %_bound_numpt, i64* %_bound_ptnum, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0))
  br label %cond

cond:                                             ; preds = %end7, %__llvm_entry
  %npt.0 = phi i64 [ 0, %__llvm_entry ], [ %output25, %end7 ]
  %F.0 = phi <3 x double> [ zeroinitializer, %__llvm_entry ], [ %F.1, %end7 ]
  %_bound_numpt2 = load i64, i64* %_bound_numpt
  %return3 = call i64 @"lt@III"(i64 %npt.0, i64 %_bound_numpt2)
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %_bound_ptnum5 = load i64, i64* %_bound_ptnum
  %return6 = call i64 @"ne@III"(i64 %npt.0, i64 %_bound_ptnum5)
  %1 = icmp ne i64 %return6, 0
  br i1 %1, label %true, label %end7

end:                                              ; preds = %cond
  %_bound_P26 = load <3 x double>, <3 x double>* %_bound_P
  %return27 = call <3 x double> @"clamp@VVVV"(<3 x double> %_bound_P26, <3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  %return29 = call double @"getcomp@FVI"(<3 x double> %return27, i64 0)
  %return31 = call double @"getcomp@FVI"(<3 x double> %return27, i64 2)
  %return33 = call double @"getcomp@FVI"(<3 x double> %return27, i64 1)
  %return34 = call <3 x double> @"set@VFFF"(double %return29, double %return31, double %return33)
  %return36 = call <3 x double> @"uvsample@VISSV"(i64 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), <3 x double> %return34)
  %return40 = call double @"chf@FS"(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @4, i64 0, i64 0))
  %cast41 = call <3 x double> @"set@VF"(double %return40)
  %output42 = call <3 x double> @"mul@VV"(<3 x double> %F.0, <3 x double> %cast41)
  %output43 = call <3 x double> @"sub@VV"(<3 x double> %return36, <3 x double> %output42)
  %cast44 = call <3 x double> @"set@VF"(double %return)
  %output45 = call <3 x double> @"mul@VV"(<3 x double> %cast44, <3 x double> %output43)
  %_bound_P46 = load <3 x double>, <3 x double>* %_bound_P
  %output48 = call <3 x double> @"add@VV"(<3 x double> %_bound_P46, <3 x double> %output45)
  store <3 x double> %output48, <3 x double>* %_bound_P
  ret void

true:                                             ; preds = %body
  %return9 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %npt.0)
  %_bound_P11 = load <3 x double>, <3 x double>* %_bound_P
  %output = call <3 x double> @"sub@VV"(<3 x double> %return9, <3 x double> %_bound_P11)
  %return12 = call <3 x double> @"normalize@VV"(<3 x double> %output)
  %_bound_P13 = load <3 x double>, <3 x double>* %_bound_P
  %return15 = call double @"distance@FVV"(<3 x double> %_bound_P13, <3 x double> %return9)
  %output17 = call double @"div@FF"(double 1.000000e+00, double %return15)
  %cast = call <3 x double> @"set@VF"(double %output17)
  %output19 = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %return12)
  %output22 = call <3 x double> @"add@VV"(<3 x double> %F.0, <3 x double> %output19)
  br label %end7

end7:                                             ; preds = %true, %body
  %F.1 = phi <3 x double> [ %output22, %true ], [ %F.0, %body ]
  %output25 = add i64 %npt.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"clamp@VVVV"(<3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind
declare <3 x double> @"uvsample@VISSV"(i64, i8*, i8*, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %numpt, i64 %ptnum, <3 x double> %P) #2 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca i64
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %numpt, i64* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@IIV"(i64* %0, i64* %1, <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i64 0, i64 0), i64 %numpt) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i64 0, i64 0), i64 %ptnum) #3
  %evalue5 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue5) #3
  store i64 %gvalue, i64* @numpt
  store i64 %gvalue4, i64* @ptnum
  store <3 x double> %gvalue6, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [24 x i8] c"[_a-zA-Z]+[_a-zA-Z0-9]*\00"
@1 = private constant [10 x i8] c"dimension\00"
@2 = private constant [8 x i8] c"default\00"
@3 = private constant [8 x i8] c"pattern\00"
@4 = private constant [16 x i8] c"attribute_class\00"

; Function Attrs: alwaysinline nounwind
define private void @__vex_snippet_snippet() #0 {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca i8*
  %return = call double @"ch@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  %return1 = call i8* @"chs@SS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0))
  %return2 = call i8* @"chs@SS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @4, i64 0, i64 0))
  %return4 = call i8** @"split@[SS"(i8* %return1)
  %return6 = call i64 @"len@I[S"(i8** %return4)
  br label %cond

cond:                                             ; preds = %end17, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %end17 ]
  %return9 = call i64 @"lt@III"(i64 %i.0, i64 %return6)
  %2 = icmp ne i64 %return9, 0
  br i1 %2, label %body, label %end

body:                                             ; preds = %cond
  %return12 = call i8* @"getcomp@S[SI"(i8** %return4, i64 %i.0)
  store i8* %return12, i8** %0
  store i8* %return1, i8** %1
  %getCreateSize = call i64 @"getCreateSize@ISS"(i8** %0, i8** %1)
  %return16 = call i64 @"eq@III"(i64 %getCreateSize, i64 1)
  %3 = icmp ne i64 %return16, 0
  br i1 %3, label %true, label %false

end:                                              ; preds = %cond
  ret void

true:                                             ; preds = %body
  %return21 = call i64 @"addattrib@IISSF"(i64 0, i8* %return2, i8* %return12, double %return)
  br label %end17

false:                                            ; preds = %body
  %return23 = call i64 @"eq@III"(i64 %getCreateSize, i64 3)
  %4 = icmp ne i64 %return23, 0
  br i1 %4, label %true24, label %end17

end17:                                            ; preds = %false, %true24, %true
  %output = add i64 %i.0, 1
  br label %cond

true24:                                           ; preds = %false
  %return31 = call <3 x double> @"set@VFFF"(double %return, double %return, double %return)
  %return32 = call i64 @"addattrib@IISSV"(i64 0, i8* %return2, i8* %return12, <3 x double> %return31)
  br label %end17
}

; Function Attrs: alwaysinline nounwind
define private i64 @"getCreateSize@ISS"(i8** %aname, i8** %pattern) #0 {
__llvm_entry:
  %aname1 = load i8*, i8** %aname
  %return = call i64 @"haspointattrib@IIS"(i64 0, i8* %aname1)
  %pattern2 = load i8*, i8** %pattern
  %aname3 = load i8*, i8** %aname
  %return4 = call i64 @"match@ISS"(i8* %pattern2, i8* %aname3)
  %return5 = call i64 @"not@II"(i64 %return4)
  %return6 = call i64 @"or@III"(i64 %return, i64 %return5)
  %return8 = call i64 @"re_match@ISS"(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @0, i64 0, i64 0), i8* %aname3)
  %return9 = call i64 @"not@II"(i64 %return8)
  %return10 = call i64 @"or@III"(i64 %return6, i64 %return9)
  %0 = icmp ne i64 %return10, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  br label %UnifiedReturnBlock

false:                                            ; preds = %__llvm_entry
  %return11 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i64 0, i64 0))
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %false, %true
  %UnifiedRetVal = phi i64 [ 0, %true ], [ %return11, %false ]
  ret i64 %UnifiedRetVal
}

; Function Attrs: nounwind
declare i64 @"haspointattrib@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"match@ISS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #2

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"re_match@ISS"(i8*, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #2

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind readnone
declare i8** @"split@[SS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #2

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"addattrib@IISSF"(i64, i8*, i8*, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #2

; Function Attrs: nounwind
declare i64 @"addattrib@IISSV"(i64, i8*, i8*, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet() #1 {
__llvm_entry:
  call void @__vex_snippet_snippet()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"__density\00"
@1 = private constant [2 x i8] c"N\00"
@__pscale = external global double
@N = external global <3 x double>
@P = external global <3 x double>
@ptnum = external global i64
@__sourceprim = external global i64
@__sourceprimuv = external global <3 x double>
@2 = private constant [9 x i8] c"__pscale\00"
@3 = private constant [2 x i8] c"P\00"
@4 = private constant [6 x i8] c"ptnum\00"
@5 = private constant [13 x i8] c"__sourceprim\00"
@6 = private constant [15 x i8] c"__sourceprimuv\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FVVIIV"(double* %_bound___pscale, <3 x double>* %_bound_N, <3 x double>* %_bound_P, i64* %_bound_ptnum, i64* %_bound___sourceprim, <3 x double>* %_bound___sourceprimuv) #0 {
__llvm_entry:
  %_bound___pscale1 = load double, double* %_bound___pscale
  %_bound_N2 = load <3 x double>, <3 x double>* %_bound_N
  %return = call <3 x double> @"normalize@VV"(<3 x double> %_bound_N2)
  %cast = call <3 x double> @"set@VF"(double %_bound___pscale1)
  %output = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %return)
  %_bound_P3 = load <3 x double>, <3 x double>* %_bound_P
  %return5 = call { i64, <3 x double>, <3 x double> } @"intersect@IIVVVV"(i64 1, <3 x double> %_bound_P3, <3 x double> %output)
  %return6 = extractvalue { i64, <3 x double>, <3 x double> } %return5, 0
  %output7 = extractvalue { i64, <3 x double>, <3 x double> } %return5, 1
  %output8 = extractvalue { i64, <3 x double>, <3 x double> } %return5, 2
  %return10 = call i64 @"lt@III"(i64 %return6, i64 0)
  %0 = icmp ne i64 %return10, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_bound_P11 = load <3 x double>, <3 x double>* %_bound_P
  %return13 = call <3 x double> @"neg@VV"(<3 x double> %output)
  %return14 = call { i64, <3 x double>, <3 x double> } @"intersect@IIVVVV"(i64 1, <3 x double> %_bound_P11, <3 x double> %return13)
  %return15 = extractvalue { i64, <3 x double>, <3 x double> } %return14, 0
  %output16 = extractvalue { i64, <3 x double>, <3 x double> } %return14, 1
  %output17 = extractvalue { i64, <3 x double>, <3 x double> } %return14, 2
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %uvw.0 = phi <3 x double> [ %output17, %true ], [ %output8, %__llvm_entry ]
  %pr.0 = phi i64 [ %return15, %true ], [ %return6, %__llvm_entry ]
  %pos.0 = phi <3 x double> [ %output16, %true ], [ %output7, %__llvm_entry ]
  %return19 = call i64 @"lt@III"(i64 %pr.0, i64 0)
  %1 = icmp ne i64 %return19, 0
  br i1 %1, label %true20, label %false

true20:                                           ; preds = %end
  %return22 = call i64 @"geoself@I"()
  %_bound_ptnum23 = load i64, i64* %_bound_ptnum
  %return24 = call i64 @"removepoint@III"(i64 %return22, i64 %_bound_ptnum23)
  br label %end21

false:                                            ; preds = %end
  %return27 = call double @"primuv@FISIV"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0), i64 %pr.0, <3 x double> %uvw.0)
  %return29 = fcmp ole double %return27, 0.000000e+00
  br i1 %return29, label %true31, label %false32

end21:                                            ; preds = %true31, %false32, %true20
  ret void

true31:                                           ; preds = %false
  %return34 = call i64 @"geoself@I"()
  %_bound_ptnum35 = load i64, i64* %_bound_ptnum
  %return36 = call i64 @"removepoint@III"(i64 %return34, i64 %_bound_ptnum35)
  br label %end21

false32:                                          ; preds = %false
  store i64 %pr.0, i64* %_bound___sourceprim
  store <3 x double> %uvw.0, <3 x double>* %_bound___sourceprimuv
  store <3 x double> %pos.0, <3 x double>* %_bound_P
  %return42 = call <3 x double> @"primuv@VISIV"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), i64 %pr.0, <3 x double> %uvw.0)
  store <3 x double> %return42, <3 x double>* %_bound_N
  br label %end21
}

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare { i64, <3 x double>, <3 x double> } @"intersect@IIVVVV"(i64, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #2

; Function Attrs: nounwind
declare i64 @"geoself@I"() #1

; Function Attrs: nounwind
declare i64 @"removepoint@III"(i64, i64) #1

; Function Attrs: nounwind
declare double @"primuv@FISIV"(i64, i8*, i64, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"primuv@VISIV"(i64, i8*, i64, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %__pscale, <3 x double> %N, <3 x double> %P, i64 %ptnum, i64 %__sourceprim, <3 x double> %__sourceprimuv) #1 {
__llvm_entry:
  %"<N>" = alloca <3 x double>
  %"<P>" = alloca <3 x double>
  %"<__sourceprim>" = alloca i64
  %"<__sourceprimuv>" = alloca <3 x double>
  %0 = alloca double
  %1 = alloca i64
  store <3 x double> %N, <3 x double>* %"<N>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %__sourceprim, i64* %"<__sourceprim>"
  store <3 x double> %__sourceprimuv, <3 x double>* %"<__sourceprimuv>"
  store double %__pscale, double* %0
  store i64 %ptnum, i64* %1
  call void @"__vex_snippet_snippet@FVVIIV"(double* %0, <3 x double>* %"<N>", <3 x double>* %"<P>", i64* %1, i64* %"<__sourceprim>", <3 x double>* %"<__sourceprimuv>")
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), double %__pscale) #3
  %evalue3 = load <3 x double>, <3 x double>* %"<N>"
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %evalue3) #3
  %evalue5 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0), <3 x double> %evalue5) #3
  %gvalue8 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), i64 %ptnum) #3
  %evalue9 = load i64, i64* %"<__sourceprim>"
  %gvalue10 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @5, i64 0, i64 0), i64 %evalue9) #3
  %evalue11 = load <3 x double>, <3 x double>* %"<__sourceprimuv>"
  %gvalue12 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @6, i64 0, i64 0), <3 x double> %evalue11) #3
  store double %gvalue, double* @__pscale
  store <3 x double> %gvalue4, <3 x double>* @N
  store <3 x double> %gvalue6, <3 x double>* @P
  store i64 %gvalue8, i64* @ptnum
  store i64 %gvalue10, i64* @__sourceprim
  store <3 x double> %gvalue12, <3 x double>* @__sourceprimuv
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, <3 x double> zeroinitializer, <3 x double> zeroinitializer, i64 0, i64 0, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

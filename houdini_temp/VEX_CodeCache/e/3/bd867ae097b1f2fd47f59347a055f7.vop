;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"parm\00"
@1 = private constant [9 x i8] c"nodepath\00"
@2 = private constant [6 x i8] c"value\00"
@3 = private constant [6 x i8] c"label\00"
@4 = private constant [1 x i8] zeroinitializer
@name = external global i8*
@ptnum = external global i64
@path = external global i8*
@value = external global i8*
@label = external global i8*
@5 = private constant [5 x i8] c"name\00"
@6 = private constant [6 x i8] c"ptnum\00"
@7 = private constant [5 x i8] c"path\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@SISSS"(i8** %_bound_name, i64* %_bound_ptnum, i8** %_bound_path, i8** %_bound_value, i8** %_bound_label) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call i8* @"itoa@SI"(i64 %_bound_ptnum1)
  %output = call i8* @"add@SS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0), i8* %return)
  %return2 = call i8* @"chs@SS"(i8* %output)
  store i8* %return2, i8** %_bound_name
  %_bound_ptnum3 = load i64, i64* %_bound_ptnum
  %return4 = call i8* @"itoa@SI"(i64 %_bound_ptnum3)
  %output5 = call i8* @"add@SS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0), i8* %return4)
  %return6 = call i8* @"chs@SS"(i8* %output5)
  store i8* %return6, i8** %_bound_path
  %_bound_ptnum7 = load i64, i64* %_bound_ptnum
  %return8 = call i8* @"itoa@SI"(i64 %_bound_ptnum7)
  %output9 = call i8* @"add@SS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i8* %return8)
  %return10 = call i8* @"chs@SS"(i8* %output9)
  store i8* %return10, i8** %_bound_value
  %_bound_ptnum11 = load i64, i64* %_bound_ptnum
  %return12 = call i8* @"itoa@SI"(i64 %_bound_ptnum11)
  %output13 = call i8* @"add@SS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i8* %return12)
  %return14 = call i8* @"chs@SS"(i8* %output13)
  store i8* %return14, i8** %_bound_label
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #1

; Function Attrs: nounwind readnone
declare i8* @"add@SS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind
define void @__vex_snippet(i8* %name, i64 %ptnum, i8* %path, i8* %value, i8* %label) #2 {
__llvm_entry:
  %"<path>" = alloca i8*
  %"<value>" = alloca i8*
  %"<label>" = alloca i8*
  %0 = alloca i64
  %"<name>" = alloca i8*
  store i8* %name, i8** %"<name>"
  store i8* %path, i8** %"<path>"
  store i8* %value, i8** %"<value>"
  store i8* %label, i8** %"<label>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@SISSS"(i8** %"<name>", i64* %0, i8** %"<path>", i8** %"<value>", i8** %"<label>")
  %evalue = load i8*, i8** %"<name>"
  %gvalue = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i64 0, i64 0), i8* %evalue) #3
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i64 0, i64 0), i64 %ptnum) #3
  %evalue4 = load i8*, i8** %"<path>"
  %gvalue5 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i64 0, i64 0), i8* %evalue4) #3
  %evalue6 = load i8*, i8** %"<value>"
  %gvalue7 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i64 0, i64 0), i8* %evalue6) #3
  %evalue8 = load i8*, i8** %"<label>"
  %gvalue9 = call i8* @"_export@SSS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), i8* %evalue8) #3
  store i8* %gvalue, i8** @name
  store i64 %gvalue3, i64* @ptnum
  store i8* %gvalue5, i8** @path
  store i8* %gvalue7, i8** @value
  store i8* %gvalue9, i8** @label
  ret void
}

declare i8* @"_export@SSS"(i8*, i8*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @4, i64 0, i64 0), i64 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @4, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @4, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @4, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

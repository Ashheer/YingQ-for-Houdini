;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [6 x i8] c"order\00"
@1 = private constant [11 x i8] c"outputtype\00"
@2 = private constant [21 x i8] c"expandroundedcorners\00"
@3 = private constant [7 x i8] c"bezier\00"
@4 = private constant [7 x i8] c"closed\00"
@5 = private constant [0 x i64] zeroinitializer
@6 = private constant [22 x i8] c"__rounded_corner_part\00"
@7 = private constant [0 x double] zeroinitializer
@8 = private constant [2 x i8] c"P\00"
@9 = private constant [24 x i8] c"__rounded_corner_radius\00"
@10 = private constant [0 x <3 x double>] zeroinitializer
@11 = private constant [4 x double] zeroinitializer
@primnum = external global i64
@12 = private constant [8 x i8] c"primnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@I"(i64* %_bound_primnum) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i64 0, i64 0))
  %return1 = call i8* @"chs@SS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @2, i64 0, i64 0))
  %return4 = call i64 @"ne@ISS"(i8* %return1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0))
  %return6 = call i64 @"lt@III"(i64 %return, i64 4)
  %return7 = call i64 @"or@III"(i64 %return4, i64 %return6)
  %0 = icmp ne i64 %return7, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %cond428, %__llvm_entry
  ret void

end:                                              ; preds = %__llvm_entry
  %_bound_primnum8 = load i64, i64* %_bound_primnum
  %return10 = call i64 @"primintrinsic@IISI"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0), i64 %_bound_primnum8)
  %return12 = call i64 @"primvertexcount@III"(i64 0, i64 %_bound_primnum8)
  %output = sub i64 %return12, 1
  %output16 = sub i64 %return, 1
  %output17 = call i64 @"div@II"(i64 %output, i64 %output16)
  %output18 = add i64 %output17, 1
  %output19 = call i64* @"resize@[II"(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @5, i64 0, i64 0), i64 %output18)
  %return22 = call i64 @"len@I[I"(i64* %output19)
  %output23 = call i64* @"resize@[II"(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @5, i64 0, i64 0), i64 %return22)
  br label %cond

cond:                                             ; preds = %iter, %end
  %idx.0 = phi i64 [ 0, %end ], [ %output53, %iter ]
  %n.0 = phi i64 [ 0, %end ], [ %n.1, %iter ]
  %control_idxs.0 = phi i64* [ %output23, %end ], [ %control_idxs.1, %iter ]
  %control_points.0 = phi i64* [ %output19, %end ], [ %control_points.1, %iter ]
  %return26 = call i64 @"lt@III"(i64 %idx.0, i64 %return12)
  %1 = icmp ne i64 %return26, 0
  br i1 %1, label %body, label %end27

body:                                             ; preds = %cond
  %return30 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum8, i64 %idx.0)
  %return32 = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @6, i64 0, i64 0), i64 %return30)
  %return34 = call i64 @"gt@III"(i64 %return32, i64 0)
  %2 = icmp ne i64 %return34, 0
  br i1 %2, label %iter, label %end36

end27:                                            ; preds = %cond
  %output56 = call i64* @"resize@[II"(i64* %control_points.0, i64 %n.0)
  %output59 = call i64* @"resize@[II"(i64* %control_idxs.0, i64 %n.0)
  %output61 = sub i64 %n.0, 1
  %output63 = add i64 %output61, %return10
  %output66 = call double* @"resize@[FI"(double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), i64 %output63)
  %output69 = call double* @"resize@[FI"(double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), i64 %n.0)
  br label %cond73

iter:                                             ; preds = %body, %end36
  %n.1 = phi i64 [ %n.0, %body ], [ %output49, %end36 ]
  %control_idxs.1 = phi i64* [ %control_idxs.0, %body ], [ %output47, %end36 ]
  %control_points.1 = phi i64* [ %control_points.0, %body ], [ %output41, %end36 ]
  %output53 = add i64 %idx.0, %output16
  br label %cond

end36:                                            ; preds = %body
  %return39 = call { i64, i64* } @"setcomp@I[III"(i64* %control_points.0, i64 %return30, i64 %n.0)
  %output41 = extractvalue { i64, i64* } %return39, 1
  %return45 = call { i64, i64* } @"setcomp@I[III"(i64* %control_idxs.0, i64 %idx.0, i64 %n.0)
  %output47 = extractvalue { i64, i64* } %return45, 1
  %output49 = add i64 %n.0, 1
  br label %iter

cond73:                                           ; preds = %body74, %end27
  %i.0 = phi i64 [ 0, %end27 ], [ %output86, %body74 ]
  %side_lengths.0 = phi double* [ %output66, %end27 ], [ %output99, %body74 ]
  %return77 = call i64 @"lt@III"(i64 %i.0, i64 %output63)
  %3 = icmp ne i64 %return77, 0
  br i1 %3, label %body74, label %end78

body74:                                           ; preds = %cond73
  %return82 = call i64 @"getcomp@I[II"(i64* %output56, i64 %i.0)
  %return83 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i64 %return82)
  %output86 = add i64 %i.0, 1
  %return88 = call i64 @"mod@III"(i64 %output86, i64 %n.0)
  %return89 = call i64 @"getcomp@I[II"(i64* %output56, i64 %return88)
  %return90 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i64 %return89)
  %output94 = call <3 x double> @"sub@VV"(<3 x double> %return90, <3 x double> %return83)
  %return95 = call double @"length@FV"(<3 x double> %output94)
  %return97 = call { double, double* } @"setcomp@F[FFI"(double* %side_lengths.0, double %return95, i64 %i.0)
  %output99 = extractvalue { double, double* } %return97, 1
  br label %cond73

end78:                                            ; preds = %cond73
  br label %cond103

cond103:                                          ; preds = %iter109, %end78
  %i102.0 = phi i64 [ 0, %end78 ], [ %output190, %iter109 ]
  %dists.0 = phi double* [ %output69, %end78 ], [ %dists.1, %iter109 ]
  %raw_dists.0 = phi double* [ %output69, %end78 ], [ %raw_dists.1, %iter109 ]
  %return107 = call i64 @"lt@III"(i64 %i102.0, i64 %n.0)
  %4 = icmp ne i64 %return107, 0
  br i1 %4, label %body104, label %end108

body104:                                          ; preds = %cond103
  %return112 = call i64 @"getcomp@I[II"(i64* %output56, i64 %i102.0)
  %return115 = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @6, i64 0, i64 0), i64 %return112)
  %return117 = call i64 @"ne@III"(i64 %return115, i64 0)
  %5 = icmp ne i64 %return117, 0
  br i1 %5, label %iter109, label %end119

end108:                                           ; preds = %cond103
  %return192 = call double @"getcomp@F[FI"(double* %dists.0, i64 0)
  br label %cond194

iter109:                                          ; preds = %body104, %end142
  %dists.1 = phi double* [ %dists.0, %body104 ], [ %output188, %end142 ]
  %raw_dists.1 = phi double* [ %raw_dists.0, %body104 ], [ %output168, %end142 ]
  %output190 = add i64 %i102.0, 1
  br label %cond103

end119:                                           ; preds = %body104
  %output122 = sub i64 %i102.0, 1
  %output124 = add i64 %output122, %n.0
  %return126 = call i64 @"mod@III"(i64 %output124, i64 %n.0)
  %return127 = call i64 @"getcomp@I[II"(i64* %output56, i64 %return126)
  %output130 = add i64 %i102.0, 1
  %return132 = call i64 @"mod@III"(i64 %output130, i64 %n.0)
  %return133 = call i64 @"getcomp@I[II"(i64* %output56, i64 %return132)
  %return135 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i64 %return127)
  %return137 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i64 %return133)
  %return139 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i64 %return112)
  %6 = icmp ne i64 %return2, 0
  br i1 %6, label %true141, label %end142

true141:                                          ; preds = %end119
  %return144 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @9, i64 0, i64 0), i64 %return112)
  br label %end142

end142:                                           ; preds = %true141, %end119
  %radius.0 = phi double [ %return144, %true141 ], [ 0.000000e+00, %end119 ]
  %output147 = call <3 x double> @"sub@VV"(<3 x double> %return139, <3 x double> %return135)
  %return148 = call <3 x double> @"normalize@VV"(<3 x double> %output147)
  %output151 = call <3 x double> @"sub@VV"(<3 x double> %return139, <3 x double> %return137)
  %return152 = call <3 x double> @"normalize@VV"(<3 x double> %output151)
  %return153 = call double @"dot@FVV"(<3 x double> %return148, <3 x double> %return152)
  %output157 = fadd double 1.000000e+00, %return153
  %output158 = fmul double %radius.0, %output157
  %output161 = fmul double %return153, %return153
  %output162 = fsub double 1.000000e+00, %output161
  %return163 = call double @"sqrt@FF"(double %output162)
  %output164 = call double @"div@FF"(double %output158, double %return163)
  %return166 = call { double, double* } @"setcomp@F[FFI"(double* %raw_dists.0, double %output164, i64 %i102.0)
  %output168 = extractvalue { double, double* } %return166, 1
  %return172 = call double @"getcomp@F[FI"(double* %output168, i64 %i102.0)
  %output177 = add i64 %output122, %output63
  %return179 = call i64 @"mod@III"(i64 %output177, i64 %output63)
  %return180 = call double @"getcomp@F[FI"(double* %side_lengths.0, i64 %return179)
  %return183 = call double @"getcomp@F[FI"(double* %side_lengths.0, i64 %i102.0)
  %return184 = call double @"min@FFF:F"(double %return172, double %return180, double %return183)
  %return186 = call { double, double* } @"setcomp@F[FFI"(double* %dists.0, double %return184, i64 %i102.0)
  %output188 = extractvalue { double, double* } %return186, 1
  br label %iter109

cond194:                                          ; preds = %iter200, %end108
  %i193.0 = phi i64 [ 0, %end108 ], [ %output202, %iter200 ]
  %dists.2 = phi double* [ %dists.0, %end108 ], [ %dists.3, %iter200 ]
  %return198 = call i64 @"lt@III"(i64 %i193.0, i64 %output63)
  %7 = icmp ne i64 %return198, 0
  br i1 %7, label %body195, label %end199

body195:                                          ; preds = %cond194
  %output202 = add i64 %i193.0, 1
  %return204 = call i64 @"mod@III"(i64 %output202, i64 %n.0)
  %return206 = call i64 @"eq@III"(i64 %return204, i64 0)
  %8 = icmp ne i64 %return206, 0
  br i1 %8, label %true207, label %end208

end199:                                           ; preds = %cond194
  br label %cond313

iter200:                                          ; preds = %true281, %false282, %true254, %end208
  %dists.3 = phi double* [ %dists.4, %end208 ], [ %output272, %true254 ], [ %output295, %true281 ], [ %output307, %false282 ]
  br label %cond194

true207:                                          ; preds = %body195
  %return212 = call double @"getcomp@F[FI"(double* %side_lengths.0, i64 0)
  %return214 = call double @"getcomp@F[FI"(double* %dists.2, i64 1)
  %output215 = fsub double %return212, %return214
  %return216 = call double @"min@FFF"(double %return192, double %output215)
  %return218 = call { double, double* } @"setcomp@F[FFI"(double* %dists.2, double %return216, i64 %return204)
  %output220 = extractvalue { double, double* } %return218, 1
  br label %end208

end208:                                           ; preds = %true207, %body195
  %dists.4 = phi double* [ %output220, %true207 ], [ %dists.2, %body195 ]
  %return223 = call double @"getcomp@F[FI"(double* %dists.4, i64 %i193.0)
  %return226 = call double @"getcomp@F[FI"(double* %dists.4, i64 %return204)
  %output227 = fadd double %return223, %return226
  %return230 = call double @"getcomp@F[FI"(double* %side_lengths.0, i64 %i193.0)
  %return231 = fcmp olt double %output227, %return230
  br i1 %return231, label %iter200, label %end234

end234:                                           ; preds = %end208
  %output238 = fmul double 2.000000e+00, %return223
  %return242 = fcmp oge double %output238, %return230
  %return243 = zext i1 %return242 to i64
  %output247 = fmul double 2.000000e+00, %return226
  %return251 = fcmp oge double %output247, %return230
  %return252 = zext i1 %return251 to i64
  %return253 = call i64 @"and@III"(i64 %return243, i64 %return252)
  %9 = icmp ne i64 %return253, 0
  br i1 %9, label %true254, label %false

true254:                                          ; preds = %end234
  %output260 = fmul double 5.000000e-01, %return230
  %return262 = call { double, double* } @"setcomp@F[FFI"(double* %dists.4, double %output260, i64 %i193.0)
  %output264 = extractvalue { double, double* } %return262, 1
  %return268 = call double @"getcomp@F[FI"(double* %output264, i64 %i193.0)
  %return270 = call { double, double* } @"setcomp@F[FFI"(double* %output264, double %return268, i64 %return204)
  %output272 = extractvalue { double, double* } %return270, 1
  br label %iter200

false:                                            ; preds = %end234
  %return279 = fcmp olt double %return223, %return226
  br i1 %return279, label %true281, label %false282

true281:                                          ; preds = %false
  %output291 = fsub double %return230, %return223
  %return293 = call { double, double* } @"setcomp@F[FFI"(double* %dists.4, double %output291, i64 %return204)
  %output295 = extractvalue { double, double* } %return293, 1
  br label %iter200

false282:                                         ; preds = %false
  %output303 = fsub double %return230, %return226
  %return305 = call { double, double* } @"setcomp@F[FFI"(double* %dists.4, double %output303, i64 %i193.0)
  %output307 = extractvalue { double, double* } %return305, 1
  br label %iter200

cond313:                                          ; preds = %end330, %end199
  %i_next.0 = phi i64 [ %output61, %end199 ], [ %output423, %end330 ]
  %dists.5 = phi double* [ %dists.2, %end199 ], [ %output421, %end330 ]
  %return316 = call i64 @"ge@III"(i64 %i_next.0, i64 0)
  %10 = icmp ne i64 %return316, 0
  br i1 %10, label %body314, label %end317

body314:                                          ; preds = %cond313
  %return321 = call i64 @"gt@III"(i64 %i_next.0, i64 0)
  %return325 = call i64 @"lt@III"(i64 %i_next.0, i64 %output61)
  %return326 = call i64 @"and@III"(i64 %return321, i64 %return325)
  %return327 = call i64 @"or@III"(i64 %return10, i64 %return326)
  %11 = icmp ne i64 %return327, 0
  br i1 %11, label %true328, label %false329

end317:                                           ; preds = %cond313
  br label %cond428

true328:                                          ; preds = %body314
  %output334 = sub i64 %i_next.0, 1
  %output336 = add i64 %output334, %output63
  %return338 = call i64 @"mod@III"(i64 %output336, i64 %output63)
  %return339 = call double @"getcomp@F[FI"(double* %side_lengths.0, i64 %return338)
  %output344 = add i64 %output334, %n.0
  %return346 = call i64 @"mod@III"(i64 %output344, i64 %n.0)
  %return347 = call double @"getcomp@F[FI"(double* %dists.5, i64 %return346)
  %output348 = fsub double %return339, %return347
  %return351 = call double @"getcomp@F[FI"(double* %side_lengths.0, i64 %i_next.0)
  %output354 = add i64 %i_next.0, 1
  %return356 = call i64 @"mod@III"(i64 %output354, i64 %n.0)
  %return357 = call double @"getcomp@F[FI"(double* %dists.5, i64 %return356)
  %output358 = fsub double %return351, %return357
  %return359 = call double @"min@FFF"(double %output348, double %output358)
  %return361 = call { double, double* } @"setcomp@F[FFI"(double* %dists.5, double %return359, i64 %i_next.0)
  %output363 = extractvalue { double, double* } %return361, 1
  br label %end330

false329:                                         ; preds = %body314
  %12 = icmp ne i64 %return321, 0
  br i1 %12, label %true366, label %false367

end330:                                           ; preds = %false367, %true395, %true366, %true328
  %dists.6 = phi double* [ %output363, %true328 ], [ %output390, %true366 ], [ %output409, %true395 ], [ %dists.5, %false367 ]
  %return413 = call double @"getcomp@F[FI"(double* %dists.6, i64 %i_next.0)
  %return416 = call double @"getcomp@F[FI"(double* %raw_dists.0, i64 %i_next.0)
  %return417 = call double @"min@FFF"(double %return413, double %return416)
  %return419 = call { double, double* } @"setcomp@F[FFI"(double* %dists.6, double %return417, i64 %i_next.0)
  %output421 = extractvalue { double, double* } %return419, 1
  %output423 = sub i64 %i_next.0, 1
  br label %cond313

true366:                                          ; preds = %false329
  %output372 = sub i64 %i_next.0, 1
  %output374 = add i64 %output372, %output63
  %return376 = call i64 @"mod@III"(i64 %output374, i64 %output63)
  %return377 = call double @"getcomp@F[FI"(double* %side_lengths.0, i64 %return376)
  %output382 = add i64 %output372, %n.0
  %return384 = call i64 @"mod@III"(i64 %output382, i64 %n.0)
  %return385 = call double @"getcomp@F[FI"(double* %dists.5, i64 %return384)
  %output386 = fsub double %return377, %return385
  %return388 = call { double, double* } @"setcomp@F[FFI"(double* %dists.5, double %output386, i64 %i_next.0)
  %output390 = extractvalue { double, double* } %return388, 1
  br label %end330

false367:                                         ; preds = %false329
  %13 = icmp ne i64 %return325, 0
  br i1 %13, label %true395, label %end330

true395:                                          ; preds = %false367
  %return400 = call double @"getcomp@F[FI"(double* %side_lengths.0, i64 %i_next.0)
  %output403 = add i64 %i_next.0, 1
  %return404 = call double @"getcomp@F[FI"(double* %dists.5, i64 %output403)
  %output405 = fsub double %return400, %return404
  %return407 = call { double, double* } @"setcomp@F[FFI"(double* %dists.5, double %output405, i64 %i_next.0)
  %output409 = extractvalue { double, double* } %return407, 1
  br label %end330

cond428:                                          ; preds = %iter434, %end317
  %i427.0 = phi i64 [ 0, %end317 ], [ %output764, %iter434 ]
  %return432 = call i64 @"lt@III"(i64 %i427.0, i64 %n.0)
  %14 = icmp ne i64 %return432, 0
  br i1 %14, label %body429, label %true

body429:                                          ; preds = %cond428
  %return438 = call i64 @"getcomp@I[II"(i64* %output59, i64 %i427.0)
  %return440 = call i64 @"not@II"(i64 %return10)
  %return442 = call i64 @"eq@III"(i64 %return438, i64 0)
  %output446 = sub i64 %return12, %return
  %return447 = call i64 @"ge@III"(i64 %return438, i64 %output446)
  %return448 = call i64 @"or@III"(i64 %return442, i64 %return447)
  %return449 = call i64 @"and@III"(i64 %return440, i64 %return448)
  %15 = icmp ne i64 %return449, 0
  br i1 %15, label %iter434, label %end451

iter434:                                          ; preds = %end451, %body429, %end682
  %output764 = add i64 %i427.0, 1
  br label %cond428

end451:                                           ; preds = %body429
  %return455 = call i64 @"getcomp@I[II"(i64* %output56, i64 %i427.0)
  %return458 = call i64 @"point@IISI"(i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @6, i64 0, i64 0), i64 %return455)
  %return460 = call i64 @"ne@III"(i64 %return458, i64 0)
  %16 = icmp ne i64 %return460, 0
  br i1 %16, label %iter434, label %end462

end462:                                           ; preds = %end451
  %17 = icmp ne i64 %return2, 0
  br i1 %17, label %true465, label %end466

true465:                                          ; preds = %end462
  %return468 = call double @"point@FISI"(i64 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @9, i64 0, i64 0), i64 %return455)
  br label %end466

end466:                                           ; preds = %true465, %end462
  %radius463.0 = phi double [ %return468, %true465 ], [ 0.000000e+00, %end462 ]
  %return472 = call double @"getcomp@F[FI"(double* %dists.5, i64 %i427.0)
  %return475 = call double @"getcomp@F[FI"(double* %raw_dists.0, i64 %i427.0)
  %output476 = call double @"div@FF"(double %return472, double %return475)
  %output477 = fmul double %radius463.0, %output476
  %return483 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i64 %return455)
  %output487 = sub i64 %i427.0, 1
  %output489 = add i64 %output487, %n.0
  %return491 = call i64 @"mod@III"(i64 %output489, i64 %n.0)
  %return492 = call i64 @"getcomp@I[II"(i64* %output56, i64 %return491)
  %return493 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i64 %return492)
  %output497 = add i64 %i427.0, 1
  %return499 = call i64 @"mod@III"(i64 %output497, i64 %n.0)
  %return500 = call i64 @"getcomp@I[II"(i64* %output56, i64 %return499)
  %return501 = call <3 x double> @"point@VISI"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i64 %return500)
  %output504 = call <3 x double> @"sub@VV"(<3 x double> %return483, <3 x double> %return493)
  %return505 = call <3 x double> @"normalize@VV"(<3 x double> %output504)
  %output508 = call <3 x double> @"sub@VV"(<3 x double> %return483, <3 x double> %return501)
  %return509 = call <3 x double> @"normalize@VV"(<3 x double> %output508)
  %output512 = fmul double %return472, %return472
  %output515 = fmul double %output477, %output477
  %output516 = fadd double %output512, %output515
  %return517 = call double @"sqrt@FF"(double %output516)
  %output520 = call <3 x double> @"add@VV"(<3 x double> %return509, <3 x double> %return505)
  %return521 = call <3 x double> @"normalize@VV"(<3 x double> %output520)
  %cast = call <3 x double> @"set@VF"(double %return517)
  %output525 = call <3 x double> @"mul@VV"(<3 x double> %return521, <3 x double> %cast)
  %output526 = call <3 x double> @"sub@VV"(<3 x double> %return483, <3 x double> %output525)
  %cast530 = call <3 x double> @"set@VF"(double %output477)
  %output531 = call <3 x double> @"mul@VV"(<3 x double> %return521, <3 x double> %cast530)
  %output532 = call <3 x double> @"add@VV"(<3 x double> %output526, <3 x double> %output531)
  %output534 = call <3 x double>* @"resize@[VI"(<3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @10, i64 0, i64 0), i64 4)
  %cast538 = call <3 x double> @"set@VF"(double %return472)
  %output539 = call <3 x double> @"mul@VV"(<3 x double> %return505, <3 x double> %cast538)
  %output540 = call <3 x double> @"sub@VV"(<3 x double> %return483, <3 x double> %output539)
  %return542 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %output534, <3 x double> %output540, i64 0)
  %output544 = extractvalue { <3 x double>, <3 x double>* } %return542, 1
  %output549 = call <3 x double> @"mul@VV"(<3 x double> %return509, <3 x double> %cast538)
  %output550 = call <3 x double> @"sub@VV"(<3 x double> %return483, <3 x double> %output549)
  %return552 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %output544, <3 x double> %output550, i64 3)
  %output554 = extractvalue { <3 x double>, <3 x double>* } %return552, 1
  %output555 = call double @"div@FF"(double 1.000000e+00, double 8.000000e+00)
  %return557 = call { double, double* } @"setcomp@F[FFI"(double* getelementptr inbounds ([4 x double], [4 x double]* @11, i64 0, i64 0), double %output555, i64 0)
  %output559 = extractvalue { double, double* } %return557, 1
  %output560 = call double @"div@FF"(double 3.000000e+00, double 8.000000e+00)
  %return562 = call { double, double* } @"setcomp@F[FFI"(double* %output559, double %output560, i64 1)
  %output564 = extractvalue { double, double* } %return562, 1
  %return567 = call { double, double* } @"setcomp@F[FFI"(double* %output564, double %output560, i64 2)
  %output569 = extractvalue { double, double* } %return567, 1
  %return572 = call { double, double* } @"setcomp@F[FFI"(double* %output569, double %output555, i64 3)
  %output574 = extractvalue { double, double* } %return572, 1
  %return577 = call double @"getcomp@F[FI"(double* %output574, i64 0)
  %return579 = call double @"getcomp@F[FI"(double* %output574, i64 1)
  %output580 = fadd double %return577, %return579
  %return582 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %output554, i64 0)
  %cast583 = call <3 x double> @"set@VF"(double %output580)
  %output584 = call <3 x double> @"mul@VV"(<3 x double> %cast583, <3 x double> %return582)
  %output585 = call <3 x double> @"sub@VV"(<3 x double> %output532, <3 x double> %output584)
  %return587 = call double @"getcomp@F[FI"(double* %output574, i64 2)
  %return589 = call double @"getcomp@F[FI"(double* %output574, i64 3)
  %output590 = fadd double %return587, %return589
  %return592 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %output554, i64 3)
  %cast593 = call <3 x double> @"set@VF"(double %output590)
  %output594 = call <3 x double> @"mul@VV"(<3 x double> %cast593, <3 x double> %return592)
  %output595 = call <3 x double> @"sub@VV"(<3 x double> %output585, <3 x double> %output594)
  %return596 = call double @"length@FV"(<3 x double> %output595)
  %cast600 = call <3 x double> @"set@VF"(double %return579)
  %output601 = call <3 x double> @"mul@VV"(<3 x double> %cast600, <3 x double> %return505)
  %cast605 = call <3 x double> @"set@VF"(double %return587)
  %output606 = call <3 x double> @"mul@VV"(<3 x double> %cast605, <3 x double> %return509)
  %output607 = call <3 x double> @"add@VV"(<3 x double> %output601, <3 x double> %output606)
  %return608 = call double @"length@FV"(<3 x double> %output607)
  %output609 = call double @"div@FF"(double %return596, double %return608)
  %cast614 = call <3 x double> @"set@VF"(double %output609)
  %output615 = call <3 x double> @"mul@VV"(<3 x double> %cast614, <3 x double> %return505)
  %output616 = call <3 x double> @"add@VV"(<3 x double> %return582, <3 x double> %output615)
  %return618 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %output554, <3 x double> %output616, i64 1)
  %output620 = extractvalue { <3 x double>, <3 x double>* } %return618, 1
  %return622 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %output620, i64 3)
  %output626 = call <3 x double> @"mul@VV"(<3 x double> %cast614, <3 x double> %return509)
  %output627 = call <3 x double> @"add@VV"(<3 x double> %return622, <3 x double> %output626)
  %return629 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %output620, <3 x double> %output627, i64 2)
  %output631 = extractvalue { <3 x double>, <3 x double>* } %return629, 1
  br label %cond632

cond632:                                          ; preds = %end652, %end466
  %segment.0 = phi <3 x double>* [ %output631, %end466 ], [ %segment.1, %end652 ]
  %cur_order.0 = phi i64 [ 4, %end466 ], [ %output675, %end652 ]
  %return636 = call i64 @"lt@III"(i64 %cur_order.0, i64 %return)
  %18 = icmp ne i64 %return636, 0
  br i1 %18, label %body633, label %end637

body633:                                          ; preds = %cond632
  %output642 = sub i64 %cur_order.0, 1
  %return643 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %segment.0, i64 %output642)
  %output644 = call <3 x double>* @"push@[VV"(<3 x double>* %segment.0, <3 x double> %return643)
  %return646 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %output644, i64 0)
  br label %cond647

end637:                                           ; preds = %cond632
  br label %cond677

cond647:                                          ; preds = %body648, %body633
  %segment.1 = phi <3 x double>* [ %output644, %body633 ], [ %output670, %body648 ]
  %prev_seg_pos.0 = phi <3 x double> [ %return646, %body633 ], [ %return657, %body648 ]
  %k.0 = phi i64 [ 1, %body633 ], [ %output673, %body648 ]
  %return651 = call i64 @"lt@III"(i64 %k.0, i64 %cur_order.0)
  %19 = icmp ne i64 %return651, 0
  br i1 %19, label %body648, label %end652

body648:                                          ; preds = %cond647
  %return657 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %segment.1, i64 %k.0)
  %cast663 = sitofp i64 %cur_order.0 to double
  %cast664 = sitofp i64 %k.0 to double
  %output665 = call double @"div@FF"(double %cast664, double %cast663)
  %return666 = call <3 x double> @"lerp@VVVF"(<3 x double> %return657, <3 x double> %prev_seg_pos.0, double %output665)
  %return668 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %segment.1, <3 x double> %return666, i64 %k.0)
  %output670 = extractvalue { <3 x double>, <3 x double>* } %return668, 1
  %output673 = add i64 %k.0, 1
  br label %cond647

end652:                                           ; preds = %cond647
  %output675 = add i64 %cur_order.0, 1
  br label %cond632

cond677:                                          ; preds = %body678, %end637
  %k676.0 = phi i64 [ 0, %end637 ], [ %output696, %body678 ]
  %return681 = call i64 @"lt@III"(i64 %k676.0, i64 %return)
  %20 = icmp ne i64 %return681, 0
  br i1 %20, label %body678, label %end682

body678:                                          ; preds = %cond677
  %output687 = add i64 %return438, %k676.0
  %return689 = call i64 @"mod@III"(i64 %output687, i64 %return12)
  %return690 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum8, i64 %return689)
  %return693 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %segment.0, i64 %k676.0)
  %return694 = call i64 @"setpointattrib@IISIV"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i64 %return690, <3 x double> %return693)
  %output696 = add i64 %k676.0, 1
  br label %cond677

end682:                                           ; preds = %cond677
  %output699 = sub i64 %return438, 1
  %output701 = add i64 %output699, %return12
  %return703 = call i64 @"mod@III"(i64 %output701, i64 %return12)
  %return704 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum8, i64 %return703)
  %output708 = add i64 %return438, %return
  %return710 = call i64 @"mod@III"(i64 %output708, i64 %return12)
  %return711 = call i64 @"primpoint@IIII"(i64 0, i64 %_bound_primnum8, i64 %return710)
  %return713 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %segment.0, i64 0)
  %output714 = call double @"div@FF"(double 1.000000e+00, double 3.000000e+00)
  %return718 = call double @"getcomp@F[FI"(double* %side_lengths.0, i64 %output487)
  %return726 = call double @"getcomp@F[FI"(double* %dists.5, i64 %return491)
  %output727 = fsub double %return718, %return726
  %output729 = fsub double %output727, %return472
  %output730 = fmul double %output714, %output729
  %cast732 = call <3 x double> @"set@VF"(double %output730)
  %output733 = call <3 x double> @"mul@VV"(<3 x double> %cast732, <3 x double> %return505)
  %output734 = call <3 x double> @"sub@VV"(<3 x double> %return713, <3 x double> %output733)
  %return738 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %segment.0, i64 %output16)
  %return742 = call double @"getcomp@F[FI"(double* %side_lengths.0, i64 %i427.0)
  %return748 = call double @"getcomp@F[FI"(double* %dists.5, i64 %return499)
  %output749 = fsub double %return742, %return748
  %output751 = fsub double %output749, %return472
  %output752 = fmul double %output714, %output751
  %cast754 = call <3 x double> @"set@VF"(double %output752)
  %output755 = call <3 x double> @"mul@VV"(<3 x double> %cast754, <3 x double> %return509)
  %output756 = call <3 x double> @"sub@VV"(<3 x double> %return738, <3 x double> %output755)
  %return759 = call i64 @"setpointattrib@IISIV"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i64 %return704, <3 x double> %output734)
  %return762 = call i64 @"setpointattrib@IISIV"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i64 %return711, <3 x double> %output756)
  br label %iter434
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"primintrinsic@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare i64 @"primvertexcount@III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"div@II"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64* @"resize@[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind
declare i64 @"primpoint@IIII"(i64, i64, i64) #2

; Function Attrs: nounwind
declare i64 @"point@IISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #1

; Function Attrs: nounwind readnone
declare double* @"resize@[FI"(double*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"mod@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare double @"length@FV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare { double, double* } @"setcomp@F[FFI"(double*, double, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ne@III"(i64, i64) #1

; Function Attrs: nounwind
declare double @"point@FISI"(i64, i8*, i64) #2

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind
declare double @"dot@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #1

; Function Attrs: nounwind readnone
declare double @"min@FFF:F"(double, double, double) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"min@FFF"(double, double) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double>* @"resize@[VI"(<3 x double>*, i64) #1

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>*, <3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double>* @"push@[VV"(<3 x double>*, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"lerp@VVVF"(<3 x double>, <3 x double>, double) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIV"(i64, i8*, i64, <3 x double>) #2

; Function Attrs: nounwind
define void @__vex_snippet(i64 %primnum) #2 {
__llvm_entry:
  %0 = alloca i64
  store i64 %primnum, i64* %0
  call void @"__vex_snippet_snippet@I"(i64* %0)
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @12, i64 0, i64 0), i64 %primnum) #3
  store i64 %gvalue, i64* @primnum
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

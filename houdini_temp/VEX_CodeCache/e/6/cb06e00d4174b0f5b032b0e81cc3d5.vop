;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@P = external global <3 x double>
@0 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VFV"(<3 x double>* %_bound_P, double* %_bound___expandscale, <3 x double>* %_bound___raydir) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %_bound___expandscale2 = load double, double* %_bound___expandscale
  %_bound___raydir3 = load <3 x double>, <3 x double>* %_bound___raydir
  %cast = call <3 x double> @"set@VF"(double %_bound___expandscale2)
  %output = call <3 x double> @"mul@VV"(<3 x double> %cast, <3 x double> %_bound___raydir3)
  %output4 = call <3 x double> @"add@VV"(<3 x double> %_bound_P1, <3 x double> %output)
  store <3 x double> %output4, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, double %__expandscale, <3 x double> %__raydir) #2 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca <3 x double>
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store double %__expandscale, double* %0
  store <3 x double> %__raydir, <3 x double>* %1
  call void @"__vex_snippet_snippet@VFV"(<3 x double>* %"<P>", double* %0, <3 x double>* %1)
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i64 0, i64 0), <3 x double> %evalue) #3
  store <3 x double> %gvalue, <3 x double>* @P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.498"}
!2 = !{!"64"}

;_code_end

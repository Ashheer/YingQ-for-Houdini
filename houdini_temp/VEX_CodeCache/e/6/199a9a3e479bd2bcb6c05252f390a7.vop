;_name	/obj/grid1/attribvop1
; ModuleID = 'obj_grid1_attribvop1'
source_filename = "obj_grid1_attribvop1"

@0 = private constant [1 x i8] zeroinitializer
@cluster = external global i64
@1 = private constant [7 x i8] c"onoise\00"
@2 = private constant [7 x i8] c"snoise\00"
@3 = private constant [7 x i8] c"anoise\00"
@4 = private constant [13 x i8] c"correctnoise\00"
@5 = private constant [7 x i8] c"xnoise\00"
@6 = private constant [8 x i8] c"cluster\00"

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"vop_perlinNoiseVV@VVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  %cast = call <3 x double> @"set@VI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %output13, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output22, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output16, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output19, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return8 = call <3 x double> @"noise@VV"(<3 x double> %pp.0)
  %output10 = call <3 x double> @"add@VV"(<3 x double> %return8, <3 x double> %cast)
  %cast11 = call <3 x double> @"set@VF"(double %scale.0)
  %output12 = call <3 x double> @"mul@VV"(<3 x double> %cast11, <3 x double> %output10)
  %output13 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output12)
  %output16 = add i64 %i.0, 1
  %cast18 = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output19 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast18)
  %rough21 = load double, double* %rough
  %output22 = fmul double %scale.0, %rough21
  br label %cond

end:                                              ; preds = %cond
  %atten24 = load double, double* %atten
  %return25 = call <3 x double> @"pow@VVF"(<3 x double> %nval.0, double %atten24)
  ret <3 x double> %return25
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"noise@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"pow@VVF"(<3 x double>, double) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"vop_correctperlinNoiseVV@VVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  %cast = call <3 x double> @"set@VI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %output14, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output23, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output17, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output20, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %output = fmul double 5.000000e-01, %scale.0
  %return8 = call <3 x double> @"noise@VV"(<3 x double> %pp.0)
  %return9 = call double @"neg@FF"(double 5.000000e-01)
  %cast10 = call <3 x double> @"set@VF"(double %return9)
  %output11 = call <3 x double> @"add@VV"(<3 x double> %return8, <3 x double> %cast10)
  %cast12 = call <3 x double> @"set@VF"(double %output)
  %output13 = call <3 x double> @"mul@VV"(<3 x double> %cast12, <3 x double> %output11)
  %output14 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output13)
  %output17 = add i64 %i.0, 1
  %cast19 = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output20 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast19)
  %rough22 = load double, double* %rough
  %output23 = fmul double %scale.0, %rough22
  br label %cond

end:                                              ; preds = %cond
  %atten25 = load double, double* %atten
  %return26 = call <3 x double> @"pow@VVF"(<3 x double> %nval.0, double %atten25)
  ret <3 x double> %return26
}

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private <3 x double> @"vop_simplexNoiseVV@VVIFFF"(<3 x double>* %pos, i64* %turb, double* %amp, double* %rough, double* %atten) #0 {
__llvm_entry:
  %pos1 = load <3 x double>, <3 x double>* %pos
  %amp2 = load double, double* %amp
  %cast = call <3 x double> @"set@VI"(i64 0)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %nval.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %output14, %body ]
  %scale.0 = phi double [ %amp2, %__llvm_entry ], [ %output23, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output17, %body ]
  %pp.0 = phi <3 x double> [ %pos1, %__llvm_entry ], [ %output20, %body ]
  %turb4 = load i64, i64* %turb
  %return = call i64 @"lt@III"(i64 %i.0, i64 %turb4)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %output = fmul double 5.000000e-01, %scale.0
  %return8 = call <3 x double> @"xnoise@VV"(<3 x double> %pp.0)
  %return9 = call double @"neg@FF"(double 5.000000e-01)
  %cast10 = call <3 x double> @"set@VF"(double %return9)
  %output11 = call <3 x double> @"add@VV"(<3 x double> %return8, <3 x double> %cast10)
  %cast12 = call <3 x double> @"set@VF"(double %output)
  %output13 = call <3 x double> @"mul@VV"(<3 x double> %cast12, <3 x double> %output11)
  %output14 = call <3 x double> @"add@VV"(<3 x double> %nval.0, <3 x double> %output13)
  %output17 = add i64 %i.0, 1
  %cast19 = call <3 x double> @"set@VF"(double 2.000000e+00)
  %output20 = call <3 x double> @"mul@VV"(<3 x double> %pp.0, <3 x double> %cast19)
  %rough22 = load double, double* %rough
  %output23 = fmul double %scale.0, %rough22
  br label %cond

end:                                              ; preds = %cond
  %atten25 = load double, double* %atten
  %return26 = call <3 x double> @"pow@VVF"(<3 x double> %nval.0, double %atten25)
  ret <3 x double> %return26
}

; Function Attrs: nounwind readnone
declare <3 x double> @"xnoise@VV"(<3 x double>) #1

; Function Attrs: nounwind
define void @obj_grid1_attribvop1(i64 %ptnum, i64 %vtxnum, i64 %primnum, i64 %id, i64 %numpt, i64 %numvtx, i64 %numprim, double %Time, double %TimeInc, double %Frame, double %life, double %age, i8* %OpInput2, i8* %OpInput3, i8* %OpInput4, i8* %OpInput1, <3 x double> %uv, <3 x double> %P, <3 x double> %v, <3 x double> %force, <3 x double> %Cd, <3 x double> %N, i64 %cluster) #2 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca i64
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca <3 x double>
  %6 = alloca i64
  %7 = alloca double
  %8 = alloca double
  %9 = alloca double
  %return = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %10 = icmp ne i64 %return, 0
  br i1 %10, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output = call <3 x double> @"mul@VV"(<3 x double> %P, <3 x double> <double 1.900000e+00, double 1.900000e+00, double 1.900000e+00>)
  %output31 = call <3 x double> @"sub@VV"(<3 x double> %output, <3 x double> zeroinitializer)
  %return32 = call <3 x double> @"onoise@VVIFF"(<3 x double> %output31, i64 5, double 5.000000e-01, double 1.000000e+00)
  %cast = call <3 x double> @"set@VF"(double 4.940000e-01)
  %output34 = call <3 x double> @"mul@VV"(<3 x double> %return32, <3 x double> %cast)
  br label %end

false:                                            ; preds = %__llvm_entry
  %return35 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0))
  %11 = icmp ne i64 %return35, 0
  br i1 %11, label %true36, label %false37

end:                                              ; preds = %true65, %false66, %true58, %true47, %true36, %true
  %noise.0 = phi <3 x double> [ %output34, %true ], [ %output45, %true36 ], [ %output56, %true47 ], [ %vop_correctperlinNoiseVV, %true58 ], [ %vop_simplexNoiseVV, %true65 ], [ %vop_perlinNoiseVV, %false66 ]
  %output76 = call <3 x double> @"add@VV"(<3 x double> %noise.0, <3 x double> %P)
  %output90 = call <3 x double> @"mul@VV"(<3 x double> %output76, <3 x double> <double 6.000000e-01, double 6.000000e-01, double 6.000000e-01>)
  %output91 = call <3 x double> @"sub@VV"(<3 x double> %output90, <3 x double> <double 6.300000e+00, double 5.900000e+00, double 5.400000e+00>)
  %output92 = call { i64, double, double, <3 x double>, <3 x double> } @"vnoise@VVIFFVV"(<3 x double> %output91, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>)
  %output93 = extractvalue { i64, double, double, <3 x double>, <3 x double> } %output92, 0
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @6, i64 0, i64 0), i64 %output93) #3
  store i64 %gvalue, i64* @cluster
  ret void

true36:                                           ; preds = %false
  %output40 = call <3 x double> @"mul@VV"(<3 x double> %P, <3 x double> <double 1.900000e+00, double 1.900000e+00, double 1.900000e+00>)
  %output41 = call <3 x double> @"sub@VV"(<3 x double> %output40, <3 x double> zeroinitializer)
  %return42 = call <3 x double> @"snoise@VVIFF"(<3 x double> %output41, i64 5, double 5.000000e-01, double 1.000000e+00)
  %cast44 = call <3 x double> @"set@VF"(double 4.940000e-01)
  %output45 = call <3 x double> @"mul@VV"(<3 x double> %return42, <3 x double> %cast44)
  br label %end

false37:                                          ; preds = %false
  %return46 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0))
  %12 = icmp ne i64 %return46, 0
  br i1 %12, label %true47, label %false48

true47:                                           ; preds = %false37
  %output51 = call <3 x double> @"mul@VV"(<3 x double> %P, <3 x double> <double 1.900000e+00, double 1.900000e+00, double 1.900000e+00>)
  %output52 = call <3 x double> @"sub@VV"(<3 x double> %output51, <3 x double> zeroinitializer)
  %return53 = call <3 x double> @"anoise@VVIFF"(<3 x double> %output52, i64 5, double 5.000000e-01, double 1.000000e+00)
  %cast55 = call <3 x double> @"set@VF"(double 4.940000e-01)
  %output56 = call <3 x double> @"mul@VV"(<3 x double> %return53, <3 x double> %cast55)
  br label %end

false48:                                          ; preds = %false37
  %return57 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @4, i64 0, i64 0))
  %13 = icmp ne i64 %return57, 0
  br i1 %13, label %true58, label %false59

true58:                                           ; preds = %false48
  %output62 = call <3 x double> @"mul@VV"(<3 x double> %P, <3 x double> <double 1.900000e+00, double 1.900000e+00, double 1.900000e+00>)
  %output63 = call <3 x double> @"sub@VV"(<3 x double> %output62, <3 x double> zeroinitializer)
  store <3 x double> %output63, <3 x double>* %0
  store i64 5, i64* %1
  store double 4.940000e-01, double* %2
  store double 5.000000e-01, double* %3
  store double 1.000000e+00, double* %4
  %vop_correctperlinNoiseVV = call <3 x double> @"vop_correctperlinNoiseVV@VVIFFF"(<3 x double>* %0, i64* %1, double* %2, double* %3, double* %4)
  br label %end

false59:                                          ; preds = %false48
  %return64 = call i64 @"eq@ISS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0))
  %14 = icmp ne i64 %return64, 0
  %output69 = call <3 x double> @"mul@VV"(<3 x double> %P, <3 x double> <double 1.900000e+00, double 1.900000e+00, double 1.900000e+00>)
  %output70 = call <3 x double> @"sub@VV"(<3 x double> %output69, <3 x double> zeroinitializer)
  store <3 x double> %output70, <3 x double>* %5
  store i64 5, i64* %6
  store double 4.940000e-01, double* %7
  store double 5.000000e-01, double* %8
  store double 1.000000e+00, double* %9
  br i1 %14, label %true65, label %false66

true65:                                           ; preds = %false59
  %vop_simplexNoiseVV = call <3 x double> @"vop_simplexNoiseVV@VVIFFF"(<3 x double>* %5, i64* %6, double* %7, double* %8, double* %9)
  br label %end

false66:                                          ; preds = %false59
  %vop_perlinNoiseVV = call <3 x double> @"vop_perlinNoiseVV@VVIFFF"(<3 x double>* %5, i64* %6, double* %7, double* %8, double* %9)
  br label %end
}

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"onoise@VVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"snoise@VVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"anoise@VVIFF"(<3 x double>, i64, double, double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare { i64, double, double, <3 x double>, <3 x double> } @"vnoise@VVIFFVVIII"(<3 x double>, <3 x double>, i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, double, double, <3 x double>, <3 x double> } @"vnoise@VVIFFVV"(<3 x double>, <3 x double>) #1

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @obj_grid1_attribvop1(i64 0, i64 0, i64 0, i64 -1, i64 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i64 0, i64 0), <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> zeroinitializer, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> zeroinitializer, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [16 x i8] c"../uv_attribute\00"
@P = external global <3 x double>
@vtxnum = external global i64
@1 = private constant [2 x i8] c"P\00"
@2 = private constant [7 x i8] c"vtxnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VI"(<3 x double>* %_bound_P, i64* %_bound_vtxnum) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call { double, i64, <3 x double> } @"xyzdist@FIVIVF"(i64 1, <3 x double> %_bound_P1, double 1.000000e+01)
  %output = extractvalue { double, i64, <3 x double> } %return, 1
  %output4 = extractvalue { double, i64, <3 x double> } %return, 2
  %return5 = call i8* @"chs@SS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i64 0, i64 0))
  %return8 = call <3 x double> @"primuv@VISIV"(i64 1, i8* %return5, i64 %output, <3 x double> %output4)
  %_bound_vtxnum10 = load i64, i64* %_bound_vtxnum
  %return11 = call i64 @"neg@II"(i64 1)
  %return13 = call i64 @"setvertexattrib@IISIIV"(i64 0, i8* %return5, i64 %_bound_vtxnum10, i64 %return11, <3 x double> %return8)
  ret void
}

; Function Attrs: nounwind
declare { double, i64, <3 x double> } @"xyzdist@FIVIVF"(i64, <3 x double>, double) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #2

; Function Attrs: nounwind
declare <3 x double> @"primuv@VISIV"(i64, i8*, i64, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #2

; Function Attrs: nounwind
declare i64 @"setvertexattrib@IISIIV"(i64, i8*, i64, i64, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, i64 %vtxnum) #1 {
__llvm_entry:
  %0 = alloca <3 x double>
  %1 = alloca i64
  store <3 x double> %P, <3 x double>* %0
  store i64 %vtxnum, i64* %1
  call void @"__vex_snippet_snippet@VI"(<3 x double>* %0, i64* %1)
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %P) #3
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0), i64 %vtxnum) #3
  store <3 x double> %gvalue, <3 x double>* @P
  store i64 %gvalue4, i64* @vtxnum
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [13 x i8] c"__max_pscale\00"
@1 = private constant [5 x i8] c"mode\00"
@2 = private constant [10 x i8] c"__max_rpf\00"
@3 = private constant [23 x i8] c"__accum_numpt_by_frame\00"
@4 = private constant [20 x i8] c"__second_pass_width\00"
@5 = private constant [21 x i8] c"__second_pass_height\00"
@6 = private constant [23 x i8] c"__second_pass_active_x\00"
@7 = private constant [23 x i8] c"__second_pass_active_y\00"
@8 = private constant [0 x i64] zeroinitializer
@__max_pscale = external global double
@__max_rpf = external global double
@__accum_numpt_by_frame = external global i64*
@__second_pass_width = external global i64
@__second_pass_height = external global i64
@__second_pass_active_x = external global double
@__second_pass_active_y = external global double

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FF[IIIFF"(double* %_bound___max_pscale, double* %_bound___max_rpf, i64** %_bound___accum_numpt_by_frame, i64* %_bound___second_pass_width, i64* %_bound___second_pass_height, double* %_bound___second_pass_active_x, double* %_bound___second_pass_active_y) #0 {
__llvm_entry:
  %return = call double @"detail@FISI"(i64 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0), i64 0)
  store double %return, double* %_bound___max_pscale
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"eq@III"(i64 %return1, i64 1)
  %0 = icmp ne i64 %return2, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return3 = call double @"detail@FISI"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0), i64 0)
  store double %return3, double* %_bound___max_rpf
  br label %end

false:                                            ; preds = %__llvm_entry
  %return5 = call i64 @"eq@III"(i64 %return1, i64 2)
  %1 = icmp ne i64 %return5, 0
  br i1 %1, label %true6, label %end

end:                                              ; preds = %false, %true6, %true
  ret void

true6:                                            ; preds = %false
  %return8 = call i64* @"detail@[IISI"(i64 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @3, i64 0, i64 0), i64 0)
  store i64* %return8, i64** %_bound___accum_numpt_by_frame
  %return9 = call i64 @"detail@IISI"(i64 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @4, i64 0, i64 0), i64 0)
  store i64 %return9, i64* %_bound___second_pass_width
  %return10 = call i64 @"detail@IISI"(i64 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @5, i64 0, i64 0), i64 0)
  store i64 %return10, i64* %_bound___second_pass_height
  %return11 = call double @"detail@FISI"(i64 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @6, i64 0, i64 0), i64 0)
  store double %return11, double* %_bound___second_pass_active_x
  %return12 = call double @"detail@FISI"(i64 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @7, i64 0, i64 0), i64 0)
  store double %return12, double* %_bound___second_pass_active_y
  br label %end
}

; Function Attrs: nounwind
declare double @"detail@FISI"(i64, i8*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64* @"detail@[IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
declare i64 @"detail@IISI"(i64, i8*, i64) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %__max_pscale, double %__max_rpf, i64* %__accum_numpt_by_frame, i64 %__second_pass_width, i64 %__second_pass_height, double %__second_pass_active_x, double %__second_pass_active_y) #1 {
__llvm_entry:
  %"<__max_rpf>" = alloca double
  %"<__accum_numpt_by_frame>" = alloca i64*
  %"<__second_pass_width>" = alloca i64
  %"<__second_pass_height>" = alloca i64
  %"<__second_pass_active_x>" = alloca double
  %"<__second_pass_active_y>" = alloca double
  %"<__max_pscale>" = alloca double
  store double %__max_pscale, double* %"<__max_pscale>"
  store double %__max_rpf, double* %"<__max_rpf>"
  store i64* %__accum_numpt_by_frame, i64** %"<__accum_numpt_by_frame>"
  store i64 %__second_pass_width, i64* %"<__second_pass_width>"
  store i64 %__second_pass_height, i64* %"<__second_pass_height>"
  store double %__second_pass_active_x, double* %"<__second_pass_active_x>"
  store double %__second_pass_active_y, double* %"<__second_pass_active_y>"
  call void @"__vex_snippet_snippet@FF[IIIFF"(double* %"<__max_pscale>", double* %"<__max_rpf>", i64** %"<__accum_numpt_by_frame>", i64* %"<__second_pass_width>", i64* %"<__second_pass_height>", double* %"<__second_pass_active_x>", double* %"<__second_pass_active_y>")
  %evalue = load double, double* %"<__max_pscale>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0), double %evalue) #3
  %evalue1 = load double, double* %"<__max_rpf>"
  %gvalue2 = call double @"_export@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0), double %evalue1) #3
  %evalue3 = load i64*, i64** %"<__accum_numpt_by_frame>"
  %gvalue4 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @3, i64 0, i64 0), i64* %evalue3) #3
  %evalue5 = load i64, i64* %"<__second_pass_width>"
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @4, i64 0, i64 0), i64 %evalue5) #3
  %evalue7 = load i64, i64* %"<__second_pass_height>"
  %gvalue8 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @5, i64 0, i64 0), i64 %evalue7) #3
  %evalue9 = load double, double* %"<__second_pass_active_x>"
  %gvalue10 = call double @"_export@FSF"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @6, i64 0, i64 0), double %evalue9) #3
  %evalue11 = load double, double* %"<__second_pass_active_y>"
  %gvalue12 = call double @"_export@FSF"(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @7, i64 0, i64 0), double %evalue11) #3
  store double %gvalue, double* @__max_pscale
  store double %gvalue2, double* @__max_rpf
  store i64* %gvalue4, i64** @__accum_numpt_by_frame
  store i64 %gvalue6, i64* @__second_pass_width
  store i64 %gvalue8, i64* @__second_pass_height
  store double %gvalue10, double* @__second_pass_active_x
  store double %gvalue12, double* @__second_pass_active_y
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare i64* @"_export@[IS[I"(i8*, i64*)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @8, i64 0, i64 0), i64 0, i64 0, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

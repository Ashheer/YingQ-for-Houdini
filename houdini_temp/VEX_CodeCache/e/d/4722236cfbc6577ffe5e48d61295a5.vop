;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"unit\00"
@1 = private constant [7 x i8] c"pixels\00"
@2 = private constant [5 x i8] c"size\00"
@3 = private constant [11 x i8] c"targetunit\00"
@4 = private constant [13 x i8] c"targetpixels\00"
@5 = private constant [11 x i8] c"targetsize\00"
@assetunit = external global double
@assettexeldensity = external global double
@targettexeldensity = external global double
@6 = private constant [10 x i8] c"assetunit\00"
@7 = private constant [18 x i8] c"assettexeldensity\00"
@8 = private constant [19 x i8] c"targettexeldensity\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@FFF"(double* %_bound_assetunit, double* %_bound_assettexeldensity, double* %_bound_targettexeldensity) #0 {
__llvm_entry:
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  %return1 = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %return2 = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0))
  %return4 = fcmp oeq double %return, 0.000000e+00
  br i1 %return4, label %true, label %false

true:                                             ; preds = %__llvm_entry
  br label %end

false:                                            ; preds = %__llvm_entry
  %return7 = fcmp oeq double %return, 1.000000e+00
  br i1 %return7, label %true9, label %false10

end:                                              ; preds = %true9, %false10, %true
  %assetunit.0 = phi double [ 1.000000e+00, %true ], [ 1.000000e-02, %true9 ], [ 1.000000e-06, %false10 ]
  store double %assetunit.0, double* %_bound_assetunit
  %output = call double @"div@FF"(double %return2, double %assetunit.0)
  %output16 = call double @"div@FF"(double %return1, double %output)
  %output17 = fmul double %output16, 1.000000e+04
  %return18 = call double @"trunc@FF"(double %output17)
  %output19 = call double @"div@FF"(double %return18, double 1.000000e+04)
  store double %output19, double* %_bound_assettexeldensity
  %return20 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0))
  %return21 = call double @"chf@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @4, i64 0, i64 0))
  %return22 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @5, i64 0, i64 0))
  %return24 = fcmp oeq double %return20, 0.000000e+00
  br i1 %return24, label %true26, label %false27

true9:                                            ; preds = %false
  br label %end

false10:                                          ; preds = %false
  br label %end

true26:                                           ; preds = %end
  br label %end28

false27:                                          ; preds = %end
  %return30 = fcmp oeq double %return20, 1.000000e+00
  br i1 %return30, label %true32, label %false33

end28:                                            ; preds = %true32, %false33, %true26
  %targetunit.0 = phi double [ 1.000000e+00, %true26 ], [ 1.000000e-02, %true32 ], [ 1.000000e-06, %false33 ]
  %output38 = call double @"div@FF"(double %return22, double %targetunit.0)
  %output39 = call double @"div@FF"(double %return21, double %output38)
  %output40 = fmul double %output39, 1.000000e+04
  %return41 = call double @"trunc@FF"(double %output40)
  %output42 = call double @"div@FF"(double %return41, double 1.000000e+04)
  store double %output42, double* %_bound_targettexeldensity
  ret void

true32:                                           ; preds = %false27
  br label %end28

false33:                                          ; preds = %false27
  br label %end28
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"trunc@FF"(double) #1

; Function Attrs: nounwind
define void @__vex_snippet(double %assetunit, double %assettexeldensity, double %targettexeldensity) #2 {
__llvm_entry:
  %"<assettexeldensity>" = alloca double
  %"<targettexeldensity>" = alloca double
  %"<assetunit>" = alloca double
  store double %assetunit, double* %"<assetunit>"
  store double %assettexeldensity, double* %"<assettexeldensity>"
  store double %targettexeldensity, double* %"<targettexeldensity>"
  call void @"__vex_snippet_snippet@FFF"(double* %"<assetunit>", double* %"<assettexeldensity>", double* %"<targettexeldensity>")
  %evalue = load double, double* %"<assetunit>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @6, i64 0, i64 0), double %evalue) #3
  %evalue1 = load double, double* %"<assettexeldensity>"
  %gvalue2 = call double @"_export@FSF"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @7, i64 0, i64 0), double %evalue1) #3
  %evalue3 = load double, double* %"<targettexeldensity>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @8, i64 0, i64 0), double %evalue3) #3
  store double %gvalue, double* @assetunit
  store double %gvalue2, double* @assettexeldensity
  store double %gvalue4, double* @targettexeldensity
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

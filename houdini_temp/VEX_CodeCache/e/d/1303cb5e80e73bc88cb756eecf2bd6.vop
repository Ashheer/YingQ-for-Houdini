;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@volvis_normals = external global i64
@volvis_motionvec = external global i64
@0 = private constant [15 x i8] c"volvis_normals\00"
@1 = private constant [17 x i8] c"volvis_motionvec\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@II"(i64* %_bound_volvis_normals, i64* %_bound_volvis_motionvec) #0 {
__llvm_entry:
  store i64 1, i64* %_bound_volvis_normals
  store i64 0, i64* %_bound_volvis_motionvec
  ret void
}

; Function Attrs: nounwind
define void @__vex_snippet(i64 %volvis_normals, i64 %volvis_motionvec) #1 {
__llvm_entry:
  %"<volvis_motionvec>" = alloca i64
  %"<volvis_normals>" = alloca i64
  store i64 %volvis_normals, i64* %"<volvis_normals>"
  store i64 %volvis_motionvec, i64* %"<volvis_motionvec>"
  call void @"__vex_snippet_snippet@II"(i64* %"<volvis_normals>", i64* %"<volvis_motionvec>")
  %evalue = load i64, i64* %"<volvis_normals>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i64 0, i64 0), i64 %evalue) #2
  %evalue1 = load i64, i64* %"<volvis_motionvec>"
  %gvalue2 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1, i64 0, i64 0), i64 %evalue1) #2
  store i64 %gvalue, i64* @volvis_normals
  store i64 %gvalue2, i64* @volvis_motionvec
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(i64 0, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

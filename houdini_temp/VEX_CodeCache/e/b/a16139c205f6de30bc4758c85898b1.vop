;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [12 x i8] c"uv_shell_id\00"
@P = external global <3 x double>
@uv_shell_id = external global double
@1 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VF"(<3 x double>* %_bound_P, double* %_bound_uv_shell_id) #0 {
__llvm_entry:
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %return = call { double, i64, <3 x double> } @"xyzdist@FIVIVF"(i64 1, <3 x double> %_bound_P1, double 1.000000e+01)
  %output = extractvalue { double, i64, <3 x double> } %return, 1
  %output4 = extractvalue { double, i64, <3 x double> } %return, 2
  %return7 = call double @"primuv@FISIV"(i64 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i64 0, i64 0), i64 %output, <3 x double> %output4)
  store double %return7, double* %_bound_uv_shell_id
  ret void
}

; Function Attrs: nounwind
declare { double, i64, <3 x double> } @"xyzdist@FIVIVF"(i64, <3 x double>, double) #1

; Function Attrs: nounwind
declare double @"primuv@FISIV"(i64, i8*, i64, <3 x double>) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, double %uv_shell_id) #1 {
__llvm_entry:
  %"<uv_shell_id>" = alloca double
  %0 = alloca <3 x double>
  store double %uv_shell_id, double* %"<uv_shell_id>"
  store <3 x double> %P, <3 x double>* %0
  call void @"__vex_snippet_snippet@VF"(<3 x double>* %0, double* %"<uv_shell_id>")
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0), <3 x double> %P) #2
  %evalue2 = load double, double* %"<uv_shell_id>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i64 0, i64 0), double %evalue2) #2
  store <3 x double> %gvalue, <3 x double>* @P
  store double %gvalue3, double* @uv_shell_id
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}

;_code_end

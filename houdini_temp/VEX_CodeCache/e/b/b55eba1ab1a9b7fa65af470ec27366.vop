;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [10 x i8] c"frequency\00"
@1 = private constant [5 x i8] c"ampX\00"
@2 = private constant [8 x i8] c"offsetX\00"
@3 = private constant [11 x i8] c"amplitudeY\00"
@4 = private constant [5 x i8] c"ampZ\00"
@5 = private constant [8 x i8] c"offsetZ\00"
@P = external global <3 x double>
@ptnum = external global i64
@6 = private constant [2 x i8] c"P\00"
@7 = private constant [6 x i8] c"ptnum\00"

; Function Attrs: alwaysinline nounwind
define private void @"__vex_snippet_snippet@VI"(<3 x double>* %_bound_P, i64* %_bound_ptnum) #0 {
__llvm_entry:
  %_bound_ptnum1 = load i64, i64* %_bound_ptnum
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0))
  %cast = sitofp i64 %_bound_ptnum1 to double
  %output = fmul double %cast, %return
  %return2 = call double @"cos@FF"(double %output)
  %return3 = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i64 0, i64 0))
  %output4 = fmul double %return2, %return3
  %return5 = call double @"chf@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  %output6 = fadd double %output4, %return5
  %tmp = load <3 x double>, <3 x double>* %_bound_P
  %return7 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output6, i64 0)
  %output9 = extractvalue { double, <3 x double> } %return7, 1
  store <3 x double> %output9, <3 x double>* %_bound_P
  %return11 = call double @"getcomp@FVI"(<3 x double> %output9, i64 1)
  %return12 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0))
  %output13 = fmul double %return11, %return12
  %return15 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output9, double %output13, i64 1)
  %output17 = extractvalue { double, <3 x double> } %return15, 1
  store <3 x double> %output17, <3 x double>* %_bound_P
  %_bound_ptnum18 = load i64, i64* %_bound_ptnum
  %cast20 = sitofp i64 %_bound_ptnum18 to double
  %output21 = fmul double %cast20, %return
  %return22 = call double @"sin@FF"(double %output21)
  %return23 = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0))
  %output24 = fmul double %return22, %return23
  %return25 = call double @"chf@FS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @5, i64 0, i64 0))
  %output26 = fadd double %output24, %return25
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output17, double %output26, i64 2)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #1

; Function Attrs: nounwind
define void @__vex_snippet(<3 x double> %P, i64 %ptnum) #3 {
__llvm_entry:
  %0 = alloca i64
  %"<P>" = alloca <3 x double>
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  call void @"__vex_snippet_snippet@VI"(<3 x double>* %"<P>", i64* %0)
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i64 0, i64 0), <3 x double> %evalue) #4
  %gvalue3 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @7, i64 0, i64 0), i64 %ptnum) #4
  store <3 x double> %gvalue, <3 x double>* @P
  store i64 %gvalue3, i64* @ptnum
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare i64 @"_export@ISI"(i8*, i64)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet(<3 x double> zeroinitializer, i64 0)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

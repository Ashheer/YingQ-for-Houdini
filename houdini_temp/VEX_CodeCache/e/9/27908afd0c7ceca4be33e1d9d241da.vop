;_name	<vexpression>
; ModuleID = '__vex_snippet'
source_filename = "__vex_snippet"

@0 = private constant [5 x i8] c"seed\00"
@1 = private constant [4 x i8] c"len\00"
@2 = private constant [5 x i8] c"keep\00"

; Function Attrs: alwaysinline nounwind
define private void @__vex_snippet_snippet() #0 {
__llvm_entry:
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  %return1 = call double @"rand@FF"(double %return)
  %return2 = call i64 @"nprimitives@II"(i64 0)
  %cast = sitofp i64 %return2 to double
  %output = fmul double %return1, %cast
  %return3 = call i64 @"floor@IF"(double %output)
  %return4 = call i64* @"array@[I"()
  %output7 = call i64* @"push@[II"(i64* %return4, i64 %return3)
  br label %cond

cond:                                             ; preds = %end134, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output161, %end134 ]
  %rind.0 = phi i64 [ %return3, %__llvm_entry ], [ %rind.1, %end134 ]
  %taken.0 = phi i64* [ %output7, %__llvm_entry ], [ %taken.1, %end134 ]
  %return10 = call i64 @"chi@IS"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i64 0, i64 0))
  %return11 = call i64 @"lt@III"(i64 %i.0, i64 %return10)
  %0 = icmp ne i64 %return11, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return14 = call i64* @"polyneighbours@[III"(i64 0, i64 %rind.0)
  br label %cond15

end:                                              ; preds = %end21, %cond
  br label %cond163

cond15:                                           ; preds = %end30, %body
  %n.0 = phi i64 [ 0, %body ], [ %output111, %end30 ]
  %newneighs.0 = phi i64* [ %return4, %body ], [ %newneighs.1, %end30 ]
  %return19 = call i64 @"len@I[I"(i64* %return14)
  %return20 = call i64 @"lt@III"(i64 %n.0, i64 %return19)
  %1 = icmp ne i64 %return20, 0
  br i1 %1, label %body16, label %end21

body16:                                           ; preds = %cond15
  %return25 = call i64 @"getcomp@I[II"(i64* %return14, i64 %n.0)
  %return28 = call i64 @"find@I[II"(i64* %taken.0, i64 %return25)
  %return29 = call i64 @"lt@III"(i64 %return28, i64 0)
  %2 = icmp ne i64 %return29, 0
  br i1 %2, label %true, label %end30

end21:                                            ; preds = %cond15
  %return113 = call i64 @"len@I[I"(i64* %newneighs.0)
  %return114 = call i64 @"gt@III"(i64 %return113, i64 0)
  %3 = icmp ne i64 %return114, 0
  br i1 %3, label %true115, label %end

true:                                             ; preds = %body16
  %return32 = call i64* @"polyneighbours@[III"(i64 0, i64 %return25)
  br label %cond33

end30:                                            ; preds = %end83, %true104, %body16
  %newneighs.1 = phi i64* [ %output108, %true104 ], [ %newneighs.0, %end83 ], [ %newneighs.0, %body16 ]
  %output111 = add i64 %n.0, 1
  br label %cond15

cond33:                                           ; preds = %end49, %true
  %takencount.0 = phi i64 [ 0, %true ], [ %takencount.1, %end49 ]
  %t.0 = phi i64 [ 0, %true ], [ %output54, %end49 ]
  %return37 = call i64 @"len@I[I"(i64* %return32)
  %return38 = call i64 @"lt@III"(i64 %t.0, i64 %return37)
  %4 = icmp ne i64 %return38, 0
  br i1 %4, label %body34, label %end39

body34:                                           ; preds = %cond33
  %return43 = call i64 @"getcomp@I[II"(i64* %return32, i64 %t.0)
  %return46 = call i64 @"find@I[II"(i64* %taken.0, i64 %return43)
  %return47 = call i64 @"ge@III"(i64 %return46, i64 0)
  %5 = icmp ne i64 %return47, 0
  br i1 %5, label %true48, label %end49

end39:                                            ; preds = %cond33
  br label %cond56

true48:                                           ; preds = %body34
  %output51 = add i64 %takencount.0, 1
  br label %end49

end49:                                            ; preds = %true48, %body34
  %takencount.1 = phi i64 [ %output51, %true48 ], [ %takencount.0, %body34 ]
  %output54 = add i64 %t.0, 1
  br label %cond33

cond56:                                           ; preds = %body57, %end39
  %takenpts.0 = phi i64* [ %return4, %end39 ], [ %output70, %body57 ]
  %s.0 = phi i64 [ 0, %end39 ], [ %output73, %body57 ]
  %return60 = call i64 @"len@I[I"(i64* %taken.0)
  %return61 = call i64 @"lt@III"(i64 %s.0, i64 %return60)
  %6 = icmp ne i64 %return61, 0
  br i1 %6, label %body57, label %end62

body57:                                           ; preds = %cond56
  %return66 = call i64 @"getcomp@I[II"(i64* %taken.0, i64 %s.0)
  %return67 = call i64* @"primpoints@[III"(i64 0, i64 %return66)
  %output70 = call i64* @"push@[I[I"(i64* %takenpts.0, i64* %return67)
  %output73 = add i64 %s.0, 1
  br label %cond56

end62:                                            ; preds = %cond56
  %return75 = call i64* @"primpoints@[III"(i64 0, i64 %return25)
  br label %cond77

cond77:                                           ; preds = %end93, %end62
  %duppointcount.0 = phi i64 [ 0, %end62 ], [ %duppointcount.1, %end93 ]
  %s76.0 = phi i64 [ 0, %end62 ], [ %output98, %end93 ]
  %return81 = call i64 @"len@I[I"(i64* %return75)
  %return82 = call i64 @"lt@III"(i64 %s76.0, i64 %return81)
  %7 = icmp ne i64 %return82, 0
  br i1 %7, label %body78, label %end83

body78:                                           ; preds = %cond77
  %return87 = call i64 @"getcomp@I[II"(i64* %return75, i64 %s76.0)
  %return90 = call i64 @"find@I[II"(i64* %takenpts.0, i64 %return87)
  %return91 = call i64 @"ge@III"(i64 %return90, i64 0)
  %8 = icmp ne i64 %return91, 0
  br i1 %8, label %true92, label %end93

end83:                                            ; preds = %cond77
  %return100 = call i64 @"lt@III"(i64 %takencount.0, i64 2)
  %return102 = call i64 @"lt@III"(i64 %duppointcount.0, i64 3)
  %return103 = call i64 @"and@III"(i64 %return100, i64 %return102)
  %9 = icmp ne i64 %return103, 0
  br i1 %9, label %true104, label %end30

true92:                                           ; preds = %body78
  %output95 = add i64 %duppointcount.0, 1
  br label %end93

end93:                                            ; preds = %true92, %body78
  %duppointcount.1 = phi i64 [ %output95, %true92 ], [ %duppointcount.0, %body78 ]
  %output98 = add i64 %s76.0, 1
  br label %cond77

true104:                                          ; preds = %end83
  %output108 = call i64* @"push@[II"(i64* %newneighs.0, i64 %return25)
  br label %end30

true115:                                          ; preds = %end21
  %output118 = fmul double %return, 6.230000e+02
  %output120 = mul i64 %i.0, 62
  %cast121 = sitofp i64 %output120 to double
  %output122 = fadd double %output118, %cast121
  %return123 = call double @"rand@FF"(double %output122)
  %return124 = fcmp olt double %return123, 2.000000e-01
  br i1 %return124, label %true126, label %end127

true126:                                          ; preds = %true115
  br label %end127

end127:                                           ; preds = %true126, %true115
  %branchcount.0 = phi i64 [ 2, %true126 ], [ 1, %true115 ]
  br label %cond129

cond129:                                          ; preds = %body130, %end127
  %s128.0 = phi i64 [ 0, %end127 ], [ %output158, %body130 ]
  %rind.1 = phi i64 [ %rind.0, %end127 ], [ %return151, %body130 ]
  %taken.1 = phi i64* [ %taken.0, %end127 ], [ %output154, %body130 ]
  %return133 = call i64 @"lt@III"(i64 %s128.0, i64 %branchcount.0)
  %10 = icmp ne i64 %return133, 0
  br i1 %10, label %body130, label %end134

body130:                                          ; preds = %cond129
  %output137 = fmul double %return, 2.340000e+02
  %output139 = mul i64 %s128.0, 35
  %cast140 = sitofp i64 %output139 to double
  %output141 = fadd double %output137, %cast140
  %return142 = call double @"rand@FF"(double %output141)
  %cast145 = sitofp i64 %return113 to double
  %output146 = fmul double %return142, %cast145
  %return147 = call i64 @"floor@IF"(double %output146)
  %return151 = call i64 @"getcomp@I[II"(i64* %newneighs.0, i64 %return147)
  %output154 = call i64* @"push@[II"(i64* %taken.1, i64 %return151)
  %output158 = add i64 %s128.0, 1
  br label %cond129

end134:                                           ; preds = %cond129
  %output161 = add i64 %i.0, 1
  br label %cond

cond163:                                          ; preds = %body164, %end
  %i162.0 = phi i64 [ 0, %end ], [ %output178, %body164 ]
  %return167 = call i64 @"len@I[I"(i64* %taken.0)
  %return168 = call i64 @"lt@III"(i64 %i162.0, i64 %return167)
  %11 = icmp ne i64 %return168, 0
  br i1 %11, label %body164, label %end169

body164:                                          ; preds = %cond163
  %return173 = call i64 @"getcomp@I[II"(i64* %taken.0, i64 %i162.0)
  %return175 = call i64 @"setprimgroup@IISII"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0), i64 %return173, i64 1)
  %output178 = add i64 %i162.0, 1
  br label %cond163

end169:                                           ; preds = %cond163
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare double @"rand@FF"(double) #2

; Function Attrs: nounwind
declare i64 @"nprimitives@II"(i64) #2

; Function Attrs: nounwind
declare i64 @"floor@IF"(double) #2

; Function Attrs: nounwind readnone
declare i64* @"array@[I"() #1

; Function Attrs: nounwind readnone
declare i64* @"push@[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64* @"polyneighbours@[III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64 @"find@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64* @"primpoints@[III"(i64, i64) #2

; Function Attrs: nounwind readnone
declare i64* @"push@[I[I"(i64*, i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind
declare i64 @"setprimgroup@IISII"(i64, i8*, i64, i64) #2

; Function Attrs: nounwind
define void @__vex_snippet() #2 {
__llvm_entry:
  call void @__vex_snippet_snippet()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @__vex_snippet()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.451"}
!2 = !{!"64"}

;_code_end

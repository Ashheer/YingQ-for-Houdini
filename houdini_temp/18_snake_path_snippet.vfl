int first = floor(rand(chf("seed")) * nprimitives(0));

int taken[] = array();
push(taken, first);
int rind = first;

for(int i=0; i<chi("len"); i++){
    int newneighs[] = array();
    int neighs[] = polyneighbours(0, rind);
    for(int n=0; n<len(neighs); n++){
        int neigh = neighs[n];
        if(find(taken, neigh) < 0){
            int nneighs[] = polyneighbours(0, neigh);
            int takencount = 0;
            int duppointcount = 0;
            for(int t=0; t<len(nneighs); t++){
                int nneigh = nneighs[t];
                if(find(taken, nneigh) >= 0){
                    takencount += 1;
                }
            }
            
            int takenpts[] = array();
            for(int s=0; s<len(taken); s++){
                int pts[] = primpoints(0, taken[s]);
                push(takenpts, pts);
            }
            
            int neighpts[] = primpoints(0, neigh);
            for(int s=0; s<len(neighpts); s++){
                int neighpt = neighpts[s];
                if(find(takenpts, neighpt) >= 0){
                    duppointcount += 1;
                }
            }
            
            if(takencount < 2 && duppointcount < 3){
                push(newneighs, neigh);
            }
        }
    }
    if(len(newneighs) > 0){
        int branchcount = 1;
        if(rand(chf("seed") * 623 + i * 62) < 0.2){
            branchcount = 2;
        }
        
        for(int s=0; s<branchcount; s++){
            rind = floor(rand(chf("seed") * 234 + s * 35) * len(newneighs));
            int neigh = newneighs[rind];
            push(taken, neigh);
            rind = neigh;
        }
    }else{
        break;
    }
}

for(int i=0; i<len(taken); i++){
    int prim = taken[i];
    setprimgroup(0, "keep", prim, 1);
}